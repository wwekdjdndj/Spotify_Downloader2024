interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, br
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.31.0
    method: GET
    uri: https://api.github.com/repos/spotdl/spotify-downloader/releases/latest
  response:
    body:
      string: '{"url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/132414038","assets_url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/132414038/assets","upload_url":"https://uploads.github.com/repos/spotDL/spotify-downloader/releases/132414038/assets{?name,label}","html_url":"https://github.com/spotDL/spotify-downloader/releases/tag/v4.2.4","id":132414038,"author":{"login":"xnetcat","id":42355410,"node_id":"MDQ6VXNlcjQyMzU1NDEw","avatar_url":"https://avatars.githubusercontent.com/u/42355410?v=4","gravatar_id":"","url":"https://api.github.com/users/xnetcat","html_url":"https://github.com/xnetcat","followers_url":"https://api.github.com/users/xnetcat/followers","following_url":"https://api.github.com/users/xnetcat/following{/other_user}","gists_url":"https://api.github.com/users/xnetcat/gists{/gist_id}","starred_url":"https://api.github.com/users/xnetcat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xnetcat/subscriptions","organizations_url":"https://api.github.com/users/xnetcat/orgs","repos_url":"https://api.github.com/users/xnetcat/repos","events_url":"https://api.github.com/users/xnetcat/events{/privacy}","received_events_url":"https://api.github.com/users/xnetcat/received_events","type":"User","site_admin":false},"node_id":"RE_kwDOA71kIc4H5HpW","tag_name":"v4.2.4","target_commitish":"master","name":"v4.2.4","draft":false,"prerelease":false,"created_at":"2023-12-03T14:19:54Z","published_at":"2023-12-03T14:21:08Z","assets":[{"url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/assets/138710615","id":138710615,"node_id":"RA_kwDOA71kIc4IRI5X","name":"spotDL","label":"","uploader":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"content_type":"application/octet-stream","state":"uploaded","size":106937,"download_count":8111,"created_at":"2023-12-03T14:22:13Z","updated_at":"2023-12-03T14:22:13Z","browser_download_url":"https://github.com/spotDL/spotify-downloader/releases/download/v4.2.4/spotDL"},{"url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/assets/138710727","id":138710727,"node_id":"RA_kwDOA71kIc4IRI7H","name":"spotdl-4.2.4-darwin","label":"","uploader":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"content_type":"application/octet-stream","state":"uploaded","size":25459232,"download_count":1959,"created_at":"2023-12-03T14:23:01Z","updated_at":"2023-12-03T14:23:02Z","browser_download_url":"https://github.com/spotDL/spotify-downloader/releases/download/v4.2.4/spotdl-4.2.4-darwin"},{"url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/assets/138710614","id":138710614,"node_id":"RA_kwDOA71kIc4IRI5W","name":"spotdl-4.2.4-linux","label":"","uploader":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"content_type":"application/octet-stream","state":"uploaded","size":39578072,"download_count":1983,"created_at":"2023-12-03T14:22:13Z","updated_at":"2023-12-03T14:22:14Z","browser_download_url":"https://github.com/spotDL/spotify-downloader/releases/download/v4.2.4/spotdl-4.2.4-linux"},{"url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/assets/138711480","id":138711480,"node_id":"RA_kwDOA71kIc4IRJG4","name":"spotdl-4.2.4-linux-aarch64","label":"","uploader":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"content_type":"application/octet-stream","state":"uploaded","size":29522928,"download_count":605,"created_at":"2023-12-03T14:29:32Z","updated_at":"2023-12-03T14:29:34Z","browser_download_url":"https://github.com/spotDL/spotify-downloader/releases/download/v4.2.4/spotdl-4.2.4-linux-aarch64"},{"url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/assets/138710808","id":138710808,"node_id":"RA_kwDOA71kIc4IRI8Y","name":"spotdl-4.2.4-win32.exe","label":"","uploader":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"content_type":"application/octet-stream","state":"uploaded","size":25633790,"download_count":19457,"created_at":"2023-12-03T14:23:36Z","updated_at":"2023-12-03T14:23:37Z","browser_download_url":"https://github.com/spotDL/spotify-downloader/releases/download/v4.2.4/spotdl-4.2.4-win32.exe"}],"tarball_url":"https://api.github.com/repos/spotDL/spotify-downloader/tarball/v4.2.4","zipball_url":"https://api.github.com/repos/spotDL/spotify-downloader/zipball/v4.2.4","body":"##
        What''s Changed\r\nhttps://github.com/spotDL/spotify-downloader/issues/1971\r\n\r\n**Full
        Changelog**: https://github.com/spotDL/spotify-downloader/compare/v4.2.3...v4.2.4","reactions":{"url":"https://api.github.com/repos/spotDL/spotify-downloader/releases/132414038/reactions","total_count":14,"+1":5,"-1":0,"laugh":1,"hooray":1,"confused":0,"heart":1,"rocket":4,"eyes":2}}'
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Length:
      - '1371'
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 28 Mar 2024 18:28:07 GMT
      ETag:
      - W/"2abce5efe22f7c513a2973416981ee7c1e9189815a46015301a691e8dda556a1"
      Last-Modified:
      - Sun, 03 Dec 2023 14:29:34 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept, Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - 4502:3F9768:1C5E052:1C7747B:6605B6B7
      X-RateLimit-Limit:
      - '60'
      X-RateLimit-Remaining:
      - '41'
      X-RateLimit-Reset:
      - '1711651475'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '19'
      X-XSS-Protection:
      - '0'
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, br
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.31.0
    method: GET
    uri: https://api.github.com/repos/spotdl/spotify-downloader/compare/v3.9.4...master
  response:
    body:
      string: "{\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/compare/v3.9.4...master\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/compare/v3.9.4...master\",\"permalink_url\":\"https://github.com/spotDL/spotify-downloader/compare/spotDL:597f5db...spotDL:f90cfb3\",\"diff_url\":\"https://github.com/spotDL/spotify-downloader/compare/v3.9.4...master.diff\",\"patch_url\":\"https://github.com/spotDL/spotify-downloader/compare/v3.9.4...master.patch\",\"base_commit\":{\"sha\":\"597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"node_id\":\"C_kwDOA71kIdoAKDU5N2Y1ZGJiNzJmMzA4MmZmODcxMmYzOGZkZmVmZWI4MjcwMWM4NDc\",\"commit\":{\"author\":{\"name\":\"Jakub
        Kot\",\"email\":\"42355410+xnetcat@users.noreply.github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"message\":\"release
        v3.9.4\",\"tree\":{\"sha\":\"d892f5ff3869fa670fc65126929ed5d2f87ee972\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d892f5ff3869fa670fc65126929ed5d2f87ee972\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiSgF0CRBK7hj4Ov3rIwAAqxAIAG2bc4ntRiKygBh7hrVfA09D\\nhmHXrsVQmum6vEceAwofg7yzxo028eNycO5EeyBLNekfMKUCBjZP5DPnULRH8Q+0\\nMbYN9y7ARy4qm5Ks58UmF4GaP+2/FbKt+OWPmhQmYA675w5XU5RJ5ciHRztJxnNg\\nvWj7jlUHKZ8GuNYRiJWf+n1OifJ+3uNraZQLMURfjitw4dWjNsXn1l8SGlgRfzfB\\nA2RJVcjUKz7oIuvd6PmwSEy8dRwBNl3VH4RjaHfVy0vK3IpaxhthSaPvyn9Mc/h0\\n5mEjcUU37txu5+D1D7Xy131Zvv3IWUS91PD1IU4Z8Kf7rtezONb40ORVan8S3Uw=\\n=mAwM\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree d892f5ff3869fa670fc65126929ed5d2f87ee972\\nparent
        5a32848689617a47763ba8983342b5bbf4f67ca1\\nparent 4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\\nauthor
        Jakub Kot <42355410+xnetcat@users.noreply.github.com> 1649017204 -0700\\ncommitter
        GitHub <noreply@github.com> 1649017204 -0700\\n\\nrelease v3.9.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5a32848689617a47763ba8983342b5bbf4f67ca1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5a32848689617a47763ba8983342b5bbf4f67ca1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5a32848689617a47763ba8983342b5bbf4f67ca1\"},{\"sha\":\"4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\"}]},\"merge_base_commit\":{\"sha\":\"597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"node_id\":\"C_kwDOA71kIdoAKDU5N2Y1ZGJiNzJmMzA4MmZmODcxMmYzOGZkZmVmZWI4MjcwMWM4NDc\",\"commit\":{\"author\":{\"name\":\"Jakub
        Kot\",\"email\":\"42355410+xnetcat@users.noreply.github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"message\":\"release
        v3.9.4\",\"tree\":{\"sha\":\"d892f5ff3869fa670fc65126929ed5d2f87ee972\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d892f5ff3869fa670fc65126929ed5d2f87ee972\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiSgF0CRBK7hj4Ov3rIwAAqxAIAG2bc4ntRiKygBh7hrVfA09D\\nhmHXrsVQmum6vEceAwofg7yzxo028eNycO5EeyBLNekfMKUCBjZP5DPnULRH8Q+0\\nMbYN9y7ARy4qm5Ks58UmF4GaP+2/FbKt+OWPmhQmYA675w5XU5RJ5ciHRztJxnNg\\nvWj7jlUHKZ8GuNYRiJWf+n1OifJ+3uNraZQLMURfjitw4dWjNsXn1l8SGlgRfzfB\\nA2RJVcjUKz7oIuvd6PmwSEy8dRwBNl3VH4RjaHfVy0vK3IpaxhthSaPvyn9Mc/h0\\n5mEjcUU37txu5+D1D7Xy131Zvv3IWUS91PD1IU4Z8Kf7rtezONb40ORVan8S3Uw=\\n=mAwM\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree d892f5ff3869fa670fc65126929ed5d2f87ee972\\nparent
        5a32848689617a47763ba8983342b5bbf4f67ca1\\nparent 4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\\nauthor
        Jakub Kot <42355410+xnetcat@users.noreply.github.com> 1649017204 -0700\\ncommitter
        GitHub <noreply@github.com> 1649017204 -0700\\n\\nrelease v3.9.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5a32848689617a47763ba8983342b5bbf4f67ca1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5a32848689617a47763ba8983342b5bbf4f67ca1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5a32848689617a47763ba8983342b5bbf4f67ca1\"},{\"sha\":\"4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\"}]},\"status\":\"ahead\",\"ahead_by\":1062,\"behind_by\":0,\"total_commits\":1062,\"commits\":[{\"sha\":\"54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0\",\"node_id\":\"C_kwDOA71kIdoAKDU0ZmFjMWJhNmM0YTBhM2NiNmU1Yjg1ZTg0NDc5ZjczZWU4MWVmZjA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-04T14:24:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-04T14:24:39Z\"},\"message\":\"added
        option to generate lrc files\",\"tree\":{\"sha\":\"f454d07fa49ac8e7098a1272a36c778c2efad724\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f454d07fa49ac8e7098a1272a36c778c2efad724\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"789ebb3c980fd3296b58651406d30a01a95a7eeb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/789ebb3c980fd3296b58651406d30a01a95a7eeb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/789ebb3c980fd3296b58651406d30a01a95a7eeb\"}]},{\"sha\":\"e9bb6cbbdf4f023036463c4d5ade480061fc1b4e\",\"node_id\":\"C_kwDOA71kIdoAKGU5YmI2Y2JiZGY0ZjAyMzAzNjQ2M2M0ZDVhZGU0ODAwNjFmYzFiNGU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T09:05:51Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T09:05:51Z\"},\"message\":\"use
        ID3 v2.3 to save mp3 tags\",\"tree\":{\"sha\":\"ce4a0ae641a52a179cc85cd258bc1c81d2af0484\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ce4a0ae641a52a179cc85cd258bc1c81d2af0484\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e9bb6cbbdf4f023036463c4d5ade480061fc1b4e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9bb6cbbdf4f023036463c4d5ade480061fc1b4e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e9bb6cbbdf4f023036463c4d5ade480061fc1b4e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9bb6cbbdf4f023036463c4d5ade480061fc1b4e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/54fac1ba6c4a0a3cb6e5b85e84479f73ee81eff0\"}]},{\"sha\":\"daeefc162f72aeabc5c8c6492810292d2ffb2a87\",\"node_id\":\"C_kwDOA71kIdoAKGRhZWVmYzE2MmY3MmFlYWJjNWM4YzY0OTI4MTAyOTJkMmZmYjJhODc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T09:11:25Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T09:11:25Z\"},\"message\":\"fixed
        keyerrors when running spotdl meta\",\"tree\":{\"sha\":\"6f77cea09878c59f4e5ac5e6728aa4349b6913df\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6f77cea09878c59f4e5ac5e6728aa4349b6913df\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/daeefc162f72aeabc5c8c6492810292d2ffb2a87\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/daeefc162f72aeabc5c8c6492810292d2ffb2a87\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/daeefc162f72aeabc5c8c6492810292d2ffb2a87\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/daeefc162f72aeabc5c8c6492810292d2ffb2a87/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e9bb6cbbdf4f023036463c4d5ade480061fc1b4e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9bb6cbbdf4f023036463c4d5ade480061fc1b4e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e9bb6cbbdf4f023036463c4d5ade480061fc1b4e\"}]},{\"sha\":\"9b462535aff5cc59e1e9029fca81d9a8cf34a8ff\",\"node_id\":\"C_kwDOA71kIdoAKDliNDYyNTM1YWZmNWNjNTllMWU5MDI5ZmNhODFkOWE4Y2YzNGE4ZmY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:13:33Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:13:33Z\"},\"message\":\"metadata
        reading related fixes\",\"tree\":{\"sha\":\"d01b2153dd8ffe10bacadcfc7fe26e68f8422e89\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d01b2153dd8ffe10bacadcfc7fe26e68f8422e89\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9b462535aff5cc59e1e9029fca81d9a8cf34a8ff\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9b462535aff5cc59e1e9029fca81d9a8cf34a8ff\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9b462535aff5cc59e1e9029fca81d9a8cf34a8ff\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9b462535aff5cc59e1e9029fca81d9a8cf34a8ff/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"daeefc162f72aeabc5c8c6492810292d2ffb2a87\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/daeefc162f72aeabc5c8c6492810292d2ffb2a87\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/daeefc162f72aeabc5c8c6492810292d2ffb2a87\"}]},{\"sha\":\"6c17a98242936ad80985985328de896b3d1e6fa3\",\"node_id\":\"C_kwDOA71kIdoAKDZjMTdhOTgyNDI5MzZhZDgwOTg1OTg1MzI4ZGU4OTZiM2QxZTZmYTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:13:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:13:55Z\"},\"message\":\"use
        custom id3 sep for reading files, fixed wrong key name\",\"tree\":{\"sha\":\"93b631e09d18c0f1d0e61dd5c3f9a17530f3eb4b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/93b631e09d18c0f1d0e61dd5c3f9a17530f3eb4b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6c17a98242936ad80985985328de896b3d1e6fa3\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6c17a98242936ad80985985328de896b3d1e6fa3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6c17a98242936ad80985985328de896b3d1e6fa3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6c17a98242936ad80985985328de896b3d1e6fa3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9b462535aff5cc59e1e9029fca81d9a8cf34a8ff\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9b462535aff5cc59e1e9029fca81d9a8cf34a8ff\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9b462535aff5cc59e1e9029fca81d9a8cf34a8ff\"}]},{\"sha\":\"7e9414818dc8ccc490bbf66be798fde72a97a00b\",\"node_id\":\"C_kwDOA71kIdoAKDdlOTQxNDgxOGRjOGNjYzQ5MGJiZjY2YmU3OThmZGU3MmE5N2EwMGI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:14:05Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:14:05Z\"},\"message\":\"format
        code\",\"tree\":{\"sha\":\"82360cbb325f2e9598131423a1b832f372c5f8b8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/82360cbb325f2e9598131423a1b832f372c5f8b8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7e9414818dc8ccc490bbf66be798fde72a97a00b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7e9414818dc8ccc490bbf66be798fde72a97a00b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7e9414818dc8ccc490bbf66be798fde72a97a00b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7e9414818dc8ccc490bbf66be798fde72a97a00b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6c17a98242936ad80985985328de896b3d1e6fa3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6c17a98242936ad80985985328de896b3d1e6fa3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6c17a98242936ad80985985328de896b3d1e6fa3\"}]},{\"sha\":\"5eb16698c2b4d2c2c9d581d67a805cba7240b25f\",\"node_id\":\"C_kwDOA71kIdoAKDVlYjE2Njk4YzJiNGQyYzJjOWQ1ODFkNjdhODA1Y2JhNzI0MGIyNWY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:36:37Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:36:37Z\"},\"message\":\"added
        option to force metadata update\",\"tree\":{\"sha\":\"4db1aa25ba6250fc0369e7d72fd01a6ba2a8974e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4db1aa25ba6250fc0369e7d72fd01a6ba2a8974e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5eb16698c2b4d2c2c9d581d67a805cba7240b25f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5eb16698c2b4d2c2c9d581d67a805cba7240b25f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5eb16698c2b4d2c2c9d581d67a805cba7240b25f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5eb16698c2b4d2c2c9d581d67a805cba7240b25f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7e9414818dc8ccc490bbf66be798fde72a97a00b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7e9414818dc8ccc490bbf66be798fde72a97a00b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7e9414818dc8ccc490bbf66be798fde72a97a00b\"}]},{\"sha\":\"4ac9d4be58b71f7d94b8d42ef95b10d112952db6\",\"node_id\":\"C_kwDOA71kIdoAKDRhYzlkNGJlNThiNzFmN2Q5NGI4ZDQyZWY5NWIxMGQxMTI5NTJkYjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:37:06Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:37:06Z\"},\"message\":\"optimized
        metadata operation\",\"tree\":{\"sha\":\"bf2d76aa600bbed40a72ec99cef27cb4949282b2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bf2d76aa600bbed40a72ec99cef27cb4949282b2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4ac9d4be58b71f7d94b8d42ef95b10d112952db6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4ac9d4be58b71f7d94b8d42ef95b10d112952db6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4ac9d4be58b71f7d94b8d42ef95b10d112952db6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4ac9d4be58b71f7d94b8d42ef95b10d112952db6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5eb16698c2b4d2c2c9d581d67a805cba7240b25f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5eb16698c2b4d2c2c9d581d67a805cba7240b25f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5eb16698c2b4d2c2c9d581d67a805cba7240b25f\"}]},{\"sha\":\"4f8e8bb26a11c1567d7fe934db7a321f807e8ca4\",\"node_id\":\"C_kwDOA71kIdoAKDRmOGU4YmIyNmExMWMxNTY3ZDdmZTkzNGRiN2EzMjFmODA3ZThjYTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:37:18Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T10:37:18Z\"},\"message\":\"format
        code\",\"tree\":{\"sha\":\"16bfdf49bb1b8552eab587e20403abecc989a652\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/16bfdf49bb1b8552eab587e20403abecc989a652\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4f8e8bb26a11c1567d7fe934db7a321f807e8ca4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f8e8bb26a11c1567d7fe934db7a321f807e8ca4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f8e8bb26a11c1567d7fe934db7a321f807e8ca4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f8e8bb26a11c1567d7fe934db7a321f807e8ca4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4ac9d4be58b71f7d94b8d42ef95b10d112952db6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4ac9d4be58b71f7d94b8d42ef95b10d112952db6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4ac9d4be58b71f7d94b8d42ef95b10d112952db6\"}]},{\"sha\":\"18970cc23b1071d5d6e299fb7f425279efdb67db\",\"node_id\":\"C_kwDOA71kIdoAKDE4OTcwY2MyM2IxMDcxZDVkNmUyOTlmYjdmNDI1Mjc5ZWZkYjY3ZGI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T13:53:31Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-05T13:53:31Z\"},\"message\":\"more
        metadata fixes\",\"tree\":{\"sha\":\"d4918a04aee271f9d540f8a731c835950d29897b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d4918a04aee271f9d540f8a731c835950d29897b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/18970cc23b1071d5d6e299fb7f425279efdb67db\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/18970cc23b1071d5d6e299fb7f425279efdb67db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/18970cc23b1071d5d6e299fb7f425279efdb67db\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/18970cc23b1071d5d6e299fb7f425279efdb67db/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4f8e8bb26a11c1567d7fe934db7a321f807e8ca4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f8e8bb26a11c1567d7fe934db7a321f807e8ca4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f8e8bb26a11c1567d7fe934db7a321f807e8ca4\"}]},{\"sha\":\"8aee2adf9c6a776cf45270c35d0846afd927b384\",\"node_id\":\"C_kwDOA71kIdoAKDhhZWUyYWRmOWM2YTc3NmNmNDUyNzBjMzVkMDg0NmFmZDkyN2IzODQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-06T06:25:07Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-06T06:25:07Z\"},\"message\":\"check
        if artists field exists\",\"tree\":{\"sha\":\"3ceaacebe36be0b71a1eaa3ac75c412a0a422551\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3ceaacebe36be0b71a1eaa3ac75c412a0a422551\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8aee2adf9c6a776cf45270c35d0846afd927b384\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8aee2adf9c6a776cf45270c35d0846afd927b384\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8aee2adf9c6a776cf45270c35d0846afd927b384\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8aee2adf9c6a776cf45270c35d0846afd927b384/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"18970cc23b1071d5d6e299fb7f425279efdb67db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/18970cc23b1071d5d6e299fb7f425279efdb67db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/18970cc23b1071d5d6e299fb7f425279efdb67db\"}]},{\"sha\":\"6e5ebd88e2c5728e81ae810e731a14a383ebe470\",\"node_id\":\"C_kwDOA71kIdoAKDZlNWViZDg4ZTJjNTcyOGU4MWFlODEwZTczMWExNGEzODNlYmU0NzA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-07T14:17:52Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-07T14:17:52Z\"},\"message\":\"changed
        how the list data is stored in song\",\"tree\":{\"sha\":\"043e0d609be038ceda88e73d2644aa09e9fe0342\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/043e0d609be038ceda88e73d2644aa09e9fe0342\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6e5ebd88e2c5728e81ae810e731a14a383ebe470\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6e5ebd88e2c5728e81ae810e731a14a383ebe470\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6e5ebd88e2c5728e81ae810e731a14a383ebe470\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6e5ebd88e2c5728e81ae810e731a14a383ebe470/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8aee2adf9c6a776cf45270c35d0846afd927b384\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8aee2adf9c6a776cf45270c35d0846afd927b384\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8aee2adf9c6a776cf45270c35d0846afd927b384\"}]},{\"sha\":\"2481b0e5d01dada55968ae49b165c1b177ca3059\",\"node_id\":\"C_kwDOA71kIdoAKDI0ODFiMGU1ZDAxZGFkYTU1OTY4YWU0OWIxNjVjMWIxNzdjYTMwNTk\",\"commit\":{\"author\":{\"name\":\"s6joui\",\"email\":\"2190436+s6joui@users.noreply.github.com\",\"date\":\"2023-03-08T18:05:13Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-03-08T18:05:13Z\"},\"message\":\"Fix
        for sync functionality when using 'restrict' option (#1765)\\n\\n* fixed sync
        functionality when using 'restrict' option\\r\\n\\r\\n* fixed m3u filename
        issue when using restrict command line option\\r\\n\\r\\n* linting, formatting,
        type-checking\\r\\n\\r\\n---------\\r\\n\\r\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"f5ca2057809907f1318d2708cac3a679dc96977c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f5ca2057809907f1318d2708cac3a679dc96977c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2481b0e5d01dada55968ae49b165c1b177ca3059\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkCM5ZCRBK7hj4Ov3rIwAAhYcIALFabNlmksf29ZbrGyICUE+i\\nk1IWbH1Gdu/zkHWYQpS5OYT86rbbcwk1x2pdlG9T+koYw/inov9O57Y2Z/BiQC2Z\\n0G+41NMPxhRZNqW+6CEumcC/BKBunjQKApBsjVkMAuR6D+Mr0K3G8rGPXORoezu0\\nBxzr62IapUeYy5j2VRNnw6eu8Bohs4gAKEy5ox/4lbuAamJ+JJZK1+K7bZ8oBRGO\\nafYuJyjQ6CYhRCnnRa5ZxMgtWGIKRbqpzlkvWcGgH0Zp42AIUob7sz8FsHmkfWVX\\nJ2zUY80C104bkWBdYO3jo1ighCZBO2gjnT269qXesOYVzNY98mKQm6ZUR+T2Tcc=\\n=dEwQ\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree f5ca2057809907f1318d2708cac3a679dc96977c\\nparent
        6e5ebd88e2c5728e81ae810e731a14a383ebe470\\nauthor s6joui <2190436+s6joui@users.noreply.github.com>
        1678298713 +0900\\ncommitter GitHub <noreply@github.com> 1678298713 +0100\\n\\nFix
        for sync functionality when using 'restrict' option (#1765)\\n\\n* fixed sync
        functionality when using 'restrict' option\\r\\n\\r\\n* fixed m3u filename
        issue when using restrict command line option\\r\\n\\r\\n* linting, formatting,
        type-checking\\r\\n\\r\\n---------\\r\\n\\r\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2481b0e5d01dada55968ae49b165c1b177ca3059\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2481b0e5d01dada55968ae49b165c1b177ca3059\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2481b0e5d01dada55968ae49b165c1b177ca3059/comments\",\"author\":{\"login\":\"s6joui\",\"id\":2190436,\"node_id\":\"MDQ6VXNlcjIxOTA0MzY=\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/2190436?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/s6joui\",\"html_url\":\"https://github.com/s6joui\",\"followers_url\":\"https://api.github.com/users/s6joui/followers\",\"following_url\":\"https://api.github.com/users/s6joui/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/s6joui/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/s6joui/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/s6joui/subscriptions\",\"organizations_url\":\"https://api.github.com/users/s6joui/orgs\",\"repos_url\":\"https://api.github.com/users/s6joui/repos\",\"events_url\":\"https://api.github.com/users/s6joui/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/s6joui/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6e5ebd88e2c5728e81ae810e731a14a383ebe470\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6e5ebd88e2c5728e81ae810e731a14a383ebe470\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6e5ebd88e2c5728e81ae810e731a14a383ebe470\"}]},{\"sha\":\"6a54981aeecb3d3e02bf88edf35720cff85db614\",\"node_id\":\"C_kwDOA71kIdoAKDZhNTQ5ODFhZWVjYjNkM2UwMmJmODhlZGYzNTcyMGNmZjg1ZGI2MTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:22:05Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:22:05Z\"},\"message\":\"bump
        version to v4.1.3\",\"tree\":{\"sha\":\"850eaf83034fb26bdfde13e0145c46a281ab17eb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/850eaf83034fb26bdfde13e0145c46a281ab17eb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6a54981aeecb3d3e02bf88edf35720cff85db614\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6a54981aeecb3d3e02bf88edf35720cff85db614\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6a54981aeecb3d3e02bf88edf35720cff85db614\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6a54981aeecb3d3e02bf88edf35720cff85db614/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2481b0e5d01dada55968ae49b165c1b177ca3059\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2481b0e5d01dada55968ae49b165c1b177ca3059\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2481b0e5d01dada55968ae49b165c1b177ca3059\"}]},{\"sha\":\"a2feb9c0a22901d87796a01fee67b1d65f33f772\",\"node_id\":\"C_kwDOA71kIdoAKGEyZmViOWMwYTIyOTAxZDg3Nzk2YTAxZmVlNjdiMWQ2NWYzM2Y3NzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:54:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:54:36Z\"},\"message\":\"fixed
        pylint errors\",\"tree\":{\"sha\":\"928468d62b75e1256842196ad6435da87564f74f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/928468d62b75e1256842196ad6435da87564f74f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a2feb9c0a22901d87796a01fee67b1d65f33f772\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2feb9c0a22901d87796a01fee67b1d65f33f772\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a2feb9c0a22901d87796a01fee67b1d65f33f772\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2feb9c0a22901d87796a01fee67b1d65f33f772/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6a54981aeecb3d3e02bf88edf35720cff85db614\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6a54981aeecb3d3e02bf88edf35720cff85db614\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6a54981aeecb3d3e02bf88edf35720cff85db614\"}]},{\"sha\":\"710e1b567fbe8a2aa1b5356383ef209242e2d0b9\",\"node_id\":\"C_kwDOA71kIdoAKDcxMGUxYjU2N2ZiZThhMmFhMWI1MzU2MzgzZWYyMDkyNDJlMmQwYjk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:56:17Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:56:17Z\"},\"message\":\"fixed
        nullable album field\",\"tree\":{\"sha\":\"4595af706dbdfc0a6f5182c9446b60724f3d2d59\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4595af706dbdfc0a6f5182c9446b60724f3d2d59\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/710e1b567fbe8a2aa1b5356383ef209242e2d0b9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/710e1b567fbe8a2aa1b5356383ef209242e2d0b9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/710e1b567fbe8a2aa1b5356383ef209242e2d0b9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/710e1b567fbe8a2aa1b5356383ef209242e2d0b9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a2feb9c0a22901d87796a01fee67b1d65f33f772\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2feb9c0a22901d87796a01fee67b1d65f33f772\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a2feb9c0a22901d87796a01fee67b1d65f33f772\"}]},{\"sha\":\"6f1b77f6b5857df97a5a6156424a04f74b0ae461\",\"node_id\":\"C_kwDOA71kIdoAKDZmMWI3N2Y2YjU4NTdkZjk3YTVhNjE1NjQyNGEwNGY3NGIwYWU0NjE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:58:03Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T18:58:03Z\"},\"message\":\"reinit
        song on null album\",\"tree\":{\"sha\":\"ad3deb041e733494e65cc8fbb502017bb56598b6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ad3deb041e733494e65cc8fbb502017bb56598b6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6f1b77f6b5857df97a5a6156424a04f74b0ae461\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f1b77f6b5857df97a5a6156424a04f74b0ae461\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f1b77f6b5857df97a5a6156424a04f74b0ae461\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f1b77f6b5857df97a5a6156424a04f74b0ae461/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"710e1b567fbe8a2aa1b5356383ef209242e2d0b9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/710e1b567fbe8a2aa1b5356383ef209242e2d0b9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/710e1b567fbe8a2aa1b5356383ef209242e2d0b9\"}]},{\"sha\":\"fc3bf96f15f3f3cf934af7b2433034279abd24c1\",\"node_id\":\"C_kwDOA71kIdoAKGZjM2JmOTZmMTVmM2YzY2Y5MzRhZjdiMjQzMzAzNDI3OWFiZDI0YzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T19:22:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-08T19:22:21Z\"},\"message\":\"fixed
        nullable album release date\",\"tree\":{\"sha\":\"5aff8aca0d765c6927b7bd65ff3a18241a0f141c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5aff8aca0d765c6927b7bd65ff3a18241a0f141c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/fc3bf96f15f3f3cf934af7b2433034279abd24c1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc3bf96f15f3f3cf934af7b2433034279abd24c1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fc3bf96f15f3f3cf934af7b2433034279abd24c1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc3bf96f15f3f3cf934af7b2433034279abd24c1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6f1b77f6b5857df97a5a6156424a04f74b0ae461\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f1b77f6b5857df97a5a6156424a04f74b0ae461\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f1b77f6b5857df97a5a6156424a04f74b0ae461\"}]},{\"sha\":\"f50d6749a6750dc2ea9c90854b7101c2b6fd520a\",\"node_id\":\"C_kwDOA71kIdoAKGY1MGQ2NzQ5YTY3NTBkYzJlYTljOTA4NTRiNzEwMWMyYjZmZDUyMGE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-11T09:08:47Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-11T09:08:47Z\"},\"message\":\"fixed
        more key errors for nullable fields in playlist\",\"tree\":{\"sha\":\"bd132bcba58818211a1aee23abfb6d03f4323d7b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bd132bcba58818211a1aee23abfb6d03f4323d7b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f50d6749a6750dc2ea9c90854b7101c2b6fd520a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f50d6749a6750dc2ea9c90854b7101c2b6fd520a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f50d6749a6750dc2ea9c90854b7101c2b6fd520a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f50d6749a6750dc2ea9c90854b7101c2b6fd520a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"fc3bf96f15f3f3cf934af7b2433034279abd24c1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc3bf96f15f3f3cf934af7b2433034279abd24c1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fc3bf96f15f3f3cf934af7b2433034279abd24c1\"}]},{\"sha\":\"35943244c76be748526c0f2ea8f0328dc6802984\",\"node_id\":\"C_kwDOA71kIdoAKDM1OTQzMjQ0Yzc2YmU3NDg1MjZjMGYyZWE4ZjAzMjhkYzY4MDI5ODQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-11T09:42:09Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-11T09:42:09Z\"},\"message\":\"formatted
        code\",\"tree\":{\"sha\":\"9d74733825c9c561cd720318c242014d8ef0a495\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9d74733825c9c561cd720318c242014d8ef0a495\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/35943244c76be748526c0f2ea8f0328dc6802984\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/35943244c76be748526c0f2ea8f0328dc6802984\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/35943244c76be748526c0f2ea8f0328dc6802984\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/35943244c76be748526c0f2ea8f0328dc6802984/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f50d6749a6750dc2ea9c90854b7101c2b6fd520a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f50d6749a6750dc2ea9c90854b7101c2b6fd520a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f50d6749a6750dc2ea9c90854b7101c2b6fd520a\"}]},{\"sha\":\"086f4e4199bd647b40576273f02165483be1bc54\",\"node_id\":\"C_kwDOA71kIdoAKDA4NmY0ZTQxOTliZDY0N2I0MDU3NjI3M2YwMjE2NTQ4M2JlMWJjNTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-11T10:12:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-11T10:53:56Z\"},\"message\":\"fixed
        tests\\n\\nUpdate test_matching.py\\n\\nUpdate formatter.py\",\"tree\":{\"sha\":\"e1957faeffa8dc588c789e1edccc76676aef9de2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e1957faeffa8dc588c789e1edccc76676aef9de2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/086f4e4199bd647b40576273f02165483be1bc54\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/086f4e4199bd647b40576273f02165483be1bc54\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/086f4e4199bd647b40576273f02165483be1bc54\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/086f4e4199bd647b40576273f02165483be1bc54/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"35943244c76be748526c0f2ea8f0328dc6802984\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/35943244c76be748526c0f2ea8f0328dc6802984\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/35943244c76be748526c0f2ea8f0328dc6802984\"}]},{\"sha\":\"ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"node_id\":\"C_kwDOA71kIdoAKGZmMzdmZjdlOGU5MjMwNzgzN2MwYWZhNzQ2ZTM3ZTA2MzlhMGY5YTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-15T12:05:49Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-03-15T12:05:49Z\"},\"message\":\"Merge
        pull request #1768 from spotDL/dev\\n\\nv4.1.3\",\"tree\":{\"sha\":\"e1957faeffa8dc588c789e1edccc76676aef9de2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e1957faeffa8dc588c789e1edccc76676aef9de2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkEbSdCRBK7hj4Ov3rIwAAnjAIAG+szcF+P473hAJUPyCrIg98\\ndoszp+OYHjS/jBgVrFKljEJwtLT8A6fiDrwO24vo+mpz6OnJPQuHsPc5wYmVQtSI\\nFXh8tz7lB265m9oShsmB2AeP3GSa2q1SBD0mDGBul2ymdY4ak8+lcS7IIAHRQhfg\\n0Kt6mhOCX0dlNLM31u6JTsnfKXEx1HU3SGJ18pQ0fbbM3FzxHhTlZpkim2/NJFuQ\\nAQWUjlM+IV0KOYgHnmMu6/LS+z5XcNyWZmTJewpIuRPQEXOnVcsjCMO/da9+7E2B\\ndXqk8OChU6PT8JPdZc1ta47WYF66LGZ4XOneObC81vHSVQixPI6UcoaSy2ySKvA=\\n=np0C\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e1957faeffa8dc588c789e1edccc76676aef9de2\\nparent
        789ebb3c980fd3296b58651406d30a01a95a7eeb\\nparent 086f4e4199bd647b40576273f02165483be1bc54\\nauthor
        kuba <xnetcat.dev@gmail.com> 1678881949 +0100\\ncommitter GitHub <noreply@github.com>
        1678881949 +0100\\n\\nMerge pull request #1768 from spotDL/dev\\n\\nv4.1.3\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff37ff7e8e92307837c0afa746e37e0639a0f9a8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"789ebb3c980fd3296b58651406d30a01a95a7eeb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/789ebb3c980fd3296b58651406d30a01a95a7eeb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/789ebb3c980fd3296b58651406d30a01a95a7eeb\"},{\"sha\":\"086f4e4199bd647b40576273f02165483be1bc54\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/086f4e4199bd647b40576273f02165483be1bc54\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/086f4e4199bd647b40576273f02165483be1bc54\"}]},{\"sha\":\"323684d17612f9fbdca4832ac4f0e9f546b4044f\",\"node_id\":\"C_kwDOA71kIdoAKDMyMzY4NGQxNzYxMmY5ZmJkY2E0ODMyYWM0ZjBlOWY1NDZiNDA0NGY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:27:56Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:27:56Z\"},\"message\":\"path
        formatting fixes\",\"tree\":{\"sha\":\"b13c1d723ccf75a5c7899d7723f66fadace7fe94\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b13c1d723ccf75a5c7899d7723f66fadace7fe94\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/323684d17612f9fbdca4832ac4f0e9f546b4044f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/323684d17612f9fbdca4832ac4f0e9f546b4044f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/323684d17612f9fbdca4832ac4f0e9f546b4044f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/323684d17612f9fbdca4832ac4f0e9f546b4044f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\"}]},{\"sha\":\"a5d8f8f1c2085761001803373ef0256e96b74cf3\",\"node_id\":\"C_kwDOA71kIdoAKGE1ZDhmOGYxYzIwODU3NjEwMDE4MDMzNzNlZjAyNTZlOTZiNzRjZjM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:29:10Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:29:10Z\"},\"message\":\"bump
        version\",\"tree\":{\"sha\":\"e69d538e9f094426dc9667cc8436bd9da6ec195f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e69d538e9f094426dc9667cc8436bd9da6ec195f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a5d8f8f1c2085761001803373ef0256e96b74cf3\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a5d8f8f1c2085761001803373ef0256e96b74cf3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a5d8f8f1c2085761001803373ef0256e96b74cf3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a5d8f8f1c2085761001803373ef0256e96b74cf3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"323684d17612f9fbdca4832ac4f0e9f546b4044f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/323684d17612f9fbdca4832ac4f0e9f546b4044f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/323684d17612f9fbdca4832ac4f0e9f546b4044f\"}]},{\"sha\":\"a171dac38e2f6a8e1a0ec76dd5b988653d3611d9\",\"node_id\":\"C_kwDOA71kIdoAKGExNzFkYWMzOGUyZjZhOGUxYTBlYzc2ZGQ1Yjk4ODY1M2QzNjExZDk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:45:05Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:45:05Z\"},\"message\":\"update
        dependencies\",\"tree\":{\"sha\":\"15270d7f5881b61917931fa6b515822bcd466b10\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/15270d7f5881b61917931fa6b515822bcd466b10\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a171dac38e2f6a8e1a0ec76dd5b988653d3611d9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a171dac38e2f6a8e1a0ec76dd5b988653d3611d9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a171dac38e2f6a8e1a0ec76dd5b988653d3611d9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a171dac38e2f6a8e1a0ec76dd5b988653d3611d9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a5d8f8f1c2085761001803373ef0256e96b74cf3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a5d8f8f1c2085761001803373ef0256e96b74cf3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a5d8f8f1c2085761001803373ef0256e96b74cf3\"}]},{\"sha\":\"3b18efe1d63d3dfd862c907bd712448b138858f2\",\"node_id\":\"C_kwDOA71kIdoAKDNiMThlZmUxZDYzZDNkZmQ4NjJjOTA3YmQ3MTI0NDhiMTM4ODU4ZjI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:45:33Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:45:33Z\"},\"message\":\"fixed
        genre check when saving metadata\",\"tree\":{\"sha\":\"8e7e67e70207960a6fd1ab4ce2e482ce84539a0e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8e7e67e70207960a6fd1ab4ce2e482ce84539a0e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3b18efe1d63d3dfd862c907bd712448b138858f2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3b18efe1d63d3dfd862c907bd712448b138858f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3b18efe1d63d3dfd862c907bd712448b138858f2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3b18efe1d63d3dfd862c907bd712448b138858f2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a171dac38e2f6a8e1a0ec76dd5b988653d3611d9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a171dac38e2f6a8e1a0ec76dd5b988653d3611d9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a171dac38e2f6a8e1a0ec76dd5b988653d3611d9\"}]},{\"sha\":\"d8fffa1fd1dbf046acb72e808601407b7343b450\",\"node_id\":\"C_kwDOA71kIdoAKGQ4ZmZmYTFmZDFkYmYwNDZhY2I3MmU4MDg2MDE0MDdiNzM0M2I0NTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:54:25Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T14:54:25Z\"},\"message\":\"moved
        pytest config to pyproject\",\"tree\":{\"sha\":\"622c7dda8a9eda9d5117d3f5577dae537c59ca77\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/622c7dda8a9eda9d5117d3f5577dae537c59ca77\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d8fffa1fd1dbf046acb72e808601407b7343b450\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d8fffa1fd1dbf046acb72e808601407b7343b450\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d8fffa1fd1dbf046acb72e808601407b7343b450\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d8fffa1fd1dbf046acb72e808601407b7343b450/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3b18efe1d63d3dfd862c907bd712448b138858f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3b18efe1d63d3dfd862c907bd712448b138858f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3b18efe1d63d3dfd862c907bd712448b138858f2\"}]},{\"sha\":\"2de064fdd88a2c6c8e640cc5d3e44ce3bd666835\",\"node_id\":\"C_kwDOA71kIdoAKDJkZTA2NGZkZDg4YTJjNmM4ZTY0MGNjNWQzZTQ0Y2UzYmQ2NjY4MzU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:22:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:22:54Z\"},\"message\":\"youtube
        playlist support improvements\",\"tree\":{\"sha\":\"695b9f57f985bb98178ed0e5e82f01b9d7fede18\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/695b9f57f985bb98178ed0e5e82f01b9d7fede18\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2de064fdd88a2c6c8e640cc5d3e44ce3bd666835\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2de064fdd88a2c6c8e640cc5d3e44ce3bd666835\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2de064fdd88a2c6c8e640cc5d3e44ce3bd666835\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2de064fdd88a2c6c8e640cc5d3e44ce3bd666835/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d8fffa1fd1dbf046acb72e808601407b7343b450\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d8fffa1fd1dbf046acb72e808601407b7343b450\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d8fffa1fd1dbf046acb72e808601407b7343b450\"}]},{\"sha\":\"26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc\",\"node_id\":\"C_kwDOA71kIdoAKDI2ZGJmYTlkNDk0YTliMzNkOGNmMzBjNGZlNzgwZjZlZmQyZGEzY2M\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:35:17Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:35:54Z\"},\"message\":\"improved
        logic in metadata operation\\n\\nremoved unused import\",\"tree\":{\"sha\":\"0e0f2f0e53eefdf5a2e971b76b01fc31d5a90340\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0e0f2f0e53eefdf5a2e971b76b01fc31d5a90340\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2de064fdd88a2c6c8e640cc5d3e44ce3bd666835\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2de064fdd88a2c6c8e640cc5d3e44ce3bd666835\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2de064fdd88a2c6c8e640cc5d3e44ce3bd666835\"}]},{\"sha\":\"968d6c8a4967ca36946dab3b4b915de94022d8f2\",\"node_id\":\"C_kwDOA71kIdoAKDk2OGQ2YzhhNDk2N2NhMzY5NDZkYWIzYjRiOTE1ZGU5NDAyMmQ4ZjI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:48:19Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:48:19Z\"},\"message\":\"simplified
        list position calculation\",\"tree\":{\"sha\":\"98857c19ef305b4d40bdc88aaf89c12f397e4284\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/98857c19ef305b4d40bdc88aaf89c12f397e4284\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/968d6c8a4967ca36946dab3b4b915de94022d8f2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/968d6c8a4967ca36946dab3b4b915de94022d8f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/968d6c8a4967ca36946dab3b4b915de94022d8f2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/968d6c8a4967ca36946dab3b4b915de94022d8f2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/26dbfa9d494a9b33d8cf30c4fe780f6efd2da3cc\"}]},{\"sha\":\"f25c638cf88eee18d361769e140cf391d55b03d1\",\"node_id\":\"C_kwDOA71kIdoAKGYyNWM2MzhjZjg4ZWVlMThkMzYxNzY5ZTE0MGNmMzkxZDU1YjAzZDE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:55:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T16:55:21Z\"},\"message\":\"added
        retry logic to azlyrics\",\"tree\":{\"sha\":\"0cd85c26813611b1cd7d14627657621fe8d39248\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0cd85c26813611b1cd7d14627657621fe8d39248\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f25c638cf88eee18d361769e140cf391d55b03d1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f25c638cf88eee18d361769e140cf391d55b03d1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f25c638cf88eee18d361769e140cf391d55b03d1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f25c638cf88eee18d361769e140cf391d55b03d1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"968d6c8a4967ca36946dab3b4b915de94022d8f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/968d6c8a4967ca36946dab3b4b915de94022d8f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/968d6c8a4967ca36946dab3b4b915de94022d8f2\"}]},{\"sha\":\"21e39a1a24ece11f9e764cd728864577d1adc55d\",\"node_id\":\"C_kwDOA71kIdoAKDIxZTM5YTFhMjRlY2UxMWY5ZTc2NGNkNzI4ODY0NTc3ZDFhZGM1NWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T17:23:08Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T17:23:08Z\"},\"message\":\"updated
        labels\",\"tree\":{\"sha\":\"8ba9f7c5e9c011c45bbca6bc85ed2a1520129128\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8ba9f7c5e9c011c45bbca6bc85ed2a1520129128\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/21e39a1a24ece11f9e764cd728864577d1adc55d\",\"comment_count\":1,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/21e39a1a24ece11f9e764cd728864577d1adc55d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/21e39a1a24ece11f9e764cd728864577d1adc55d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/21e39a1a24ece11f9e764cd728864577d1adc55d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f25c638cf88eee18d361769e140cf391d55b03d1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f25c638cf88eee18d361769e140cf391d55b03d1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f25c638cf88eee18d361769e140cf391d55b03d1\"}]},{\"sha\":\"fb6239aa4bc4d397afe9d2668ed4a86e7db80690\",\"node_id\":\"C_kwDOA71kIdoAKGZiNjIzOWFhNGJjNGQzOTdhZmU5ZDI2NjhlZDRhODZlN2RiODA2OTA\",\"commit\":{\"author\":{\"name\":\"Juan
        Jose Pablos\",\"email\":\"juanjo@apertus.es\",\"date\":\"2023-03-27T18:12:16Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-03-27T18:12:16Z\"},\"message\":\"Update
        README.md (#1783)\",\"tree\":{\"sha\":\"48b7104bf7f32567a9fc1319879042764341545a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/48b7104bf7f32567a9fc1319879042764341545a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/fb6239aa4bc4d397afe9d2668ed4a86e7db80690\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkIdyACRBK7hj4Ov3rIwAAGVUIAJL7Ea3Xi9XppBuzrLPXfrjI\\nJ/X6wRfO5lZxlGAdG2oVL/DgH0lGv4XKofzYN6KWLCEU3r8BOGjKtb4O1v/Ux5VK\\nkFRKw2W8nmNnBr0bjhvS4Oz8fJ6JXkVxUZOaG+ReuVCNRHYB5gv3yhUmPMJwiZWt\\ne5WCUfwGdrnKLZl9mpuPmfCSGUgtBYzFq2F++zSgzMllIoDAESvJoI9pirQoabkD\\nYdcW0wTeMmCL25+vE9veMDkEjBPuQ5XlBzDeTsWHK4HcGmTlxVZ/RTEb3B5wCKRo\\n5rkmV6RD9rXXX5aqTSGEUY3m1qtI2uvOvgeeeU500fu+96bI4N1ttMpbdQVoZLI=\\n=5ukl\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 48b7104bf7f32567a9fc1319879042764341545a\\nparent
        f25c638cf88eee18d361769e140cf391d55b03d1\\nauthor Juan Jose Pablos <juanjo@apertus.es>
        1679940736 +0200\\ncommitter GitHub <noreply@github.com> 1679940736 +0200\\n\\nUpdate
        README.md (#1783)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fb6239aa4bc4d397afe9d2668ed4a86e7db80690\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fb6239aa4bc4d397afe9d2668ed4a86e7db80690\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fb6239aa4bc4d397afe9d2668ed4a86e7db80690/comments\",\"author\":{\"login\":\"juanjosepablos\",\"id\":1632116,\"node_id\":\"MDQ6VXNlcjE2MzIxMTY=\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/1632116?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/juanjosepablos\",\"html_url\":\"https://github.com/juanjosepablos\",\"followers_url\":\"https://api.github.com/users/juanjosepablos/followers\",\"following_url\":\"https://api.github.com/users/juanjosepablos/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/juanjosepablos/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/juanjosepablos/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/juanjosepablos/subscriptions\",\"organizations_url\":\"https://api.github.com/users/juanjosepablos/orgs\",\"repos_url\":\"https://api.github.com/users/juanjosepablos/repos\",\"events_url\":\"https://api.github.com/users/juanjosepablos/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/juanjosepablos/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f25c638cf88eee18d361769e140cf391d55b03d1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f25c638cf88eee18d361769e140cf391d55b03d1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f25c638cf88eee18d361769e140cf391d55b03d1\"}]},{\"sha\":\"0fc56fc0622bca11feba8e5ea3257a5a09ac12db\",\"node_id\":\"C_kwDOA71kIdoAKDBmYzU2ZmMwNjIyYmNhMTFmZWJhOGU1ZWEzMjU3YTVhMDlhYzEyZGI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T18:18:19Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T18:18:19Z\"},\"message\":\"simplified
        artists match calculation\",\"tree\":{\"sha\":\"2319bb6f3022dcfa08d0fcb3ba74efda575d0aef\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/2319bb6f3022dcfa08d0fcb3ba74efda575d0aef\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0fc56fc0622bca11feba8e5ea3257a5a09ac12db\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0fc56fc0622bca11feba8e5ea3257a5a09ac12db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0fc56fc0622bca11feba8e5ea3257a5a09ac12db\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0fc56fc0622bca11feba8e5ea3257a5a09ac12db/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"21e39a1a24ece11f9e764cd728864577d1adc55d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/21e39a1a24ece11f9e764cd728864577d1adc55d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/21e39a1a24ece11f9e764cd728864577d1adc55d\"}]},{\"sha\":\"515775c43f44e29c8e3387e1819ff60b967b4694\",\"node_id\":\"C_kwDOA71kIdoAKDUxNTc3NWM0M2Y0NGUyOWM4ZTMzODdlMTgxOWZmNjBiOTY3YjQ2OTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T18:18:32Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T18:18:32Z\"},\"message\":\"Merge
        branch 'dev' of https://github.com/spotDL/spotify-downloader into dev\",\"tree\":{\"sha\":\"f376d07722267a3189027c2cc23c208dadd5801f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f376d07722267a3189027c2cc23c208dadd5801f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/515775c43f44e29c8e3387e1819ff60b967b4694\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/515775c43f44e29c8e3387e1819ff60b967b4694\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/515775c43f44e29c8e3387e1819ff60b967b4694\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/515775c43f44e29c8e3387e1819ff60b967b4694/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"0fc56fc0622bca11feba8e5ea3257a5a09ac12db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0fc56fc0622bca11feba8e5ea3257a5a09ac12db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0fc56fc0622bca11feba8e5ea3257a5a09ac12db\"},{\"sha\":\"fb6239aa4bc4d397afe9d2668ed4a86e7db80690\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fb6239aa4bc4d397afe9d2668ed4a86e7db80690\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fb6239aa4bc4d397afe9d2668ed4a86e7db80690\"}]},{\"sha\":\"385b768f0e2a61d733e809b51362b6ff76451539\",\"node_id\":\"C_kwDOA71kIdoAKDM4NWI3NjhmMGUyYTYxZDczM2U4MDliNTEzNjJiNmZmNzY0NTE1Mzk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T18:22:19Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T18:22:19Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"60aa0232df0473bd9d3e166df294457b800213ab\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/60aa0232df0473bd9d3e166df294457b800213ab\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/385b768f0e2a61d733e809b51362b6ff76451539\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/385b768f0e2a61d733e809b51362b6ff76451539\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/385b768f0e2a61d733e809b51362b6ff76451539\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/385b768f0e2a61d733e809b51362b6ff76451539/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"515775c43f44e29c8e3387e1819ff60b967b4694\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/515775c43f44e29c8e3387e1819ff60b967b4694\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/515775c43f44e29c8e3387e1819ff60b967b4694\"}]},{\"sha\":\"56653debaacf79ab94c25aca644d054bc4dad777\",\"node_id\":\"C_kwDOA71kIdoAKDU2NjUzZGViYWFjZjc5YWI5NGMyNWFjYTY0NGQwNTRiYzRkYWQ3Nzc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T20:36:03Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T20:36:23Z\"},\"message\":\"improved
        genius lyrics matching\\n\\nblack .\",\"tree\":{\"sha\":\"742ad4adf5e9f2ed1537cd2ca74355bcd22c888b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/742ad4adf5e9f2ed1537cd2ca74355bcd22c888b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/56653debaacf79ab94c25aca644d054bc4dad777\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/56653debaacf79ab94c25aca644d054bc4dad777\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/56653debaacf79ab94c25aca644d054bc4dad777\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/56653debaacf79ab94c25aca644d054bc4dad777/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"385b768f0e2a61d733e809b51362b6ff76451539\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/385b768f0e2a61d733e809b51362b6ff76451539\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/385b768f0e2a61d733e809b51362b6ff76451539\"}]},{\"sha\":\"c2e0208ba12a3efe7746ad35cdc40ae0e1215628\",\"node_id\":\"C_kwDOA71kIdoAKGMyZTAyMDhiYTEyYTNlZmU3NzQ2YWQzNWNkYzQwYWUwZTEyMTU2Mjg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T21:35:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T21:35:13Z\"},\"message\":\"improved
        main artist matching\",\"tree\":{\"sha\":\"310623ceef6d221abdd2deaddad81da3ac6ba09c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/310623ceef6d221abdd2deaddad81da3ac6ba09c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c2e0208ba12a3efe7746ad35cdc40ae0e1215628\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2e0208ba12a3efe7746ad35cdc40ae0e1215628\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2e0208ba12a3efe7746ad35cdc40ae0e1215628\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2e0208ba12a3efe7746ad35cdc40ae0e1215628/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"56653debaacf79ab94c25aca644d054bc4dad777\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/56653debaacf79ab94c25aca644d054bc4dad777\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/56653debaacf79ab94c25aca644d054bc4dad777\"}]},{\"sha\":\"c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"node_id\":\"C_kwDOA71kIdoAKGMwMTY3MjQxZTg5YjcxNjU3ZTNhMzQwZDA5YWQyMjMyMGE3YmRmYmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T21:41:07Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-03-27T21:41:07Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"e21f8d79ae11eafb49101ce2629d9a270f4ba31a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e21f8d79ae11eafb49101ce2629d9a270f4ba31a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c0167241e89b71657e3a340d09ad22320a7bdfbd/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c2e0208ba12a3efe7746ad35cdc40ae0e1215628\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2e0208ba12a3efe7746ad35cdc40ae0e1215628\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2e0208ba12a3efe7746ad35cdc40ae0e1215628\"}]},{\"sha\":\"356b3a274a537de79902f99937af2e5f647d6cc5\",\"node_id\":\"C_kwDOA71kIdoAKDM1NmIzYTI3NGE1MzdkZTc5OTAyZjk5OTM3YWYyZTVmNjQ3ZDZjYzU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T12:28:08Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T12:28:08Z\"},\"message\":\"small
        code improvements\",\"tree\":{\"sha\":\"107cb4dba50910f7c392a17161222a7a18651f8f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/107cb4dba50910f7c392a17161222a7a18651f8f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/356b3a274a537de79902f99937af2e5f647d6cc5\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/356b3a274a537de79902f99937af2e5f647d6cc5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/356b3a274a537de79902f99937af2e5f647d6cc5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/356b3a274a537de79902f99937af2e5f647d6cc5/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c0167241e89b71657e3a340d09ad22320a7bdfbd\"}]},{\"sha\":\"b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f\",\"node_id\":\"C_kwDOA71kIdoAKGI5ZWNlMGY2ZjhkM2VjNDk0ZGE4MGI2Y2UzYjI4YWU0Y2Q3YzZkN2Y\",\"commit\":{\"author\":{\"name\":\"ckie\",\"email\":\"25263210+ckiee@users.noreply.github.com\",\"date\":\"2023-04-06T13:12:26Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-06T13:12:26Z\"},\"message\":\"utils/search.py:
        lazily initalize YTMusic() client (#1790)\",\"tree\":{\"sha\":\"66ff7be2ed2955f603d9976ac9bd9937ba383475\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/66ff7be2ed2955f603d9976ac9bd9937ba383475\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkLsU6CRBK7hj4Ov3rIwAAj8QIAGvOIgkixeNMEVnr48A8HeSv\\nN7y00O7G6+1uy6cwOFSOiuOUyJu3MEEkkAjiHSmH71TqUpZoL89hpLMEcO6jc282\\neh6hQ3fGT5MDBukqlbf1aCniAKxWt+56n1sh/PA6FNfHL1zXV9BtC+fmkQK2W0os\\nKNE8TyiHBSvYEl+W11kJ4v1K8myiEekTJ+S9APMe6PHtDnHdCxQt+7V90WRlLUmh\\n0I6TNPVHmpzwkjqpDXsRgM7jfuJ6kaShVFwhp8NL1ZeJoUyofDHUmTmvYgG3686O\\nwqB4oI+lD543g3C39+6bY/ZjDQxdlPvzVzpJ2wkCnuze9cRGD30hr2Fhx6uF65E=\\n=3W+V\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 66ff7be2ed2955f603d9976ac9bd9937ba383475\\nparent
        c0167241e89b71657e3a340d09ad22320a7bdfbd\\nauthor ckie <25263210+ckiee@users.noreply.github.com>
        1680786746 +0300\\ncommitter GitHub <noreply@github.com> 1680786746 +0200\\n\\nutils/search.py:
        lazily initalize YTMusic() client (#1790)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f/comments\",\"author\":{\"login\":\"ckiee\",\"id\":25263210,\"node_id\":\"MDQ6VXNlcjI1MjYzMjEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/25263210?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/ckiee\",\"html_url\":\"https://github.com/ckiee\",\"followers_url\":\"https://api.github.com/users/ckiee/followers\",\"following_url\":\"https://api.github.com/users/ckiee/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/ckiee/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/ckiee/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/ckiee/subscriptions\",\"organizations_url\":\"https://api.github.com/users/ckiee/orgs\",\"repos_url\":\"https://api.github.com/users/ckiee/repos\",\"events_url\":\"https://api.github.com/users/ckiee/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/ckiee/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c0167241e89b71657e3a340d09ad22320a7bdfbd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c0167241e89b71657e3a340d09ad22320a7bdfbd\"}]},{\"sha\":\"f955aa951b118df9244753a7d1729c70571e131b\",\"node_id\":\"C_kwDOA71kIdoAKGY5NTVhYTk1MWIxMThkZjkyNDQ3NTNhN2QxNzI5YzcwNTcxZTEzMWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:30:37Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:30:37Z\"},\"message\":\"improving
        lyrics matching across all lyrics providers\",\"tree\":{\"sha\":\"c9b49cb27f4d08db18a53ebaefa31805acd0df96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c9b49cb27f4d08db18a53ebaefa31805acd0df96\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f955aa951b118df9244753a7d1729c70571e131b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f955aa951b118df9244753a7d1729c70571e131b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f955aa951b118df9244753a7d1729c70571e131b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f955aa951b118df9244753a7d1729c70571e131b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"356b3a274a537de79902f99937af2e5f647d6cc5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/356b3a274a537de79902f99937af2e5f647d6cc5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/356b3a274a537de79902f99937af2e5f647d6cc5\"}]},{\"sha\":\"4f07f3339a664f26104ef18be9dd3e8c3c4a8e18\",\"node_id\":\"C_kwDOA71kIdoAKDRmMDdmMzMzOWE2NjRmMjYxMDRlZjE4YmU5ZGQzZThjM2M0YThlMTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:31:42Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:31:42Z\"},\"message\":\"update
        packages\",\"tree\":{\"sha\":\"61e2058964f3d39c96716d2ef5d0e7ce4394c366\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/61e2058964f3d39c96716d2ef5d0e7ce4394c366\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4f07f3339a664f26104ef18be9dd3e8c3c4a8e18\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f07f3339a664f26104ef18be9dd3e8c3c4a8e18\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f07f3339a664f26104ef18be9dd3e8c3c4a8e18\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f07f3339a664f26104ef18be9dd3e8c3c4a8e18/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f955aa951b118df9244753a7d1729c70571e131b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f955aa951b118df9244753a7d1729c70571e131b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f955aa951b118df9244753a7d1729c70571e131b\"}]},{\"sha\":\"cfd9f92b580fabe54fdee6e86e89a7fe010c935e\",\"node_id\":\"C_kwDOA71kIdoAKGNmZDlmOTJiNTgwZmFiZTU0ZmRlZTZlODZlODlhN2ZlMDEwYzkzNWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:31:45Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:31:45Z\"},\"message\":\"Merge
        branch 'dev' of https://github.com/spotDL/spotify-downloader into dev\",\"tree\":{\"sha\":\"106f047ac6a001efcc8c2c8d0d8effac38e29e58\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/106f047ac6a001efcc8c2c8d0d8effac38e29e58\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cfd9f92b580fabe54fdee6e86e89a7fe010c935e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cfd9f92b580fabe54fdee6e86e89a7fe010c935e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cfd9f92b580fabe54fdee6e86e89a7fe010c935e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cfd9f92b580fabe54fdee6e86e89a7fe010c935e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4f07f3339a664f26104ef18be9dd3e8c3c4a8e18\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f07f3339a664f26104ef18be9dd3e8c3c4a8e18\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f07f3339a664f26104ef18be9dd3e8c3c4a8e18\"},{\"sha\":\"b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b9ece0f6f8d3ec494da80b6ce3b28ae4cd7c6d7f\"}]},{\"sha\":\"a7c2f93fa0837908c924aaee22224907ff894ec2\",\"node_id\":\"C_kwDOA71kIdoAKGE3YzJmOTNmYTA4Mzc5MDhjOTI0YWFlZTIyMjI0OTA3ZmY4OTRlYzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:55:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:55:26Z\"},\"message\":\"fixed
        base lyrics provider\",\"tree\":{\"sha\":\"ea6fa2de2abdce9f8958b63d9ececd4c58e6057f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ea6fa2de2abdce9f8958b63d9ececd4c58e6057f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a7c2f93fa0837908c924aaee22224907ff894ec2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a7c2f93fa0837908c924aaee22224907ff894ec2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a7c2f93fa0837908c924aaee22224907ff894ec2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a7c2f93fa0837908c924aaee22224907ff894ec2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cfd9f92b580fabe54fdee6e86e89a7fe010c935e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cfd9f92b580fabe54fdee6e86e89a7fe010c935e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cfd9f92b580fabe54fdee6e86e89a7fe010c935e\"}]},{\"sha\":\"f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"node_id\":\"C_kwDOA71kIdoAKGY0NzhkZmI4NzkyMzMwM2Y3MTI1YzhkMGM4YTJlOTVkNzUxNzVkNjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:55:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:55:30Z\"},\"message\":\"added
        docstring to get_ytm_client\",\"tree\":{\"sha\":\"8e31c2bbc29206788c0861efc63b4d95291096c9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8e31c2bbc29206788c0861efc63b4d95291096c9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a7c2f93fa0837908c924aaee22224907ff894ec2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a7c2f93fa0837908c924aaee22224907ff894ec2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a7c2f93fa0837908c924aaee22224907ff894ec2\"}]},{\"sha\":\"82d80adf16ca731472502a3406d19e794fa86158\",\"node_id\":\"C_kwDOA71kIdoAKDgyZDgwYWRmMTZjYTczMTQ3MjUwMmEzNDA2ZDE5ZTc5NGZhODYxNTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:56:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:56:01Z\"},\"message\":\"black
        .\",\"tree\":{\"sha\":\"eb175b948b6f05115934faae8f8a1a286ea509ee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/eb175b948b6f05115934faae8f8a1a286ea509ee\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/82d80adf16ca731472502a3406d19e794fa86158\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/82d80adf16ca731472502a3406d19e794fa86158\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/82d80adf16ca731472502a3406d19e794fa86158\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/82d80adf16ca731472502a3406d19e794fa86158/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f478dfb87923303f7125c8d0c8a2e95d75175d66\"}]},{\"sha\":\"f54c96dc1c417ec72051295692f104a0139d9133\",\"node_id\":\"C_kwDOA71kIdoAKGY1NGM5NmRjMWM0MTdlYzcyMDUxMjk1NjkyZjEwNGEwMTM5ZDkxMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:21:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:21:11Z\"},\"message\":\"updated
        syncedlyrics\",\"tree\":{\"sha\":\"c4b0836adb1527c2e816985369159a4a411d598c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c4b0836adb1527c2e816985369159a4a411d598c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f54c96dc1c417ec72051295692f104a0139d9133\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f54c96dc1c417ec72051295692f104a0139d9133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f54c96dc1c417ec72051295692f104a0139d9133\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f54c96dc1c417ec72051295692f104a0139d9133/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"82d80adf16ca731472502a3406d19e794fa86158\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/82d80adf16ca731472502a3406d19e794fa86158\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/82d80adf16ca731472502a3406d19e794fa86158\"}]},{\"sha\":\"dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"node_id\":\"C_kwDOA71kIdoAKGRjYTEwMjVjMDk1ZWIzMzNjN2IxZWM1NzNmY2I4MjVhNmUzYzVmYzc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:29:50Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:29:50Z\"},\"message\":\"more
        improvements to lyrics providers\",\"tree\":{\"sha\":\"7397472573076e950ff2a7d35b6bb6734163f82c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7397472573076e950ff2a7d35b6bb6734163f82c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f54c96dc1c417ec72051295692f104a0139d9133\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f54c96dc1c417ec72051295692f104a0139d9133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f54c96dc1c417ec72051295692f104a0139d9133\"}]},{\"sha\":\"443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"node_id\":\"C_kwDOA71kIdoAKDQ0M2U4OGQwYTE3ZGYyYjhjNmY1MWRmYjczZmQ2NzBkYjc2ODA2OGE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:43:09Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:43:09Z\"},\"message\":\"ignore
        kado - tired eyes when testing song matching\",\"tree\":{\"sha\":\"6df980d90462c35c7391a9fe95de6f00e1e0af92\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6df980d90462c35c7391a9fe95de6f00e1e0af92\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\"}]},{\"sha\":\"ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"node_id\":\"C_kwDOA71kIdoAKGZmY2YyMzAzYjRlMDg0N2Y0MDljOGY1NDA3NzRmZGFiNjMzMjhlZTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:50:47Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-06T14:50:47Z\"},\"message\":\"v4.1.4\",\"tree\":{\"sha\":\"6df980d90462c35c7391a9fe95de6f00e1e0af92\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6df980d90462c35c7391a9fe95de6f00e1e0af92\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkLtxHCRBK7hj4Ov3rIwAAQXAIAIb+8FgxBdzZdBbDD8ABMAN2\\ntIwuizoVSp+LCBEkw0CP7BuNBclj+VCMkwrUgOpBMEL7C45vAS+ctKPlk7pxYkNX\\nSkvy+p9QwuOgcyZlC/DUvBxqQ5LSkFMBbW+2TfuNla8asUgK3nuglUbvEz2FC32e\\nV1mL2XfRKuSFjmKk8dKTSF0ZXF6a6LzHTLgK1yrp3Up0dgAT/g7ne9eI36kseoEn\\nbBQTIdGmrIdVSKCIpWJsTo7BesGWOYSvRCmO22U3HUqiRjBQjzi9mU3iwxJwdgJx\\nKiErCfbj3t4tUAFB1Ux6DKVAm8cxyGeHcwFcQHMgqtOuRqnjzlB0MfZe/yO3khE=\\n=BskX\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 6df980d90462c35c7391a9fe95de6f00e1e0af92\\nparent
        ff37ff7e8e92307837c0afa746e37e0639a0f9a8\\nparent 443e88d0a17df2b8c6f51dfb73fd670db768068a\\nauthor
        kuba <xnetcat.dev@gmail.com> 1680792647 +0200\\ncommitter GitHub <noreply@github.com>
        1680792647 +0200\\n\\nv4.1.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\"},{\"sha\":\"443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/443e88d0a17df2b8c6f51dfb73fd670db768068a\"}]},{\"sha\":\"9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"node_id\":\"C_kwDOA71kIdoAKDljMmMzYzhiODQ1ZWE2YWUzNDZlNTRlNDQzNzQ3YWNiNzZlZjc0MTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:28:02Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:28:02Z\"},\"message\":\"added
        donate section\",\"tree\":{\"sha\":\"68669303a8eef8009e516d3f0d967e1a5f0a5bb3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/68669303a8eef8009e516d3f0d967e1a5f0a5bb3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ffcf2303b4e0847f409c8f540774fdab63328ee3\"}]},{\"sha\":\"a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"node_id\":\"C_kwDOA71kIdoAKGE0NzA1NDcyMTFmZjg3ZDliYWM2N2ViNGJjZmNlNjU4OGZiNzUzYTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:41:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:41:55Z\"},\"message\":\"Squashed
        commit of the following:\\n\\ncommit 9c2c3c8b845ea6ae346e54e443747acb76ef7419\\nAuthor:
        kuba <xnetcat.dev@gmail.com>\\nDate:   Thu Apr 6 17:28:02 2023 +0200\\n\\n
        \   added donate section\\n\\ncommit ffcf2303b4e0847f409c8f540774fdab63328ee3\\nMerge:
        ff37ff7 443e88d\\nAuthor: kuba <xnetcat.dev@gmail.com>\\nDate:   Thu Apr 6
        16:50:47 2023 +0200\\n\\n    v4.1.4\",\"tree\":{\"sha\":\"68669303a8eef8009e516d3f0d967e1a5f0a5bb3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/68669303a8eef8009e516d3f0d967e1a5f0a5bb3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/443e88d0a17df2b8c6f51dfb73fd670db768068a\"}]},{\"sha\":\"ee319ccef843f78d41f22f03d431765a47899db1\",\"node_id\":\"C_kwDOA71kIdoAKGVlMzE5Y2NlZjg0M2Y3OGQ0MWYyMmYwM2Q0MzE3NjVhNDc4OTlkYjE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T14:32:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T14:32:44Z\"},\"message\":\"check
        if song has track number\",\"tree\":{\"sha\":\"f919997f4666149a9c0dadce01aece0aad0ce16a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f919997f4666149a9c0dadce01aece0aad0ce16a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ee319ccef843f78d41f22f03d431765a47899db1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ee319ccef843f78d41f22f03d431765a47899db1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ee319ccef843f78d41f22f03d431765a47899db1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ee319ccef843f78d41f22f03d431765a47899db1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a470547211ff87d9bac67eb4bcfce6588fb753a9\"}]},{\"sha\":\"2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"node_id\":\"C_kwDOA71kIdoAKDJhNzFjNmE2MTQyOTFkMjEwZDc5OGY3ZDFiNjkxNTM5Y2JiZTgxZDU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T17:29:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T17:31:11Z\"},\"message\":\"catch
        more unexpected exceptions when downloading songs\",\"tree\":{\"sha\":\"4f53e13e552a013cb26ce977a29fad1593ee4e66\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f53e13e552a013cb26ce977a29fad1593ee4e66\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ee319ccef843f78d41f22f03d431765a47899db1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ee319ccef843f78d41f22f03d431765a47899db1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ee319ccef843f78d41f22f03d431765a47899db1\"}]},{\"sha\":\"75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"node_id\":\"C_kwDOA71kIdoAKDc1ZmJmOGIwMWYyZGEyZDczM2NhZDgzZWVhOTk1ZTVkZTA2YzA5MmE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:22:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:22:01Z\"},\"message\":\"bump
        version to v4.1.5\",\"tree\":{\"sha\":\"59a8a1cdcec0cfcf7c69470b0483917f4797ef4e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/59a8a1cdcec0cfcf7c69470b0483917f4797ef4e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a71c6a614291d210d798f7d1b691539cbbe81d5\"}]},{\"sha\":\"99032688da705166973336e05d9bf0b6cf74877f\",\"node_id\":\"C_kwDOA71kIdoAKDk5MDMyNjg4ZGE3MDUxNjY5NzMzMzZlMDVkOWJmMGI2Y2Y3NDg3N2Y\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:25:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:25:28Z\"},\"message\":\"updated
        link to cookie.txt extension\",\"tree\":{\"sha\":\"28c72a2bd47a56176f1975b999058d139b1b5f88\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/28c72a2bd47a56176f1975b999058d139b1b5f88\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/99032688da705166973336e05d9bf0b6cf74877f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/99032688da705166973336e05d9bf0b6cf74877f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/99032688da705166973336e05d9bf0b6cf74877f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/99032688da705166973336e05d9bf0b6cf74877f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/75fbf8b01f2da2d733cad83eea995e5de06c092a\"}]},{\"sha\":\"1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"node_id\":\"C_kwDOA71kIdoAKDFiZDQ3MjdiMzA3YWU1MDY4YmI3ZmNhZWJmNWE2NGVmODY5YWU4ZTI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:26:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:26:15Z\"},\"message\":\"removed
        unused import\",\"tree\":{\"sha\":\"9ca80f5c45043ef9f41d94e0091254a4027e0b05\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9ca80f5c45043ef9f41d94e0091254a4027e0b05\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"99032688da705166973336e05d9bf0b6cf74877f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/99032688da705166973336e05d9bf0b6cf74877f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/99032688da705166973336e05d9bf0b6cf74877f\"}]},{\"sha\":\"49965114249c50fba44283d27a67071ad9e3e9d1\",\"node_id\":\"C_kwDOA71kIdoAKDQ5OTY1MTE0MjQ5YzUwZmJhNDQyODNkMjdhNjcwNzFhZDllM2U5ZDE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:28:32Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:28:32Z\"},\"message\":\"disabled
        Ai kamano - \u87BA\u65CB\u306E\u5854 from tests\",\"tree\":{\"sha\":\"f9e8d53ce10e3b8b546ee7ac5d48e4d64d79186d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f9e8d53ce10e3b8b546ee7ac5d48e4d64d79186d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/49965114249c50fba44283d27a67071ad9e3e9d1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49965114249c50fba44283d27a67071ad9e3e9d1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49965114249c50fba44283d27a67071ad9e3e9d1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49965114249c50fba44283d27a67071ad9e3e9d1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\"}]},{\"sha\":\"c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"node_id\":\"C_kwDOA71kIdoAKGM1YjE4YzhkZTE3NzdkNDA2NTk5YzEwMmUyMWM3YmM2NGQzZjRjY2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:50:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:50:15Z\"},\"message\":\"use
        correct album artist when embedding metadata\",\"tree\":{\"sha\":\"aae722293663aa86203707d1fa74a1765fd8eabb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/aae722293663aa86203707d1fa74a1765fd8eabb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"49965114249c50fba44283d27a67071ad9e3e9d1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49965114249c50fba44283d27a67071ad9e3e9d1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49965114249c50fba44283d27a67071ad9e3e9d1\"}]},{\"sha\":\"c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"node_id\":\"C_kwDOA71kIdoAKGMwMmNjODMwZjZmMjU0YjFiZDRiZjlmOTgzYjM4OTIzZmJhYmVlMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:23:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:23:26Z\"},\"message\":\"added
        ability to generate lrc files when using spotdl meta\",\"tree\":{\"sha\":\"c2580c08c24c65a5187f3d903d50f389307d8db7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c2580c08c24c65a5187f3d903d50f389307d8db7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\"}]},{\"sha\":\"86d3514d0e625e76ba415573585b566658a46d4a\",\"node_id\":\"C_kwDOA71kIdoAKDg2ZDM1MTRkMGU2MjVlNzZiYTQxNTU3MzU4NWI1NjY2NThhNDZkNGE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:28:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:28:12Z\"},\"message\":\"use
        .m3u8 file extension for m3u files by default\",\"tree\":{\"sha\":\"5cec8ff278a2d658ec478ddf2f23efdb33966417\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5cec8ff278a2d658ec478ddf2f23efdb33966417\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/86d3514d0e625e76ba415573585b566658a46d4a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86d3514d0e625e76ba415573585b566658a46d4a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86d3514d0e625e76ba415573585b566658a46d4a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86d3514d0e625e76ba415573585b566658a46d4a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c02cc830f6f254b1bd4bf9f983b38923fbabee33\"}]},{\"sha\":\"b137e1b54c9fc7264d631807959e86ed914ca668\",\"node_id\":\"C_kwDOA71kIdoAKGIxMzdlMWI1NGM5ZmM3MjY0ZDYzMTgwNzk1OWU4NmVkOTE0Y2E2Njg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:29:50Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:29:50Z\"},\"message\":\"Update
        usage.md\",\"tree\":{\"sha\":\"64a0a937909bc88f7361a19c0be38e64ab40b77c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/64a0a937909bc88f7361a19c0be38e64ab40b77c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b137e1b54c9fc7264d631807959e86ed914ca668\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b137e1b54c9fc7264d631807959e86ed914ca668\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b137e1b54c9fc7264d631807959e86ed914ca668\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b137e1b54c9fc7264d631807959e86ed914ca668/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"86d3514d0e625e76ba415573585b566658a46d4a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86d3514d0e625e76ba415573585b566658a46d4a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86d3514d0e625e76ba415573585b566658a46d4a\"}]},{\"sha\":\"cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"node_id\":\"C_kwDOA71kIdoAKGNiZjNmMmI0ODlhOTVkMzE1YzQ3MzliMGFlNDcxODc2NWEyY2YzNjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:31:46Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:31:46Z\"},\"message\":\"removed
        geo bypass option\",\"tree\":{\"sha\":\"cc5fab651e6ce791b2292d7eb60ecfdfd3d8d43d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cc5fab651e6ce791b2292d7eb60ecfdfd3d8d43d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b137e1b54c9fc7264d631807959e86ed914ca668\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b137e1b54c9fc7264d631807959e86ed914ca668\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b137e1b54c9fc7264d631807959e86ed914ca668\"}]},{\"sha\":\"e3a79490700837da7b342c569157c23ba004a133\",\"node_id\":\"C_kwDOA71kIdoAKGUzYTc5NDkwNzAwODM3ZGE3YjM0MmM1NjkxNTdjMjNiYTAwNGExMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T17:15:35Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T17:15:35Z\"},\"message\":\"embed
        synced lyrics to both sylt and uslt id3 tags\",\"tree\":{\"sha\":\"b35c53e5027c6107d2d64d07f3d2de626c114faa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b35c53e5027c6107d2d64d07f3d2de626c114faa\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e3a79490700837da7b342c569157c23ba004a133\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3a79490700837da7b342c569157c23ba004a133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3a79490700837da7b342c569157c23ba004a133\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3a79490700837da7b342c569157c23ba004a133/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cbf3f2b489a95d315c4739b0ae4718765a2cf365\"}]},{\"sha\":\"07e22814e0defed10097a59bbd8c48651125540f\",\"node_id\":\"C_kwDOA71kIdoAKDA3ZTIyODE0ZTBkZWZlZDEwMDk3YTU5YmJkOGM0ODY1MTEyNTU0MGY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T18:43:32Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:28:17Z\"},\"message\":\"copy
        all types of files when they are of the same type\\n\\nUpdate downloader.py\\n\\nUpdate
        downloader.py\",\"tree\":{\"sha\":\"6432552ffa5a0592d858de15e42cdd9c92d7604c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6432552ffa5a0592d858de15e42cdd9c92d7604c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/07e22814e0defed10097a59bbd8c48651125540f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/07e22814e0defed10097a59bbd8c48651125540f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/07e22814e0defed10097a59bbd8c48651125540f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/07e22814e0defed10097a59bbd8c48651125540f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e3a79490700837da7b342c569157c23ba004a133\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3a79490700837da7b342c569157c23ba004a133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3a79490700837da7b342c569157c23ba004a133\"}]},{\"sha\":\"180a606a170b5d6245fb42b164a08dc8583f640d\",\"node_id\":\"C_kwDOA71kIdoAKDE4MGE2MDZhMTcwYjVkNjI0NWZiNDJiMTY0YTA4ZGM4NTgzZjY0MGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:31:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:31:36Z\"},\"message\":\"changed
        error logs to debug in base lyrics provider\",\"tree\":{\"sha\":\"a19d0f08a37ede90d98513c7ec6d6f304c3e9b50\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a19d0f08a37ede90d98513c7ec6d6f304c3e9b50\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/180a606a170b5d6245fb42b164a08dc8583f640d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/180a606a170b5d6245fb42b164a08dc8583f640d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/180a606a170b5d6245fb42b164a08dc8583f640d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/180a606a170b5d6245fb42b164a08dc8583f640d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"07e22814e0defed10097a59bbd8c48651125540f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/07e22814e0defed10097a59bbd8c48651125540f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/07e22814e0defed10097a59bbd8c48651125540f\"}]},{\"sha\":\"925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"node_id\":\"C_kwDOA71kIdoAKDkyNWIyYzVlMDg4N2ZiYTFlNzQ2OGU2Yjk3ZDFmYmRiZWE1NDZhMGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:33:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:33:48Z\"},\"message\":\"Update
        test_matching.py\",\"tree\":{\"sha\":\"5438d0252602392f02c053b6ffd4c0b91d8b9333\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5438d0252602392f02c053b6ffd4c0b91d8b9333\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"180a606a170b5d6245fb42b164a08dc8583f640d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/180a606a170b5d6245fb42b164a08dc8583f640d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/180a606a170b5d6245fb42b164a08dc8583f640d\"}]},{\"sha\":\"6fc62a671c400ddb59f5fe4b457303550ef12332\",\"node_id\":\"C_kwDOA71kIdoAKDZmYzYyYTY3MWM0MDBkZGI1OWY1ZmU0YjQ1NzMwMzU1MGVmMTIzMzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-16T10:02:05Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-16T10:02:05Z\"},\"message\":\"updated
        docs regarding url operation\",\"tree\":{\"sha\":\"47d534bf6695ac8dc782e18e8a534ae9146ea421\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/47d534bf6695ac8dc782e18e8a534ae9146ea421\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6fc62a671c400ddb59f5fe4b457303550ef12332/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\"}]},{\"sha\":\"0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"node_id\":\"C_kwDOA71kIdoAKDBjNGNkMzZhMmNlYTVhYWVhOTI2MWQwZjY2NTYzNTRmZGQ0YjA3NzQ\",\"commit\":{\"author\":{\"name\":\"suchencjusz\",\"email\":\"sucheta348@gmail.com\",\"date\":\"2023-04-17T17:27:04Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-17T17:27:04Z\"},\"message\":\"Slider.kz
        audio provider (#1798)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"010577ee20d81e5393bce29235f0bcf9ff900b3e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/010577ee20d81e5393bce29235f0bcf9ff900b3e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkPYFoCRBK7hj4Ov3rIwAALjMIAAudovEriaYhlS4tJCsgWiAU\\ndXxJIq+sC5swB96kq2ByeOqCvWduvltKlKBMdFVLsPyLJ+EydvS6kJIe8zsMcLoN\\nB6QI+3qmy65toE7g7uJcUm6WlCMnD1Cp72zckoTkvvGm5n+ZX1LzALhX/y+vucul\\nZqUXiODhlf0lg0Ft9zoT/gKOTh0ekR24r7K+xdyF59PCrhbUvTLVG9k9ZQgs82dn\\n3qoechcOvIS5ge0ho/DOjEreLdzeXUb2gyQEhqHH4/ObZaklua8rK8xO/ZzVHqb1\\nMJL4PiG94qt6Xv0n3j01gH9uzsTXlxvCw+jwyvZLZyrwVlFyriUHD978pQBIHok=\\n=dOl0\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 010577ee20d81e5393bce29235f0bcf9ff900b3e\\nparent
        925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\\nauthor suchencjusz <sucheta348@gmail.com>
        1681752424 +0200\\ncommitter GitHub <noreply@github.com> 1681752424 +0200\\n\\nSlider.kz
        audio provider (#1798)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774/comments\",\"author\":{\"login\":\"suchencjusz\",\"id\":34921955,\"node_id\":\"MDQ6VXNlcjM0OTIxOTU1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/34921955?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/suchencjusz\",\"html_url\":\"https://github.com/suchencjusz\",\"followers_url\":\"https://api.github.com/users/suchencjusz/followers\",\"following_url\":\"https://api.github.com/users/suchencjusz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/suchencjusz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/suchencjusz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/suchencjusz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/suchencjusz/orgs\",\"repos_url\":\"https://api.github.com/users/suchencjusz/repos\",\"events_url\":\"https://api.github.com/users/suchencjusz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/suchencjusz/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\"}]},{\"sha\":\"1b0af5eef1a466d303f354f39011285c2f806308\",\"node_id\":\"C_kwDOA71kIdoAKDFiMGFmNWVlZjFhNDY2ZDMwM2YzNTRmMzkwMTEyODVjMmY4MDYzMDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T17:27:16Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T17:27:16Z\"},\"message\":\"Merge
        branch 'dev' of https://github.com/spotDL/spotify-downloader into dev\",\"tree\":{\"sha\":\"69ca5fd0822ec9e3e5cf072b3020c170f41bfbd9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/69ca5fd0822ec9e3e5cf072b3020c170f41bfbd9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1b0af5eef1a466d303f354f39011285c2f806308\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b0af5eef1a466d303f354f39011285c2f806308\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1b0af5eef1a466d303f354f39011285c2f806308\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b0af5eef1a466d303f354f39011285c2f806308/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6fc62a671c400ddb59f5fe4b457303550ef12332\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6fc62a671c400ddb59f5fe4b457303550ef12332\"},{\"sha\":\"0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\"}]},{\"sha\":\"451950fe59db4a6c443859ff871edd0cd6511dd4\",\"node_id\":\"C_kwDOA71kIdoAKDQ1MTk1MGZlNTlkYjRhNmM0NDM4NTlmZjg3MWVkZDBjZDY1MTFkZDQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:36Z\"},\"message\":\"re-added
        slider-kz to audio providers\",\"tree\":{\"sha\":\"87a75dabfd8d46e7d31aaf1e174f729055e32567\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/87a75dabfd8d46e7d31aaf1e174f729055e32567\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/451950fe59db4a6c443859ff871edd0cd6511dd4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1b0af5eef1a466d303f354f39011285c2f806308\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b0af5eef1a466d303f354f39011285c2f806308\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1b0af5eef1a466d303f354f39011285c2f806308\"}]},{\"sha\":\"a6323e96b911a07cd4b5140c2573464a7804d540\",\"node_id\":\"C_kwDOA71kIdoAKGE2MzIzZTk2YjkxMWEwN2NkNGI1MTQwYzI1NzM0NjRhNzgwNGQ1NDA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:54Z\"},\"message\":\"cleaned
        up the code\",\"tree\":{\"sha\":\"9928a3649087e7dff356cdfb1c8eceddf01995cb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9928a3649087e7dff356cdfb1c8eceddf01995cb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a6323e96b911a07cd4b5140c2573464a7804d540\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6323e96b911a07cd4b5140c2573464a7804d540\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6323e96b911a07cd4b5140c2573464a7804d540\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6323e96b911a07cd4b5140c2573464a7804d540/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"451950fe59db4a6c443859ff871edd0cd6511dd4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/451950fe59db4a6c443859ff871edd0cd6511dd4\"}]},{\"sha\":\"e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"node_id\":\"C_kwDOA71kIdoAKGU0Yzc2Njc5YTE3MWY0Y2VhM2M2OWY4YjJhYzg3OGFlMTg1Y2RmMTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:18Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:18Z\"},\"message\":\"simplified
        slider.kz audio provider\",\"tree\":{\"sha\":\"87e77646bb0167a6b9af8dca54d624266d67c382\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/87e77646bb0167a6b9af8dca54d624266d67c382\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a6323e96b911a07cd4b5140c2573464a7804d540\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6323e96b911a07cd4b5140c2573464a7804d540\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6323e96b911a07cd4b5140c2573464a7804d540\"}]},{\"sha\":\"e5ba678faeeaa490c02c5840027777bffc7f2466\",\"node_id\":\"C_kwDOA71kIdoAKGU1YmE2NzhmYWVlYWE0OTBjMDJjNTg0MDAyNzc3N2JmZmM3ZjI0NjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:48Z\"},\"message\":\"added
        check for forbidden words\",\"tree\":{\"sha\":\"bd72db674f7313da3da514caf78a2f8986276d52\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bd72db674f7313da3da514caf78a2f8986276d52\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e5ba678faeeaa490c02c5840027777bffc7f2466/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\"}]},{\"sha\":\"59277e0cd62d98344671078576aa2689deb0750f\",\"node_id\":\"C_kwDOA71kIdoAKDU5Mjc3ZTBjZDYyZDk4MzQ0NjcxMDc4NTc2YWEyNjg5ZGViMDc1MGY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:27:35Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:27:35Z\"},\"message\":\"lower
        name match even more for forbidden words\",\"tree\":{\"sha\":\"1608fb7fd757e128e40ac6fca61c36c82f6e10a4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1608fb7fd757e128e40ac6fca61c36c82f6e10a4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/59277e0cd62d98344671078576aa2689deb0750f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e5ba678faeeaa490c02c5840027777bffc7f2466\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e5ba678faeeaa490c02c5840027777bffc7f2466\"}]},{\"sha\":\"1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"node_id\":\"C_kwDOA71kIdoAKDFhODU0ODk1YjlhNDA4N2FiNzk1ZDBlOTg4NGZjMzQ3YjkyZDhmNzY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:38:11Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-17T18:38:11Z\"},\"message\":\"v4.1.5\",\"tree\":{\"sha\":\"1608fb7fd757e128e40ac6fca61c36c82f6e10a4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1608fb7fd757e128e40ac6fca61c36c82f6e10a4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkPZITCRBK7hj4Ov3rIwAA4WIIAG6rWXcFHfXoAOjpuCNP95if\\nHqRKyJfjoJ/7Bu0u8ttamj0fXWQHfnvsbJPZ/zxpusCWSRdRfDNeo9WiN+BbiRhX\\nTC3kzwUyqPhuMojVIPBheX4elXCpEvoB45c4x3cGyHpUBvP3KVGYM29z096/0CCM\\njF/qVEpBPNy4KtZkv+BFj04bcSWFj0n8jNwAy76KckA+hbtl23pJjJzU4HS7aFpZ\\nNOHIM9DNd+tlCBATz/sPCdsJrZHPI/vk3vJom9/EG0Tv9w1rDJrVo7THFkk2h8qk\\n3xQr7eRgk3gELg1XWo4rada06keI71W9sCNaYpDeYHB3vgtnFg4Wt9zV8LYoTS0=\\n=I3Y5\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 1608fb7fd757e128e40ac6fca61c36c82f6e10a4\\nparent
        9c2c3c8b845ea6ae346e54e443747acb76ef7419\\nparent 59277e0cd62d98344671078576aa2689deb0750f\\nauthor
        kuba <xnetcat.dev@gmail.com> 1681756691 +0200\\ncommitter GitHub <noreply@github.com>
        1681756691 +0200\\n\\nv4.1.5\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9c2c3c8b845ea6ae346e54e443747acb76ef7419\"},{\"sha\":\"59277e0cd62d98344671078576aa2689deb0750f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/59277e0cd62d98344671078576aa2689deb0750f\"}]},{\"sha\":\"d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"node_id\":\"C_kwDOA71kIdoAKGQ0OWNmZDNhYzgwYWRkOWIxNjcwMjM4OGY5ZmRjZmIyZWQzN2YzMjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:24:08Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:24:08Z\"},\"message\":\"use
        shutil to move the file\",\"tree\":{\"sha\":\"0d9827967339c3a9ea752680d5f3f13702d4f909\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0d9827967339c3a9ea752680d5f3f13702d4f909\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"59277e0cd62d98344671078576aa2689deb0750f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/59277e0cd62d98344671078576aa2689deb0750f\"}]},{\"sha\":\"0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"node_id\":\"C_kwDOA71kIdoAKDBjZDVjYTMzZWY5ZWZiZTM4MmRkM2FjNjdmNTYwOTQ1NTg0OGQ0NTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:32:40Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:32:40Z\"},\"message\":\"bump
        version to v4.1.6\",\"tree\":{\"sha\":\"8166de39ded53c267ab4512a0e55fcd2b38752ba\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8166de39ded53c267ab4512a0e55fcd2b38752ba\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\"}]},{\"sha\":\"b624e6f338a33bc177ef57f074b6118f77455f5f\",\"node_id\":\"C_kwDOA71kIdoAKGI2MjRlNmYzMzhhMzNiYzE3N2VmNTdmMDc0YjYxMThmNzc0NTVmNWY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:56:18Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-17T19:56:18Z\"},\"message\":\"v4.1.6\",\"tree\":{\"sha\":\"8166de39ded53c267ab4512a0e55fcd2b38752ba\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8166de39ded53c267ab4512a0e55fcd2b38752ba\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkPaRiCRBK7hj4Ov3rIwAAEO4IAAgZ4QpLI65FAqFApZQyh0dg\\nxE4Vc7ItuB2DXDAZ9i5IamdTTWjOhk/GY/Wag7KZjmHmwopHivwtma88XxMZvD32\\nwTN8VXgy4sI/oQb4PeeePtRA7Vn+0eTFvHpVOtz8MNomrWQb9a4btFRSvBDYfZd7\\nQDlO9eT30qLt7z5b3p/GwnjD4ed0I1hLt6YJMxWZRUi5mOEPclWn5NaYHaYvOPOd\\nZdEZDuh9aWyNjaJ2wYiD2SgS9m1CkTCAAJF/qve1F3BSeVtXjDvgnnNlQmr6tnYE\\n++NslQNphD5wKzdIJnnuuSqNnu0q2MF9mirMaEOs4QOuSil2DP1yaRGjNk/z7xI=\\n=dEY8\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8166de39ded53c267ab4512a0e55fcd2b38752ba\\nparent
        1a854895b9a4087ab795d0e9884fc347b92d8f76\\nparent 0cd5ca33ef9efbe382dd3ac67f5609455848d457\\nauthor
        kuba <xnetcat.dev@gmail.com> 1681761378 +0200\\ncommitter GitHub <noreply@github.com>
        1681761378 +0200\\n\\nv4.1.6\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b624e6f338a33bc177ef57f074b6118f77455f5f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a854895b9a4087ab795d0e9884fc347b92d8f76\"},{\"sha\":\"0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0cd5ca33ef9efbe382dd3ac67f5609455848d457\"}]},{\"sha\":\"bfc3058f38cdee383bb727083054edd938384ec1\",\"node_id\":\"C_kwDOA71kIdoAKGJmYzMwNThmMzhjZGVlMzgzYmI3MjcwODMwNTRlZGQ5MzgzODRlYzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:20:43Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:20:43Z\"},\"message\":\"fixed
        missing data error when using youtube ur\",\"tree\":{\"sha\":\"55eb59b457a3c4140eafa1e24006a08d6b462403\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/55eb59b457a3c4140eafa1e24006a08d6b462403\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bfc3058f38cdee383bb727083054edd938384ec1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bfc3058f38cdee383bb727083054edd938384ec1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bfc3058f38cdee383bb727083054edd938384ec1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bfc3058f38cdee383bb727083054edd938384ec1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0cd5ca33ef9efbe382dd3ac67f5609455848d457\"}]},{\"sha\":\"f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"node_id\":\"C_kwDOA71kIdoAKGYyM2FkZDIyYTNhZTIzOGE0ZmFlMGRjOWVhMGI3MDI3OTM0ODM2ZGI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:23:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:23:55Z\"},\"message\":\"create
        tracker after reinit\",\"tree\":{\"sha\":\"8c48d0181d024998d59a2064391450b36558b403\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8c48d0181d024998d59a2064391450b36558b403\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bfc3058f38cdee383bb727083054edd938384ec1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bfc3058f38cdee383bb727083054edd938384ec1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bfc3058f38cdee383bb727083054edd938384ec1\"}]},{\"sha\":\"9846afa5bee7c93035729572f890f73e634dc0ed\",\"node_id\":\"C_kwDOA71kIdoAKDk4NDZhZmE1YmVlN2M5MzAzNTcyOTU3MmY4OTBmNzNlNjM0ZGMwZWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:37:27Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:37:27Z\"},\"message\":\"updated
        project dependencies\",\"tree\":{\"sha\":\"fb545d36869adc6d08982462ddd70a58e0d7b2a7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/fb545d36869adc6d08982462ddd70a58e0d7b2a7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9846afa5bee7c93035729572f890f73e634dc0ed\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9846afa5bee7c93035729572f890f73e634dc0ed\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9846afa5bee7c93035729572f890f73e634dc0ed\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9846afa5bee7c93035729572f890f73e634dc0ed/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f23add22a3ae238a4fae0dc9ea0b7027934836db\"}]},{\"sha\":\"d0d1d672696f114d630fe5a527a02840a19526e6\",\"node_id\":\"C_kwDOA71kIdoAKGQwZDFkNjcyNjk2ZjExNGQ2MzBmZTVhNTI3YTAyODQwYTE5NTI2ZTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:17:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:17:59Z\"},\"message\":\"added
        option to only use verified results\",\"tree\":{\"sha\":\"62cdc277cb195478e6c0c96d85efc2be0ab9c773\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/62cdc277cb195478e6c0c96d85efc2be0ab9c773\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d0d1d672696f114d630fe5a527a02840a19526e6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d0d1d672696f114d630fe5a527a02840a19526e6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d0d1d672696f114d630fe5a527a02840a19526e6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d0d1d672696f114d630fe5a527a02840a19526e6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9846afa5bee7c93035729572f890f73e634dc0ed\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9846afa5bee7c93035729572f890f73e634dc0ed\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9846afa5bee7c93035729572f890f73e634dc0ed\"}]},{\"sha\":\"b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"node_id\":\"C_kwDOA71kIdoAKGIwMmZkYmM0ZjUwMTRhN2I5NDgzODk0MzI3NDlhYjE5YWZjNGMyNGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:19:04Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:19:04Z\"},\"message\":\"bump
        version to v4.1.7\",\"tree\":{\"sha\":\"84ed147084e14ca169701ca2d7ec8dafec457ae7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/84ed147084e14ca169701ca2d7ec8dafec457ae7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d0d1d672696f114d630fe5a527a02840a19526e6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d0d1d672696f114d630fe5a527a02840a19526e6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d0d1d672696f114d630fe5a527a02840a19526e6\"}]},{\"sha\":\"a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"node_id\":\"C_kwDOA71kIdoAKGExMmM5ZDljN2JhNjUzZGIxZTBiM2ExNzExOTY2ZWU3NjdkMWNlMDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:44Z\"},\"message\":\"added
        option to sync without deleting new songs\",\"tree\":{\"sha\":\"d213a6f51381fcc774382263343fa93f4f4d8ec5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d213a6f51381fcc774382263343fa93f4f4d8ec5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b02fdbc4f5014a7b948389432749ab19afc4c24d\"}]},{\"sha\":\"c8337226feea121018d56861dbb87c79fc1660a9\",\"node_id\":\"C_kwDOA71kIdoAKGM4MzM3MjI2ZmVlYTEyMTAxOGQ1Njg2MWRiYjg3Yzc5ZmMxNjYwYTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:52Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:52Z\"},\"message\":\"updated
        docs\",\"tree\":{\"sha\":\"0b9bfed1bf7fee6aaff6224324983b62890e82f9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0b9bfed1bf7fee6aaff6224324983b62890e82f9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c8337226feea121018d56861dbb87c79fc1660a9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c8337226feea121018d56861dbb87c79fc1660a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c8337226feea121018d56861dbb87c79fc1660a9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c8337226feea121018d56861dbb87c79fc1660a9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\"}]},{\"sha\":\"55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"node_id\":\"C_kwDOA71kIdoAKDU1MTY1YmIxYjVhMGZiNDBkMmU1MjE3NDQ3Y2YwOWYyMjdkZTBiOWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:51:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:51:55Z\"},\"message\":\"added
        option to change the max filename length\",\"tree\":{\"sha\":\"b024d085238f40403c35c180df2bb21f5ec74946\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b024d085238f40403c35c180df2bb21f5ec74946\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c8337226feea121018d56861dbb87c79fc1660a9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c8337226feea121018d56861dbb87c79fc1660a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c8337226feea121018d56861dbb87c79fc1660a9\"}]},{\"sha\":\"7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"node_id\":\"C_kwDOA71kIdoAKDdmN2Q1MGU0Y2QyZjBkYWM1YTMyODg4ZjU4OWFmNjhhYWM2OWYzYWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T17:52:19Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T17:52:19Z\"},\"message\":\"added
        option to cache spotify requests\",\"tree\":{\"sha\":\"5abe7b2f5f563b22633e7683b2e8fe5a6708a67b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5abe7b2f5f563b22633e7683b2e8fe5a6708a67b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\"}]},{\"sha\":\"cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"node_id\":\"C_kwDOA71kIdoAKGNkMGZkOTU5ODlhNDFiN2QyNjc0Nzc4NWNiOWEwOWE0MTZhZDU3NDM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T18:04:25Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T18:04:25Z\"},\"message\":\"Update
        conftest.py\",\"tree\":{\"sha\":\"6f77efde4873404dc3f10e1a10892258e1397207\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6f77efde4873404dc3f10e1a10892258e1397207\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\"}]},{\"sha\":\"cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"node_id\":\"C_kwDOA71kIdoAKGNkYTNlYTE1YzY4YTRlOGM5ODViNjMwOGE0Mzc2MWUwYTc5ZDA2YzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T18:22:51Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-22T18:22:51Z\"},\"message\":\"v4.1.7\",\"tree\":{\"sha\":\"6f77efde4873404dc3f10e1a10892258e1397207\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6f77efde4873404dc3f10e1a10892258e1397207\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkRCX7CRBK7hj4Ov3rIwAAzeAIAEDo/Ph2TDfGO4LmamyIDXSd\\ntfv2+itM/GiZT3fzva/Ut4YGm9e5H3Uq2HevHdZ19ozAh5hpo1IoJTtnkP2xr6Ab\\nDsXlIuOC4mg2X+Q8erkdlr8KWIxB/iaQciX2gBgiZePQBmKviG7NSMt+jWJ7PltR\\nHD0iqPCjixj+Cn7s6qynJJsSOUH8eldipp1OAY40ZXWob+uinQVpiSoea5Z0Mei4\\naZz3aWrQF0Mi9u1xzr1QAK9EEeijoORNY/waiaODOxAcOR5O6RyRrvKjZ8AWdxkX\\neZbtoC+3ZGX0Yj2xpusYPgwQDs15+BKvFk7DTZ1fP/eyZcrHem7bjfFtZeZRUnw=\\n=LjLP\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 6f77efde4873404dc3f10e1a10892258e1397207\\nparent
        b624e6f338a33bc177ef57f074b6118f77455f5f\\nparent cd0fd95989a41b7d26747785cb9a09a416ad5743\\nauthor
        kuba <xnetcat.dev@gmail.com> 1682187771 +0200\\ncommitter GitHub <noreply@github.com>
        1682187771 +0200\\n\\nv4.1.7\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b624e6f338a33bc177ef57f074b6118f77455f5f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b624e6f338a33bc177ef57f074b6118f77455f5f\"},{\"sha\":\"cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cd0fd95989a41b7d26747785cb9a09a416ad5743\"}]},{\"sha\":\"6f075b6e96d6db338869789320f9fbee43e54837\",\"node_id\":\"C_kwDOA71kIdoAKDZmMDc1YjZlOTZkNmRiMzM4ODY5Nzg5MzIwZjlmYmVlNDNlNTQ4Mzc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:29:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:29:39Z\"},\"message\":\"check
        if time tags are actually time signatures\",\"tree\":{\"sha\":\"b3e9811c1df8ac4ef1bd201b36e32dc918ca2670\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b3e9811c1df8ac4ef1bd201b36e32dc918ca2670\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6f075b6e96d6db338869789320f9fbee43e54837\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f075b6e96d6db338869789320f9fbee43e54837\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f075b6e96d6db338869789320f9fbee43e54837\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f075b6e96d6db338869789320f9fbee43e54837/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\"}]},{\"sha\":\"45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"node_id\":\"C_kwDOA71kIdoAKDQ1YWQ1MDM1NzQzMDUwMzAxZTZkN2Y2YzQ5Y2JjMzRhNjczNjZlZWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:21Z\"},\"message\":\"catch
        unexpected exceptions when getting lyrics\",\"tree\":{\"sha\":\"45f9799848b5820cb3154e3e144686df7cf5fe4a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/45f9799848b5820cb3154e3e144686df7cf5fe4a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6f075b6e96d6db338869789320f9fbee43e54837\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f075b6e96d6db338869789320f9fbee43e54837\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f075b6e96d6db338869789320f9fbee43e54837\"}]},{\"sha\":\"47832339274ff8229eb64d956071b26a3fd96786\",\"node_id\":\"C_kwDOA71kIdoAKDQ3ODMyMzM5Mjc0ZmY4MjI5ZWI2NGQ5NTYwNzFiMjZhM2ZkOTY3ODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:31Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:31Z\"},\"message\":\"bump
        version to v4.1.8\",\"tree\":{\"sha\":\"cd62c4d9d768533e5f3b57b071a84b7d0103adc1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd62c4d9d768533e5f3b57b071a84b7d0103adc1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/47832339274ff8229eb64d956071b26a3fd96786\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47832339274ff8229eb64d956071b26a3fd96786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/47832339274ff8229eb64d956071b26a3fd96786\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47832339274ff8229eb64d956071b26a3fd96786/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/45ad5035743050301e6d7f6c49cbc34a67366eeb\"}]},{\"sha\":\"ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"node_id\":\"C_kwDOA71kIdoAKGVkNmU4ZmFlYzQzMTExZDA0NDc4MzBmZTkxM2JhMzJmNWJiMzhmNTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T10:06:22Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T10:06:22Z\"},\"message\":\"rewritten
        file name creation logic for long file names\",\"tree\":{\"sha\":\"5d5a7ba0d40af9745090591f275a671ee1e88723\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5d5a7ba0d40af9745090591f275a671ee1e88723\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"47832339274ff8229eb64d956071b26a3fd96786\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47832339274ff8229eb64d956071b26a3fd96786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/47832339274ff8229eb64d956071b26a3fd96786\"}]},{\"sha\":\"7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"node_id\":\"C_kwDOA71kIdoAKDdkNjE2MGI0ODlmNzk1NGJjNjQ5ZWFhOTk1NzY1OGJkNWI3NWZlNTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T12:26:00Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T12:26:00Z\"},\"message\":\"keep
        the parent path when creating short path name\",\"tree\":{\"sha\":\"0a8a8360c5627310bc4702b6e2fb347416341b6a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0a8a8360c5627310bc4702b6e2fb347416341b6a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed6e8faec43111d0447830fe913ba32f5bb38f54\"}]},{\"sha\":\"841f95ab6d9b93527feba1652873865b19104885\",\"node_id\":\"C_kwDOA71kIdoAKDg0MWY5NWFiNmQ5YjkzNTI3ZmViYTE2NTI4NzM4NjViMTkxMDQ4ODU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:40:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:40:21Z\"},\"message\":\"don't
        use default template when formatting template\",\"tree\":{\"sha\":\"683c0ebcfc76da4ee004a3d95881f0c3658e0bb2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/683c0ebcfc76da4ee004a3d95881f0c3658e0bb2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/841f95ab6d9b93527feba1652873865b19104885\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/841f95ab6d9b93527feba1652873865b19104885\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/841f95ab6d9b93527feba1652873865b19104885\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/841f95ab6d9b93527feba1652873865b19104885/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d6160b489f7954bc649eaa9957658bd5b75fe58\"}]},{\"sha\":\"3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"node_id\":\"C_kwDOA71kIdoAKDMyOTNjODU5NmU4ZjA0NTNmOWE1MGFjNmE5ZjM3NWZiMjk2NGQ2YjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:47:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:47:12Z\"},\"message\":\"added
        support for spotify.link\",\"tree\":{\"sha\":\"155d022a5d8d0c9ef61ea47c489c71888c01d25f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/155d022a5d8d0c9ef61ea47c489c71888c01d25f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"841f95ab6d9b93527feba1652873865b19104885\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/841f95ab6d9b93527feba1652873865b19104885\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/841f95ab6d9b93527feba1652873865b19104885\"}]},{\"sha\":\"1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"node_id\":\"C_kwDOA71kIdoAKDExNzNiNjJkMGE5ZTU4MjNmNmU1ZDdkMTA2ZjEyZDg0MGUzNjBlODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T15:51:20Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T15:51:20Z\"},\"message\":\"updated
        syncedlyrics to v0.5.0\",\"tree\":{\"sha\":\"67e7f1d289bfdb04e9840bddb04ea5335b60f44e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/67e7f1d289bfdb04e9840bddb04ea5335b60f44e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\"}]},{\"sha\":\"06901adb6aa419733d06575daa89168ce89fa255\",\"node_id\":\"C_kwDOA71kIdoAKDA2OTAxYWRiNmFhNDE5NzMzZDA2NTc1ZGFhODkxNjhjZTg5ZmEyNTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T15:54:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-23T15:54:44Z\"},\"message\":\"v4.1.8\",\"tree\":{\"sha\":\"67e7f1d289bfdb04e9840bddb04ea5335b60f44e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/67e7f1d289bfdb04e9840bddb04ea5335b60f44e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkRVTECRBK7hj4Ov3rIwAAOjoIAAY3mLytmPn97CaV7v5OuSPT\\nxy7+E2ho9O1Clgq3GcXumDloT8NGwBMMnEef9VUOf2N4l1vaHkQN5z5BC2mDguQv\\nDuIlyd45IjZWcQUwqrJbaBqwiFzxm8EtJYViqg2ctW+GylFckvxqhu2MhVGvuGSK\\nAbsQu6YiH5ggT+RC17mD2y621Wq5zAllWMyRCubRx4pPjkXHPTFf68IfnFTNlnPx\\ndJimiohrUWEcLI9Okt78Vzlp+o3V+CEiCapcDcGphK1Sf1SrS+7odpdvSUgkF5Uq\\nO1AUsih0e5uzwY2K043S7kR6pNg73CD5Bm20+UYX4Ed1PhL+B+VRY9yMqCR62qo=\\n=+xX2\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 67e7f1d289bfdb04e9840bddb04ea5335b60f44e\\nparent
        cda3ea15c68a4e8c985b6308a43761e0a79d06c3\\nparent 1173b62d0a9e5823f6e5d7d106f12d840e360e86\\nauthor
        kuba <xnetcat.dev@gmail.com> 1682265284 +0200\\ncommitter GitHub <noreply@github.com>
        1682265284 +0200\\n\\nv4.1.8\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06901adb6aa419733d06575daa89168ce89fa255\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\"},{\"sha\":\"1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1173b62d0a9e5823f6e5d7d106f12d840e360e86\"}]},{\"sha\":\"3ba2f016da8914b85c6443b823ab43e508112807\",\"node_id\":\"C_kwDOA71kIdoAKDNiYTJmMDE2ZGE4OTE0Yjg1YzY0NDNiODIzYWI0M2U1MDgxMTI4MDc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:23:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:23:26Z\"},\"message\":\"fixed
        `KeyError` when downloading ytm playlists\",\"tree\":{\"sha\":\"cbf6174004c45ccef83b1d184467e9b8bcb599bf\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cbf6174004c45ccef83b1d184467e9b8bcb599bf\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3ba2f016da8914b85c6443b823ab43e508112807\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba2f016da8914b85c6443b823ab43e508112807\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba2f016da8914b85c6443b823ab43e508112807\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba2f016da8914b85c6443b823ab43e508112807/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06901adb6aa419733d06575daa89168ce89fa255\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06901adb6aa419733d06575daa89168ce89fa255\"}]},{\"sha\":\"2fe593bf831c7af24ad72817c53692ded21ff090\",\"node_id\":\"C_kwDOA71kIdoAKDJmZTU5M2JmODMxYzdhZjI0YWQ3MjgxN2M1MzY5MmRlZDIxZmYwOTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:29:46Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:29:46Z\"},\"message\":\"added
        support for links with language codes\",\"tree\":{\"sha\":\"3527b12647c18f224351700ae5bc30a257597b5a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3527b12647c18f224351700ae5bc30a257597b5a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2fe593bf831c7af24ad72817c53692ded21ff090\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2fe593bf831c7af24ad72817c53692ded21ff090\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2fe593bf831c7af24ad72817c53692ded21ff090\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2fe593bf831c7af24ad72817c53692ded21ff090/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3ba2f016da8914b85c6443b823ab43e508112807\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba2f016da8914b85c6443b823ab43e508112807\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba2f016da8914b85c6443b823ab43e508112807\"}]},{\"sha\":\"f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"node_id\":\"C_kwDOA71kIdoAKGY3MDY5NDhkOTU4MGExNTMzYTU5YThmYTM3MGRjYmIwYjE5Y2QxNGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:33:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:33:48Z\"},\"message\":\"bump
        version to v4.1.9\",\"tree\":{\"sha\":\"4f45c2195a4209ecdf8b0ab804380788fb436d76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f45c2195a4209ecdf8b0ab804380788fb436d76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2fe593bf831c7af24ad72817c53692ded21ff090\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2fe593bf831c7af24ad72817c53692ded21ff090\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2fe593bf831c7af24ad72817c53692ded21ff090\"}]},{\"sha\":\"9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"node_id\":\"C_kwDOA71kIdoAKDlkYTdkNWQwNWJhZWY1Yjg4YTRkNzU3NWNkNzZhZDYyZjdlMjI4ZDQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:50:14Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-01T11:50:14Z\"},\"message\":\"v4.1.9\",\"tree\":{\"sha\":\"4f45c2195a4209ecdf8b0ab804380788fb436d76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f45c2195a4209ecdf8b0ab804380788fb436d76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkT6d2CRBK7hj4Ov3rIwAAzFoIAFTc/PrvBuSq6n+s40g91DVf\\nA8s00YfaJ7ZPSfas9G/tkT8VqFPYxaZexOZbvk7XdBYADcTpatlx1tgz3uJ9VpDb\\nszcEhNcHTOSowUz7FP23mW5+esBoY42+s4vRwwwMbo7jcD2eMc1sLYFE1rwgsfA3\\nS2LfcTvxN4loeWXNdeAbF0nlaIdJNhvL+w/tslsr3rak7oM8VedwjuL0gp+BkeEq\\nu22ntXfqgFmksHBwn5Yr0b73NJyhtWWSAbT1/WEcMulJY7MhWK1LSwjHqiR7Hyp4\\nSqgi8p4Arlf5aE1Skp46DyLfSHgfpJYF4vXEPEtRELsSlmQtzxiaO+G14fB2NNA=\\n=9mmA\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 4f45c2195a4209ecdf8b0ab804380788fb436d76\\nparent
        06901adb6aa419733d06575daa89168ce89fa255\\nauthor kuba <xnetcat.dev@gmail.com>
        1682941814 +0200\\ncommitter GitHub <noreply@github.com> 1682941814 +0200\\n\\nv4.1.9\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06901adb6aa419733d06575daa89168ce89fa255\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06901adb6aa419733d06575daa89168ce89fa255\"}]},{\"sha\":\"9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"node_id\":\"C_kwDOA71kIdoAKDljZDZlOGY4NDk4YjE5ZWJlMmUwZWRhZDNjOTg1NzRjZmVlZjRlMmE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:56:41Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:56:41Z\"},\"message\":\"Merge
        branch 'master' into dev\",\"tree\":{\"sha\":\"4f45c2195a4209ecdf8b0ab804380788fb436d76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f45c2195a4209ecdf8b0ab804380788fb436d76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f706948d9580a1533a59a8fa370dcbb0b19cd14d\"},{\"sha\":\"9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\"}]},{\"sha\":\"d1e68ff27ddedfd666ce417242a071164934527c\",\"node_id\":\"C_kwDOA71kIdoAKGQxZTY4ZmYyN2RkZWRmZDY2NmNlNDE3MjQyYTA3MTE2NDkzNDUyN2M\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:02:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:02:48Z\"},\"message\":\"remove
        intl-xx from all spotify links\",\"tree\":{\"sha\":\"cd4073f3fb238e0dc60a14ec59f0e0550e6dddc8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd4073f3fb238e0dc60a14ec59f0e0550e6dddc8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d1e68ff27ddedfd666ce417242a071164934527c\",\"comment_count\":1,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d1e68ff27ddedfd666ce417242a071164934527c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d1e68ff27ddedfd666ce417242a071164934527c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d1e68ff27ddedfd666ce417242a071164934527c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\"}]},{\"sha\":\"3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"node_id\":\"C_kwDOA71kIdoAKDNlOGYzMmYxYzhjMmRhNmQ2MDFkOTA1MDY3ZWJmY2U5MGIyMWFhZWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:03:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:03:24Z\"},\"message\":\"v4.1.10\",\"tree\":{\"sha\":\"cd38d2564c751d34cd66f25ebb4de9feb8b45734\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd38d2564c751d34cd66f25ebb4de9feb8b45734\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d1e68ff27ddedfd666ce417242a071164934527c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d1e68ff27ddedfd666ce417242a071164934527c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d1e68ff27ddedfd666ce417242a071164934527c\"}]},{\"sha\":\"5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"node_id\":\"C_kwDOA71kIdoAKDVlZGMxNWUwNjc3YzAxZWMwZWYwOTNhOTc0ZmRjYzMwZmU4YmY1MDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:07:30Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-01T12:07:30Z\"},\"message\":\"v4.1.10\",\"tree\":{\"sha\":\"cd38d2564c751d34cd66f25ebb4de9feb8b45734\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd38d2564c751d34cd66f25ebb4de9feb8b45734\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkT6uCCRBK7hj4Ov3rIwAA/jQIAGj/Y2faaMHTj0IFwElZO0Dz\\nBW79De8/enxTkmiqjSB5RJSTsHS4laJVNGmiNJVug3eQKBD1dJyF3D/kDqInqsN1\\nM5QZwrnLu8Lo+oMVWj20lTCgjj7tmiB+dTXfwysba1rUwKM0XWZ/ortS99bdAfTX\\nbGqG3rX2to1AIdddl+RFyJa9ZIZEUcqtx8ngt7vJzB5aARFKrRFECXphWFTGksL8\\nIoUbHjECuc4AVi9ZWby8YbFeKklkkEyeiZ/rgYONSQvd3CuhC1vk6mxIMhqOxxYA\\n5WZEvFVZiYVOEQcJsMM6ZKEnv2r9xCoNw8LtKk17YegrpNm/43MxVC+R2Mac9EA=\\n=rOOd\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree cd38d2564c751d34cd66f25ebb4de9feb8b45734\\nparent
        9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\\nparent 3e8f32f1c8c2da6d601d905067ebfce90b21aaee\\nauthor
        kuba <xnetcat.dev@gmail.com> 1682942850 +0200\\ncommitter GitHub <noreply@github.com>
        1682942850 +0200\\n\\nv4.1.10\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\"},{\"sha\":\"3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\"}]},{\"sha\":\"ef2b647d762789a29ff48e1e98222a4691521e66\",\"node_id\":\"C_kwDOA71kIdoAKGVmMmI2NDdkNzYyNzg5YTI5ZmY0OGUxZTk4MjIyYTQ2OTE1MjFlNjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:13Z\"},\"message\":\"removed
        original date from id3 tags\",\"tree\":{\"sha\":\"66c9856979b7c3147f2b495c726ba161347e627d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/66c9856979b7c3147f2b495c726ba161347e627d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ef2b647d762789a29ff48e1e98222a4691521e66\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ef2b647d762789a29ff48e1e98222a4691521e66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ef2b647d762789a29ff48e1e98222a4691521e66\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ef2b647d762789a29ff48e1e98222a4691521e66/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\"}]},{\"sha\":\"7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"node_id\":\"C_kwDOA71kIdoAKDdkMTNlNTJmMTBhZTQ1YTRiMDIyZjA0NzAzOWE1ZWNkODRiY2NkNjI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:40Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:40Z\"},\"message\":\"formatted
        code\",\"tree\":{\"sha\":\"3a3f76840176dbed64f62b80182c222f399bb792\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3a3f76840176dbed64f62b80182c222f399bb792\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ef2b647d762789a29ff48e1e98222a4691521e66\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ef2b647d762789a29ff48e1e98222a4691521e66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ef2b647d762789a29ff48e1e98222a4691521e66\"}]},{\"sha\":\"7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"node_id\":\"C_kwDOA71kIdoAKDdiYTYyZWZhOWFlODI1MzMxN2RiZDhiOWUwN2E5MTcxMTllNzMxYWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:22:23Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:22:23Z\"},\"message\":\"fixed
        links on readthedocs\",\"tree\":{\"sha\":\"9a9d1f775b0d629414e00dd4c9befb22a98d6466\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9a9d1f775b0d629414e00dd4c9befb22a98d6466\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d13e52f10ae45a4b022f047039a5ecd84bccd62\"}]},{\"sha\":\"bb71d642defacbc71d974c7497cd23e654d4b934\",\"node_id\":\"C_kwDOA71kIdoAKGJiNzFkNjQyZGVmYWNiYzcxZDk3NGM3NDk3Y2QyM2U2NTRkNGI5MzQ\",\"commit\":{\"author\":{\"name\":\"Lia
        Chen\",\"email\":\"124116769+cordeliachen@users.noreply.github.com\",\"date\":\"2023-05-04T21:28:07Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-04T21:28:07Z\"},\"message\":\"Include
        Spotify Popularity in metadata for MP3 files (#1827)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"56f074feaca9d82d0c19d13ffd24dd53dbfd3863\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/56f074feaca9d82d0c19d13ffd24dd53dbfd3863\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bb71d642defacbc71d974c7497cd23e654d4b934\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkVCNnCRBK7hj4Ov3rIwAA/qgIAHKmL01LKSgrM1hP93fXt5XS\\nRNxFeuU8EsSf9wErYY/lKMAh33FhHwGzvDzUDtbGt2iRS4Q9sWYP6lYCg0k38GZ5\\nj35kZ2VP3WMVL0sVm6CjBDBGfEBqmdc16ohmk7RkY5RAjRDRFwJqckDNmCPJbrE0\\nkJzk3caexNpJUDLEPCOCcW2THb+lwWVRWyIyVMbPL8Puhzkry040LVwPYuK6yDzH\\n5zTG2owZYivPJ+8jb6D0gprB7BSWJVZJ1Wn2mq+o+e9C+0nCUmZUIWEzNya10sp5\\nXiQS5A6JB0ETj7jtmf2qqBnTXiHJhxmX53scJ9MZ/h7jkg6ak9WVlGylg10WsrM=\\n=kwzr\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 56f074feaca9d82d0c19d13ffd24dd53dbfd3863\\nparent
        7ba62efa9ae8253317dbd8b9e07a917119e731aa\\nauthor Lia Chen <124116769+cordeliachen@users.noreply.github.com>
        1683235687 -0400\\ncommitter GitHub <noreply@github.com> 1683235687 +0200\\n\\nInclude
        Spotify Popularity in metadata for MP3 files (#1827)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb71d642defacbc71d974c7497cd23e654d4b934\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb71d642defacbc71d974c7497cd23e654d4b934\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb71d642defacbc71d974c7497cd23e654d4b934/comments\",\"author\":{\"login\":\"cordeliachen\",\"id\":124116769,\"node_id\":\"U_kgDOB2XfIQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/124116769?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/cordeliachen\",\"html_url\":\"https://github.com/cordeliachen\",\"followers_url\":\"https://api.github.com/users/cordeliachen/followers\",\"following_url\":\"https://api.github.com/users/cordeliachen/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/cordeliachen/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/cordeliachen/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/cordeliachen/subscriptions\",\"organizations_url\":\"https://api.github.com/users/cordeliachen/orgs\",\"repos_url\":\"https://api.github.com/users/cordeliachen/repos\",\"events_url\":\"https://api.github.com/users/cordeliachen/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/cordeliachen/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ba62efa9ae8253317dbd8b9e07a917119e731aa\"}]},{\"sha\":\"581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"node_id\":\"C_kwDOA71kIdoAKDU4MTMzMDY5OWNmZTNiNjZjNjVmZDdmMDAwNWNlM2EyYzMzMGU5NTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:30:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:30:54Z\"},\"message\":\"bump
        version to v4.1.11\",\"tree\":{\"sha\":\"f81cd9164f8ed4bca1e139bf8fe6a2f5ad750b82\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f81cd9164f8ed4bca1e139bf8fe6a2f5ad750b82\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bb71d642defacbc71d974c7497cd23e654d4b934\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb71d642defacbc71d974c7497cd23e654d4b934\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb71d642defacbc71d974c7497cd23e654d4b934\"}]},{\"sha\":\"55644854b7752df8e1f1a219d3098e78ed0a7908\",\"node_id\":\"C_kwDOA71kIdoAKDU1NjQ0ODU0Yjc3NTJkZjhlMWYxYTIxOWQzMDk4ZTc4ZWQwYTc5MDg\",\"commit\":{\"author\":{\"name\":\"Shabinder
        Singh\",\"email\":\"owner@shabinder.in\",\"date\":\"2023-05-25T16:39:06Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-25T16:39:06Z\"},\"message\":\"Fix
        URL command usage in ReadME. (#1840)\",\"tree\":{\"sha\":\"96f30ca358ff15f301af3c0a066e6a0c3604de99\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/96f30ca358ff15f301af3c0a066e6a0c3604de99\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkb48qCRBK7hj4Ov3rIwAAcaoIAFoHGyyjhTkEu1YPGp8M6cmV\\nz4quP+pJipg2slycYDLgkUmsKaY4drwDxLtRdAlfZ5Qo8sObIiZpB7GjowrYx9ZE\\nZvCOn2fPwADjB7s2iKcOJfE0ix8xOzy2Nw5ozpLnd0wlb0LTn3tL98VfAs4Uezrp\\nxnQ6+tVFbN+nq25W87T0aj5/nQuypBNRrS0Ma6c3saS4IaKgOEeMyoqvsQg7ltrr\\nx5aS0ocuU5XSSwqaxeT++DlitfyTguB3qYfgMXlyjzERzR/L0oVj6LS33fyMZUoG\\nzDnBDY9v0vWJWwpWnhM/KxCO8nL1yUwsOT9Ef3VssTD68HfYu6+Kj4QaqcaGMKo=\\n=KA07\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 96f30ca358ff15f301af3c0a066e6a0c3604de99\\nparent
        581330699cfe3b66c65fd7f0005ce3a2c330e956\\nauthor Shabinder Singh <owner@shabinder.in>
        1685032746 +0530\\ncommitter GitHub <noreply@github.com> 1685032746 +0200\\n\\nFix
        URL command usage in ReadME. (#1840)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55644854b7752df8e1f1a219d3098e78ed0a7908/comments\",\"author\":{\"login\":\"Shabinder\",\"id\":44765050,\"node_id\":\"MDQ6VXNlcjQ0NzY1MDUw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/44765050?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Shabinder\",\"html_url\":\"https://github.com/Shabinder\",\"followers_url\":\"https://api.github.com/users/Shabinder/followers\",\"following_url\":\"https://api.github.com/users/Shabinder/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Shabinder/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Shabinder/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Shabinder/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Shabinder/orgs\",\"repos_url\":\"https://api.github.com/users/Shabinder/repos\",\"events_url\":\"https://api.github.com/users/Shabinder/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Shabinder/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/581330699cfe3b66c65fd7f0005ce3a2c330e956\"}]},{\"sha\":\"a15f7557753117e4701e6b70303c3847d449ab3b\",\"node_id\":\"C_kwDOA71kIdoAKGExNWY3NTU3NzUzMTE3ZTQ3MDFlNmI3MDMwM2MzODQ3ZDQ0OWFiM2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T16:59:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T16:59:59Z\"},\"message\":\"added
        update command to docs\",\"tree\":{\"sha\":\"3f892ce5cf5bd81b89f4a644bfefa7d51619c7e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3f892ce5cf5bd81b89f4a644bfefa7d51619c7e9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a15f7557753117e4701e6b70303c3847d449ab3b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a15f7557753117e4701e6b70303c3847d449ab3b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a15f7557753117e4701e6b70303c3847d449ab3b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a15f7557753117e4701e6b70303c3847d449ab3b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"55644854b7752df8e1f1a219d3098e78ed0a7908\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55644854b7752df8e1f1a219d3098e78ed0a7908\"}]},{\"sha\":\"6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"node_id\":\"C_kwDOA71kIdoAKDZmMGRlODdjMmIxNjdmMzdmMWJkNDJlZDA4NWQwNjU4ODgyZmQzNTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:14:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:14:30Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"a1a596d57359a43c85cf79c30d4d634a7f7f94c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a1a596d57359a43c85cf79c30d4d634a7f7f94c8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a15f7557753117e4701e6b70303c3847d449ab3b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a15f7557753117e4701e6b70303c3847d449ab3b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a15f7557753117e4701e6b70303c3847d449ab3b\"}]},{\"sha\":\"1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"node_id\":\"C_kwDOA71kIdoAKDEyMTc1OTVmYTllMDdkYTQ1ZTBkN2FjYzU3ZWQ1ZjUwMGU2ZjU2ZjI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:38:04Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:38:04Z\"},\"message\":\"check
        if we get less than 2 template parts\",\"tree\":{\"sha\":\"09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f0de87c2b167f37f1bd42ed085d0658882fd350\"}]},{\"sha\":\"1924fbe6d5fdc4cd9132464f377fce150750730e\",\"node_id\":\"C_kwDOA71kIdoAKDE5MjRmYmU2ZDVmZGM0Y2Q5MTMyNDY0ZjM3N2ZjZTE1MDc1MDczMGU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:45:01Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-25T17:45:01Z\"},\"message\":\"v4.11.0\",\"tree\":{\"sha\":\"09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkb56dCRBK7hj4Ov3rIwAAnsQIAI/9LDz+h77PUYYO52ybwED2\\nMsDitkHMteo0Vzqg5hU97R6duYUp6UNfqhnuavWeRTQRSd66cMtOypFjQIvB+oxU\\nfGG4Qgj4ByPighEseJgFlMe85fCjUuWTLTVb1S6zeSYhe0uka9k4thx/2V5kU5Rx\\nKakzkiiFtvfMJ52GuQZ6rfjSjrNLmv9gotYXVHvS3mIs1hBLyZsR912OmDsm5OWK\\n7uvfO1b3HotM/pEMtWiDpyo/7JodtEpJwcDZq9krLxt1tpqm3y33TMFpzVcFOpuO\\nyq+Xwgdx+LFFRoqrhjnXrwIDftM1OV3iYZLphB4XGKhjxSr3tmI/apr9c2LpzH8=\\n=7Yrj\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\\nparent
        5edc15e0677c01ec0ef093a974fdcc30fe8bf508\\nparent 1217595fa9e07da45e0d7acc57ed5f500e6f56f2\\nauthor
        kuba <xnetcat.dev@gmail.com> 1685036701 +0200\\ncommitter GitHub <noreply@github.com>
        1685036701 +0200\\n\\nv4.11.0\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\"},{\"sha\":\"1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\"}]},{\"sha\":\"fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"node_id\":\"C_kwDOA71kIdoAKGZjODE3YWQ5YmM2ZDQ1ZWQzMGZmMTFiMDRkMTc0ODdjNjRhY2ZkZTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-26T20:52:16Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"added
        links for more info about cookies\",\"tree\":{\"sha\":\"2fa2ccb5a6afa3b05c674728ba5985e12e2083d8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/2fa2ccb5a6afa3b05c674728ba5985e12e2083d8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1924fbe6d5fdc4cd9132464f377fce150750730e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1924fbe6d5fdc4cd9132464f377fce150750730e\"}]},{\"sha\":\"e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"node_id\":\"C_kwDOA71kIdoAKGU5ZGVlNGY1NWQwMGVmOWY1ZGQ3YTM5M2VmYzU5NzhjM2YwNDYxOWM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-03T23:40:38Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"even
        more improvements to file name creation func\",\"tree\":{\"sha\":\"58880668e12764729f3766253573480e70f87873\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/58880668e12764729f3766253573480e70f87873\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\"}]},{\"sha\":\"e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"node_id\":\"C_kwDOA71kIdoAKGU3ZmE4ZmM1NzU1NjMzMmNlYzdhOTFkMGZjYTAxMDgyMGY1ZmFiYjk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-03T23:40:50Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"adding
        support for wav files 1\",\"tree\":{\"sha\":\"607712fb3c7b9e714abbe2734dae5c463d48b68e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/607712fb3c7b9e714abbe2734dae5c463d48b68e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\"}]},{\"sha\":\"c1fb5089bc0b91250d38f705acc655908a6277f6\",\"node_id\":\"C_kwDOA71kIdoAKGMxZmI1MDg5YmMwYjkxMjUwZDM4ZjcwNWFjYzY1NTkwOGE2Mjc3ZjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:33:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"adding
        support for wav files 2\",\"tree\":{\"sha\":\"3d0b4dbe4776e6d343c45362a962a73f3217c986\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3d0b4dbe4776e6d343c45362a962a73f3217c986\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c1fb5089bc0b91250d38f705acc655908a6277f6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e7fa8fc57556332cec7a91d0fca010820f5fabb9\"}]},{\"sha\":\"c642e3605e41a024625945acfd40adde044c4887\",\"node_id\":\"C_kwDOA71kIdoAKGM2NDJlMzYwNWU0MWEwMjQ2MjU5NDVhY2ZkNDBhZGRlMDQ0YzQ4ODc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:33:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"bump
        version to v4.2.0\",\"tree\":{\"sha\":\"198a24326623d8f818d46dced6a609e5527adef0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/198a24326623d8f818d46dced6a609e5527adef0\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c642e3605e41a024625945acfd40adde044c4887\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c642e3605e41a024625945acfd40adde044c4887\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c642e3605e41a024625945acfd40adde044c4887\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c642e3605e41a024625945acfd40adde044c4887/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c1fb5089bc0b91250d38f705acc655908a6277f6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c1fb5089bc0b91250d38f705acc655908a6277f6\"}]},{\"sha\":\"4fd1be7713089641d1b73c48acf0849949c81491\",\"node_id\":\"C_kwDOA71kIdoAKDRmZDFiZTc3MTMwODk2NDFkMWI3M2M0OGFjZjA4NDk5NDljODE0OTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:03:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:03:24Z\"},\"message\":\"update
        client's downloader settings\",\"tree\":{\"sha\":\"09e8ac1cd62ca8dbd802edb86cb87ba48e8505e0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/09e8ac1cd62ca8dbd802edb86cb87ba48e8505e0\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4fd1be7713089641d1b73c48acf0849949c81491\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4fd1be7713089641d1b73c48acf0849949c81491\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4fd1be7713089641d1b73c48acf0849949c81491\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4fd1be7713089641d1b73c48acf0849949c81491/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c642e3605e41a024625945acfd40adde044c4887\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c642e3605e41a024625945acfd40adde044c4887\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c642e3605e41a024625945acfd40adde044c4887\"}]},{\"sha\":\"4e55b156696ca17eb124209e7449918010729102\",\"node_id\":\"C_kwDOA71kIdoAKDRlNTViMTU2Njk2Y2ExN2ViMTI0MjA5ZTc0NDk5MTgwMTA3MjkxMDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:07:45Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:07:45Z\"},\"message\":\"fixed
        code to comply with mypy\",\"tree\":{\"sha\":\"4ccccbbbad5ed7e554a9c70b6b95bc9eeb1cba24\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4ccccbbbad5ed7e554a9c70b6b95bc9eeb1cba24\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4e55b156696ca17eb124209e7449918010729102\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e55b156696ca17eb124209e7449918010729102\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4e55b156696ca17eb124209e7449918010729102\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e55b156696ca17eb124209e7449918010729102/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4fd1be7713089641d1b73c48acf0849949c81491\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4fd1be7713089641d1b73c48acf0849949c81491\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4fd1be7713089641d1b73c48acf0849949c81491\"}]},{\"sha\":\"aac20f56a138dc2a53d985173c96ab3dde580da7\",\"node_id\":\"C_kwDOA71kIdoAKGFhYzIwZjU2YTEzOGRjMmE1M2Q5ODUxNzNjOTZhYjNkZGU1ODBkYTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:12:41Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:12:41Z\"},\"message\":\"use
        poetry to run build script\",\"tree\":{\"sha\":\"de28370cfc9abb85b3c7a476e174c7044e74c032\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/de28370cfc9abb85b3c7a476e174c7044e74c032\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/aac20f56a138dc2a53d985173c96ab3dde580da7/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4e55b156696ca17eb124209e7449918010729102\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e55b156696ca17eb124209e7449918010729102\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4e55b156696ca17eb124209e7449918010729102\"}]},{\"sha\":\"4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"node_id\":\"C_kwDOA71kIdoAKDRhOTVlNmE2YjA3ZjZjYjM5MzlmNWY1M2ZmMTBkZGUzMTk2MWQxZjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:13:37Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:21:40Z\"},\"message\":\"removed
        unused import\\n\\nblack .\\n\\nformat code\",\"tree\":{\"sha\":\"11d172d5375e0a47d81ccdb8ae488475f14d74b4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/11d172d5375e0a47d81ccdb8ae488475f14d74b4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"aac20f56a138dc2a53d985173c96ab3dde580da7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/aac20f56a138dc2a53d985173c96ab3dde580da7\"}]},{\"sha\":\"059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"node_id\":\"C_kwDOA71kIdoAKDA1OWYyZjNjNmUyZDBjYTE2NTgxOTA1ZGQ5MjYxZDcyZWNlMmYzM2Q\",\"commit\":{\"author\":{\"name\":\"Biswapriyo
        Nath\",\"email\":\"nathbappai@gmail.com\",\"date\":\"2023-06-09T19:11:57Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-06-09T19:11:57Z\"},\"message\":\"Remove
        unwanted directories in container image (#1856)\",\"tree\":{\"sha\":\"9c27d0e11c75b2e554be6f95693aa178dc52fe1b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9c27d0e11c75b2e554be6f95693aa178dc52fe1b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkg3l9CRBK7hj4Ov3rIwAAhG8IACEMlEyARzjF/EYebJrJYbr8\\nYA4tao1tVhmR7K5BqqnBm7F7nnlVNvGa+1CxFOBpEbqqEnrMIplUt/1ex3ovoPNN\\nCX3EIDFZz5tw+ONxYczoONHDw2+RUIB0WLfPn6jm+eqlq0k/5RIoEh+gETbFBM2h\\nCJenWU4dMewKmjC+S32RndhhOtpfCwwEQriPSC3mBY+7gnixe2Eq9Axy8CCj1E+z\\nNGwuMSVca73FBpywEeEo3UqwwikVJ3sDVsL1Vn1oW8Ij3LGanOliAAFVQimLayhb\\ntsjGLERm/3QRw/7wPs3WEvoKMMPbWaIaiPpoQ+QL0p2RUloIXDDMOA7dWwRFJK8=\\n=wa01\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 9c27d0e11c75b2e554be6f95693aa178dc52fe1b\\nparent
        4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\\nauthor Biswapriyo Nath <nathbappai@gmail.com>
        1686337917 +0530\\ncommitter GitHub <noreply@github.com> 1686337917 +0200\\n\\nRemove
        unwanted directories in container image (#1856)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d/comments\",\"author\":{\"login\":\"Biswa96\",\"id\":31443074,\"node_id\":\"MDQ6VXNlcjMxNDQzMDc0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/31443074?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Biswa96\",\"html_url\":\"https://github.com/Biswa96\",\"followers_url\":\"https://api.github.com/users/Biswa96/followers\",\"following_url\":\"https://api.github.com/users/Biswa96/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Biswa96/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Biswa96/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Biswa96/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Biswa96/orgs\",\"repos_url\":\"https://api.github.com/users/Biswa96/repos\",\"events_url\":\"https://api.github.com/users/Biswa96/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Biswa96/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\"}]},{\"sha\":\"d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"node_id\":\"C_kwDOA71kIdoAKGQ2MzRlMjY0Nzc3ZjJhM2RjYWQ0MmQ3MGNiZTBjYTZkODc0M2Q5ZWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:14:29Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:14:29Z\"},\"message\":\"fixed
        mypy errors\",\"tree\":{\"sha\":\"a990170f8b6e07760b474d768b9ea9364c2108e7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a990170f8b6e07760b474d768b9ea9364c2108e7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\"}]},{\"sha\":\"039801f107c701af666331b3ed4a2c147a31fb28\",\"node_id\":\"C_kwDOA71kIdoAKDAzOTgwMWYxMDdjNzAxYWY2NjYzMzFiM2VkNGEyYzE0N2EzMWZiMjg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:26:33Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:26:33Z\"},\"message\":\"handle
        sync files that are not dicts\",\"tree\":{\"sha\":\"337a21ada924cd843a1469a3ce764ec8ca6692a6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/337a21ada924cd843a1469a3ce764ec8ca6692a6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/039801f107c701af666331b3ed4a2c147a31fb28\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/039801f107c701af666331b3ed4a2c147a31fb28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/039801f107c701af666331b3ed4a2c147a31fb28\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/039801f107c701af666331b3ed4a2c147a31fb28/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\"}]},{\"sha\":\"f4835a426111cc1258899ff4fda5205db6508d24\",\"node_id\":\"C_kwDOA71kIdoAKGY0ODM1YTQyNjExMWNjMTI1ODg5OWZmNGZkYTUyMDVkYjY1MDhkMjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T20:08:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T20:08:01Z\"},\"message\":\"added
        more forbidden words\",\"tree\":{\"sha\":\"0bf474f77d406b7c0cce192afb4f328f8c5efc37\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0bf474f77d406b7c0cce192afb4f328f8c5efc37\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f4835a426111cc1258899ff4fda5205db6508d24\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f4835a426111cc1258899ff4fda5205db6508d24\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f4835a426111cc1258899ff4fda5205db6508d24\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f4835a426111cc1258899ff4fda5205db6508d24/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"039801f107c701af666331b3ed4a2c147a31fb28\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/039801f107c701af666331b3ed4a2c147a31fb28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/039801f107c701af666331b3ed4a2c147a31fb28\"}]},{\"sha\":\"f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"node_id\":\"C_kwDOA71kIdoAKGYwZWNlNDMyMzc1ZmI2ZDdhNzU3M2YzNWVkMTNjNmJiN2RmODZmMjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T21:22:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T21:22:39Z\"},\"message\":\"improved
        result score calculation by changing how the views are included in the result
        score\",\"tree\":{\"sha\":\"57288d51968de6e84e7464961e1a9c5ff5f21036\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/57288d51968de6e84e7464961e1a9c5ff5f21036\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f4835a426111cc1258899ff4fda5205db6508d24\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f4835a426111cc1258899ff4fda5205db6508d24\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f4835a426111cc1258899ff4fda5205db6508d24\"}]},{\"sha\":\"3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"node_id\":\"C_kwDOA71kIdoAKDNmMDU2NWM4OGFlMWEwYTc1MzM0N2QxNWExYjQ4NGFlMmM1MTRkMjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-10T11:20:23Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-10T11:20:23Z\"},\"message\":\"check
        if audio provider provides views\",\"tree\":{\"sha\":\"5b6afe08e18cb152fb237af859ae2fa5e63ba526\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5b6afe08e18cb152fb237af859ae2fa5e63ba526\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\"}]},{\"sha\":\"a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"node_id\":\"C_kwDOA71kIdoAKGE2YTg5MjkxY2NhMGNkNDg3ZTE2YjI4YWFjZDFiMzljMWJkYzgzNTc\",\"commit\":{\"author\":{\"name\":\"Maxence
        G\",\"email\":\"maxence.gr@hotmail.fr\",\"date\":\"2023-06-10T17:40:37Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-10T17:41:21Z\"},\"message\":\"Add
        ISRC in file tags (#1859)\",\"tree\":{\"sha\":\"cdf9dd94abf092870e5c0edc22a0062fa4ea8965\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cdf9dd94abf092870e5c0edc22a0062fa4ea8965\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357/comments\",\"author\":{\"login\":\"Maxmystere\",\"id\":24446198,\"node_id\":\"MDQ6VXNlcjI0NDQ2MTk4\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/24446198?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Maxmystere\",\"html_url\":\"https://github.com/Maxmystere\",\"followers_url\":\"https://api.github.com/users/Maxmystere/followers\",\"following_url\":\"https://api.github.com/users/Maxmystere/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Maxmystere/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Maxmystere/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Maxmystere/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Maxmystere/orgs\",\"repos_url\":\"https://api.github.com/users/Maxmystere/repos\",\"events_url\":\"https://api.github.com/users/Maxmystere/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Maxmystere/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3f0565c88ae1a0a753347d15a1b484ae2c514d25\"}]},{\"sha\":\"2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"node_id\":\"C_kwDOA71kIdoAKDJiYWFkNGE0OTE0ZWEyMGU4ZTRiNTAxZWJiOWVlYmFmNzEwMzUxZjA\",\"commit\":{\"author\":{\"name\":\"Laurens\",\"email\":\"laurens94@users.noreply.github.com\",\"date\":\"2023-06-11T13:06:31Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-06-11T13:06:31Z\"},\"message\":\"Fix
        broken link in docs\",\"tree\":{\"sha\":\"e59149dd29b5a88edf96048638c97ceb534e8113\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e59149dd29b5a88edf96048638c97ceb534e8113\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkhcbXCRBK7hj4Ov3rIwAAHugIABeol+R47cS6P1QRTDuv1qMC\\nXR/DF9S9yVT+jQ4X6KruBTLUM2H3m6qE5eVs3xJN+LVWzgCRwPeCbYfqxNr8Gm5Z\\nMhq+gY3PJGEZAMenYAQ5f2eaEZmeEbLHZLvIzGq27P9ndbWQqWpU7WBz1MikoQUP\\nkMdMxv8bVYZ/VaWlttCPw8MYfjdg2OJ7S93ud3GIQhS5P+vwH0XrsJTCokYiJ6Jw\\nYdrCiVutn9xk5UhHs/63p+5NwB3jzkBLmbxZgAJrhNAcAHTCEOvjgBFFB6VmyneJ\\nJBzNWeW7zgseoELPi97ZSyiihAT5RNxvEhtNezf/jDMIMaIw5cyBldsQuaECAPg=\\n=uDc1\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e59149dd29b5a88edf96048638c97ceb534e8113\\nparent
        a6a89291cca0cd487e16b28aacd1b39c1bdc8357\\nauthor Laurens <laurens94@users.noreply.github.com>
        1686488791 +0200\\ncommitter GitHub <noreply@github.com> 1686488791 +0200\\n\\nFix
        broken link in docs\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0/comments\",\"author\":{\"login\":\"laurens94\",\"id\":5780704,\"node_id\":\"MDQ6VXNlcjU3ODA3MDQ=\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/5780704?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/laurens94\",\"html_url\":\"https://github.com/laurens94\",\"followers_url\":\"https://api.github.com/users/laurens94/followers\",\"following_url\":\"https://api.github.com/users/laurens94/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/laurens94/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/laurens94/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/laurens94/subscriptions\",\"organizations_url\":\"https://api.github.com/users/laurens94/orgs\",\"repos_url\":\"https://api.github.com/users/laurens94/repos\",\"events_url\":\"https://api.github.com/users/laurens94/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/laurens94/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\"}]},{\"sha\":\"d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"node_id\":\"C_kwDOA71kIdoAKGQ3ODlhNWNiMWFiZjIzZTdhMjg2NjBiYTc5YjNmZWJjZWU0NWJmZGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:36:14Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:36:14Z\"},\"message\":\"added
        `--yt-dlp-args` flag\",\"tree\":{\"sha\":\"f50b22d5926ce2e0d1928794eab20fc45cc61c65\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f50b22d5926ce2e0d1928794eab20fc45cc61c65\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\"}]},{\"sha\":\"b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"node_id\":\"C_kwDOA71kIdoAKGIzYzdmZjE5ZTg3MDQ3YTc2ZmI2ZjZkNjU0NzAwOWIyMmRmMGIwMTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:39:31Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:39:31Z\"},\"message\":\"always
        return the best result\",\"tree\":{\"sha\":\"318f8c19772f053ea6df0afc8fc1749db10f177d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/318f8c19772f053ea6df0afc8fc1749db10f177d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\"}]},{\"sha\":\"2f9185277d488894ad9c523f7fe6a039037212c0\",\"node_id\":\"C_kwDOA71kIdoAKDJmOTE4NTI3N2Q0ODg4OTRhZDljNTIzZjdmZTZhMDM5MDM3MjEyYzA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:46:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:46:12Z\"},\"message\":\"fixed
        mypy issues\",\"tree\":{\"sha\":\"bdf03661860551ebade0683335368a0e9494bc90\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bdf03661860551ebade0683335368a0e9494bc90\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2f9185277d488894ad9c523f7fe6a039037212c0\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2f9185277d488894ad9c523f7fe6a039037212c0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2f9185277d488894ad9c523f7fe6a039037212c0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2f9185277d488894ad9c523f7fe6a039037212c0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b3c7ff19e87047a76fb6f6d6547009b22df0b019\"}]},{\"sha\":\"bbbe924c72b265f2493973fab649ac054f3e04a0\",\"node_id\":\"C_kwDOA71kIdoAKGJiYmU5MjRjNzJiMjY1ZjI0OTM5NzNmYWI2NDlhYzA1NGYzZTA0YTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:51:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:51:44Z\"},\"message\":\"increased
        name match threshold\",\"tree\":{\"sha\":\"f200081d23fa5be2bb9a6dbc78c5cd3647fbc8f7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f200081d23fa5be2bb9a6dbc78c5cd3647fbc8f7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bbbe924c72b265f2493973fab649ac054f3e04a0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2f9185277d488894ad9c523f7fe6a039037212c0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2f9185277d488894ad9c523f7fe6a039037212c0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2f9185277d488894ad9c523f7fe6a039037212c0\"}]},{\"sha\":\"efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"node_id\":\"C_kwDOA71kIdoAKGVmYzI0YWM2ZThhZmM4NjE3MjI4ZTg3YTJmMmU2NWMyNzY5NmZhNzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:52:23Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:52:23Z\"},\"message\":\"format
        with black\",\"tree\":{\"sha\":\"75e9fed1804f034657eae98e5730eeec626dacec\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/75e9fed1804f034657eae98e5730eeec626dacec\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bbbe924c72b265f2493973fab649ac054f3e04a0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bbbe924c72b265f2493973fab649ac054f3e04a0\"}]},{\"sha\":\"e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"node_id\":\"C_kwDOA71kIdoAKGU2ZjAzMzk2YmRmZWZiM2UwZWI3NmM3NjljODE2ZjY2NWFiMDMxZWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:14:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:14:53Z\"},\"message\":\"added
        soundcloud audio provider\",\"tree\":{\"sha\":\"9d7b6d249dd45e4cb7b0aafb3f4b5b4f97824172\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9d7b6d249dd45e4cb7b0aafb3f4b5b4f97824172\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/efc24ac6e8afc8617228e87a2f2e65c27696fa71\"}]},{\"sha\":\"27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"node_id\":\"C_kwDOA71kIdoAKDI3YTYyZjA2YjYzM2FkYTQ2OWY2YjAxYTI1OGQyZmQ1ZGVkZDIwNjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:18:06Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:18:06Z\"},\"message\":\"update
        packages\",\"tree\":{\"sha\":\"1b594752c5a96db69b35759c83326c3117e0df61\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1b594752c5a96db69b35759c83326c3117e0df61\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e6f03396bdfefb3e0eb76c769c816f665ab031eb\"}]},{\"sha\":\"ed83651932c496505090dea49257320599300b90\",\"node_id\":\"C_kwDOA71kIdoAKGVkODM2NTE5MzJjNDk2NTA1MDkwZGVhNDkyNTczMjA1OTkzMDBiOTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:45:16Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:45:16Z\"},\"message\":\"updated
        vcrpy\",\"tree\":{\"sha\":\"91010235754db28fe257eae5d667233a0b72b0ef\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/91010235754db28fe257eae5d667233a0b72b0ef\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ed83651932c496505090dea49257320599300b90\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed83651932c496505090dea49257320599300b90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed83651932c496505090dea49257320599300b90\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed83651932c496505090dea49257320599300b90/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/27a62f06b633ada469f6b01a258d2fd5dedd2065\"}]},{\"sha\":\"cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"node_id\":\"C_kwDOA71kIdoAKGNjMzk5YTg5NDIxODdmNWE3MmU0YTBjYzhlM2JjMzk5ZDdhNTAyOTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:48:25Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:48:25Z\"},\"message\":\"added
        bandcamp audio provider\",\"tree\":{\"sha\":\"4044bc091d245cc564b5ddb914e1d50497710a28\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4044bc091d245cc564b5ddb914e1d50497710a28\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ed83651932c496505090dea49257320599300b90\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed83651932c496505090dea49257320599300b90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed83651932c496505090dea49257320599300b90\"}]},{\"sha\":\"4256a3b1c74b605c876bd92738e247974e212558\",\"node_id\":\"C_kwDOA71kIdoAKDQyNTZhM2IxYzc0YjYwNWM4NzZiZDkyNzM4ZTI0Nzk3NGUyMTI1NTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:51:49Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:51:49Z\"},\"message\":\"fixed
        mypy issues in bandcamp\",\"tree\":{\"sha\":\"b7f9cbff3334c8e43cf2a6c90972ef86daad5e9a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b7f9cbff3334c8e43cf2a6c90972ef86daad5e9a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4256a3b1c74b605c876bd92738e247974e212558\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4256a3b1c74b605c876bd92738e247974e212558\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4256a3b1c74b605c876bd92738e247974e212558\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4256a3b1c74b605c876bd92738e247974e212558/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\"}]},{\"sha\":\"ecba7d611bae329e407f61da03df66645b879163\",\"node_id\":\"C_kwDOA71kIdoAKGVjYmE3ZDYxMWJhZTMyOWU0MDdmNjFkYTAzZGY2NjY0NWI4NzkxNjM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:38:27Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:44:04Z\"},\"message\":\"added
        piped audio provider\\n\\nremoved debug print\",\"tree\":{\"sha\":\"36c21ad9d6b3c800bdcd46d8e7f41258e206ae4c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/36c21ad9d6b3c800bdcd46d8e7f41258e206ae4c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ecba7d611bae329e407f61da03df66645b879163\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ecba7d611bae329e407f61da03df66645b879163\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ecba7d611bae329e407f61da03df66645b879163\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ecba7d611bae329e407f61da03df66645b879163/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4256a3b1c74b605c876bd92738e247974e212558\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4256a3b1c74b605c876bd92738e247974e212558\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4256a3b1c74b605c876bd92738e247974e212558\"}]},{\"sha\":\"d29385535508a000e322c843943b38ea6a8a13c2\",\"node_id\":\"C_kwDOA71kIdoAKGQyOTM4NTUzNTUwOGEwMDBlMzIyYzg0Mzk0M2IzOGVhNmE4YTEzYzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:47Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:47Z\"},\"message\":\"added
        support for piped links\",\"tree\":{\"sha\":\"e9d442079531b2c923d57893e81fa1ba6869fea1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e9d442079531b2c923d57893e81fa1ba6869fea1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d29385535508a000e322c843943b38ea6a8a13c2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d29385535508a000e322c843943b38ea6a8a13c2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d29385535508a000e322c843943b38ea6a8a13c2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d29385535508a000e322c843943b38ea6a8a13c2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ecba7d611bae329e407f61da03df66645b879163\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ecba7d611bae329e407f61da03df66645b879163\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ecba7d611bae329e407f61da03df66645b879163\"}]},{\"sha\":\"49b4af7ec2b9c87010439805c077528decec2b70\",\"node_id\":\"C_kwDOA71kIdoAKDQ5YjRhZjdlYzJiOWM4NzAxMDQzOTgwNWMwNzc1MjhkZWNlYzJiNzA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:57Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:57Z\"},\"message\":\"format
        code with black\",\"tree\":{\"sha\":\"abb0053f5658c62fcfd80e2c48bc6cb743543caa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/abb0053f5658c62fcfd80e2c48bc6cb743543caa\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/49b4af7ec2b9c87010439805c077528decec2b70\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49b4af7ec2b9c87010439805c077528decec2b70\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49b4af7ec2b9c87010439805c077528decec2b70\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49b4af7ec2b9c87010439805c077528decec2b70/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d29385535508a000e322c843943b38ea6a8a13c2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d29385535508a000e322c843943b38ea6a8a13c2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d29385535508a000e322c843943b38ea6a8a13c2\"}]},{\"sha\":\"57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"node_id\":\"C_kwDOA71kIdoAKDU3YWU1MTRiZTA0ODdkNzlkZWJkOTdjMDk3YzdkMGVkNGVkMmU3Mzc\",\"commit\":{\"author\":{\"name\":\"Alejandro
        Avil\xE9s\",\"email\":\"omegak@gmail.com\",\"date\":\"2023-06-24T12:17:33Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-06-24T12:17:33Z\"},\"message\":\"Give
        an ascii mode to --restrict flag (#1858)\",\"tree\":{\"sha\":\"3181aa4a3da3a4b8a01b0f447b954d5131bdf408\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3181aa4a3da3a4b8a01b0f447b954d5131bdf408\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJklt7dCRBK7hj4Ov3rIwAATUcIAKxrhbUfXXNh+fpgcCIDk6df\\npKzqT3qeX5aBQzK4CQKqplhOfOPnzT3IB7uo+woli7C935o0YqoKAI/+R7iHo4Hw\\nBR+Kjj1VJ27pHQj4Xj4LdL5RnE9ta9Juw8s7RMop/lEPRu5N0tsOBNuTdtFhKTZO\\nOfEyRjt8ckQmh3ZXCsTfHtU+nUCNGiSzQOw2lOUFp80jEiQcZdYVyAsFANQSGu2r\\nCRsFYC8/QbrgJZodzq+43YRrG8hy6+7t6nth7s1Pd/hQHTbJVgRXuAHL+cZzBObW\\nBwC6yprjvCdxDRfYncpjOKdckRkPc4LWgWxRKB+ZbwoVIkYP1SStyB1HBXT6HXQ=\\n=7bGe\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 3181aa4a3da3a4b8a01b0f447b954d5131bdf408\\nparent
        49b4af7ec2b9c87010439805c077528decec2b70\\nauthor Alejandro Avil\xE9s <omegak@gmail.com>
        1687609053 +0200\\ncommitter GitHub <noreply@github.com> 1687609053 +0200\\n\\nGive
        an ascii mode to --restrict flag (#1858)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737/comments\",\"author\":{\"login\":\"OmeGak\",\"id\":716307,\"node_id\":\"MDQ6VXNlcjcxNjMwNw==\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/716307?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/OmeGak\",\"html_url\":\"https://github.com/OmeGak\",\"followers_url\":\"https://api.github.com/users/OmeGak/followers\",\"following_url\":\"https://api.github.com/users/OmeGak/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/OmeGak/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/OmeGak/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/OmeGak/subscriptions\",\"organizations_url\":\"https://api.github.com/users/OmeGak/orgs\",\"repos_url\":\"https://api.github.com/users/OmeGak/repos\",\"events_url\":\"https://api.github.com/users/OmeGak/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/OmeGak/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"49b4af7ec2b9c87010439805c077528decec2b70\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49b4af7ec2b9c87010439805c077528decec2b70\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49b4af7ec2b9c87010439805c077528decec2b70\"}]},{\"sha\":\"d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"node_id\":\"C_kwDOA71kIdoAKGQ5YWFjNTcxMGU0ZjEwZjZiNWMxNmNhMTBmOGYxMDVjMzRhNTEyZDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:23:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:23:11Z\"},\"message\":\"added
        detect formats option\",\"tree\":{\"sha\":\"1b412403f0e5d07de5cbdebaea88c01f0e3880b3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1b412403f0e5d07de5cbdebaea88c01f0e3880b3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/57ae514be0487d79debd97c097c7d0ed4ed2e737\"}]},{\"sha\":\"060156598112a8d0a19623d28c9c30c110d0b38d\",\"node_id\":\"C_kwDOA71kIdoAKDA2MDE1NjU5ODExMmE4ZDBhMTk2MjNkMjhjOWMzMGMxMTBkMGIzOGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:39:07Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:39:23Z\"},\"message\":\"detect
        all file formats when checking for duplicates without scan for songs flag\\n\\nblack
        .\",\"tree\":{\"sha\":\"b513c5a075d9e7ffee0d750639a795292fd465a9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b513c5a075d9e7ffee0d750639a795292fd465a9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/060156598112a8d0a19623d28c9c30c110d0b38d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/060156598112a8d0a19623d28c9c30c110d0b38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/060156598112a8d0a19623d28c9c30c110d0b38d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/060156598112a8d0a19623d28c9c30c110d0b38d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\"}]},{\"sha\":\"7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"node_id\":\"C_kwDOA71kIdoAKDdjMDE3MjQ0YzI2ZmQ0YzdjMWZmY2ZjNTBkMDQ1MTlmZTkxNTZkMWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:48:14Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:48:14Z\"},\"message\":\"updated
        packages\",\"tree\":{\"sha\":\"1fed78cb6a09022c7dfb630a5b0a7c158da823c5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1fed78cb6a09022c7dfb630a5b0a7c158da823c5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"060156598112a8d0a19623d28c9c30c110d0b38d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/060156598112a8d0a19623d28c9c30c110d0b38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/060156598112a8d0a19623d28c9c30c110d0b38d\"}]},{\"sha\":\"06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"node_id\":\"C_kwDOA71kIdoAKDA2Y2FjMGZjODJjNzcwMGY3ZGY4ZDNhOWRkZmI2MzM2MzY4ZWYwNTI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:50:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:50:28Z\"},\"message\":\"added
        more forbidden words\",\"tree\":{\"sha\":\"34feffa26fbcbff87f3a7a012175a02f67eb4ad6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/34feffa26fbcbff87f3a7a012175a02f67eb4ad6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\"}]},{\"sha\":\"6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"node_id\":\"C_kwDOA71kIdoAKDY4MDJkY2NlNTI4MjY4NDVhMDZhNTZlNzJlMDhjZDkxZTBiMDJjM2Y\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:51:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:51:15Z\"},\"message\":\"isort
        .\",\"tree\":{\"sha\":\"cc9780004e09ceac183877b3916f68128489f2fb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cc9780004e09ceac183877b3916f68128489f2fb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\"}]},{\"sha\":\"6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"node_id\":\"C_kwDOA71kIdoAKDZmNjVhMTUyYjI4MzNjZTY4YzgzOGM2NGE1ZGJiOGNjYmJhZDFlNTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:52:49Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:52:49Z\"},\"message\":\"fixed
        ext path creation\",\"tree\":{\"sha\":\"087dc51f76378db74e3b9c4f38de5f003d4dac3e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/087dc51f76378db74e3b9c4f38de5f003d4dac3e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6802dcce52826845a06a56e72e08cd91e0b02c3f\"}]},{\"sha\":\"875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"node_id\":\"C_kwDOA71kIdoAKDg3NWEzODRjZTQ5ZDIyMmU3NDhjZWJhNmFkYzJhNzE4ZTRiN2IzM2E\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T14:04:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T14:04:55Z\"},\"message\":\"Update
        test_yt_search.yaml\",\"tree\":{\"sha\":\"878979fae9fd60f8fba54a4492f22bd84b044a9f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/878979fae9fd60f8fba54a4492f22bd84b044a9f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\"}]},{\"sha\":\"5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"node_id\":\"C_kwDOA71kIdoAKDVmNmNmZGZjZWEyODc4ZDgyMWEwNzc5YzgwNmY3YjUwMGY3ZGJkNjc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-27T10:19:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-27T10:19:48Z\"},\"message\":\"fixed
        song matching during song object reinit\",\"tree\":{\"sha\":\"e37b841da18f23113431313215e1d8a55c7034f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e37b841da18f23113431313215e1d8a55c7034f2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/875a384ce49d222e748ceba6adc2a718e4b7b33a\"}]},{\"sha\":\"7568dd9b3323828614a2b226c5e9be1913d4782a\",\"node_id\":\"C_kwDOA71kIdoAKDc1NjhkZDliMzMyMzgyODYxNGEyYjIyNmM1ZTliZTE5MTNkNDc4MmE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:10:05Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:10:24Z\"},\"message\":\"simplified
        artist match fixup for verified results\\n\\nUpdate test_matching.py\",\"tree\":{\"sha\":\"17ab88d8156eaf060aac93075c6a136a6e69c5da\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/17ab88d8156eaf060aac93075c6a136a6e69c5da\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7568dd9b3323828614a2b226c5e9be1913d4782a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\"}]},{\"sha\":\"44737dbad4393ccdb517a662190295c56a8416f0\",\"node_id\":\"C_kwDOA71kIdoAKDQ0NzM3ZGJhZDQzOTNjY2RiNTE3YTY2MjE5MDI5NWM1NmE4NDE2ZjA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:15:17Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:15:17Z\"},\"message\":\"removed
        unused code\",\"tree\":{\"sha\":\"22b8cb3096997b10c5f1595787ec31187fd14b04\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/22b8cb3096997b10c5f1595787ec31187fd14b04\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/44737dbad4393ccdb517a662190295c56a8416f0\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/44737dbad4393ccdb517a662190295c56a8416f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/44737dbad4393ccdb517a662190295c56a8416f0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/44737dbad4393ccdb517a662190295c56a8416f0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7568dd9b3323828614a2b226c5e9be1913d4782a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7568dd9b3323828614a2b226c5e9be1913d4782a\"}]},{\"sha\":\"81d6e064c4910424776ff98705d37a571de61dea\",\"node_id\":\"C_kwDOA71kIdoAKDgxZDZlMDY0YzQ5MTA0MjQ3NzZmZjk4NzA1ZDM3YTU3MWRlNjFkZWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T13:07:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T13:45:44Z\"},\"message\":\"added
        support for ytm links without spotify link\\n\\nUpdate search.py\",\"tree\":{\"sha\":\"3cde6deaa678d4d18bdcbbf2eb3f7e7210bb12e2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3cde6deaa678d4d18bdcbbf2eb3f7e7210bb12e2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/81d6e064c4910424776ff98705d37a571de61dea\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/81d6e064c4910424776ff98705d37a571de61dea\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/81d6e064c4910424776ff98705d37a571de61dea\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/81d6e064c4910424776ff98705d37a571de61dea/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"44737dbad4393ccdb517a662190295c56a8416f0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/44737dbad4393ccdb517a662190295c56a8416f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/44737dbad4393ccdb517a662190295c56a8416f0\"}]},{\"sha\":\"b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"node_id\":\"C_kwDOA71kIdoAKGI2MTFhMGU0YTRhMThiYmQwMjNjMzk0NTFiN2EyNjEwYTgxY2U3NzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T08:54:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T08:54:48Z\"},\"message\":\"working
        on piped proxy\",\"tree\":{\"sha\":\"bada0a9802cb8a05bdcd202baf573344a8cff093\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bada0a9802cb8a05bdcd202baf573344a8cff093\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"81d6e064c4910424776ff98705d37a571de61dea\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/81d6e064c4910424776ff98705d37a571de61dea\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/81d6e064c4910424776ff98705d37a571de61dea\"}]},{\"sha\":\"b64868a66edb45197a27d904445f9ce42eb46fbf\",\"node_id\":\"C_kwDOA71kIdoAKGI2NDg2OGE2NmVkYjQ1MTk3YTI3ZDkwNDQ0NWY5Y2U0MmViNDZmYmY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:00:51Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:00:51Z\"},\"message\":\"don't
        copy files when using piped\",\"tree\":{\"sha\":\"5a5bacf74858561433fe6b5293a1d3baed9e55d3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5a5bacf74858561433fe6b5293a1d3baed9e55d3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64868a66edb45197a27d904445f9ce42eb46fbf/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b611a0e4a4a18bbd023c39451b7a2610a81ce772\"}]},{\"sha\":\"6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"node_id\":\"C_kwDOA71kIdoAKDY4MjRjMzY4NDQ5MGE2NWE0NWJkYmQ3MTQxZGQ4NGJiMWViNGQ2MGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:01:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:01:01Z\"},\"message\":\"fixed
        format selector\",\"tree\":{\"sha\":\"e3f5ea245029bd66330ccb63767102d2a99eeeee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e3f5ea245029bd66330ccb63767102d2a99eeeee\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b64868a66edb45197a27d904445f9ce42eb46fbf\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64868a66edb45197a27d904445f9ce42eb46fbf\"}]},{\"sha\":\"2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"node_id\":\"C_kwDOA71kIdoAKDIzODRmMGIxOTkwYjFhN2IzZjdkNWJlYjY2NGEyNDA4MWYzNzZkY2E\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T09:51:20Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T09:51:20Z\"},\"message\":\"use
        POPM id3 tag for popularity\",\"tree\":{\"sha\":\"cf3c4c6d75beca0f83748dcf6696bae3fd91fa7b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cf3c4c6d75beca0f83748dcf6696bae3fd91fa7b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\"}]},{\"sha\":\"b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"node_id\":\"C_kwDOA71kIdoAKGI5MTVkYzNhMzIzNjY4MzA2MjdiNzdmYzNlZWIzNDc4OWFkMWZhNWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:29:04Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:29:04Z\"},\"message\":\"added
        ability to download all user playlists\",\"tree\":{\"sha\":\"6b415962a411020674955b27efbc723936fa43e0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6b415962a411020674955b27efbc723936fa43e0\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2384f0b1990b1a7b3f7d5beb664a24081f376dca\"}]},{\"sha\":\"fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"node_id\":\"C_kwDOA71kIdoAKGZhNTczN2Y4MGU4YmIzMTMyZGExZmNlZjI5YzYxNTYzZTViOWU2OWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:45:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:45:28Z\"},\"message\":\"fixed
        mypy and pylint errors\",\"tree\":{\"sha\":\"12c38af0e59646c6fb245367d3d44730d9ab2728\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/12c38af0e59646c6fb245367d3d44730d9ab2728\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b915dc3a32366830627b77fc3eeb34789ad1fa5e\"}]},{\"sha\":\"7d22281666756b352192aeee0bc30b778bf7ad86\",\"node_id\":\"C_kwDOA71kIdoAKDdkMjIyODE2NjY3NTZiMzUyMTkyYWVlZTBiYzMwYjc3OGJmN2FkODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:49:52Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:49:52Z\"},\"message\":\"format
        with black\",\"tree\":{\"sha\":\"7581c84cb43424b5400ef5e67f8fc9b303c5edf5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7581c84cb43424b5400ef5e67f8fc9b303c5edf5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7d22281666756b352192aeee0bc30b778bf7ad86\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d22281666756b352192aeee0bc30b778bf7ad86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d22281666756b352192aeee0bc30b778bf7ad86\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d22281666756b352192aeee0bc30b778bf7ad86/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\"}]},{\"sha\":\"a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"node_id\":\"C_kwDOA71kIdoAKGE2Y2Q3MTA2MjIzYjgyY2U1MjU0YWMyNTA5ZjI2ZTU4YjBmMzQwYTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:52:42Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:52:42Z\"},\"message\":\"updated
        dependencies\",\"tree\":{\"sha\":\"2f0fe2e2da2e2f6df58589db987697df80885819\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/2f0fe2e2da2e2f6df58589db987697df80885819\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7d22281666756b352192aeee0bc30b778bf7ad86\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d22281666756b352192aeee0bc30b778bf7ad86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d22281666756b352192aeee0bc30b778bf7ad86\"}]},{\"sha\":\"00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"node_id\":\"C_kwDOA71kIdoAKDAwYzU2YjI1MmY3YmMyYmMzNWI4MjUyZTlmMjhkZDNkZWQ3YTc3ZTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T11:14:09Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T12:34:01Z\"},\"message\":\"fixed
        tests\\n\\nUpdate pyproject.toml\\n\\nUpdate test_matching.py\",\"tree\":{\"sha\":\"1fec5f1358b9eacf422c238f6c3da790ea5ad40b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1fec5f1358b9eacf422c238f6c3da790ea5ad40b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6cd7106223b82ce5254ac2509f26e58b0f340a7\"}]},{\"sha\":\"520c8c21cb2516859881487c94596a7018ebf057\",\"node_id\":\"C_kwDOA71kIdoAKDUyMGM4YzIxY2IyNTE2ODU5ODgxNDg3Yzk0NTk2YTcwMThlYmYwNTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T12:43:58Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-07-11T12:43:58Z\"},\"message\":\"v4.2.0\",\"tree\":{\"sha\":\"1fec5f1358b9eacf422c238f6c3da790ea5ad40b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1fec5f1358b9eacf422c238f6c3da790ea5ad40b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkrU6OCRBK7hj4Ov3rIwAAPI8IAH7avLromw2d6anIeXC2SXTA\\n8KADkVRi9S3OM5ajnIfNB5tVd1q7OcEs+rh3XOE815maO4m6FZnOVjsj62vZyaGr\\nrdJd08LKRlbQJOCP82Eqt8U782jSrMjoW5OVIU99QMhRqFFC4RXV8XI5ibU7vf15\\nMUCaZSkJbEP5kuyhis4DSF5KumgM04WPCZG1WF1L7pIkKEF+OjPrhJA2Bdr8YN89\\nS7IRTvJPeVCnSFCjQEvwH0w8RDiTkjqBXlyGgFVZU3FpuXlOv/wIssH1p++ZcF1Q\\nNXDaldQLCOdZ8IupRCXEI64ObMaZgaazJgz/nIJB+3fkRkxi0cS5qbOh44mQ0dg=\\n=Pw4S\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 1fec5f1358b9eacf422c238f6c3da790ea5ad40b\\nparent
        1924fbe6d5fdc4cd9132464f377fce150750730e\\nparent 00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\\nauthor
        kuba <xnetcat.dev@gmail.com> 1689079438 +0200\\ncommitter GitHub <noreply@github.com>
        1689079438 +0200\\n\\nv4.2.0\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/520c8c21cb2516859881487c94596a7018ebf057\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1924fbe6d5fdc4cd9132464f377fce150750730e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1924fbe6d5fdc4cd9132464f377fce150750730e\"},{\"sha\":\"00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\"}]},{\"sha\":\"2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"node_id\":\"C_kwDOA71kIdoAKDI5MjFlOTZiZjM4ODYwYmM4ODZhNWE5ODY1ZDRkOGNlOThlOTUyZTE\",\"commit\":{\"author\":{\"name\":\"oscarvx00\",\"email\":\"60139475+oscarvx00@users.noreply.github.com\",\"date\":\"2023-07-13T10:07:10Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-07-13T10:07:10Z\"},\"message\":\"Playlist,
        artist and album download from web app. (#1865)\\n\\nCo-authored-by: kuba
        <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"c5ded294769f2965ecbee5948df9aca190c917f8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c5ded294769f2965ecbee5948df9aca190c917f8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkr8zOCRBK7hj4Ov3rIwAAsbgIAIZYILnnQEXilSTjYkcyKkhP\\nrCFWNhJhKLLxGPz+IsM+Tpf7V06UuHy2xcEkFoyUZ3DPJ7EkjoToumgJOM1rkSqO\\nZc+ZminB7UIigxPLqr73nWusOHwwLnW+26/CPZdtc+4sNqywHOIn6eQSHBuHk6Fm\\nrem+5t9zcYKfDobeNPFGMxLE8isMn+HHRMDNrfcgVaXslncMvk/2aV6rq3WAWO9g\\nKj45QbUPf3Cl51Vf8v6mkOKj6eIuDT4Z0nvHJJ70Nm9mAxyq2Irr7bieUE/pS75a\\nwA1R9zOpL/8bbF/CCPptlJAo6pEg6oOYq3aoThINhfREWk25MTTiLcjx3eJQvrQ=\\n=nLxi\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree c5ded294769f2965ecbee5948df9aca190c917f8\\nparent
        520c8c21cb2516859881487c94596a7018ebf057\\nauthor oscarvx00 <60139475+oscarvx00@users.noreply.github.com>
        1689242830 +0200\\ncommitter GitHub <noreply@github.com> 1689242830 +0200\\n\\nPlaylist,
        artist and album download from web app. (#1865)\\n\\nCo-authored-by: kuba
        <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1/comments\",\"author\":{\"login\":\"oscarvx00\",\"id\":60139475,\"node_id\":\"MDQ6VXNlcjYwMTM5NDc1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/60139475?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/oscarvx00\",\"html_url\":\"https://github.com/oscarvx00\",\"followers_url\":\"https://api.github.com/users/oscarvx00/followers\",\"following_url\":\"https://api.github.com/users/oscarvx00/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/oscarvx00/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/oscarvx00/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/oscarvx00/subscriptions\",\"organizations_url\":\"https://api.github.com/users/oscarvx00/orgs\",\"repos_url\":\"https://api.github.com/users/oscarvx00/repos\",\"events_url\":\"https://api.github.com/users/oscarvx00/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/oscarvx00/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"520c8c21cb2516859881487c94596a7018ebf057\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/520c8c21cb2516859881487c94596a7018ebf057\"}]},{\"sha\":\"249cce2f65802e735cd2fa0583621257b22396c1\",\"node_id\":\"C_kwDOA71kIdoAKDI0OWNjZTJmNjU4MDJlNzM1Y2QyZmEwNTgzNjIxMjU3YjIyMzk2YzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-18T14:37:43Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-18T14:37:43Z\"},\"message\":\"dropped
        support for python 3.7\",\"tree\":{\"sha\":\"9183930c46aeb1c755494f68fe5e25f426d9ca79\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9183930c46aeb1c755494f68fe5e25f426d9ca79\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/249cce2f65802e735cd2fa0583621257b22396c1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/249cce2f65802e735cd2fa0583621257b22396c1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/249cce2f65802e735cd2fa0583621257b22396c1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/249cce2f65802e735cd2fa0583621257b22396c1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2921e96bf38860bc886a5a9865d4d8ce98e952e1\"}]},{\"sha\":\"be2d1358d55ff1f712996c60841331e1e12bb387\",\"node_id\":\"C_kwDOA71kIdoAKGJlMmQxMzU4ZDU1ZmYxZjcxMjk5NmM2MDg0MTMzMWUxZTEyYmIzODc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:15Z\"},\"message\":\"Update
        poetry.lock\",\"tree\":{\"sha\":\"75df1f028152e6e4ea7fe0589d4693d1f854432e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/75df1f028152e6e4ea7fe0589d4693d1f854432e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/be2d1358d55ff1f712996c60841331e1e12bb387\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/be2d1358d55ff1f712996c60841331e1e12bb387\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/be2d1358d55ff1f712996c60841331e1e12bb387\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/be2d1358d55ff1f712996c60841331e1e12bb387/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"249cce2f65802e735cd2fa0583621257b22396c1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/249cce2f65802e735cd2fa0583621257b22396c1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/249cce2f65802e735cd2fa0583621257b22396c1\"}]},{\"sha\":\"1525fea0d94b097a669706a63d6f2aefff8f995f\",\"node_id\":\"C_kwDOA71kIdoAKDE1MjVmZWEwZDk0YjA5N2E2Njk3MDZhNjNkNmYyYWVmZmY4Zjk5NWY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:19Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:19Z\"},\"message\":\"Update
        test_matching.py\",\"tree\":{\"sha\":\"54295a3655096cdbe78a76be10598ecc3f5c4a1a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/54295a3655096cdbe78a76be10598ecc3f5c4a1a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1525fea0d94b097a669706a63d6f2aefff8f995f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"be2d1358d55ff1f712996c60841331e1e12bb387\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/be2d1358d55ff1f712996c60841331e1e12bb387\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/be2d1358d55ff1f712996c60841331e1e12bb387\"}]},{\"sha\":\"589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"node_id\":\"C_kwDOA71kIdoAKDU4OWY2NDNlNGFmM2EwMGE1YTUwNWIxOWQ2MDIyMTExYTNlYWFhOTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:42:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:42:13Z\"},\"message\":\"updating
        workflows\",\"tree\":{\"sha\":\"80ce351c5de6fa50bd21589a3405dcb29a50335c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/80ce351c5de6fa50bd21589a3405dcb29a50335c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1525fea0d94b097a669706a63d6f2aefff8f995f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1525fea0d94b097a669706a63d6f2aefff8f995f\"}]},{\"sha\":\"8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"node_id\":\"C_kwDOA71kIdoAKDg5NDliOWE2OTJjOGZhYmFjMjY2Zjk1ZjJhMmE1ODk1ZGFhZjc3Njk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:09:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:09:53Z\"},\"message\":\"check
        if track is a song when downloading playlists\",\"tree\":{\"sha\":\"ad2f169331ac7d224a207ca715ecf0c6638c5c5e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ad2f169331ac7d224a207ca715ecf0c6638c5c5e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/589f643e4af3a00a5a505b19d6022111a3eaaa90\"}]},{\"sha\":\"f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"node_id\":\"C_kwDOA71kIdoAKGY4NzlmNjNiMTBiZmZiMWIzOWYzMjJkNGMwY2MyY2FjOTY0ZDUxNWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:11:10Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:11:10Z\"},\"message\":\"bump
        version to v4.2.1\",\"tree\":{\"sha\":\"453bfadf8ecef71a0791bcd01077de82f73cfd23\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/453bfadf8ecef71a0791bcd01077de82f73cfd23\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8949b9a692c8fabac266f95f2a2a5895daaf7769\"}]},{\"sha\":\"992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"node_id\":\"C_kwDOA71kIdoAKDk5MmQzMGIzYjIzY2NjY2UzOWFlMzcyZDJhMDZjZDAxZjZjZjg0Yzg\",\"commit\":{\"author\":{\"name\":\"Piripe\",\"email\":\"77517308+Piripe@users.noreply.github.com\",\"date\":\"2023-09-01T15:35:40Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-09-01T15:35:40Z\"},\"message\":\"Random
        changes and fixes. (#1897)\",\"tree\":{\"sha\":\"8b940bf3e0657e034ca274f0228a08f57b70acfb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8b940bf3e0657e034ca274f0228a08f57b70acfb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJk8gTMCRBK7hj4Ov3rIwAAZM8IABlZy3q4g9vo5FHRmm1qHAsP\\neko2jtBNTBYPIsW96ejVUD/KyER7ZyOXS1ZSN6hSTkOLVex/QJErQ6qIveuWEUn4\\nufnoB/TC0DGE1+igwBXqpVqeMWOXYPSR6HvWmnXjkivKBwZmttgnTrDi52H01PCx\\nLB8R4RorGneUzCkmDHI8KYSuu8dlHFrUVqi+SKn+xu8729dj2QzV6OGShXlFYvr4\\nu1RoTCMztK23qBDCK5lsiqYEmpzfrqbI8s/5Z1o/LTvepCBV/P6Zb8WNjrytxgb5\\n68j9/2fGYiKzSXnq5/8KU4iXzTqh/KNbZmDkjATobFLdj45VT8w8XP/FcbOxmIc=\\n=M1hd\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8b940bf3e0657e034ca274f0228a08f57b70acfb\\nparent
        f879f63b10bffb1b39f322d4c0cc2cac964d515a\\nauthor Piripe <77517308+Piripe@users.noreply.github.com>
        1693582540 +0200\\ncommitter GitHub <noreply@github.com> 1693582540 +0200\\n\\nRandom
        changes and fixes. (#1897)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8/comments\",\"author\":{\"login\":\"Piripe\",\"id\":77517308,\"node_id\":\"MDQ6VXNlcjc3NTE3MzA4\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/77517308?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Piripe\",\"html_url\":\"https://github.com/Piripe\",\"followers_url\":\"https://api.github.com/users/Piripe/followers\",\"following_url\":\"https://api.github.com/users/Piripe/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Piripe/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Piripe/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Piripe/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Piripe/orgs\",\"repos_url\":\"https://api.github.com/users/Piripe/repos\",\"events_url\":\"https://api.github.com/users/Piripe/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Piripe/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f879f63b10bffb1b39f322d4c0cc2cac964d515a\"}]},{\"sha\":\"b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"node_id\":\"C_kwDOA71kIdoAKGIxYTQ4ZGViYzU3MzkyNGQxMDBhOTFhNDdmMmJjMGFiNzQxYTUxY2M\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:36:10Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:36:10Z\"},\"message\":\"fixed
        bandcamp\",\"tree\":{\"sha\":\"306465346f827ec07c3ea9ed124da66584ae7a33\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/306465346f827ec07c3ea9ed124da66584ae7a33\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\"}]},{\"sha\":\"2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"node_id\":\"C_kwDOA71kIdoAKDJhNjE1ZmYzMWFiYmE2ZDZiN2FiY2ZhYjBlOTljNDI4MjQ1ZDM0N2U\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:37:29Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:37:29Z\"},\"message\":\"black/isort
        code\",\"tree\":{\"sha\":\"cc74a17d7be8bb1865a9bf8febfe6e23fde3a1d2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cc74a17d7be8bb1865a9bf8febfe6e23fde3a1d2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b1a48debc573924d100a91a47f2bc0ab741a51cc\"}]},{\"sha\":\"0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"node_id\":\"C_kwDOA71kIdoAKDBhNjkyYzdiMGIwNjEwMjA0OTA4Yzc4MjNjZDE0Y2UwNzhkZjFiNmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:21:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:21:13Z\"},\"message\":\"use
        downloader settings when parsing query\",\"tree\":{\"sha\":\"b41f0d228739642ab780ee2c714e635269e5498e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b41f0d228739642ab780ee2c714e635269e5498e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a615ff31abba6d6b7abcfab0e99c428245d347e\"}]},{\"sha\":\"920442e134292e892b762b4fdf7f69aeafc3c972\",\"node_id\":\"C_kwDOA71kIdoAKDkyMDQ0MmUxMzQyOTJlODkyYjc2MmI0ZmRmN2Y2OWFlYWZjM2M5NzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:34:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:34:54Z\"},\"message\":\"added
        option to save errors\",\"tree\":{\"sha\":\"4aba1bc0e43c203bac5aa4d768b59299496a1b96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4aba1bc0e43c203bac5aa4d768b59299496a1b96\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/920442e134292e892b762b4fdf7f69aeafc3c972\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/920442e134292e892b762b4fdf7f69aeafc3c972\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/920442e134292e892b762b4fdf7f69aeafc3c972\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/920442e134292e892b762b4fdf7f69aeafc3c972/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0a692c7b0b0610204908c7823cd14ce078df1b6d\"}]},{\"sha\":\"5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"node_id\":\"C_kwDOA71kIdoAKDVlMzRiMjE2Mjg3Yjg0ZGFlY2Y1YjI2YWZiNmM5OWI1N2Q0NTcyYWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:37:17Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:37:17Z\"},\"message\":\"added
        more checks for sync file\",\"tree\":{\"sha\":\"d6a958511e477162c2dd9e868326065664c38cb1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d6a958511e477162c2dd9e868326065664c38cb1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"920442e134292e892b762b4fdf7f69aeafc3c972\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/920442e134292e892b762b4fdf7f69aeafc3c972\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/920442e134292e892b762b4fdf7f69aeafc3c972\"}]},{\"sha\":\"8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"node_id\":\"C_kwDOA71kIdoAKDhhODg5MWUwOTc0ODBjYWNjYmRhNzRiNzVmNWVkMWQ2MmJiMDVmODE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T18:26:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T18:26:11Z\"},\"message\":\"respect
        detect-formats option when using m3u option\",\"tree\":{\"sha\":\"ae42a5becaaede2c4d0d2ac89991392fd8bb1a76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ae42a5becaaede2c4d0d2ac89991392fd8bb1a76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5e34b216287b84daecf5b26afb6c99b57d4572ab\"}]},{\"sha\":\"ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"node_id\":\"C_kwDOA71kIdoAKGNlMmJjZTY1MWQ0NjgxMDYyMWFlOGViNzI5YmI4MTZjY2RkMTE1ZGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:04:03Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:04:03Z\"},\"message\":\"added
        ability to print to stdout when using save\",\"tree\":{\"sha\":\"019267f069c7320e3f8fc55b6de6e1da273d3bb9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/019267f069c7320e3f8fc55b6de6e1da273d3bb9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8a8891e097480caccbda74b75f5ed1d62bb05f81\"}]},{\"sha\":\"f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"node_id\":\"C_kwDOA71kIdoAKGY5ZjExMGY2MWRkN2JiMzg4NTQ2YmQ2NzkxZGE4MWZiYjVkMjA3N2Y\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:39:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:39:28Z\"},\"message\":\"all-user-followed-artists\",\"tree\":{\"sha\":\"5addb50b2ebaaa4b07568b06aea170fdd2a5ee52\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5addb50b2ebaaa4b07568b06aea170fdd2a5ee52\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce2bce651d46810621ae8eb729bb816ccdd115dc\"}]},{\"sha\":\"eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"node_id\":\"C_kwDOA71kIdoAKGVlYjkzNWJiZTUyNmYxOTM1MDZjN2JmZDBhZGJmMDBmNGIyYTgwYzg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:33:20Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:33:20Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"5d43881d8553da03f213bf166ac71cf333954a26\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5d43881d8553da03f213bf166ac71cf333954a26\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f9f110f61dd7bb388546bd6791da81fbb5d2077f\"}]},{\"sha\":\"a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"node_id\":\"C_kwDOA71kIdoAKGE0YzZlOGRjYjgwYWI5OWNkNjJmODRiODBkY2JhMGVjN2ExZGFkZGU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:14Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:14Z\"},\"message\":\"fixed
        bandcamp provider for python 3.8\",\"tree\":{\"sha\":\"433683eec7c807f434fc4e1d0226f5d14cdb9799\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/433683eec7c807f434fc4e1d0226f5d14cdb9799\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\"}]},{\"sha\":\"f8d749048537239085d7335e24f2f87ed24402ab\",\"node_id\":\"C_kwDOA71kIdoAKGY4ZDc0OTA0ODUzNzIzOTA4NWQ3MzM1ZTI0ZjJmODdlZDI0NDAyYWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:35Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:35Z\"},\"message\":\"updated
        packages\\n\\nremoved bandcamp package, copied few functions and adjusted
        them manually\",\"tree\":{\"sha\":\"701702421b4939ac8d6d069c17ceed692158997e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/701702421b4939ac8d6d069c17ceed692158997e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f8d749048537239085d7335e24f2f87ed24402ab\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f8d749048537239085d7335e24f2f87ed24402ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f8d749048537239085d7335e24f2f87ed24402ab\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f8d749048537239085d7335e24f2f87ed24402ab/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\"}]},{\"sha\":\"43343964556da50eb322031f931a60951c4b7d57\",\"node_id\":\"C_kwDOA71kIdoAKDQzMzQzOTY0NTU2ZGE1MGViMzIyMDMxZjkzMWE2MDk1MWM0YjdkNTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:50:22Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:50:22Z\"},\"message\":\"cleaned
        up pyproject.toml\",\"tree\":{\"sha\":\"7b5de13f2d4ebf0b0dfeba4ccc86130cd69b734e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7b5de13f2d4ebf0b0dfeba4ccc86130cd69b734e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/43343964556da50eb322031f931a60951c4b7d57\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43343964556da50eb322031f931a60951c4b7d57\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/43343964556da50eb322031f931a60951c4b7d57\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43343964556da50eb322031f931a60951c4b7d57/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f8d749048537239085d7335e24f2f87ed24402ab\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f8d749048537239085d7335e24f2f87ed24402ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f8d749048537239085d7335e24f2f87ed24402ab\"}]},{\"sha\":\"a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"node_id\":\"C_kwDOA71kIdoAKGEyY2QzMzc3MjVmYzM0YzQ1NDA0NjhhMDBmYTY2MWViYzlmNWEwMzU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:17:08Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:17:08Z\"},\"message\":\"use
        master branch for web ui in production\",\"tree\":{\"sha\":\"6b36fa81a8b76e22b26e7ca1aa0fff6bb851eb53\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6b36fa81a8b76e22b26e7ca1aa0fff6bb851eb53\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"43343964556da50eb322031f931a60951c4b7d57\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43343964556da50eb322031f931a60951c4b7d57\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/43343964556da50eb322031f931a60951c4b7d57\"}]},{\"sha\":\"c9466b0d074d623975353317ef68aa414916c902\",\"node_id\":\"C_kwDOA71kIdoAKGM5NDY2YjBkMDc0ZDYyMzk3NTM1MzMxN2VmNjhhYTQxNDkxNmM5MDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:27:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:27:54Z\"},\"message\":\"removed
        debug print\",\"tree\":{\"sha\":\"058489707dc13859531d1118f4aa044442fa2dd2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/058489707dc13859531d1118f4aa044442fa2dd2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c9466b0d074d623975353317ef68aa414916c902\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c9466b0d074d623975353317ef68aa414916c902\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c9466b0d074d623975353317ef68aa414916c902\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c9466b0d074d623975353317ef68aa414916c902/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a2cd337725fc34c4540468a00fa661ebc9f5a035\"}]},{\"sha\":\"8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"node_id\":\"C_kwDOA71kIdoAKDhhZmEzZGM1OTNmNmFmOTRjOWM4N2YwZDE4ZmE1NTVjMzM4YzQyZTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:28:07Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:28:07Z\"},\"message\":\"added
        information about file location for web ui\",\"tree\":{\"sha\":\"937ea2786de03f7e7dddd0fba98d05df69f6c7b5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/937ea2786de03f7e7dddd0fba98d05df69f6c7b5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c9466b0d074d623975353317ef68aa414916c902\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c9466b0d074d623975353317ef68aa414916c902\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c9466b0d074d623975353317ef68aa414916c902\"}]},{\"sha\":\"db11f719d7ba76451e3a7d628909277cab8ac38d\",\"node_id\":\"C_kwDOA71kIdoAKGRiMTFmNzE5ZDdiYTc2NDUxZTNhN2Q2Mjg5MDkyNzdjYWI4YWMzOGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:01:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:01:44Z\"},\"message\":\"fixed
        search term matching\",\"tree\":{\"sha\":\"1a22e446a9887eb943b894470b5946bf1e2d2a9b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1a22e446a9887eb943b894470b5946bf1e2d2a9b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db11f719d7ba76451e3a7d628909277cab8ac38d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\"}]},{\"sha\":\"828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"node_id\":\"C_kwDOA71kIdoAKDgyOGQyYzM2Y2QzMjJjZWRlZDc1NmIwM2VkMzQwZWEyN2Q2ZTNiYTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:02:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:02:01Z\"},\"message\":\"updated
        documentation\",\"tree\":{\"sha\":\"0525568cd2291465a6e0f0b85123d0cc679e7de4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0525568cd2291465a6e0f0b85123d0cc679e7de4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"db11f719d7ba76451e3a7d628909277cab8ac38d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db11f719d7ba76451e3a7d628909277cab8ac38d\"}]},{\"sha\":\"06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"node_id\":\"C_kwDOA71kIdoAKDA2ZjFlOWViODRkZjljMzZiZjg2ZTg0YTIxMTdlZGNlYmQ2N2RmNzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:21:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:21:24Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"4f12f7130f971c5e9ebde89be24ea6fe3c9ac336\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f12f7130f971c5e9ebde89be24ea6fe3c9ac336\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/828d2c36cd322ceded756b03ed340ea27d6e3ba6\"}]},{\"sha\":\"b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"node_id\":\"C_kwDOA71kIdoAKGIzOTU3MmIwMWM0ZjI2NzIyZmJiY2FlMGQwOWM0OTJmZDliNGFlN2U\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:23:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:23:53Z\"},\"message\":\"black/isort\",\"tree\":{\"sha\":\"5ff09b61a2da2160e2281cc36cb5350f221059d7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5ff09b61a2da2160e2281cc36cb5350f221059d7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06f1e9eb84df9c36bf86e84a2117edcebd67df73\"}]},{\"sha\":\"b536b8fd1cd875edfcee954f11c078f1608433d3\",\"node_id\":\"C_kwDOA71kIdoAKGI1MzZiOGZkMWNkODc1ZWRmY2VlOTU0ZjExYzA3OGYxNjA4NDMzZDM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:32:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:32:13Z\"},\"message\":\"update
        cassettes\",\"tree\":{\"sha\":\"a045f3f3963e9d2176ac2ed98fea219e6e804c96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a045f3f3963e9d2176ac2ed98fea219e6e804c96\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\"}]},{\"sha\":\"4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"node_id\":\"C_kwDOA71kIdoAKDRmNWQ5YjZlMWYxNGEyMTFjYWZhYTkzNmM2NmFkOWI1ZDZhODVlMTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:42:48Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-09-01T22:42:48Z\"},\"message\":\"v4.2.1\",\"tree\":{\"sha\":\"a045f3f3963e9d2176ac2ed98fea219e6e804c96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a045f3f3963e9d2176ac2ed98fea219e6e804c96\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJk8mjoCRBK7hj4Ov3rIwAAmB4IAHQe/HNhFioZXF40GxM5TqyN\\nu8A26+9sKqTRjRsKXY80LLedwqcHtKPphDcPX2OnEMw8yE1bCBw6TaqD9x++1WVU\\nSXZ6FJMRFPxFS22LJ2olIffYFjcEGl4dRgSL+QdrbtvUJH6NMtzfFLmNZZwdD9w0\\nyxPrl8TWzg3UUO96OaDC0fEdDAqBHeL1+arUtWihHLSdptHf6iOmk5KxGuUqS2tv\\nfhRkaF5YRJ2D5sVSghA0dYFIKE78TF1ckBJ66JtmmyOxfzpdlGyd9//aY3cham3t\\nNzDxkEYRxuCfJE8ACixOE2uKDiP5OUG1htJMqZkCOHpHZ6QEhfkDTb7DjCezO38=\\n=CAh7\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree a045f3f3963e9d2176ac2ed98fea219e6e804c96\\nparent
        520c8c21cb2516859881487c94596a7018ebf057\\nparent b536b8fd1cd875edfcee954f11c078f1608433d3\\nauthor
        kuba <xnetcat.dev@gmail.com> 1693608168 +0200\\ncommitter GitHub <noreply@github.com>
        1693608168 +0200\\n\\nv4.2.1\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"520c8c21cb2516859881487c94596a7018ebf057\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/520c8c21cb2516859881487c94596a7018ebf057\"},{\"sha\":\"b536b8fd1cd875edfcee954f11c078f1608433d3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b536b8fd1cd875edfcee954f11c078f1608433d3\"}]},{\"sha\":\"41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"node_id\":\"C_kwDOA71kIdoAKDQxZjQ4MjNkZDI0YmMzZjA1NWU1YTI4M2QwZmEwYjg1ZjRkZDFjMWY\",\"commit\":{\"author\":{\"name\":\"Bharat
        Nair\",\"email\":\"bharatsnair@gmail.com\",\"date\":\"2023-10-06T09:44:13Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T09:44:13Z\"},\"message\":\"add
        option to scrape any user's playlists (#1916)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"e42ab4b54380e0b5d13d028171e3f80a1e849b35\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e42ab4b54380e0b5d13d028171e3f80a1e849b35\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH9btCRBK7hj4Ov3rIwAAbSAIALLe2VjBnWNGfuQiLeO2ay5S\\nJRkfe9WaoYWExgGXs6RXXBOgBRnwn8luzWXNrFQWy8somwmYp9re+ZYSByO4iKpl\\nZzQ7s3/ZEj5lFngxzgT4VNZvOEvxXoFmniDEyp8ys8HQmWDbklt2eRxeEBBL56HN\\nBPIDi8MstGaI5Nbps0Q/QrL6BDQy6wVbaxi2nLdA6yvP54H+mC/Y+5QUGEYa7c8+\\nSDV3jTC5JpIxK1IX/U2Lqn3HVTZ3LpxCz4tyoYUHhOa/QaDow8c6ZknRHvrKIYn0\\nhgQywMEm/7exILmr3PIg3Ux3FZALjuVYxlHOnCNOAvR0/a06cAaKvpm6OeWrVoY=\\n=b2hg\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e42ab4b54380e0b5d13d028171e3f80a1e849b35\\nparent
        b536b8fd1cd875edfcee954f11c078f1608433d3\\nauthor Bharat Nair <bharatsnair@gmail.com>
        1696585453 +0530\\ncommitter GitHub <noreply@github.com> 1696585453 +0200\\n\\nadd
        option to scrape any user's playlists (#1916)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f/comments\",\"author\":{\"login\":\"bharat-nair\",\"id\":10357994,\"node_id\":\"MDQ6VXNlcjEwMzU3OTk0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/10357994?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/bharat-nair\",\"html_url\":\"https://github.com/bharat-nair\",\"followers_url\":\"https://api.github.com/users/bharat-nair/followers\",\"following_url\":\"https://api.github.com/users/bharat-nair/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/bharat-nair/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/bharat-nair/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/bharat-nair/subscriptions\",\"organizations_url\":\"https://api.github.com/users/bharat-nair/orgs\",\"repos_url\":\"https://api.github.com/users/bharat-nair/repos\",\"events_url\":\"https://api.github.com/users/bharat-nair/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/bharat-nair/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b536b8fd1cd875edfcee954f11c078f1608433d3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b536b8fd1cd875edfcee954f11c078f1608433d3\"}]},{\"sha\":\"b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"node_id\":\"C_kwDOA71kIdoAKGI2OTYxOTU0ZjU0NTRlODM5ZmNhODNiZmZjOWE1YWUyYmVlODA4ZWU\",\"commit\":{\"author\":{\"name\":\"Tunglies\",\"email\":\"77394545+Tunglies@users.noreply.github.com\",\"date\":\"2023-10-06T09:45:01Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T09:45:01Z\"},\"message\":\"Support
        proxy server download song. (#1911) (#1912)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"6d8e7a9ac7d5c882db078f994f2df06118e6e601\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6d8e7a9ac7d5c882db078f994f2df06118e6e601\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH9cdCRBK7hj4Ov3rIwAAzP0IAESMX99a8sHfaOlgcJmy5UhY\\nOzWRCpFXqznexx9hQmoS6hCn3f+gSs8QA+5QSOmaw5JYQy3sEDnDdivAYSm41kvS\\nGDTrIZSg5RH4LuMLhCUvcyqMdvjCtVUOdyEZAIJX7toQrSTDKB6fjzfCMwtmVtzB\\nWC6IZQU9cbZ/f5ZyR4bL3x46BoStSouJCkXEPlP8gcs9tpKCVLjhdjSJYEiVVh0m\\nfx/GcCFdSICzQxDkKMqygC2pKweYh2UhZcgy20BupeDOjjFG8jsFpsuThBmDdqgd\\nI8GyOb9JZSFsRIp9ulIp98IWiE3ZruXTcfLwj9uafAwSgeNtGfORDQGQhZ7qa6I=\\n=3nGH\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 6d8e7a9ac7d5c882db078f994f2df06118e6e601\\nparent
        41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\\nauthor Tunglies <77394545+Tunglies@users.noreply.github.com>
        1696585501 +0800\\ncommitter GitHub <noreply@github.com> 1696585501 +0200\\n\\nSupport
        proxy server download song. (#1911) (#1912)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee/comments\",\"author\":{\"login\":\"Tunglies\",\"id\":77394545,\"node_id\":\"MDQ6VXNlcjc3Mzk0NTQ1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/77394545?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Tunglies\",\"html_url\":\"https://github.com/Tunglies\",\"followers_url\":\"https://api.github.com/users/Tunglies/followers\",\"following_url\":\"https://api.github.com/users/Tunglies/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Tunglies/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Tunglies/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Tunglies/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Tunglies/orgs\",\"repos_url\":\"https://api.github.com/users/Tunglies/repos\",\"events_url\":\"https://api.github.com/users/Tunglies/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Tunglies/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\"}]},{\"sha\":\"86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"node_id\":\"C_kwDOA71kIdoAKDg2MzEzZDQwMjRkOWJiOGYzYjcxOTc1OWQ2NWZkMWVhOWE4NjdkYjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-06T10:28:48Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T10:28:48Z\"},\"message\":\"bump
        dependencies (#1917)\",\"tree\":{\"sha\":\"92d0820394a4a922997d9175d79e62786b8e3582\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/92d0820394a4a922997d9175d79e62786b8e3582\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH+FgCRBK7hj4Ov3rIwAAezoIAD57U4x8l5z67YeH3nX8Q/mV\\nbEPkWihICKKKxqqE3vXjQbOf5993B4S+bht8yshYezsZBlYxfnzhQUm5/m3WhvJH\\n1Xdbc6OoxMH1kRaY8/Hq2uEhkFkxZQzjxRhiNuwcMrUpbw7qls3lKSR42d/UEaWx\\n5mOaQyl/tyd+rxGAB+hVXXZqSaDLHZ52jXvlfcTdeHRd9itub2cmwTJ07YKD9CV5\\noOxwRN9IRHnsaNgfAbPCTGFfJq6jfgeD+rmvtupcGCgWK/JxzfwHG5BYaaTeP9/0\\nMIprMeDu3WbmUlUMtdjSPChj4sGtBbzHhsMwx6WIAJylLKcNDTMtpT0V6o0N7h0=\\n=rS4r\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 92d0820394a4a922997d9175d79e62786b8e3582\\nparent
        b6961954f5454e839fca83bffc9a5ae2bee808ee\\nauthor kuba <xnetcat.dev@gmail.com>
        1696588128 +0200\\ncommitter GitHub <noreply@github.com> 1696588128 +0200\\n\\nbump
        dependencies (#1917)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b6961954f5454e839fca83bffc9a5ae2bee808ee\"}]},{\"sha\":\"1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"node_id\":\"C_kwDOA71kIdoAKDFlMzBkMGFjMDE1ZGQ2NTMwMjMwNTY1ZDJlOTA2OWMyYjIyMTZjN2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-06T10:44:32Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T10:44:32Z\"},\"message\":\"get
        download url when reading file metadata (#1918)\",\"tree\":{\"sha\":\"ad9195bdae6408becf7907f14e13c8626198802e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ad9195bdae6408becf7907f14e13c8626198802e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH+UQCRBK7hj4Ov3rIwAAG80IAGL4jhaXSzmEW6zXmVg1Vbho\\nTzN/c+UV/v9t6npGBRakt7vgH00X1ciceR8kWEz7aUJjx9Ft3cglwYFBHg3IAihP\\nvXVr+TfFBmKwLuwbiA8HpG9Q0TVYuH+hG2mOH9MOFA2QbLRSw/2g0+RBQfLeXumR\\nXXqm4m7i20I20ZSu+Z1kPav4Wy70eTuf7kFtI/NPO1a8NhDi1/gQVwq6cn1EgakC\\ni4eKfRY0n8rnqPvfYFHtD7NFlocl9Ct7YW3kLSWheFhY9k8fQ6bCUoZT+Rok2Mcr\\nTwynmTcAGPrET63WhZr/xUpNwu23m2ofHxoISIYpmmd8eYRNue0wAXI31U13JHY=\\n=pYvX\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree ad9195bdae6408becf7907f14e13c8626198802e\\nparent
        86313d4024d9bb8f3b719759d65fd1ea9a867db4\\nauthor kuba <xnetcat.dev@gmail.com>
        1696589072 +0200\\ncommitter GitHub <noreply@github.com> 1696589072 +0200\\n\\nget
        download url when reading file metadata (#1918)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86313d4024d9bb8f3b719759d65fd1ea9a867db4\"}]},{\"sha\":\"8be7680bb540939ec8003a6117261f9142a1cfda\",\"node_id\":\"C_kwDOA71kIdoAKDhiZTc2ODBiYjU0MDkzOWVjODAwM2E2MTE3MjYxZjkxNDJhMWNmZGE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:49Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:49Z\"},\"message\":\"check
        if youtube-music is accessible\",\"tree\":{\"sha\":\"dd3344a879c53a0f9914921a431904f8682d7c4b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/dd3344a879c53a0f9914921a431904f8682d7c4b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8be7680bb540939ec8003a6117261f9142a1cfda\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8be7680bb540939ec8003a6117261f9142a1cfda\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8be7680bb540939ec8003a6117261f9142a1cfda\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8be7680bb540939ec8003a6117261f9142a1cfda/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1e30d0ac015dd6530230565d2e9069c2b2216c7b\"}]},{\"sha\":\"2ad38aab66db59b45b74dc40daec97508e00006d\",\"node_id\":\"C_kwDOA71kIdoAKDJhZDM4YWFiNjZkYjU5YjQ1Yjc0ZGM0MGRhZWM5NzUwOGUwMDAwNmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:54Z\"},\"message\":\"format
        code\",\"tree\":{\"sha\":\"339e680a77f2c9328f9737c0b49367ed993ad4c2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/339e680a77f2c9328f9737c0b49367ed993ad4c2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2ad38aab66db59b45b74dc40daec97508e00006d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ad38aab66db59b45b74dc40daec97508e00006d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ad38aab66db59b45b74dc40daec97508e00006d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ad38aab66db59b45b74dc40daec97508e00006d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8be7680bb540939ec8003a6117261f9142a1cfda\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8be7680bb540939ec8003a6117261f9142a1cfda\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8be7680bb540939ec8003a6117261f9142a1cfda\"}]},{\"sha\":\"1ba370f1cb196142291c5deca477c089bf4670e5\",\"node_id\":\"C_kwDOA71kIdoAKDFiYTM3MGYxY2IxOTYxNDIyOTFjNWRlY2E0NzdjMDg5YmY0NjcwZTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T19:10:06Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T19:10:06Z\"},\"message\":\"added
        option to skip explicit songs\",\"tree\":{\"sha\":\"bac3ee3b7259f92c9fc57f0ae9c6b061077fd8e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bac3ee3b7259f92c9fc57f0ae9c6b061077fd8e9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1ba370f1cb196142291c5deca477c089bf4670e5\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1ba370f1cb196142291c5deca477c089bf4670e5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1ba370f1cb196142291c5deca477c089bf4670e5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1ba370f1cb196142291c5deca477c089bf4670e5/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2ad38aab66db59b45b74dc40daec97508e00006d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ad38aab66db59b45b74dc40daec97508e00006d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ad38aab66db59b45b74dc40daec97508e00006d\"}]},{\"sha\":\"bb165211050191b5c1247017981312cc94ce307b\",\"node_id\":\"C_kwDOA71kIdoAKGJiMTY1MjExMDUwMTkxYjVjMTI0NzAxNzk4MTMxMmNjOTRjZTMwN2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T20:40:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T20:40:15Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"45400573761a7241306a60364727efc20f1af7f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/45400573761a7241306a60364727efc20f1af7f2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bb165211050191b5c1247017981312cc94ce307b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb165211050191b5c1247017981312cc94ce307b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb165211050191b5c1247017981312cc94ce307b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb165211050191b5c1247017981312cc94ce307b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1ba370f1cb196142291c5deca477c089bf4670e5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1ba370f1cb196142291c5deca477c089bf4670e5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1ba370f1cb196142291c5deca477c089bf4670e5\"}]},{\"sha\":\"554dab6709e603249e65257e14e6bdb1ea585672\",\"node_id\":\"C_kwDOA71kIdoAKDU1NGRhYjY3MDllNjAzMjQ5ZTY1MjU3ZTE0ZTZiZGIxZWE1ODU2NzI\",\"commit\":{\"author\":{\"name\":\"Muhammad
        Ishaque Nizamani\",\"email\":\"49721249+MuhammadNizamani@users.noreply.github.com\",\"date\":\"2023-10-13T16:43:28Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-13T16:43:28Z\"},\"message\":\"DOC:
        adding top 100 contributer pics in does (#1926)\\n\\nCo-authored-by: kuba
        <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"99066b0d6c55d1828293d8fa8fe5be6c0557a0ed\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/99066b0d6c55d1828293d8fa8fe5be6c0557a0ed\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/554dab6709e603249e65257e14e6bdb1ea585672\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlKXOwCRBK7hj4Ov3rIwAAeVUIADKDLT1dTywe88hpmG1InFF8\\nN/uDL+pqhVKNm1k1WC/U0xnYeyYH/s2KdWLhe2N9b+A6BE/7Bl0NRBvJdFYrkcFw\\nT3aMstsu1fWAZUpK7hTA4JMI8Pctl4ho7GoMWKX+UW2Q2iOSh6Cagoj4bGz1RRmI\\ngompBJZ6eSc5s6XEa/XUEEqm/wQhCjQoCdm0jgr3uM/TmHNZmDLfNQFGqM+EC9VE\\n6vy6u5dUhhLUlx2J0zuJYlG7ns0bcWN9vvryjxKk43Q3d2hmUOa02Jv1pWUWJI4m\\ngbQ1+dUmsXUg9oQGFawU8uZlNdjWNorJB4DiTWKU/WHDDltWZcjS0C2p5q3aIdU=\\n=ZZzj\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 99066b0d6c55d1828293d8fa8fe5be6c0557a0ed\\nparent
        bb165211050191b5c1247017981312cc94ce307b\\nauthor Muhammad Ishaque Nizamani
        <49721249+MuhammadNizamani@users.noreply.github.com> 1697215408 +0500\\ncommitter
        GitHub <noreply@github.com> 1697215408 +0200\\n\\nDOC: adding top 100 contributer
        pics in does (#1926)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/554dab6709e603249e65257e14e6bdb1ea585672\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/554dab6709e603249e65257e14e6bdb1ea585672\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/554dab6709e603249e65257e14e6bdb1ea585672/comments\",\"author\":{\"login\":\"MuhammadNizamani\",\"id\":49721249,\"node_id\":\"MDQ6VXNlcjQ5NzIxMjQ5\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/49721249?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/MuhammadNizamani\",\"html_url\":\"https://github.com/MuhammadNizamani\",\"followers_url\":\"https://api.github.com/users/MuhammadNizamani/followers\",\"following_url\":\"https://api.github.com/users/MuhammadNizamani/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/MuhammadNizamani/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/MuhammadNizamani/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/MuhammadNizamani/subscriptions\",\"organizations_url\":\"https://api.github.com/users/MuhammadNizamani/orgs\",\"repos_url\":\"https://api.github.com/users/MuhammadNizamani/repos\",\"events_url\":\"https://api.github.com/users/MuhammadNizamani/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/MuhammadNizamani/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bb165211050191b5c1247017981312cc94ce307b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb165211050191b5c1247017981312cc94ce307b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb165211050191b5c1247017981312cc94ce307b\"}]},{\"sha\":\"698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"node_id\":\"C_kwDOA71kIdoAKDY5ODk4M2E3MmE2M2M5MGFlYWRkYzkzYzFjZTdjOWYwM2JhYWM0OTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-13T20:54:29Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-13T20:54:29Z\"},\"message\":\"fixes
        (#1927)\",\"tree\":{\"sha\":\"a00e7fe2a3fe338d1aaf85534c36bc9e7db58379\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a00e7fe2a3fe338d1aaf85534c36bc9e7db58379\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlKa6FCRBK7hj4Ov3rIwAAmdYIAEfDe61bpBinl6TpaL9B1BF9\\nSv8SNxPzHCcpTgdDNTncb3pdMBOJv/eDyFqgtPprq3BP/c8YoQ17Mj6+wTJa2ILu\\nZsgpZC8d6hfKLuPBLHxkjO0/yXTFJLG8RkrfFZi7X3ELELKqyVc5F026qsqiIlQ4\\nmL+IDQIFoA3horrvGe1QWErlG04xUAPU/xZJJMeuAqvn5kyrdi5v/XoiZf4R6uhz\\n49JOkBvv/VbDO+GS9PaqrL1IJ7pcLHdv+VBPWqeiTL/3g1lZAWgebiJ7WusBqAzT\\nboFYaBNQ0tb2/3YyQ3tHWMHvIFNt1P/m8fs/95CKL+JWFFs+RXht8XezZDVwODQ=\\n=vcxg\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree a00e7fe2a3fe338d1aaf85534c36bc9e7db58379\\nparent
        554dab6709e603249e65257e14e6bdb1ea585672\\nauthor kuba <xnetcat.dev@gmail.com>
        1697230469 +0200\\ncommitter GitHub <noreply@github.com> 1697230469 +0200\\n\\nfixes
        (#1927)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"554dab6709e603249e65257e14e6bdb1ea585672\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/554dab6709e603249e65257e14e6bdb1ea585672\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/554dab6709e603249e65257e14e6bdb1ea585672\"}]},{\"sha\":\"186473d23e5da320f3e1ce5379f0b59842f2db28\",\"node_id\":\"C_kwDOA71kIdoAKDE4NjQ3M2QyM2U1ZGEzMjBmM2UxY2U1Mzc5ZjBiNTk4NDJmMmRiMjg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-13T21:34:53Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-13T21:34:53Z\"},\"message\":\"bump
        version to 4.2.2 (#1928)\",\"tree\":{\"sha\":\"e76b8534ceee6e475a773cfe8cef877c3e2c3e58\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e76b8534ceee6e475a773cfe8cef877c3e2c3e58\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlKbf9CRBK7hj4Ov3rIwAA24sIAFCEWl8OseMMoLBEOXGt2NQY\\nMBlft+1YOg6Qij4/Gef8L+GOyHUxcJzhVrrhrFug71Rc3Ft8VsNmZXtwKd6RFAXk\\nLimXAMqNDEmG2jDsqX7Qsv8cfHwHky32PSNpEry6y0/uTjIb5Vt+bAuXyYP8CXXU\\n9Cf58q/UTFEAIBQCaHmFgYrePYJTD0lzX04/Kpcmc5mQUpnYmZ9rG+dKbWxGOIVU\\nmsFYqKb9EsyFt65BW4hgBWdHwcQFSNDjnHhRB4bbLyRiWwyLlz78KsYyH/sMajwA\\nutqA9ESVTgoImeFp59XP+Iq8BPD/KcpeShcNxEDoxHuxVRJd2lmX5p2xBp4hn7s=\\n=NCZo\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e76b8534ceee6e475a773cfe8cef877c3e2c3e58\\nparent
        698983a72a63c90aeaddc93c1ce7c9f03baac495\\nauthor kuba <xnetcat.dev@gmail.com>
        1697232893 +0200\\ncommitter GitHub <noreply@github.com> 1697232893 +0200\\n\\nbump
        version to 4.2.2 (#1928)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/186473d23e5da320f3e1ce5379f0b59842f2db28/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/698983a72a63c90aeaddc93c1ce7c9f03baac495\"}]},{\"sha\":\"e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"node_id\":\"C_kwDOA71kIdoAKGUzZDY4NDdlNTk3OTkyNDJjZmU5OGMwMjgyYzBjNmU0MDFiYjJmYzY\",\"commit\":{\"author\":{\"name\":\"Aniket
        Patil\",\"email\":\"128228805+AniketP04@users.noreply.github.com\",\"date\":\"2023-10-17T08:50:45Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-17T08:50:45Z\"},\"message\":\"Fixed
        typo in progress_handler.py (#1929)\\n\\nUpdate progress_handler.py\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"b81b84d6015bdef7588722f5bd86b2f2d958d9c6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b81b84d6015bdef7588722f5bd86b2f2d958d9c6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlLkrlCRBK7hj4Ov3rIwAAGqsIAJIO7yrk0/DSNQ4v0k8EjDIe\\nGnPi1fYyDOU+pH+qpnuXZ6JZ6A6b/gPNd5sP+rzQaGvVIQwRRGmLhAOUVr9S5UPd\\ntQO3j7xYFgVxEkITs7N8JK7G3SsFGFZjL97Qxry2k/XL8X33DJIedvAScddG6Svb\\nQ4UHCQEiFL9OD4SupCoucVY5AAUVAKieIOgIYKzsEpk4k6KK9JpQas/qH/vKmzu0\\napF/GIePJ5XFW0AjXRGSC/dFLkAKQQMMXAn0afFwJgCKZL/BpUEiGz4ns8S0sMvS\\n71FdxBFSPalrEH9kgmIelipo2F9Ry1kSf5MeAYvpoyOVDbyB2BJNUA4JcnSTgrc=\\n=w5tA\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree b81b84d6015bdef7588722f5bd86b2f2d958d9c6\\nparent
        186473d23e5da320f3e1ce5379f0b59842f2db28\\nauthor Aniket Patil <128228805+AniketP04@users.noreply.github.com>
        1697532645 +0530\\ncommitter GitHub <noreply@github.com> 1697532645 +0200\\n\\nFixed
        typo in progress_handler.py (#1929)\\n\\nUpdate progress_handler.py\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6/comments\",\"author\":{\"login\":\"AniketP04\",\"id\":128228805,\"node_id\":\"U_kgDOB6SdxQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/128228805?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/AniketP04\",\"html_url\":\"https://github.com/AniketP04\",\"followers_url\":\"https://api.github.com/users/AniketP04/followers\",\"following_url\":\"https://api.github.com/users/AniketP04/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/AniketP04/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/AniketP04/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/AniketP04/subscriptions\",\"organizations_url\":\"https://api.github.com/users/AniketP04/orgs\",\"repos_url\":\"https://api.github.com/users/AniketP04/repos\",\"events_url\":\"https://api.github.com/users/AniketP04/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/AniketP04/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"186473d23e5da320f3e1ce5379f0b59842f2db28\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/186473d23e5da320f3e1ce5379f0b59842f2db28\"}]},{\"sha\":\"388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"node_id\":\"C_kwDOA71kIdoAKDM4OGI1ZjUxNTU0ZjJlZjY2MTAxNmZmNTlhYTYyZTNjNWE4MTZhMDQ\",\"commit\":{\"author\":{\"name\":\"Aniket
        Patil\",\"email\":\"128228805+AniketP04@users.noreply.github.com\",\"date\":\"2023-10-20T12:06:38Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-20T12:06:38Z\"},\"message\":\"Fixed
        typo in formatter.py result.py (#1933)\\n\\n* Update formatter.py\\n\\n* Update
        result.py\\n\\n---------\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"027ac3784dc26230992c0a14bff5c0e937a613e1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/027ac3784dc26230992c0a14bff5c0e937a613e1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlMm1OCRBK7hj4Ov3rIwAActsIAK7S6+k8E1I82wsTzEhCdM7L\\nVD7atNQy4nvtCbgXDyXJeSHu01eRbI0yyRENW8XBQ80gqaAJyfvAqjtTrR54Si0W\\n5IRQ3K3T1O8uWyP6UWmGM4TDpuA9th9rBfFwvy/jCM7MrDcsF2Pu9k0qJnzEtyKm\\nSncBTRD8GBv+7UQ/ojNfVvHBAoK0eubeAkI2C02kaQsPjvfQEwc60h5TujZ+lrFU\\nUKYvdvl981Id6g/LSA8apyPD+X19ex2DRV7EZW68pdLQTeSb2N/BqLTU1CDYDGpN\\nBYqK2V+joD9bMmchdzx3arPuAlANcMbMG12DAabNh83SBoXXlYMVuVcbPotBf+c=\\n=GTih\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 027ac3784dc26230992c0a14bff5c0e937a613e1\\nparent
        e3d6847e59799242cfe98c0282c0c6e401bb2fc6\\nauthor Aniket Patil <128228805+AniketP04@users.noreply.github.com>
        1697803598 +0530\\ncommitter GitHub <noreply@github.com> 1697803598 +0200\\n\\nFixed
        typo in formatter.py result.py (#1933)\\n\\n* Update formatter.py\\n\\n* Update
        result.py\\n\\n---------\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04/comments\",\"author\":{\"login\":\"AniketP04\",\"id\":128228805,\"node_id\":\"U_kgDOB6SdxQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/128228805?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/AniketP04\",\"html_url\":\"https://github.com/AniketP04\",\"followers_url\":\"https://api.github.com/users/AniketP04/followers\",\"following_url\":\"https://api.github.com/users/AniketP04/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/AniketP04/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/AniketP04/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/AniketP04/subscriptions\",\"organizations_url\":\"https://api.github.com/users/AniketP04/orgs\",\"repos_url\":\"https://api.github.com/users/AniketP04/repos\",\"events_url\":\"https://api.github.com/users/AniketP04/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/AniketP04/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\"}]},{\"sha\":\"66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"node_id\":\"C_kwDOA71kIdoAKDY2ZmFjZjI3NWE1MjkxZDc2NmFiYTQzYTgyMWQ5ZGM4YmExYWVmZmQ\",\"commit\":{\"author\":{\"name\":\"Biresh
        Biswas\",\"email\":\"90760974+Billa05@users.noreply.github.com\",\"date\":\"2023-10-22T15:10:54Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-22T15:10:54Z\"},\"message\":\"feat:
        --ignore-album (#1934)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"084ced35de62f8aecb3ee5ac0c29dabfd5a3c13b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/084ced35de62f8aecb3ee5ac0c29dabfd5a3c13b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlNTt+CRBK7hj4Ov3rIwAAFyQIAG3ScmOw4xOaE4tES0AJ0RMY\\ngns6G2e9F0SSPIEdvZ8unb9uqsarBkxg7jgHLo0Liz5tIJmmjhWUzBajvCXU1Vo7\\nvJ2Oh+sbUluCyUOfF6vlSmrCWR2z2KBFK8Ml7Kl4mB/JCmIoU2w3Oh+6vfmJ8N3R\\nNz/066pyTGSynIGxneSGIvRUXLVXpdZdLrpCTb7pciXub4g2HbGUGbpD2XgNo3Tq\\ndsS56EYPz+uzgcZNotyeuPJ/ENHSV+vESj2D97rX8AJ9gXBModLZ6FKLhWXOEORI\\nUhxZqQLNYiPUjvGBlxfXqm2dTEZ0zA+FB42sOy+KtExfCvum2jbVhW8Z5QrJMSs=\\n=JzzU\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 084ced35de62f8aecb3ee5ac0c29dabfd5a3c13b\\nparent
        388b5f51554f2ef661016ff59aa62e3c5a816a04\\nauthor Biresh Biswas <90760974+Billa05@users.noreply.github.com>
        1697987454 +0530\\ncommitter GitHub <noreply@github.com> 1697987454 +0200\\n\\nfeat:
        --ignore-album (#1934)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd/comments\",\"author\":{\"login\":\"Billa05\",\"id\":90760974,\"node_id\":\"MDQ6VXNlcjkwNzYwOTc0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/90760974?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Billa05\",\"html_url\":\"https://github.com/Billa05\",\"followers_url\":\"https://api.github.com/users/Billa05/followers\",\"following_url\":\"https://api.github.com/users/Billa05/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Billa05/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Billa05/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Billa05/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Billa05/orgs\",\"repos_url\":\"https://api.github.com/users/Billa05/repos\",\"events_url\":\"https://api.github.com/users/Billa05/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Billa05/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/388b5f51554f2ef661016ff59aa62e3c5a816a04\"}]},{\"sha\":\"2ecda4c2184963ebff81ba896ee8769f29da11da\",\"node_id\":\"C_kwDOA71kIdoAKDJlY2RhNGMyMTg0OTYzZWJmZjgxYmE4OTZlZTg3NjlmMjlkYTExZGE\",\"commit\":{\"author\":{\"name\":\"Aniket
        Patil\",\"email\":\"128228805+AniketP04@users.noreply.github.com\",\"date\":\"2023-10-24T08:54:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-24T08:54:44Z\"},\"message\":\"Fixed
        typo in installation.md (#1936)\\n\\nUpdate installation.md\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"5b1c639691dd3188f17e1963f68163743c91ba5b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5b1c639691dd3188f17e1963f68163743c91ba5b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlN4ZUCRBK7hj4Ov3rIwAAyJUIAF9oPNEJBz4hkvNEUbKRXGhL\\nO0iQoysXgzFuA9qNGWUPFuULsBnCaxa06vKyo6a74MpnTftQMK5srNFR7c70QBZc\\n2BKFBNrNRgSKzPwl7Ytz487EY3R0wr6EssL/M2sf56S2FMjDOwP1k+D7183z/dBY\\nOIA62/aNEx63r0vxnxRO3U3xtj8UNJoxKFYizXIxpnSYiKO5chohD5qHVBg7veSl\\nt1BTpdKBshM5A2ivFvZauVvOkaY+bvOCjQiHRw8DTvSwG46RGizRAXcXm8UOEkiK\\nM0vmyR5XcflP8pgMJt8/R4l8X9R2Xfnt1KgR0HLmAQ31lOaqDCYIDA8azsg2PqY=\\n=QUNR\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 5b1c639691dd3188f17e1963f68163743c91ba5b\\nparent
        66facf275a5291d766aba43a821d9dc8ba1aeffd\\nauthor Aniket Patil <128228805+AniketP04@users.noreply.github.com>
        1698137684 +0530\\ncommitter GitHub <noreply@github.com> 1698137684 +0200\\n\\nFixed
        typo in installation.md (#1936)\\n\\nUpdate installation.md\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ecda4c2184963ebff81ba896ee8769f29da11da/comments\",\"author\":{\"login\":\"AniketP04\",\"id\":128228805,\"node_id\":\"U_kgDOB6SdxQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/128228805?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/AniketP04\",\"html_url\":\"https://github.com/AniketP04\",\"followers_url\":\"https://api.github.com/users/AniketP04/followers\",\"following_url\":\"https://api.github.com/users/AniketP04/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/AniketP04/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/AniketP04/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/AniketP04/subscriptions\",\"organizations_url\":\"https://api.github.com/users/AniketP04/orgs\",\"repos_url\":\"https://api.github.com/users/AniketP04/repos\",\"events_url\":\"https://api.github.com/users/AniketP04/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/AniketP04/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/66facf275a5291d766aba43a821d9dc8ba1aeffd\"}]},{\"sha\":\"23549294c2ea8679c2a724932b70913f1a34f876\",\"node_id\":\"C_kwDOA71kIdoAKDIzNTQ5Mjk0YzJlYTg2NzljMmE3MjQ5MzJiNzA5MTNmMWEzNGY4NzY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-27T13:44:59Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-27T13:44:59Z\"},\"message\":\"fixed
        spotify.link for non song links\",\"tree\":{\"sha\":\"f3aef07f622f91fa4f3c3ae92b7dde2748354755\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f3aef07f622f91fa4f3c3ae92b7dde2748354755\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/23549294c2ea8679c2a724932b70913f1a34f876\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlO77bCRBK7hj4Ov3rIwAAjTsIAIuvWbXvz0vwmuXPgEfSCiBa\\niimyeiwrf43qkBlBaoTkDd4tZYjxYZVjBLBhP5Sueux9ywcQ1wNhRlTJL6hNBkOu\\nNsq3nWqsaajPm2BWGPFmwvFDOVUQjxkSn3qJ4r6Pt20+ObsIeVTMxRs9bxDwe0GT\\nSb8ZZKh7igc2sHJNRViKGSkFx6RYFlTZlSkGJKH4G1oltPcfWU2vv/HuHz652dm+\\n5BFTyX0vfbgaMyMlSeMpZMqftJzu7W5I0z/XAoHK1S88yt6o4qE6zbElAlX9oC63\\nS53Hwzv5r2JmNaQdk4NiHNfPVAg/kG3g2WsB+zF0IEW1Zb5DR7ockww2RLTEd+U=\\n=oNsU\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree f3aef07f622f91fa4f3c3ae92b7dde2748354755\\nparent
        2ecda4c2184963ebff81ba896ee8769f29da11da\\nauthor kuba <xnetcat.dev@gmail.com>
        1698414299 +0200\\ncommitter GitHub <noreply@github.com> 1698414299 +0200\\n\\nfixed
        spotify.link for non song links\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/23549294c2ea8679c2a724932b70913f1a34f876\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/23549294c2ea8679c2a724932b70913f1a34f876\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/23549294c2ea8679c2a724932b70913f1a34f876/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2ecda4c2184963ebff81ba896ee8769f29da11da\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ecda4c2184963ebff81ba896ee8769f29da11da\"}]},{\"sha\":\"83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"node_id\":\"C_kwDOA71kIdoAKDgzYTEwYjRmNDczNjVjMTQyOWEzY2JkNzhmNzJmMjU1ZjI1OTZjYTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-27T14:13:21Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-27T14:13:21Z\"},\"message\":\"added
        timer\",\"tree\":{\"sha\":\"8852d847d90ae192e6c0e9bf7d1157d7781692f1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8852d847d90ae192e6c0e9bf7d1157d7781692f1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlO8WBCRBK7hj4Ov3rIwAACucIAD+o3hcu9qPOSn47y1PUJdce\\n7zDxFBWjGYIAsK5XhxQ1d5qODtGsGMyFanSJ+kj5JuEHu4nOfMdwKIdgXQaf4Z/S\\nDHd0hX2NRZ2yvFa+zd3UQEz4VCfLdCcXSY+jRedWoHNIHy2stYq0/rgUAzYVaEO2\\nQkGzjJGfEeAJthkHDe1Qfeb4j8jX7Tg/h8TugTt8P3RmOWkPkUNUHDsV1gDIOT91\\nBp8J0yewmC7f5i9Q1w718uHPMtgbHA1ftNrw+XPUNR5t0GSGi1N97dBTfm746p8a\\nQn/jvfwmFigC1g0ufl27Ct8QOWoTBLkPwUbcLtoWL/8HHwZ38LyR2+6ZcZ4IvkI=\\n=XyMd\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8852d847d90ae192e6c0e9bf7d1157d7781692f1\\nparent
        23549294c2ea8679c2a724932b70913f1a34f876\\nauthor kuba <xnetcat.dev@gmail.com>
        1698416001 +0200\\ncommitter GitHub <noreply@github.com> 1698416001 +0200\\n\\nadded
        timer\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"23549294c2ea8679c2a724932b70913f1a34f876\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/23549294c2ea8679c2a724932b70913f1a34f876\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/23549294c2ea8679c2a724932b70913f1a34f876\"}]},{\"sha\":\"b04a86428db9f031873a7c23c965534cd681c1c6\",\"node_id\":\"C_kwDOA71kIdoAKGIwNGE4NjQyOGRiOWYwMzE4NzNhN2MyM2M5NjU1MzRjZDY4MWMxYzY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-27T14:25:36Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-27T14:25:36Z\"},\"message\":\"added
        log format option\",\"tree\":{\"sha\":\"002292901501ef888ed025b402fad56f61a107fd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/002292901501ef888ed025b402fad56f61a107fd\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b04a86428db9f031873a7c23c965534cd681c1c6\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlO8hgCRBK7hj4Ov3rIwAAn6IIAHINvsHU9zJMiHAtDHKewcmq\\n3CIwCgAKG7LonJj9zCZIy2heP5Gqd2i0ZKyuaPuMCMV+Q4GTA7qGCUGrmsCgB4SP\\nBiZb8zkXP/fUnWeMmhFkpN5qbNeGYqn+mb7V8ND7AB8G8GfFyJxe56VNB/YhGkrR\\nHkJuETXRkkv2UP3zHLcbNMExh+ZHxFUdeoM1MyoqJv1rP13+aC5UwPa8Y1MeEKYv\\nnQvBUXyd142cSIW+EPb0k5o9nrNTt16slTYEvtmFEQpCPeJgRljAbD8eTTj1ncbb\\n4mjXI4OItlIaWo8SFMlo572dydUy09sE/T6pbw1PGOx00+0VDSDaiv+cZ0YO8Ig=\\n=RlCt\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 002292901501ef888ed025b402fad56f61a107fd\\nparent
        83a10b4f47365c1429a3cbd78f72f255f2596ca0\\nauthor kuba <xnetcat.dev@gmail.com>
        1698416736 +0200\\ncommitter GitHub <noreply@github.com> 1698416736 +0200\\n\\nadded
        log format option\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b04a86428db9f031873a7c23c965534cd681c1c6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b04a86428db9f031873a7c23c965534cd681c1c6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b04a86428db9f031873a7c23c965534cd681c1c6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/83a10b4f47365c1429a3cbd78f72f255f2596ca0\"}]},{\"sha\":\"359f8fe6889a728f35eea9d014d7020d79fda479\",\"node_id\":\"C_kwDOA71kIdoAKDM1OWY4ZmU2ODg5YTcyOGYzNWVlYTlkMDE0ZDcwMjBkNzlmZGE0Nzk\",\"commit\":{\"author\":{\"name\":\"Ibukun
        Ekunwe\",\"email\":\"ekunweibukun159357@gmail.com\",\"date\":\"2023-10-30T08:21:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-30T08:21:44Z\"},\"message\":\"update
        documentation (#1947)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"e22deeb582f3bd7737a36c404e89593facebc1b5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e22deeb582f3bd7737a36c404e89593facebc1b5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/359f8fe6889a728f35eea9d014d7020d79fda479\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlP2eYCRBK7hj4Ov3rIwAAiNYIAIYvuJo3+O+5wy81pKUtMzxQ\\nELY/HcghPClS9TvZtXQSckKl9nval+jQDCsCWZIf99rzTVbo+w/1JnxjUoxAhYVU\\nG0JJEypdTUWmI6vZCVXCucYrd+sylgCPZ82yPEFi1PnhSaftTHubjTv9tucYAN7u\\nrojOjrm4A0KddXprf7f4RTgt43lrcIE9ilh2kYJRxuott/PbiW/3x1JrAWxqff43\\nYhnOyF+Twd7GnP2ilp2lhBud0uxNNOLwNaktYv8iYL2Q2M9xDuDlOT9T2L3ULQyM\\nr3MwMg8ZbhrJZs2FsjxqPEJbtVtQACAFaDZaL5F/zbS7AI50tAlOt6HYfmpsFM8=\\n=sxwc\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e22deeb582f3bd7737a36c404e89593facebc1b5\\nparent
        b04a86428db9f031873a7c23c965534cd681c1c6\\nauthor Ibukun Ekunwe <ekunweibukun159357@gmail.com>
        1698654104 +0100\\ncommitter GitHub <noreply@github.com> 1698654104 +0100\\n\\nupdate
        documentation (#1947)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/359f8fe6889a728f35eea9d014d7020d79fda479\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/359f8fe6889a728f35eea9d014d7020d79fda479\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/359f8fe6889a728f35eea9d014d7020d79fda479/comments\",\"author\":{\"login\":\"drvnprgrmr\",\"id\":67306305,\"node_id\":\"MDQ6VXNlcjY3MzA2MzA1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/67306305?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/drvnprgrmr\",\"html_url\":\"https://github.com/drvnprgrmr\",\"followers_url\":\"https://api.github.com/users/drvnprgrmr/followers\",\"following_url\":\"https://api.github.com/users/drvnprgrmr/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/drvnprgrmr/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/drvnprgrmr/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/drvnprgrmr/subscriptions\",\"organizations_url\":\"https://api.github.com/users/drvnprgrmr/orgs\",\"repos_url\":\"https://api.github.com/users/drvnprgrmr/repos\",\"events_url\":\"https://api.github.com/users/drvnprgrmr/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/drvnprgrmr/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b04a86428db9f031873a7c23c965534cd681c1c6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b04a86428db9f031873a7c23c965534cd681c1c6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b04a86428db9f031873a7c23c965534cd681c1c6\"}]},{\"sha\":\"912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"node_id\":\"C_kwDOA71kIdoAKDkxMmFkYzkwYzUzNGMxYTFlNjRmMGI0OGZhMDRiODVjMGM3NGUwZjA\",\"commit\":{\"author\":{\"name\":\"Biresh
        Biswas\",\"email\":\"90760974+Billa05@users.noreply.github.com\",\"date\":\"2023-10-30T08:25:55Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-30T08:25:55Z\"},\"message\":\"Feat:
        redownload flag for meta (#1944)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"0dd0827ba8391d8673a53940b08c25a4d5e80eac\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0dd0827ba8391d8673a53940b08c25a4d5e80eac\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlP2iTCRBK7hj4Ov3rIwAAj48IABiCmphzggh8oz6DboEyubS7\\nYezEgpbmXqjm9H2uuwKky4r/5LPejPDuAjRM/Pasmc2n0lUiG/knW7zVDSqYqZOB\\niuj5wx+pewM7LNbqQVl1yrPQ513mW4JkxPu63UaSBFCK4uhuQ+0Kk8fISXBn62yD\\neZRNi7tc7dlG9FyotAcPfameawf/JHla4vH4WohfFVLsibZgjB3rj5Kyjh1DjHmJ\\nv7Gcf8NG70lue20FO+tD5b2gUHmUpWgB8fl3znonafsWlaBy22ASBqrqnjwmcXLu\\nk6gBrlsjYSFa0ZVuNxKixGajtxytJO2YncPYX/KZMTyaUJ/71Em9U6HcgPgI6/8=\\n=dJnU\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 0dd0827ba8391d8673a53940b08c25a4d5e80eac\\nparent
        359f8fe6889a728f35eea9d014d7020d79fda479\\nauthor Biresh Biswas <90760974+Billa05@users.noreply.github.com>
        1698654355 +0530\\ncommitter GitHub <noreply@github.com> 1698654355 +0100\\n\\nFeat:
        redownload flag for meta (#1944)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0/comments\",\"author\":{\"login\":\"Billa05\",\"id\":90760974,\"node_id\":\"MDQ6VXNlcjkwNzYwOTc0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/90760974?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Billa05\",\"html_url\":\"https://github.com/Billa05\",\"followers_url\":\"https://api.github.com/users/Billa05/followers\",\"following_url\":\"https://api.github.com/users/Billa05/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Billa05/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Billa05/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Billa05/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Billa05/orgs\",\"repos_url\":\"https://api.github.com/users/Billa05/repos\",\"events_url\":\"https://api.github.com/users/Billa05/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Billa05/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"359f8fe6889a728f35eea9d014d7020d79fda479\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/359f8fe6889a728f35eea9d014d7020d79fda479\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/359f8fe6889a728f35eea9d014d7020d79fda479\"}]},{\"sha\":\"ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"node_id\":\"C_kwDOA71kIdoAKGFiNWVmMTdkZDQyZDVlZWE0YzEwNmUxM2JlZTk4YjQ4MDhkNDExN2Y\",\"commit\":{\"author\":{\"name\":\"Ed\",\"email\":\"mredgaryu@gmail.com\",\"date\":\"2023-10-30T08:26:41Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-30T08:26:41Z\"},\"message\":\"All
        user saved albums (#1945)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"c244eea8008a670edd1d271d452a84bf8ba67920\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c244eea8008a670edd1d271d452a84bf8ba67920\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlP2jBCRBK7hj4Ov3rIwAAlZAIAEy4Rb9I0CLIUGwh2OuktL+I\\nLBhnj2gu1xIQ0/jH60Lxk5SSOOZ4o2FSfjolmOerqAUO7ZEaBuMY0BawfOxyCSHv\\ncbe2Y+SuY1rjN1ONQbmUCR/ahQJdfY139NcA5nWy4BOh7HQuviQ99l1+CIVlPqsJ\\nCjIQIynxXRYZCgVUUdFvuB6cJOFjUNkGrfvfW1nQsU+doivGOJr2NWijV5sWsk2W\\nXy9MQtvjZvSprVwCXhA/8IVOUKGuD9d+jpz9hNd7/BhnY2NBVm/rXAIoOm/b6ZCN\\n1gGSPblCHLEPCSXhxs6DHB/AIza3fJWvOPeekMBNVx+kX/YJ4OlWXT0N8uuRR5M=\\n=c0MZ\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree c244eea8008a670edd1d271d452a84bf8ba67920\\nparent
        912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\\nauthor Ed <mredgaryu@gmail.com>
        1698654401 -0700\\ncommitter GitHub <noreply@github.com> 1698654401 +0100\\n\\nAll
        user saved albums (#1945)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f/comments\",\"author\":{\"login\":\"edy252\",\"id\":11168525,\"node_id\":\"MDQ6VXNlcjExMTY4NTI1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/11168525?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/edy252\",\"html_url\":\"https://github.com/edy252\",\"followers_url\":\"https://api.github.com/users/edy252/followers\",\"following_url\":\"https://api.github.com/users/edy252/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/edy252/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/edy252/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/edy252/subscriptions\",\"organizations_url\":\"https://api.github.com/users/edy252/orgs\",\"repos_url\":\"https://api.github.com/users/edy252/repos\",\"events_url\":\"https://api.github.com/users/edy252/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/edy252/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\"}]},{\"sha\":\"e828353611c94dca7514c966878e371b25925097\",\"node_id\":\"C_kwDOA71kIdoAKGU4MjgzNTM2MTFjOTRkY2E3NTE0Yzk2Njg3OGUzNzFiMjU5MjUwOTc\",\"commit\":{\"author\":{\"name\":\"Edin
        O\",\"email\":\"22921456+edinosma@users.noreply.github.com\",\"date\":\"2023-11-10T14:54:06Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-10T14:54:06Z\"},\"message\":\"Change
        URI Auth Port from 8080 to 9900 (something less common) (#1959)\\n\\nUpdate
        spotify.py\\r\\n\\r\\nChange URI auth port from 8080 to 9900 (something less
        common)\\r\\n\\r\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"1ae376b17ed048abc503cf3a21e50e544751363f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1ae376b17ed048abc503cf3a21e50e544751363f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e828353611c94dca7514c966878e371b25925097\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlTkQOCRBK7hj4Ov3rIwAAgPcIAIcIGHHLnWFz8KsWrGt+wsuy\\nuSNvik2rH63QfxkAvKdfHvu58I2lt6Z2A5b6Ggo0+1T30WOCSAO729aiY0sR8zzH\\n5+dGmLT6DPl2wxrP5d6Bf2ddQO52MiLLTZKMCJzQlSrGzcZsMEyR6VhIbxKR+POj\\nx9lt+gjMfyQO+UJGPSPu7XHUN398mUEN6Amqlw/IiS60EF2tBC2M7yC7Q/WgCEQZ\\nfd3dw1uP+gy2EFOWONElfqPa7wdMDP1re0oPB822LpL4je2zWVNO9fvfsyoj2FtP\\njb8E3kLr9FTqwf+SI0NhaS/yJwJuf1qCzkBlcajYNXsZt9NjsiTj/smVRZPLvXY=\\n=1LSp\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 1ae376b17ed048abc503cf3a21e50e544751363f\\nparent
        ab5ef17dd42d5eea4c106e13bee98b4808d4117f\\nauthor Edin O <22921456+edinosma@users.noreply.github.com>
        1699628046 -0500\\ncommitter GitHub <noreply@github.com> 1699628046 +0100\\n\\nChange
        URI Auth Port from 8080 to 9900 (something less common) (#1959)\\n\\nUpdate
        spotify.py\\r\\n\\r\\nChange URI auth port from 8080 to 9900 (something less
        common)\\r\\n\\r\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e828353611c94dca7514c966878e371b25925097\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e828353611c94dca7514c966878e371b25925097\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e828353611c94dca7514c966878e371b25925097/comments\",\"author\":{\"login\":\"edinosma\",\"id\":22921456,\"node_id\":\"MDQ6VXNlcjIyOTIxNDU2\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/22921456?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/edinosma\",\"html_url\":\"https://github.com/edinosma\",\"followers_url\":\"https://api.github.com/users/edinosma/followers\",\"following_url\":\"https://api.github.com/users/edinosma/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/edinosma/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/edinosma/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/edinosma/subscriptions\",\"organizations_url\":\"https://api.github.com/users/edinosma/orgs\",\"repos_url\":\"https://api.github.com/users/edinosma/repos\",\"events_url\":\"https://api.github.com/users/edinosma/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/edinosma/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\"}]},{\"sha\":\"af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"node_id\":\"C_kwDOA71kIdoAKGFmNWM4ZjdkZjdjZTkxMTBhZmMyZDExNTAyMTJiOTQ1ZDI2YzlhYzk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:23:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"set
        log_format to None by default\",\"tree\":{\"sha\":\"585283cab69609debbfcd878dd05f9f955cdeb45\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/585283cab69609debbfcd878dd05f9f955cdeb45\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e828353611c94dca7514c966878e371b25925097\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e828353611c94dca7514c966878e371b25925097\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e828353611c94dca7514c966878e371b25925097\"}]},{\"sha\":\"1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"node_id\":\"C_kwDOA71kIdoAKDFhMmM5ZDgxYTFlOTBhMWE3ZWY4YTA1Y2U2ZDZkY2VlMzBmNDQ1MTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:24:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"fixed
        time calculations\",\"tree\":{\"sha\":\"5cdf5a6052208d4e40f77203a31c1790dfbddebc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5cdf5a6052208d4e40f77203a31c1790dfbddebc\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\"}]},{\"sha\":\"40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"node_id\":\"C_kwDOA71kIdoAKDQwMjYyYzhkNDNlMmY3Y2E2MmU0OWY0YjVkMmIzZjExMWFiZWRhMWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:24:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"format
        with black\",\"tree\":{\"sha\":\"6f527fb84f9d259e8797c76d69e898579796e247\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6f527fb84f9d259e8797c76d69e898579796e247\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\"}]},{\"sha\":\"14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"node_id\":\"C_kwDOA71kIdoAKDE0MTk0YTE4YTZlNzI3ZmFhM2NkNTc4MWZiZWFhYTkyZTM5ZjFhNDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:29:27Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"fixing
        tests workflow\",\"tree\":{\"sha\":\"e3f6b8838b62a3c64d1b9bb350d15b00b757b879\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e3f6b8838b62a3c64d1b9bb350d15b00b757b879\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\"}]},{\"sha\":\"7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"node_id\":\"C_kwDOA71kIdoAKDdmMzYxZTFjYjE2ZjFmOTNlOTBiYTdiMWVhMDA2ZTIxMTY4ZGZkMTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:37:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"fixing
        matching algo\",\"tree\":{\"sha\":\"dedae0d338bcaee74c007244d2607cdcfb2708e2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/dedae0d338bcaee74c007244d2607cdcfb2708e2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\"}]},{\"sha\":\"b0b962354b4fe5e4478617e086fede0293edcd68\",\"node_id\":\"C_kwDOA71kIdoAKGIwYjk2MjM1NGI0ZmU1ZTQ0Nzg2MTdlMDg2ZmVkZTAyOTNlZGNkNjg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:49:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:49:11Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"ec30c8ce59efccf29ec8f583dec696e2d08fa01c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ec30c8ce59efccf29ec8f583dec696e2d08fa01c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b0b962354b4fe5e4478617e086fede0293edcd68\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0b962354b4fe5e4478617e086fede0293edcd68\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b0b962354b4fe5e4478617e086fede0293edcd68\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0b962354b4fe5e4478617e086fede0293edcd68/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\"}]},{\"sha\":\"e3fe21b3e605f58c03835d0a716d0d681567c342\",\"node_id\":\"C_kwDOA71kIdoAKGUzZmUyMWIzZTYwNWY1OGMwMzgzNWQwYTcxNmQwZDY4MTU2N2MzNDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:50:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:50:59Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"3ea562c5e90001917f5cf95901fb8f1b533cd6b2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3ea562c5e90001917f5cf95901fb8f1b533cd6b2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3fe21b3e605f58c03835d0a716d0d681567c342/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b0b962354b4fe5e4478617e086fede0293edcd68\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0b962354b4fe5e4478617e086fede0293edcd68\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b0b962354b4fe5e4478617e086fede0293edcd68\"}]},{\"sha\":\"90f0b31ef0cd54270172987841f255bffb158e94\",\"node_id\":\"C_kwDOA71kIdoAKDkwZjBiMzFlZjBjZDU0MjcwMTcyOTg3ODQxZjI1NWJmZmIxNThlOTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:54:56Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:54:56Z\"},\"message\":\"fixed
        log format argument parsing\",\"tree\":{\"sha\":\"fb7b7be5adaab01fa7351f003b70278aa352e333\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/fb7b7be5adaab01fa7351f003b70278aa352e333\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/90f0b31ef0cd54270172987841f255bffb158e94\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/90f0b31ef0cd54270172987841f255bffb158e94\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/90f0b31ef0cd54270172987841f255bffb158e94\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/90f0b31ef0cd54270172987841f255bffb158e94/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e3fe21b3e605f58c03835d0a716d0d681567c342\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3fe21b3e605f58c03835d0a716d0d681567c342\"}]},{\"sha\":\"3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"node_id\":\"C_kwDOA71kIdoAKDNiYTY3NzE5Y2QwZWFkNDhjNWRiMDRiODkyNTc2MGMwY2Q5YWFjMTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:59:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:59:44Z\"},\"message\":\"fixed
        help message\",\"tree\":{\"sha\":\"7d1cdca7f92ed0c2c663e013bbf546210516c60b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7d1cdca7f92ed0c2c663e013bbf546210516c60b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"90f0b31ef0cd54270172987841f255bffb158e94\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/90f0b31ef0cd54270172987841f255bffb158e94\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/90f0b31ef0cd54270172987841f255bffb158e94\"}]},{\"sha\":\"6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"node_id\":\"C_kwDOA71kIdoAKDZkMmRhZDkwNDIxYzhlZjk5NDI4ZDllNWU0N2EzNTEwNjc5ZDUwZjk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T16:02:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T16:02:30Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"b5894d2c72fea8b984b490b5d8511fd288f3c456\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b5894d2c72fea8b984b490b5d8511fd288f3c456\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba67719cd0ead48c5db04b8925760c0cd9aac15\"}]},{\"sha\":\"affddb49599c5a6a4972e67c68e788474015f06d\",\"node_id\":\"C_kwDOA71kIdoAKGFmZmRkYjQ5NTk5YzVhNmE0OTcyZTY3YzY4ZTc4ODQ3NDAxNWYwNmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:41:05Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:41:05Z\"},\"message\":\"perform
        subdomain swap on youtube playlists\",\"tree\":{\"sha\":\"4411133c12c52f025ee52805c189e1ac963d0d1b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4411133c12c52f025ee52805c189e1ac963d0d1b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/affddb49599c5a6a4972e67c68e788474015f06d\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV3uCCRBK7hj4Ov3rIwAA6xAIAAbxir6EE4+9TVM3S8XWSr9k\\nZkxoZxDfbdzC3Z2aJp36qiat4OyxzEjNaW5YLdpibIFOu3CgZv7hm7vCVpkW6Z9I\\niJE2DVLGv1QVfXkkCDRVo6VjqxeaPTBAroZ3bFXcQKEiKPHW5fPSGkNqYEneaMW5\\n1M8ha4nndjqRU3PqEh2RRAuBgV3f0E+z4/RfO2GgzvzjmF0z2r8ZEF9wS4Gl+777\\nDzbqz+B2cf/jziZ4ZdQsokAPZaMBGo6r8V1o5ud//41zB3PBtIP4MkVWpupQ95Vr\\n8g2v0BKnkEtSY4jbhzVp+J3Rqb8rLRQXTw4C7aagOIOqtVKoOED9/+QKAm+MQe8=\\n=TMdC\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree 4411133c12c52f025ee52805c189e1ac963d0d1b\\nparent
        6d2dad90421c8ef99428d9e5e47a3510679d50f9\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232065 +0000\\ncommitter GitHub <noreply@github.com> 1700232065 +0000\\n\\nperform
        subdomain swap on youtube playlists\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/affddb49599c5a6a4972e67c68e788474015f06d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/affddb49599c5a6a4972e67c68e788474015f06d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/affddb49599c5a6a4972e67c68e788474015f06d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6d2dad90421c8ef99428d9e5e47a3510679d50f9\"}]},{\"sha\":\"67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"node_id\":\"C_kwDOA71kIdoAKDY3YjA5Y2YzMGNlMDc3NGYwMjRiMzEwZDQzZjYwMmQxZmI0YmVhMzQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:46:09Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:46:09Z\"},\"message\":\"updated
        quality docs/options\",\"tree\":{\"sha\":\"49dd2ca47fd999f3cc9feb6572f36a8b366c51c9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/49dd2ca47fd999f3cc9feb6572f36a8b366c51c9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV3yxCRBK7hj4Ov3rIwAAC04IAK0GftihjKneOjWmJG+5falc\\n0xqMPLfiVuXkMC1hmLVylEZUUg1UdhLoWDkcgIXuiqQZuwlpv6oTuzj4tf4McfZO\\nYmsPjD7V2ugTDxtIRaiuR06jmUshzNSB4EDyc4gX0x+YBlIwkpfc4ywxz5SYEhn+\\ntFTpY4NnuSyEeTDcEsDg4K9vc8sSiGyvv7PVHNkBLkqj+AS6WC7KHSIPq417S4km\\n2yiZtvDpmWiY1bprSxSNfMU58yIcZaIbWRhalHjsHNXZZysbG9YB0zxLfjq5TLcv\\nTU84QlA41RGP4jsNnuN0mJiC/i3lOkRrsYyIPzGbiLpkpygasCFLDdPRh6bdNCE=\\n=s8lj\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree 49dd2ca47fd999f3cc9feb6572f36a8b366c51c9\\nparent
        affddb49599c5a6a4972e67c68e788474015f06d\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232369 +0000\\ncommitter GitHub <noreply@github.com> 1700232369 +0000\\n\\nupdated
        quality docs/options\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"affddb49599c5a6a4972e67c68e788474015f06d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/affddb49599c5a6a4972e67c68e788474015f06d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/affddb49599c5a6a4972e67c68e788474015f06d\"}]},{\"sha\":\"67b0a39ccdcc77c9740ca31809392901d3d37646\",\"node_id\":\"C_kwDOA71kIdoAKDY3YjBhMzljY2RjYzc3Yzk3NDBjYTMxODA5MzkyOTAxZDNkMzc2NDY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:46:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:46:44Z\"},\"message\":\"black
        .\",\"tree\":{\"sha\":\"b21a52b9aadb2f05465447006ed09da1be6efeaa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b21a52b9aadb2f05465447006ed09da1be6efeaa\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV3zUCRBK7hj4Ov3rIwAAi5kIAHssqFyWlRkZS2wTrJEapj+o\\nSa6OEuIJFkNFMZrp+vQHRbOaWI7anPTGvVTqiealj+bdftET/Y+IPSTUU+ssjtyE\\ngf2HnFIAgaEIRZiX43jNBtLrs22hD/SaJ7OMMuYbrdKUAKw4djUnMVWxnqaSpIyA\\nLE7bLlU5cLooOVBIfmLdgCRUw4rrFlZjeSBPxkeHeUkK4PIfSQ9Ex89H4wT914BJ\\nmk6jyn/rAUZ9WR+jA+zjG93eYZ4CLH7d841W4UISIeaL01y9BuA46XyD5W6q2EYj\\nHcP2/8raOpIRnFgYs2FSXvQKojwG8Hz5hE5FDwTEsZ59OWtDAV9LLCQ8tr3/AR0=\\n=rJ3u\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree b21a52b9aadb2f05465447006ed09da1be6efeaa\\nparent
        67b09cf30ce0774f024b310d43f602d1fb4bea34\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232404 +0000\\ncommitter GitHub <noreply@github.com> 1700232404 +0000\\n\\nblack
        .\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b0a39ccdcc77c9740ca31809392901d3d37646/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b09cf30ce0774f024b310d43f602d1fb4bea34\"}]},{\"sha\":\"c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"node_id\":\"C_kwDOA71kIdoAKGMxOWU5YTkyODM5MzQ1ZjhkM2Q4OTgxMGVlY2ZkMGI1NWM2NzA2ZWM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:49:59Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:49:59Z\"},\"message\":\"update
        dependencies\",\"tree\":{\"sha\":\"8bd7c0f559bb1346301eda36db22d9713d7c7c92\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8bd7c0f559bb1346301eda36db22d9713d7c7c92\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV32XCRBK7hj4Ov3rIwAANcEIAEwCv2K2N7kLlOkPDVxZYclr\\nZCUpm7JGYcdMaLIu3mO3uX8yncnzzyRVZUAsDw9IuQhZsXXokgNACRetfwyWv5iJ\\nT5TLPi6wIcp2Okho1yDGfOX42tTxUXVadDmCiTPiyBOe/pve5iEe1SEN0vmYjDaA\\nvQV9pIEq6UaskdW1I3cCpRdNi7hHKCxURpUxAgYNDMoW4Hp7m67KGUYC812Px2/j\\nRdcNoD7jMVJgbn2vXnfi5cKYFK3pefaTEvfWx0pb61ye9DU6lRfS6EmKx8QneNc6\\nH/Y6m1nqUc+/5+83XZdynw5RR95qfI5YizTPBN+rR8CFk4CtoVuaXK+tGeaLic0=\\n=RGtg\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree 8bd7c0f559bb1346301eda36db22d9713d7c7c92\\nparent
        67b0a39ccdcc77c9740ca31809392901d3d37646\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232599 +0000\\ncommitter GitHub <noreply@github.com> 1700232599 +0000\\n\\nupdate
        dependencies\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"67b0a39ccdcc77c9740ca31809392901d3d37646\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b0a39ccdcc77c9740ca31809392901d3d37646\"}]},{\"sha\":\"553e7a843b86c575034a80aa27c8aa0dbd030786\",\"node_id\":\"C_kwDOA71kIdoAKDU1M2U3YTg0M2I4NmM1NzUwMzRhODBhYTI3YzhhYTBkYmQwMzA3ODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:57:41Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:57:41Z\"},\"message\":\"update
        readthedocs build\",\"tree\":{\"sha\":\"f28ef3c129542d3c2594c931b2c93ee3d66225f9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f28ef3c129542d3c2594c931b2c93ee3d66225f9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV39lCRBK7hj4Ov3rIwAAVYUIABQX0j8HCQpaSazkNzGHSRbo\\nIVVtJhz7PSHIwvecQGafYFMhy03BqB+5ZP3sOc0gLGdnRduDMTJe60dq29eLOdN3\\ngZ/NOLKoziSq6PyBEQ29XjDArX4Uo6xfzIx5e3SXd3u3fbicTJRsAxfMJ5Ss62W2\\nWd8iYr+NM2vTKZF6jfwUEvyWJUVFZ7LAdctY38mg9ETsgtNkoKE3qFAUnuQMDB+H\\n0koGjusqkd5A/+KmodzemWAtw2XKtkfHJH6cwoXo0IOevJcb8jNUQd8z7sYrUOvq\\nXfvV28sBkOZevewsqZb2wRGrvK01Epp6F9E32bSdFkdqD76JPPpMr0Ph4f7Yho4=\\n=kzmg\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree f28ef3c129542d3c2594c931b2c93ee3d66225f9\\nparent
        c19e9a92839345f8d3d89810eecfd0b55c6706ec\\nauthor kuba <xnetcat.dev@gmail.com>
        1700233061 +0000\\ncommitter GitHub <noreply@github.com> 1700233061 +0000\\n\\nupdate
        readthedocs build\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/553e7a843b86c575034a80aa27c8aa0dbd030786/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c19e9a92839345f8d3d89810eecfd0b55c6706ec\"}]},{\"sha\":\"6643a334fd34f9ebb27447648436fa34dd2239be\",\"node_id\":\"C_kwDOA71kIdoAKDY2NDNhMzM0ZmQzNGY5ZWJiMjc0NDc2NDg0MzZmYTM0ZGQyMjM5YmU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:13:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:13:13Z\"},\"message\":\"fallback
        \ to title matching for non verified results when score is lower than 70\",\"tree\":{\"sha\":\"b590170b47fd72e3107cd55cb49b671cccaa66fd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b590170b47fd72e3107cd55cb49b671cccaa66fd\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6643a334fd34f9ebb27447648436fa34dd2239be\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6643a334fd34f9ebb27447648436fa34dd2239be\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6643a334fd34f9ebb27447648436fa34dd2239be\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6643a334fd34f9ebb27447648436fa34dd2239be/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"553e7a843b86c575034a80aa27c8aa0dbd030786\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/553e7a843b86c575034a80aa27c8aa0dbd030786\"}]},{\"sha\":\"7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"node_id\":\"C_kwDOA71kIdoAKDdmZjBhZjBkOTNhN2ZlNzAyODIyMGRiOTQzYTJjN2E2MTFjZjYxMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:41:38Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:41:38Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"5bc8ff35016799f64077508ab1d733572dde3a08\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5bc8ff35016799f64077508ab1d733572dde3a08\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6643a334fd34f9ebb27447648436fa34dd2239be\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6643a334fd34f9ebb27447648436fa34dd2239be\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6643a334fd34f9ebb27447648436fa34dd2239be\"}]},{\"sha\":\"c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"node_id\":\"C_kwDOA71kIdoAKGMyYjMyMmM4YWFkY2E5NWJlNGQ0Njg2NzJiNmMzNmZkMDdhYjY5MGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:54:24Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-18T18:54:24Z\"},\"message\":\"v4.2.2\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\\r\\nCo-authored-by: Bharat Nair <bharatsnair@gmail.com>\\r\\nCo-authored-by:
        Tunglies <77394545+Tunglies@users.noreply.github.com>\\r\\nCo-authored-by:
        Muhammad Ishaque Nizamani <49721249+MuhammadNizamani@users.noreply.github.com>\\r\\nCo-authored-by:
        Aniket Patil <128228805+AniketP04@users.noreply.github.com>\\r\\nCo-authored-by:
        Biresh Biswas <90760974+Billa05@users.noreply.github.com>\\r\\nCo-authored-by:
        Ibukun Ekunwe <ekunweibukun159357@gmail.com>\\r\\nCo-authored-by: Ed <mredgaryu@gmail.com>\\r\\nCo-authored-by:
        Edin O <22921456+edinosma@users.noreply.github.com>\",\"tree\":{\"sha\":\"5bc8ff35016799f64077508ab1d733572dde3a08\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5bc8ff35016799f64077508ab1d733572dde3a08\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlWQhgCRBK7hj4Ov3rIwAA8m4IAKGqIf5npaWJG3iv8myD8n72\\nUmJ/LUwmUq6iaRBjxHSPaM+OlgFNJh2LkH5cPqP7xvDSAiC4SX6zJZgwrdsnsyKH\\nKU8AXHxxrmVHHA+qlVYHe9d4/9YH6RTqjL0S+Q5qw5OGK1YzwbhGQ6uC41KsD4mw\\nTfbxzHipquW5U8qvh9DodOd+1AHWgWGjADVumffz7UcmGoFeYiXepSpqG3drDFYV\\nMravvBer/vaIyri8RUmCfs3YB37NtNgN1uxxPcEJXHrup9nSrWwWz+KogrPnooTW\\neKEBxKJtzfgKnCUat7DPBDqynZDdBwdHeUCzNeBIbRBk6wPegPc/zrv4I4Ipxbc=\\n=GhRt\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 5bc8ff35016799f64077508ab1d733572dde3a08\\nparent
        4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\\nparent 7ff0af0d93a7fe7028220db943a2c7a611cf6133\\nauthor
        kuba <xnetcat.dev@gmail.com> 1700333664 +0100\\ncommitter GitHub <noreply@github.com>
        1700333664 +0100\\n\\nv4.2.2\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\nCo-authored-by:
        Bharat Nair <bharatsnair@gmail.com>\\r\\nCo-authored-by: Tunglies <77394545+Tunglies@users.noreply.github.com>\\r\\nCo-authored-by:
        Muhammad Ishaque Nizamani <49721249+MuhammadNizamani@users.noreply.github.com>\\r\\nCo-authored-by:
        Aniket Patil <128228805+AniketP04@users.noreply.github.com>\\r\\nCo-authored-by:
        Biresh Biswas <90760974+Billa05@users.noreply.github.com>\\r\\nCo-authored-by:
        Ibukun Ekunwe <ekunweibukun159357@gmail.com>\\r\\nCo-authored-by: Ed <mredgaryu@gmail.com>\\r\\nCo-authored-by:
        Edin O <22921456+edinosma@users.noreply.github.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\"},{\"sha\":\"7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ff0af0d93a7fe7028220db943a2c7a611cf6133\"}]},{\"sha\":\"b64e87932517cd0054bf73e110db49b0e47c9e96\",\"node_id\":\"C_kwDOA71kIdoAKGI2NGU4NzkzMjUxN2NkMDA1NGJmNzNlMTEwZGI0OWIwZTQ3YzllOTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T20:42:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T20:42:30Z\"},\"message\":\"add
        support for python 3.12\",\"tree\":{\"sha\":\"5c19afd7a981bfa842c672dfe7e7c24c78f3ac33\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5c19afd7a981bfa842c672dfe7e7c24c78f3ac33\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64e87932517cd0054bf73e110db49b0e47c9e96/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2b322c8aadca95be4d468672b6c36fd07ab690c\"}]},{\"sha\":\"f6aa8855a1adb8aff681e482455bbaa632de1768\",\"node_id\":\"C_kwDOA71kIdoAKGY2YWE4ODU1YTFhZGI4YWZmNjgxZTQ4MjQ1NWJiYWE2MzJkZTE3Njg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:01Z\"},\"message\":\"mute
        pytube warnings\",\"tree\":{\"sha\":\"c72f967752d9e69959ff404b044a85d22099bc08\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c72f967752d9e69959ff404b044a85d22099bc08\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f6aa8855a1adb8aff681e482455bbaa632de1768/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b64e87932517cd0054bf73e110db49b0e47c9e96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64e87932517cd0054bf73e110db49b0e47c9e96\"}]},{\"sha\":\"db660618996ea4ddbab94280916ac0464aadcd32\",\"node_id\":\"C_kwDOA71kIdoAKGRiNjYwNjE4OTk2ZWE0ZGRiYWI5NDI4MDkxNmFjMDQ2NGFhZGNkMzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:22Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:22Z\"},\"message\":\"update
        cassettes\",\"tree\":{\"sha\":\"ed0717adb80ffaf8c59557be7b6850225ec11c13\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ed0717adb80ffaf8c59557be7b6850225ec11c13\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/db660618996ea4ddbab94280916ac0464aadcd32\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db660618996ea4ddbab94280916ac0464aadcd32\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db660618996ea4ddbab94280916ac0464aadcd32\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db660618996ea4ddbab94280916ac0464aadcd32/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f6aa8855a1adb8aff681e482455bbaa632de1768\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f6aa8855a1adb8aff681e482455bbaa632de1768\"}]},{\"sha\":\"9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"node_id\":\"C_kwDOA71kIdoAKDk1NzhhZDMzYmM2ZGM3YTgxM2NiYTZlNDNhMDcxZGQyODI1OTg4Yzg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:24:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:24:26Z\"},\"message\":\"use
        python 3.11 for tests\\n\\nblocked by https://github.com/kevin1024/vcrpy/pull/775\",\"tree\":{\"sha\":\"5174344a294b5e930f2e384ead69b78e429510f7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5174344a294b5e930f2e384ead69b78e429510f7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"db660618996ea4ddbab94280916ac0464aadcd32\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db660618996ea4ddbab94280916ac0464aadcd32\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db660618996ea4ddbab94280916ac0464aadcd32\"}]},{\"sha\":\"330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"node_id\":\"C_kwDOA71kIdoAKDMzMGMxODU2YTlhYjg5YzhjZmYzMmFlZjk2NjFjN2MxZDA4MDU3MjA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-02T17:28:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-02T17:28:11Z\"},\"message\":\"updated
        syncedlyrics\",\"tree\":{\"sha\":\"64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9578ad33bc6dc7a813cba6e43a071dd2825988c8\"}]},{\"sha\":\"c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"node_id\":\"C_kwDOA71kIdoAKGM5MzJlNWRhZmRmNGVhZmMyZDEwNDRlMjU1ZDk2YWI2OTM5YmY0ZmU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-02T17:33:58Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-12-02T17:33:58Z\"},\"message\":\"v4.2.3\",\"tree\":{\"sha\":\"64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJla2qGCRBK7hj4Ov3rIwAAxaoIAI1C8RdHrRr2VNOwMnfSvYhO\\nPJslmwa+H0JNkpz2ezG0d3XQpj4MP8NCooNR9x2Q/xJvYVan+htBCO9QhREgJN+0\\nLcjka1m3b7FXjkl/y9RvqdSvQqr1Qf9PEV2sXcqm2yzaz/Pah4ORhfHkMDtr27Pa\\nSR05HPICOlS1VcMqzevW5DLR8oFMhnsdZGpUzSxrSGDgoAum4NZPSCXXHgRWXS9h\\ndXFIgU3Qk5I2MF7KfV7ByINY0HcPdM3KOO4q0pmstVHbAEWuYIV0prwXR49/aqwB\\nuyRPofllJOV8VcbyvTStH815YUYb3Qi1IPm5wl4SgkHvIDaQ7FaquJ+um4b8aQs=\\n=3wUm\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\\nparent
        c2b322c8aadca95be4d468672b6c36fd07ab690c\\nparent 330c1856a9ab89c8cff32aef9661c7c1d0805720\\nauthor
        kuba <xnetcat.dev@gmail.com> 1701538438 +0100\\ncommitter GitHub <noreply@github.com>
        1701538438 +0100\\n\\nv4.2.3\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2b322c8aadca95be4d468672b6c36fd07ab690c\"},{\"sha\":\"330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/330c1856a9ab89c8cff32aef9661c7c1d0805720\"}]},{\"sha\":\"03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"node_id\":\"C_kwDOA71kIdoAKDAzZmFkMWY5MTM3MGNkZGQ4ZjZmZDkzMzMzZmUyMWQwYzIyMDEyMjc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:45Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:45Z\"},\"message\":\"bump
        version to v4.2.4\",\"tree\":{\"sha\":\"9535e2ae0f2306a322fa0b05332e32194a8be38b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9535e2ae0f2306a322fa0b05332e32194a8be38b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\"}]},{\"sha\":\"107500b28857e16fa6915ca0c38c3fa426b32c64\",\"node_id\":\"C_kwDOA71kIdoAKDEwNzUwMGIyODg1N2UxNmZhNjkxNWNhMGMzOGMzZmE0MjZiMzJjNjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:53Z\"},\"message\":\"fixed
        tests on mac\",\"tree\":{\"sha\":\"7394628875b0732d7b466f5049ef26af84b4ae76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7394628875b0732d7b466f5049ef26af84b4ae76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/107500b28857e16fa6915ca0c38c3fa426b32c64/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/03fad1f91370cddd8f6fd93333fe21d0c2201227\"}]},{\"sha\":\"680263b78edbabd0c061fec9beae34202b1a6084\",\"node_id\":\"C_kwDOA71kIdoAKDY4MDI2M2I3OGVkYmFiZDBjMDYxZmVjOWJlYWUzNDIwMmIxYTYwODQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:01Z\"},\"message\":\"Update
        poetry.lock\",\"tree\":{\"sha\":\"9ba459c4437ce8fdc76b324278a428af1acef791\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9ba459c4437ce8fdc76b324278a428af1acef791\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/680263b78edbabd0c061fec9beae34202b1a6084\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/680263b78edbabd0c061fec9beae34202b1a6084\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/680263b78edbabd0c061fec9beae34202b1a6084\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/680263b78edbabd0c061fec9beae34202b1a6084/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"107500b28857e16fa6915ca0c38c3fa426b32c64\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/107500b28857e16fa6915ca0c38c3fa426b32c64\"}]},{\"sha\":\"ce154672ab9f71dc175858461a1e06382421c453\",\"node_id\":\"C_kwDOA71kIdoAKGNlMTU0NjcyYWI5ZjcxZGMxNzU4NTg0NjFhMWUwNjM4MjQyMWM0NTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:21Z\"},\"message\":\"fixed
        builds on arm (hopefully)\",\"tree\":{\"sha\":\"8f5d931eaea001dd6833136c1e1a9a81f705a63c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8f5d931eaea001dd6833136c1e1a9a81f705a63c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce154672ab9f71dc175858461a1e06382421c453\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"680263b78edbabd0c061fec9beae34202b1a6084\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/680263b78edbabd0c061fec9beae34202b1a6084\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/680263b78edbabd0c061fec9beae34202b1a6084\"}]},{\"sha\":\"f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"node_id\":\"C_kwDOA71kIdoAKGY5MGNmYjNmNWFiMWIxNWU3M2QwMzkzZDUzMTkwOGQ0YWM3ODllN2Q\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T14:19:54Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-12-03T14:19:54Z\"},\"message\":\"v4.2.4\",\"tree\":{\"sha\":\"8f5d931eaea001dd6833136c1e1a9a81f705a63c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8f5d931eaea001dd6833136c1e1a9a81f705a63c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlbI6KCRBK7hj4Ov3rIwAA2U4IAJmAfLPZJsrIS/VTkpowlKhY\\ncnk3h5Gvz5qdGBBHyRqgvuH7K9HaxRVYtw74mW89jqrdLL5sy0X05XLoUXu5uzvq\\nSgFOMgPID22U6fUi/WSuTbLNohWMML66DJoTA5WU0RL775qlbE07TEQotX/0Ap0u\\nORbW7mix56LY5MyC1NmgNsppPnn2jgG/7ozIQxSYGDFu0Yb6o4+H0oC+J0FUuhi7\\nGgu6KPEl1CdJzpYGCcprQt0UGjkEz4R5OHTQhKiqPi4JkXaJmeUtZnETocjEOpEm\\nXlOfjtFnNPyPamipAoOU3wht8sg+Z11EptEUwr83OtPJ05IU+n/cQDobpLLPYXE=\\n=mXkc\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8f5d931eaea001dd6833136c1e1a9a81f705a63c\\nparent
        c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\\nparent ce154672ab9f71dc175858461a1e06382421c453\\nauthor
        kuba <xnetcat.dev@gmail.com> 1701613194 +0100\\ncommitter GitHub <noreply@github.com>
        1701613194 +0100\\n\\nv4.2.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\"},{\"sha\":\"ce154672ab9f71dc175858461a1e06382421c453\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce154672ab9f71dc175858461a1e06382421c453\"}]}],\"files\":[{\"sha\":\"102e16e9b766fbecb1d7ae8acc2d09f6185720c2\",\"filename\":\".bettercodehub.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":9,\"changes\":9,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.bettercodehub.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.bettercodehub.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.bettercodehub.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,9 +0,0 @@\\n-# Repo languages\\n-languages:\\n-- python\\n-\\n-# Max depth
        is actually 2, we set this to 3 just in case\\n-# max depth increase in the
        future.\\n-#\\n-# Max depth refers to nesting of folders containing code.\\n-component_depth:
        3\"},{\"sha\":\"90c4af1f92db337b8b375efb47ab62fc91a7462a\",\"filename\":\".dockerignore\",\"status\":\"modified\",\"additions\":5,\"deletions\":3,\"changes\":8,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.dockerignore\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.dockerignore\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.dockerignore?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,4 +1,6 @@\\n-Dockerfile\\n-\\n-# Ignore .git folder\\n .git\\n+.github\\n+.vscode\\n+docs\\n+scripts\\n+tests\"},{\"sha\":\"25363234e4ea3764900e07d428fd1801140a90cb\",\"filename\":\".editorconfig\",\"status\":\"modified\",\"additions\":1,\"deletions\":1,\"changes\":2,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.editorconfig\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.editorconfig\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.editorconfig?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -14,7 +14,7 @@ charset = utf-8\\n max_line_length = 100\\n \\n [*.json]\\n-indent_size
        = 2\\n+indent_size = 4\\n \\n [{*.yml, *.yaml}]\\n indent_size = 2\"},{\"sha\":\"71e174718deacb72656f024e0073165c585157ab\",\"filename\":\".gitattributes\",\"status\":\"modified\",\"additions\":20,\"deletions\":20,\"changes\":40,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.gitattributes\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.gitattributes\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.gitattributes?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,36 +1,36 @@\\n # Set the default behavior, in case people don't have core.autocrlf
        set.\\n-*          text=auto eol=lf\\n+* text=auto eol=lf\\n \\n # Explicitly
        declare text files you want to always be normalized and converted\\n # to
        native line endings on checkout.\\n-*.py       text diff=python\\n+*.py text
        diff=python\\n \\n # Documents\\n-*.md       text diff=markdown\\n+*.md text
        diff=markdown\\n \\n # Graphics\\n-*.png      binary\\n-*.jpg      binary\\n-*.jpeg
        \    binary\\n-*.gif      binary\\n-*.svg      text\\n+*.png binary\\n+*.jpg
        binary\\n+*.jpeg binary\\n+*.gif binary\\n+*.svg text\\n \\n # Scripts\\n-*.bash
        \    text eol=lf\\n-*.fish     text eol=lf\\n-*.sh       text eol=lf\\n+*.bash
        text eol=lf\\n+*.fish text eol=lf\\n+*.sh text eol=lf\\n # These are explicitly
        windows files and should use crlf\\n-*.bat      text eol=crlf\\n-*.cmd      text
        eol=crlf\\n+*.bat text eol=crlf\\n+*.cmd text eol=crlf\\n \\n # Serialisation\\n-*.json
        \    text\\n-*.toml     text\\n-*.xml      text\\n-*.yaml     text\\n-*.yml
        \     text\\n+*.json text\\n+*.toml text\\n+*.xml text\\n+*.yaml text\\n+*.yml
        text\\n \\n # Exclude files from exporting\\n .gitattributes export-ignore\\n-.gitignore
        \    export-ignore\\n-.gitkeep       export-ignore\\n+.gitignore export-ignore\\n+.gitkeep
        export-ignore\"},{\"sha\":\"3cf93095a47e8f96055751e437b9f82712e1e77c\",\"filename\":\".github/ISSUE_TEMPLATE/bug_report.yml\",\"status\":\"modified\",\"additions\":12,\"deletions\":11,\"changes\":23,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FISSUE_TEMPLATE%2Fbug_report.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FISSUE_TEMPLATE%2Fbug_report.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Fbug_report.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,23 +1,24 @@\\n-name: Bug Report \\n+name: Bug Report\\n \\n title: Change
        this title, poorly formatted issues will not be handled\\n \\n description:
        Report bugs so we can fix them\\n \\n-labels: bug\\n+labels: Bug\\n \\n body:\\n
        \\n - type: dropdown\\n   attributes:\\n-    label: System Operating System
        (OS)\\n+    label: System OS\\n     description: OS not listed here? Please
        let us know below\\n     options:\\n       - Windows\\n       - MacOS\\n       -
        Linux\\n       - Docker\\n       - Termux (Android)\\n+      - Other\\n   validations:\\n
        \    required: true\\n \\n@@ -32,6 +33,7 @@ body:\\n       - 3.8 (CPython)\\n
        \      - 3.9 (CPython)\\n       - 3.10 (CPython)\\n+      - 3.11 (CPython)\\n
        \  validations:\\n     required: true\\n \\n@@ -44,6 +46,7 @@ body:\\n       -
        GitHub\\n       - Termux Installation Script (spotDL provided)\\n       -
        Arch User Repository (Unofficial)\\n+      - Other\\n   validations:\\n     required:
        true\\n \\n@@ -53,7 +56,7 @@ body:\\n     description: |\\n       Supply version
        if installed from pip, found via `pip show spotdl`\\n       or supply commit
        hash if installed from GitHub\\n-    placeholder: v3.x.x or hash-value\\n+
        \   placeholder: v4.x.x or hash-value\\n   validations:\\n     required: true\\n
        \\n@@ -64,10 +67,7 @@ body:\\n \\n - type: textarea\\n   attributes:\\n-    label:
        Steps to reproduce\\n-    description: |\\n-      Please ensure to include
        Spotify links and the actual command \\n-      you used.\\n+    label: Steps
        to reproduce - Ensure to include actual links!\\n     placeholder: |\\n       1.\\n
        \      2.\\n@@ -79,11 +79,12 @@ body:\\n - type: textarea\\n   attributes:\\n
        \    label: Traceback\\n-    description: Copy and paste the complete error
        message outputted by spotDL\\n+    description: Copy and paste the complete
        output from spotDL\\n     render: text\\n+    placeholder: Do this even if
        there is no error!\\n   validations:\\n     required: true\\n-    \\n+\\n
        \\n - type: textarea\\n   attributes:\\n@@ -92,4 +93,4 @@ body:\\n       Note
        anything else you can provide regarding the issue you're running into.\\n
        \\n       If you didn't include your Python version, OS or installation source
        in the dropdowns\\n-      earlier, note said details here. \\n+      earlier,
        note said details here.\"},{\"sha\":\"a226f91969a87dfd395a758ee1ee24783d5eece3\",\"filename\":\".github/ISSUE_TEMPLATE/config.yml\",\"status\":\"modified\",\"additions\":0,\"deletions\":1,\"changes\":1,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FISSUE_TEMPLATE%2Fconfig.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FISSUE_TEMPLATE%2Fconfig.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Fconfig.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -4,4 +4,3 @@ contact_links:\\n   - name: spotDL Discord Server!\\n     url:
        https://discord.gg/xCa23pwJWY\\n     about: Join the spotDL Discord Server\\n-
        \   \\n\\\\ No newline at end of file\"},{\"sha\":\"cc575aed3fae52815166831149ffd7f687ff4566\",\"filename\":\".github/ISSUE_TEMPLATE/feature_request.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":16,\"changes\":16,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2FISSUE_TEMPLATE%2Ffeature_request.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2FISSUE_TEMPLATE%2Ffeature_request.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Ffeature_request.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,16 +0,0 @@\\n----\\n-about: Request a feature to be added to spotDL!\\n-assignees:
        ''\\n-labels: feature-request\\n-name: Feature Request\\n-title: Change this
        title, Poorly Formatted Requests will not be handled.\\n----\\n-\\n-<!---
        You can join our Discord at https://discord.gg/xCa23pwJWY !!! -->\\n-\\n-===\\n-\\n-WE
        ARE NOT ACCEPTING FEATURE REQUESTS SINCE SPOTDL IS BEING REDESIGNED. \\n-Please
        talk to us on our Discord https://discord.gg/xCa23pwJWY.\\n-\\n-===\"},{\"sha\":\"10e1ccf95e443766a92b484e58a7a87877ab4d5d\",\"filename\":\".github/ISSUE_TEMPLATE/feature_request.yml\",\"status\":\"added\",\"additions\":21,\"deletions\":0,\"changes\":21,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FISSUE_TEMPLATE%2Ffeature_request.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FISSUE_TEMPLATE%2Ffeature_request.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Ffeature_request.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,21 @@\\n+name: Feature Request\\n+\\n+title: Change this title, poorly
        formatted issues will not be handled\\n+\\n+description: Request a new feature\\n+\\n+labels:
        Feature Request\\n+\\n+body:\\n+\\n+- type: textarea\\n+  attributes:\\n+
        \   label: Requested Feature\\n+    placeholder: Describe the feature you
        would like to see implemented!\\n+  validations:\\n+    required: true\\n+\\n+-
        type: textarea\\n+  attributes:\\n+    label: Possible implementation\\n+
        \   placeholder: Describe a potential method of implementing this feature\"},{\"sha\":\"8ef60898ed84e0b32f0f9220e7cd5a3f1dad4615\",\"filename\":\".github/PULL_REQUEST_TEMPLATE.yml\",\"status\":\"renamed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FPULL_REQUEST_TEMPLATE.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2FPULL_REQUEST_TEMPLATE.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FPULL_REQUEST_TEMPLATE.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"previous_filename\":\".github/PULL_REQUEST_TEMPLATE.md\"},{\"sha\":\"d0b8fd503a39d83ab39bec681ef58964447ca632\",\"filename\":\".github/release-drafter.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":13,\"changes\":13,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Frelease-drafter.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Frelease-drafter.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Frelease-drafter.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,13 +0,0 @@\\n-categories:\\n-  - title: 'Bug Fixes'\\n-    labels:\\n-
        \     - 'bug'\\n-      - 'bugfix'\\n-change-template: '- $TITLE @$AUTHOR (#$NUMBER)'\\n-change-title-escapes:
        '\\\\<*_&' # You can add # and @ to disable mentions, and add ` to disable
        code blocks.\\n-exclude-labels:\\n-  - 'skip-changelog'\\n-template: |\\n-
        \ ## Changes\\n-\\n-  $CHANGES\"},{\"sha\":\"4b5f1bf4f9e6011c065365d1b50ea7a4f9012753\",\"filename\":\".github/stale.yml\",\"status\":\"modified\",\"additions\":1,\"deletions\":1,\"changes\":2,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fstale.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fstale.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fstale.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -10,7 +10,7 @@ exemptLabels:\\n   - High Priority\\n \\n # Label to use when
        marking an issue as stale\\n-staleLabel: stale\\n+staleLabel: Stale\\n \\n
        # Comment to post when marking an issue as stale. Set to `false` to disable\\n
        markComment: >\"},{\"sha\":\"9f54c4c0dd18acce5a665d6f07cc3889f7aab57d\",\"filename\":\".github/workflows/build-docs.yml\",\"status\":\"added\",\"additions\":36,\"deletions\":0,\"changes\":36,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fbuild-docs.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fbuild-docs.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fbuild-docs.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,36 @@\\n+name: Deploy docs to GitHub pages\\n+\\n+on:\\n+  push:\\n+
        \   # branches to consider in the event; optional, defaults to all\\n+    branches:\\n+
        \     - master\\n+\\n+jobs:\\n+  deploy:\\n+    if: \\\"!contains(github.event.commits[0].message,
        '[skip ci]')\\\"\\n+    runs-on: ubuntu-latest\\n+\\n+    steps:\\n+      -
        uses: actions/checkout@v3\\n+        with:\\n+          fetch-depth: 0\\n+
        \         submodules: recursive\\n+\\n+      - name: Install poetry\\n+        run:
        pipx install poetry\\n+\\n+      - name: Set up Python 3.10\\n+        uses:
        actions/setup-python@v4\\n+        with:\\n+          python-version: \\\"3.10\\\"\\n+
        \         cache: 'poetry'\\n+\\n+      - name: Install dependencies\\n+        run:
        |\\n+          poetry env use \\\"3.10\\\"\\n+          poetry install\\n+\\n+
        \     - name: Build and deploy\\n+        run: |\\n+          poetry run mkdocs
        gh-deploy --force\"},{\"sha\":\"1b5eb2e1b8bf8de9a79800790b4e0c5570fdf994\",\"filename\":\".github/workflows/docker-hub-image-publish.yml\",\"status\":\"added\",\"additions\":74,\"deletions\":0,\"changes\":74,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fdocker-hub-image-publish.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fdocker-hub-image-publish.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fdocker-hub-image-publish.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,74 @@\\n+name: Publish Docker Image to DockerHub\\n+\\n+on:\\n+  release:\\n+
        \   types:\\n+      - published\\n+  schedule:\\n+    - cron: \\\"0 0 * *
        *\\\"\\n+  workflow_dispatch:\\n+    inputs:\\n+      wants_production_build:\\n+
        \       description: \\\"Production build instead of nightly?\\\"\\n+        required:
        false\\n+        default: false\\n+        type: boolean\\n+\\n+concurrency:\\n+
        \ group: ${{ github.workflow }}-${{ github.ref }}\\n+  cancel-in-progress:
        true\\n+\\n+env:\\n+  REGISTRY: docker.io\\n+  IMAGE_NAME: ${{ github.repository
        }}\\n+\\n+jobs:\\n+  publish:\\n+    name: Publish Docker Image to DockerHub\\n+
        \   runs-on: ubuntu-latest\\n+    timeout-minutes: 30\\n+\\n+    steps:\\n+
        \     - name: Checkout dev branch for nightly build\\n+        uses: actions/checkout@v3\\n+
        \       if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch'
        && !inputs.wants_production_build) }}\\n+        with:\\n+          ref: \\\"refs/heads/dev\\\"\\n+\\n+
        \     - name: Checkout main branch for production build\\n+        uses: actions/checkout@v3\\n+
        \       if: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch'
        && inputs.wants_production_build) }}\\n+        with:\\n+          ref: \\\"refs/heads/master\\\"\\n+\\n+
        \     - name: Extract metadata (tags, labels) for Docker tags & labels\\n+
        \       id: meta\\n+        uses: docker/metadata-action@v4\\n+        with:\\n+
        \         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\\n+          tags:
        |\\n+            type=raw,value=latest,priority=100,enable=${{ github.event_name
        == 'release' || (github.event_name == 'workflow_dispatch' && inputs.wants_production_build)
        }}\\n+            type=semver,priority=200,pattern={{raw}},enable=${{ github.event_name
        == 'release' || (github.event_name == 'workflow_dispatch' && inputs.wants_production_build)
        }}\\n+            type=raw,value=nightly,priority=300,enable=${{ github.event_name
        == 'schedule' || (github.event_name == 'workflow_dispatch' && !inputs.wants_production_build)
        }}\\n+\\n+      - name: Set up QEMU for multi-arch builds\\n+        uses:
        docker/setup-qemu-action@v2\\n+\\n+      - name: Set up Docker Buildx for
        multi-arch builds\\n+        id: buildx\\n+        uses: docker/setup-buildx-action@v2\\n+\\n+
        \     - name: Login to DockerHub\\n+        uses: docker/login-action@v1\\n+
        \       with:\\n+          username: ${{ secrets.DOCKER_HUB_USERNAME }}\\n+
        \         password: ${{ secrets.DOCKER_HUB_PASSWORD }}\\n+\\n+      - name:
        Build and push Docker image to DockerHub\\n+        uses: docker/build-push-action@v3\\n+
        \       with:\\n+          context: .\\n+          push: true\\n+          platforms:
        linux/amd64, linux/arm64\\n+          tags: ${{ steps.meta.outputs.tags }}\\n+
        \         labels: ${{ steps.meta.outputs.labels }}\"},{\"sha\":\"42814e159b689318fec121bc466f7d976e889232\",\"filename\":\".github/workflows/python-publish.yml\",\"status\":\"modified\",\"additions\":106,\"deletions\":19,\"changes\":125,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fpython-publish.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fpython-publish.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fpython-publish.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -5,28 +5,115 @@ name: Upload Python Package\\n \\n on:\\n   release:\\n-    types:
        \\n+    types:\\n       - published\\n-      \\n+\\n jobs:\\n   deploy:\\n-\\n
        \    runs-on: ubuntu-latest\\n \\n     steps:\\n-    - uses: actions/checkout@v2\\n-
        \   - name: Set up Python\\n-      uses: actions/setup-python@v2\\n-      with:\\n-
        \       python-version: '3.x'\\n-    - name: Install dependencies\\n-      run:
        |\\n-        python -m pip install --upgrade pip\\n-        pip install setuptools
        wheel twine\\n-    - name: Build and publish\\n-      env:\\n-        TWINE_USERNAME:
        ${{ secrets.PYPI_USERNAME }}\\n-        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD
        }}\\n-      run: |\\n-        python setup.py sdist bdist_wheel\\n-        twine
        upload dist/*\\n+      - uses: actions/checkout@v3\\n+        with:\\n+          fetch-depth:
        0\\n+          submodules: recursive\\n+\\n+      - name: Install poetry\\n+
        \       run: pipx install poetry\\n+\\n+      - name: Set up Python 3.10\\n+
        \       uses: actions/setup-python@v4\\n+        with:\\n+          python-version:
        \\\"3.10\\\"\\n+          cache: 'poetry'\\n+\\n+      - name: Install dependencies\\n+
        \       run: |\\n+          poetry env use \\\"3.10\\\"\\n+          poetry
        install\\n+\\n+      - name: Install twine\\n+        run: pip install twine\\n+\\n+
        \     - name: Build\\n+        run: |\\n+          poetry build\\n+\\n+      -
        name: Publish on Pip\\n+        env:\\n+          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME
        }}\\n+          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\\n+        run:
        twine upload dist/*\\n+\\n+  build:\\n+    strategy:\\n+      matrix:\\n+
        \       platform: [ubuntu-latest, macos-latest, windows-latest]\\n+    runs-on:
        ${{ matrix.platform }}\\n+    steps:\\n+      - uses: actions/checkout@v3\\n+\\n+
        \     - name: Install poetry\\n+        run: pipx install poetry\\n+\\n+      -
        name: Set up Python 3.10\\n+        uses: actions/setup-python@v4\\n+        with:\\n+
        \         python-version: \\\"3.10\\\"\\n+          cache: 'poetry'\\n+\\n+
        \     - name: Install dependencies\\n+        run: |\\n+          poetry env
        use \\\"3.10\\\"\\n+          poetry install\\n+\\n+      - name: Build executable\\n+
        \       run: poetry run python ./scripts/build.py\\n+\\n+      - name: Build
        cross-platform binary\\n+        run: |\\n+          chmod u+x ./scripts/make_binzip.sh\\n+
        \         ./scripts/make_binzip.sh\\n+\\n+      - name: Release\\n+        uses:
        softprops/action-gh-release@v1\\n+        with:\\n+          files: |\\n+
        \           dist/*\\n+            spotDL\\n+\\n+  build-arm:\\n+    runs-on:
        ubuntu-latest\\n+    name: Build on ubuntu-latest aarch64\\n+    steps:\\n+
        \     - uses: actions/checkout@v3\\n+      - uses: uraimo/run-on-arch-action@v2\\n+
        \       name: Run commands\\n+        id: runcmd\\n+        with:\\n+          arch:
        aarch64\\n+          distro: ubuntu_latest\\n+\\n+          # Mount the artifacts
        directory as /artifacts in the container\\n+          dockerRunArgs: |\\n+
        \           --volume \\\"${PWD}/:/spotdl\\\"\\n+\\n+          # The shell
        to run commands with in the container\\n+          shell: /bin/sh\\n+\\n+
        \         run: |\\n+            cd /spotdl\\n+            apt update\\n+            apt
        install python3 python3-pip -y\\n+            pip install poetry\\n+            poetry
        install\\n+            rm -rf dist/\\n+            mkdir dist/\\n+            poetry
        run python ./scripts/build.py\\n+            for file in dist/spotdl*; do
        cp \\\"$file\\\" \\\"${file}-aarch64\\\"; done\\n+\\n+      - name: Release\\n+
        \       uses: softprops/action-gh-release@v1\\n+        with:\\n+          files:
        |\\n+            dist/spotdl*-aarch64\"},{\"sha\":\"2c30bcdb18ee5ba658e7b0b212be8fb8616750ef\",\"filename\":\".github/workflows/release-drafter.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":16,\"changes\":16,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Frelease-drafter.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Frelease-drafter.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Frelease-drafter.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,16 +0,0 @@\\n-name: Release Drafter\\n-\\n-on:\\n-  push:\\n-    # branches
        to consider in the event; optional, defaults to all\\n-    branches:\\n-      -
        master\\n-\\n-jobs:\\n-  update_release_draft:\\n-    runs-on: ubuntu-latest\\n-
        \   steps:\\n-      # Drafts your next Release notes as Pull Requests are
        merged into \\\"master\\\"\\n-      - uses: release-drafter/release-drafter@v5\\n-
        \       env:\\n-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\"},{\"sha\":\"e18007aa9f8b107aec60b89bc7a353c2db70b5c7\",\"filename\":\".github/workflows/spotify-downloader-ci.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":62,\"changes\":62,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Fspotify-downloader-ci.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Fspotify-downloader-ci.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fspotify-downloader-ci.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,62 +0,0 @@\\n-# This workflow will install Python dependencies, run tests
        and lint with a variety of Python versions\\n-# For more information see:
        https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\\n-\\n-name:
        spotify-downloader-ci\\n-\\n-on: [push, pull_request]\\n-\\n-jobs:\\n-  test:\\n-
        \   runs-on: ${{ matrix.platform }}\\n-    strategy:\\n-      matrix:\\n-
        \       platform: [ ubuntu-latest, macos-latest, windows-latest ]\\n-        python-version:
        [ \\\"3.6.7\\\", \\\"3.7\\\", \\\"3.8\\\", \\\"3.9\\\", \\\"3.10\\\" ]\\n-\\n-
        \   steps:\\n-      - uses: actions/checkout@v2\\n-      - name: Set up Python
        ${{ matrix.python-version }}\\n-        uses: actions/setup-python@v2\\n-
        \       with:\\n-          python-version: ${{ matrix.python-version }}\\n-
        \     - name: Install dependencies\\n-        run: |\\n-          python -m
        pip install --upgrade pip\\n-          python -m pip install tox-gh-actions\\n-
        \     - name: Run tests\\n-        run: |\\n-          tox\\n-        env:\\n-
        \         PLATFORM: ${{ matrix.platform }}\\n-\\n-  mypy:\\n-    runs-on:
        ubuntu-latest\\n-\\n-    steps:\\n-      - uses: actions/checkout@v2\\n-      -
        name: Set up Python\\n-        uses: actions/setup-python@v2\\n-        with:\\n-
        \         python-version: 3.8\\n-      - name: Install dependencies\\n-        run:
        |\\n-          python -m pip install tox\\n-      - name: Run mypy\\n-        run:
        |\\n-          tox -e mypy\\n-\\n-  flake8:\\n-    runs-on: ubuntu-latest\\n-\\n-
        \   steps:\\n-      - uses: actions/checkout@v2\\n-      - name: Set up Python\\n-
        \       uses: actions/setup-python@v2\\n-        with:\\n-          python-version:
        3.8\\n-      - name: Install dependencies\\n-        run: |\\n-          python
        -m pip install tox\\n-      - name: Run flake8\\n-        run: |\\n-          tox
        -e flake8\"},{\"sha\":\"4cb0801d0bb581a71c5e0f6c330eaa183bcf9b63\",\"filename\":\".github/workflows/standard-checks.yml\",\"status\":\"added\",\"additions\":45,\"deletions\":0,\"changes\":45,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fstandard-checks.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Fstandard-checks.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fstandard-checks.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,45 @@\\n+name: Standard code checks (MyPy/Pylint/Black/Isort)\\n+\\n+on:
        [push, pull_request]\\n+\\n+jobs:\\n+  checks:\\n+    if: \\\"!contains(github.event.commits[0].message,
        '[skip ci]')\\\"\\n+    runs-on: ubuntu-latest\\n+\\n+    steps:\\n+      -
        uses: actions/checkout@v3\\n+\\n+      - name: Install poetry\\n+        run:
        pipx install poetry\\n+\\n+      - name: Set up Python 3.11\\n+        uses:
        actions/setup-python@v4\\n+        with:\\n+          python-version: \\\"3.11\\\"\\n+
        \         cache: 'poetry'\\n+\\n+      - name: Install dependencies\\n+        run:
        |\\n+          poetry env use \\\"3.11\\\"\\n+          poetry install\\n+\\n+
        \     - name: Check for docstring's\\n+        run: |\\n+          poetry
        run pylint --limit-inference-results 0 --enable missing-function-docstring
        missing-module-docstring missing-class-docstring empty-docstring --disable=all
        ./spotdl\\n+\\n+      - name: Run Pylint check\\n+        run: |\\n+          poetry
        run pylint --fail-under 10 --limit-inference-results 0 ./spotdl\\n+\\n+      -
        name: Run MyPy check\\n+        run: |\\n+          poetry run mypy --ignore-missing-imports
        --follow-imports silent --install-types --non-interactive ./spotdl\\n+\\n+
        \     - name: Run Black check\\n+        run: |\\n+          poetry run black
        --check ./spotdl\\n+\\n+      - name: Run isort check\\n+        run: |\\n+
        \         poetry run isort --check --diff ./spotdl\"},{\"sha\":\"3399d55a0267881969ab073dcbb2bcc0308e4ec3\",\"filename\":\".github/workflows/tests.yml\",\"status\":\"added\",\"additions\":78,\"deletions\":0,\"changes\":78,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Ftests.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.github%2Fworkflows%2Ftests.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Ftests.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,78 @@\\n+name: Tests (Pytest)\\n+\\n+on: [push, pull_request]\\n+\\n+jobs:\\n+
        \ test-vcr:\\n+    if: \\\"!contains(github.event.commits[0].message, '[skip
        ci]')\\\"\\n+    runs-on: ${{ matrix.platform }}\\n+    strategy:\\n+      max-parallel:
        4\\n+      matrix:\\n+        platform: [ ubuntu-latest, macos-latest, windows-latest
        ]\\n+        python-version: [ \\\"3.8\\\", \\\"3.11\\\" ]\\n+\\n+    steps:\\n+
        \     - uses: actions/checkout@v3\\n+\\n+      - name: Install poetry\\n+
        \       run: pipx install poetry\\n+\\n+      - name: Set up Python ${{ matrix.python-version
        }}\\n+        uses: actions/setup-python@v4\\n+        with:\\n+          python-version:
        ${{ matrix.python-version }}\\n+          cache: 'poetry'\\n+\\n+      - name:
        Install dependencies\\n+        run: |\\n+          poetry env use ${{ matrix.python-version
        }}\\n+          pip install -U pip setuptools\\n+          poetry install\\n+\\n+
        \     - uses: FedericoCarboni/setup-ffmpeg@v2\\n+        id: setup-ffmpeg\\n+
        \       with:\\n+          token: ${{ secrets.GITHUB_TOKEN }}\\n+\\n+      -
        name: Run tests\\n+        run: |\\n+          poetry run pytest -vvv --ignore
        tests/test_matching.py --ignore tests/utils/test_ffmpeg.py --ignore tests/utils/test_metadata.py\\n+
        \       env:\\n+          PLATFORM: ${{ matrix.platform }}\\n+\\n+  test:\\n+
        \   if: \\\"!contains(github.event.commits[0].message, '[skip ci]')\\\"\\n+
        \   runs-on: ${{ matrix.platform }}\\n+    strategy:\\n+      max-parallel:
        1\\n+      matrix:\\n+        platform: [ ubuntu-latest, macos-latest, windows-latest
        ]\\n+\\n+    steps:\\n+      - uses: actions/checkout@v3\\n+\\n+      - name:
        Install poetry\\n+        run: pipx install poetry\\n+\\n+      - name: Set
        up Python \\\"3.11\\\"\\n+        uses: actions/setup-python@v4\\n+        with:\\n+
        \         python-version: \\\"3.11\\\"\\n+          cache: 'poetry'\\n+\\n+
        \     - name: Install dependencies\\n+        run: |\\n+          poetry env
        use \\\"3.11\\\"\\n+          poetry install\\n+\\n+      - uses: FedericoCarboni/setup-ffmpeg@v1\\n+
        \       id: setup-ffmpeg\\n+        with:\\n+          token: ${{ secrets.GITHUB_TOKEN
        }}\\n+\\n+      - name: Run tests\\n+        run: |\\n+          poetry run
        pytest -vvv --disable-vcr --vcr-record=none --ignore tests/providers/lyrics
        --ignore tests/utils/test_github.py --ignore tests/utils/test_ffmpeg.py --ignore
        tests/utils/test_metadata.py\\n+        env:\\n+          PLATFORM: ${{ matrix.platform
        }}\"},{\"sha\":\"238fdfd9f7f85f04d01801b964abcdc173c11d76\",\"filename\":\".gitignore\",\"status\":\"modified\",\"additions\":119,\"deletions\":30,\"changes\":149,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.gitignore\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.gitignore\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.gitignore?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,20 +1,108 @@\\n-# Spotdl dev related testing files\\n-*.log\\n-*.spotdlTrackingFile\\n+#
        Spotdl stuff\\n *.mp3\\n *.m4a\\n+*.wav\\n *.flac\\n-*.opus\\n *.ogg\\n-*.wav\\n-spotdl-temp/\\n-*.mp4\\n-.spotdl-cache\\n+*.opus\\n+*.spotdl\\n
        *.m3u\\n+*.m3u8\\n+*.ipynb\\n+*.lrc\\n+.spotdl-cache\\n+\\n+# Docs\\n+docs/source/_build/\\n+html\\n+\\n+#
        Byte-compiled / optimized / DLL files\\n+__pycache__/\\n+*.py[cod]\\n+*$py.class\\n+\\n+#
        C extensions\\n+*.so\\n+\\n+# Distribution / packaging\\n+.Python\\n+build/\\n+develop-eggs/\\n+dist/\\n+downloads/\\n+eggs/\\n+.eggs/\\n+lib/\\n+lib64/\\n+parts/\\n+sdist/\\n+var/\\n+wheels/\\n+*.egg-info/\\n+.installed.cfg\\n+*.egg\\n+MANIFEST\\n+\\n+#
        PyInstaller\\n+#  Usually these files are written by a python script from
        a template\\n+#  before PyInstaller builds the exe, so as to inject date/other
        infos into it.\\n+*.manifest\\n+*.spec\\n+\\n+# Installer logs\\n+pip-log.txt\\n+pip-delete-this-directory.txt\\n+\\n+#
        Unit test / coverage reports\\n+htmlcov/\\n+.tox/\\n+.nox/\\n+.coverage\\n+.coverage.*\\n+.cache\\n+nosetests.xml\\n+coverage.xml\\n+*.cover\\n+.hypothesis/\\n+.pytest_cache/\\n
        \\n-# Python\\n-__pycache__\\n-.mypy_cache\\n+# Translations\\n+*.mo\\n+*.pot\\n+\\n+#
        Django stuff:\\n+*.log\\n+local_settings.py\\n+db.sqlite3\\n+\\n+# Flask stuff:\\n+instance/\\n+.webassets-cache\\n+\\n+#
        Scrapy stuff:\\n+.scrapy\\n+\\n+# Sphinx documentation\\n+docs/_build/\\n+\\n+#
        PyBuilder\\n+target/\\n+\\n+# Jupyter Notebook\\n+.ipynb_checkpoints\\n+\\n+#
        IPython\\n+profile_default/\\n+ipython_config.py\\n+\\n+# pyenv\\n+.python-version\\n+\\n+#
        celery beat schedule file\\n+celerybeat-schedule\\n+\\n+# SageMath parsed
        files\\n+*.sage.py\\n \\n # Environments\\n .env\\n@@ -25,28 +113,29 @@ ENV/\\n
        env.bak/\\n venv.bak/\\n \\n-# vscode\\n-.vscode\\n-\\n-# MS Visio Pro\\n-externalTools/*\\n+#
        Spyder project settings\\n+.spyderproject\\n+.spyproject\\n \\n-# Getting
        rid of Hacks (for now, 04/09/2020)\\n-Hacks/*\\n+# Rope project settings\\n+.ropeproject\\n
        \\n-# setuptools\\n-spotdl.egg-info/*\\n+# mkdocs documentation\\n+/site\\n
        \\n-# setuptools and PyInstaller\\n-build\\n-dist\\n-*.spec\\n+# mypy\\n+.mypy_cache/\\n+.dmypy.json\\n+dmypy.json\\n
        \\n-# Jetbrains IDEs; PyCharm/IntelliJ\\n-.idea\\n+# Pyre type checker\\n+.pyre/\\n
        \\n-# Tox\\n-.tox/\\n+# Misc\\n+*.temp*\\n+*temp.*\\n+temp/\\n \\n-# Test
        Coverage\\n-.coverage\\n+# VS Code\\n+.vscode\\n+*.txt\"},{\"sha\":\"7cfd19e7ac113de94d3ffdcc46101ec21cd9af9e\",\"filename\":\".pylintrc\",\"status\":\"added\",\"additions\":11,\"deletions\":0,\"changes\":11,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.pylintrc\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.pylintrc\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.pylintrc?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,11 @@\\n+[MASTER]\\n+disable=\\n+    R0902, # too-many-instance-attributes\\n+
        \   R0913, # too-many-arguments\\n+    R0915, # too-many-statements\\n+    R0912,
        # too-many-branches\\n+    R0801, # duplicate-code\\n+    R0903, # too-few-public-methods\\n+
        \   R0914, # too-many-locals\\n+    W0703, # broad-except\\n+    W0640, #
        cell-var-from-loop\"},{\"sha\":\"b6d04eb8f72c420f3da7c16254c28e7cbeb322a0\",\"filename\":\".readthedocs.yaml\",\"status\":\"added\",\"additions\":14,\"deletions\":0,\"changes\":14,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.readthedocs.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.readthedocs.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.readthedocs.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,14 @@\\n+# Required\\n+version: 2\\n+\\n+build:\\n+  os: ubuntu-22.04\\n+
        \ tools:\\n+    python: \\\"3.11\\\"\\n+\\n+mkdocs:\\n+  configuration: mkdocs.yml\\n+\\n+python:\\n+
        \ install:\\n+  - requirements: scripts/docs/requirements.txt\"},{\"sha\":\"fe23713f9d98fa0160b0df70070d6212f8b0d84d\",\"filename\":\".vscode/settings.json\",\"status\":\"added\",\"additions\":13,\"deletions\":0,\"changes\":13,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.vscode%2Fsettings.json\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/.vscode%2Fsettings.json\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.vscode%2Fsettings.json?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,13 @@\\n+{\\n+    \\\"cSpell.words\\\": [\\n+        \\\"isrc\\\",\\n+
        \       \\\"pdoc\\\",\\n+        \\\"spotdl\\\"\\n+    ],\\n+    \\\"python.formatting.provider\\\":
        \\\"black\\\",\\n+    \\\"python.testing.pytestArgs\\\": [\\n+        \\\"tests\\\"\\n+
        \   ],\\n+    \\\"python.testing.unittestEnabled\\\": false,\\n+    \\\"python.testing.pytestEnabled\\\":
        true\\n+}\\n\\\\ No newline at end of file\"},{\"sha\":\"f068fc5a8d389237db8f5e411a3127a6bdb5aea9\",\"filename\":\"Dockerfile\",\"status\":\"modified\",\"additions\":29,\"deletions\":10,\"changes\":39,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/Dockerfile\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/Dockerfile\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/Dockerfile?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,23 +1,42 @@\\n FROM python:3-alpine\\n \\n-# Install ffmpeg and g++\\n-RUN
        apk add --no-cache ffmpeg g++\\n+LABEL maintainer=\\\"xnetcat (Jakub)\\\"\\n
        \\n-# Create project directory\\n-WORKDIR /app\\n+# Install dependencies\\n+RUN
        apk add --no-cache \\\\\\n+    ca-certificates \\\\\\n+    ffmpeg \\\\\\n+
        \   openssl \\\\\\n+    aria2 \\\\\\n+    g++ \\\\\\n+    git \\\\\\n+    py3-cffi
        \\\\\\n+    libffi-dev \\\\\\n+    zlib-dev\\n+\\n+# Install poetry and update
        pip/wheel\\n+RUN pip install --upgrade pip poetry wheel spotipy\\n+\\n+# Copy
        requirements files\\n+COPY poetry.lock pyproject.toml /\\n+\\n+# Install spotdl
        requirements\\n+RUN poetry install\\n \\n # Add source code files to WORKDIR\\n
        ADD . .\\n \\n-# Upgrade pip\\n-RUN python -m pip install --upgrade --no-cache-dir
        pip\\n-\\n-# Install spotdl\\n-RUN pip install --no-cache-dir .\\n+# Install
        spotdl itself\\n+RUN poetry install\\n \\n # Create music directory\\n RUN
        mkdir /music\\n+\\n+# Create a volume for the output directory\\n+VOLUME /music\\n+\\n+#
        Change CWD to /music\\n WORKDIR /music\\n \\n # Entrypoint command\\n-ENTRYPOINT
        [ \\\"spotdl\\\" ]\\n+ENTRYPOINT [\\\"poetry\\\", \\\"run\\\", \\\"spotdl\\\"]\"},{\"sha\":\"6408740d9e4b3f89e17bf8859e28529bd009b872\",\"filename\":\"LICENSE\",\"status\":\"modified\",\"additions\":18,\"deletions\":15,\"changes\":33,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/LICENSE\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/LICENSE\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/LICENSE?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,18 +1,21 @@\\n-The MIT License (MIT)\\n-Copyright (c) 2021 Ritiek Malhotra
        & spotDL Developers\\n+MIT License\\n \\n-Permission is hereby granted, free
        of charge, to any person obtaining a copy of this\\n-software and associated
        documentation files (the \\\"Software\\\"), to deal in the Software\\n-without
        restriction, including without limitation the rights to use, copy, modify,
        merge,\\n-publish, distribute, sublicense, and/or sell copies of the Software,
        and to permit\\n-persons to whom the Software is furnished to do so, subject
        to the following conditions:\\n+Copyright (c) 2021 spotDL Developers\\n \\n-The
        above copyright notice and this permission notice shall be included in all
        copies or\\n-substantial portions of the Software.\\n+Permission is hereby
        granted, free of charge, to any person obtaining a copy\\n+of this software
        and associated documentation files (the \\\"Software\\\"), to deal\\n+in the
        Software without restriction, including without limitation the rights\\n+to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n+copies
        of the Software, and to permit persons to whom the Software is\\n+furnished
        to do so, subject to the following conditions:\\n \\n-THE SOFTWARE IS PROVIDED
        \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\\n-INCLUDING
        BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\\n-PURPOSE
        AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\\n-LIABLE
        FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
        TORT\\n-OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
        OR THE USE OR OTHER\\n-DEALINGS IN THE SOFTWARE.\\n+The above copyright notice
        and this permission notice shall be included in all\\n+copies or substantial
        portions of the Software.\\n+\\n+THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT
        WARRANTY OF ANY KIND, EXPRESS OR\\n+IMPLIED, INCLUDING BUT NOT LIMITED TO
        THE WARRANTIES OF MERCHANTABILITY,\\n+FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE\\n+AUTHORS OR COPYRIGHT HOLDERS BE
        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n+LIABILITY, WHETHER IN AN ACTION
        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n+OUT OF OR IN CONNECTION WITH
        THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n+SOFTWARE.\"},{\"sha\":\"bcdf086b000e639fa9c2ecd28e15ddbac3729842\",\"filename\":\"README.md\",\"status\":\"modified\",\"additions\":104,\"deletions\":277,\"changes\":381,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/README.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/README.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/README.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,340 +1,167 @@\\n+\\n <!--- mdformat-toc start --slug=github --->\\n \\n+<!---\\n+!!!
        IF EDITING THE README, ENSURE TO COPY THE WHOLE FILE TO index.md in `/docs/`
        AND REMOVE THE REFERENCES TO ReadTheDocs THERE.\\n+--->\\n+\\n <div align=\\\"center\\\">\\n
        \\n-<img src=\\\"/docs/static/logo-transparent.png\\\" alt=\\\"spotDL\\\"
        width=\\\"200\\\" />\\n+# spotDL v4\\n \\n-# spotDL\\n+**spotDL** finds songs
        from Spotify playlists on YouTube and downloads them - along with album art,
        lyrics and metadata.\\n \\n-Download your Spotify playlists and songs along
        with album art and metadata\\n \\n-[![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?style=flat-square&color=44CC11)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)\\n-[![pypi
        version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n-![GitHub
        commits since latest release (by date)](https://img.shields.io/github/commits-since/spotDL/spotify-downloader/latest?color=44CC11&style=flat-square)\\n-[![pypi
        downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+[![MIT
        License](https://img.shields.io/github/license/spotdl/spotify-downloader?color=44CC11&style=flat-square)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)\\n+[![PyPI
        version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+[![PyPi
        downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n
        ![Contributors](https://img.shields.io/github/contributors/spotDL/spotify-downloader?style=flat-square)\\n
        [![Discord](https://img.shields.io/discord/771628785447337985?label=discord&logo=discord&style=flat-square)](https://discord.gg/xCa23pwJWY)\\n
        \\n+> spotDL: The fastest, easiest and most accurate command-line music downloader.\\n
        </div>\\n \\n-> The fastest, easiest, and most accurate command-line music
        downloader\\n-\\n-[![asciicast](https://asciinema.org/a/wDNFL5XGhdadUK2EnOkv46YMG.svg)](https://asciinema.org/a/wDNFL5XGhdadUK2EnOkv46YMG)\\n-\\n-##
        What spotDL does\\n-\\n-1. Downloads music from YouTube as an MP3 file\\n-2.
        Applies basic metadata gathered from Spotify such as:\\n-    - Track Name\\n-
        \   - Track Number\\n-    - Album\\n-    - Album Cover\\n-    - Genre\\n-
        \   - and more!\\n+______________________________________________________________________\\n+**[Read
        the documentation on ReadTheDocs!](https://spotdl.readthedocs.io)**\\n+______________________________________________________________________\\n
        \\n-### Redesigned\\n-\\n-spotDL is being redesigned! This means we are currently
        not accepting new feature requests. You can talk to us on [our Discord](https://discord.gg/xCa23pwJWY)
        if there is anything further.\\n-\\n-## Prerequisites\\n-\\n-- Python 3.6.1
        or above (added to PATH)\\n-- FFmpeg 4.2 or above (added to PATH)\\n-\\n->
        **_YouTube Music must be available in your country for spotDL to work. This
        is because we use YouTube Music to filter search results. You can check if
        YouTube Music is available in your country, by visiting [YouTube Music](https://music.youtube.com)._**\\n
        \\n ## Installation\\n \\n-### Installing FFmpeg\\n-\\n-- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n--
        OSX - `brew install ffmpeg`\\n-- Linux - `sudo apt install ffmpeg`\\n-\\n-###
        Installing spotDL\\n-\\n-- Recommended Stable Version:\\n-\\n-    ```bash\\n-
        \   pip install spotdl\\n-    ```\\n-\\n-- Dev Version: **(NOT STABLE)**\\n-\\n-
        \   ```bash\\n-    pip install https://codeload.github.com/spotDL/spotify-downloader/zip/dev\\n-
        \   ```\\n-\\n-If you have trouble installing spotdl take a look at the extended
        installation guide\\n-[here](/docs/INSTALLATION.md) or ask for help in our\\n-[discord
        server](https://discord.gg/xCa23pwJWY)\\n-\\n-#### On Termux\\n-\\n-```bash\\n-curl
        -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/termux/setup_spotdl.sh
        | sh\\n-```\\n-\\n-#### Arch\\n-\\n-There is an Arch User Repository (AUR)
        package for [spotDL](https://aur.archlinux.org/packages/python-spotdl/).\\n-\\n-##
        Usage\\n-\\n-- #### To download a song, run\\n-\\n-    ```bash\\n-    spotdl
        [trackUrl]\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl
        https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b\\n-    ```\\n-\\n--
        #### To download an album, run\\n-\\n-    ```bash\\n-    spotdl [albumUrl]\\n-
        \   ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl https://open.spotify.com/album/4yP0hdKOZPNshxUOjY0cZj\\n-
        \   ```\\n-\\n-- #### To download a playlist, run\\n-\\n-    ```bash\\n-    spotdl
        [playlistUrl]\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl
        https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID\\n-    ```\\n-\\n--
        #### To download all songs from an artist run\\n-\\n-    ```bash\\n-    spotdl
        [artistUrl]\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl
        https://open.spotify.com/artist/1fZAAHNWdSM5gqbi9o5iEA\\n-    ```\\n-\\n--
        #### To search for and download a song, run, **with quotation marks**\\n-\\n-
        \   ```bash\\n-    spotdl '[songQuery]'\\n-    ```\\n-\\n-    example:\\n-\\n-
        \   ```bash\\n-    spotdl 'The Weeknd - Blinding Lights'\\n-    ```\\n-\\n-
        \   > _Note: This is not accurate and often causes errors._\\n-\\n-- ####
        To resume a failed/incomplete download, run\\n-\\n-    ```bash\\n-    spotdl
        [pathToTrackingFile]\\n-    ```\\n+Refer to our [Installation Guide](https://spotdl.rtfd.io/en/latest/installation/)
        for more details.\\n \\n-    example:\\n+### Python (Recommended Method)\\n+
        \ - _spotDL_ can be installed by running `pip install spotdl`.\\n+  - To update
        spotDL run `pip install --upgrade spotdl`\\n \\n-    ```bash\\n-    spotdl
        'The Weeknd - Blinding Lights.spotdlTrackingFile'\\n-    ```\\n+  > On some
        systems you might have to change `pip` to `pip3`.\\n \\n-    > _Note: `.spotdlTrackingFile`s
        are automatically created when a download starts and deleted on completion_\\n+<details>\\n+
        \   <summary style=\\\"font-size:1.25em\\\"><strong>Other options</strong></summary>\\n
        \\n-- #### You can queue up multiple download tasks by separating the arguments
        with spaces\\n+- Prebuilt executable\\n+  - You can download the latest version
        from the\\n+    [Releases Tab](https://github.com/spotDL/spotify-downloader/releases)\\n+-
        On Termux\\n+  - `curl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/scripts/termux.sh
        | sh`\\n+- Arch\\n+  - There is an [Arch User Repository (AUR) package](https://aur.archlinux.org/packages/python-spotdl/)
        for\\n+    spotDL.\\n+- Docker\\n+  - Build image:\\n \\n     ```bash\\n-
        \   spotdl [songQuery1] [albumUrl] [songQuery2] ... (order does not matter)\\n+
        \   docker build -t spotdl .\\n     ```\\n \\n-    example:\\n+  - Launch
        container with spotDL parameters (see section below). You need to create mapped\\n+
        \   volume to access song files\\n \\n     ```bash\\n-    spotdl 'The Weeknd
        - Blinding Lights' https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID
        ...\\n+    docker run --rm -v $(pwd):/music spotdl download [trackUrl]\\n
        \    ```\\n \\n-    > _Note: spotDL downloads up to 4 songs in parallel, so
        for a faster experience, download albums and playlist, rather than tracks._\\n-\\n--
        #### To download youtube video with metadata from spotify, run\\n+ - Build
        from source\\n+\\t```bash\\n+\\tgit clone https://github.com/spotDL/spotify-downloader
        && cd spotify-downloader\\n+\\tpip install poetry\\n+\\tpoetry install\\n+\\tpoetry
        run python3 scripts/build.py\\n+\\t```\\n+\\tAn executable is created in `spotify-downloader/dist/`.\\n
        \\n-    ```bash\\n-    spotdl \\\"YouTubeURL|SpotifyURL\\\"\\n-    ```\\n-\\n-
        \   example:\\n+</details>\\n \\n-    ```bash\\n-    spotdl \\\"https://www.youtube.com/watch?v=EO7XnC1YpVo|https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3\\\"\\n-
        \   ```\\n-\\n-    > Note: Urls have to be separated with `|` and quoted properly
        ex. \\\"YouTubeURL|SpotifyUrl\\\"\\n-\\n-- #### To download songs with different
        output format run\\n-\\n-    ```bash\\n-    spotdl [songUrl] --output-format
        mp3/m4a/flac/opus/ogg/wav\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-
        \   spotdl [songUrl] --output-format opus\\n-    ```\\n \\n-- #### To use
        ffmpeg binary that is not on PATH run\\n-\\n-    ```bash\\n-    spotdl [songUrl]
        --ffmpeg path/to/your/ffmpeg.exe\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-
        \   spotdl [songUrl] --ffmpeg C:\\\\ffmpeg\\\\bin\\\\ffmpeg.exe\\n-    ```\\n-\\n--
        #### To generate .m3u file for each playlist run\\n-\\n-    ```bash\\n-    spotdl
        [playlistUrl] --m3u\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-
        \     spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID --m3u\\n-
        \   ```\\n-\\n-- #### To use youtube instead of youtube music run\\n-\\n-
        \   ```bash\\n-    spotdl [songUrl] --use-youtube\\n-    ```\\n-\\n-    example:\\n-\\n-
        \   ```bash\\n-      spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --use-youtube\\n-    ```\\n-\\n-- #### To manually choose a lyrics provider,
        run\\n-  \\n-    ```bash\\n-      spotdl [songUrl] --lyrics-provider lyrics_provider\\n-
        \   ```\\n-\\n-    available lyrics providers:\\n-    - genius\\n-    - musixmatch\\n+###
        Installing FFmpeg\\n \\n-    example:\\n+FFmpeg is required for spotDL. If
        using FFmpeg only for spotDL, you can simply install FFmpeg to your spotDL
        installation directory:\\n+`spotdl --download-ffmpeg`\\n \\n-    ```bash\\n-
        \     spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --lyrics-provider
        genius\\n-    ```\\n+We recommend the above option, but if you want to install
        FFmpeg system-wide,\\n+follow these instructions\\n \\n-- #### To change number
        of threads used when downloading songs run\\n+- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n+-
        OSX - `brew install ffmpeg`\\n+- Linux - `sudo apt install ffmpeg` or use
        your distro's package manager\\n \\n-    ```bash\\n-    spotdl [songUrl] --dt
        [number]\\n-    ```\\n+## Usage\\n \\n-    example:\\n+Using SpotDL without
        options::\\n+```sh\\n+spotdl [urls]\\n+```\\n+You can run _spotDL_ as a package
        if running it as a script doesn't work:\\n+```sh\\n+python -m spotdl [urls]\\n+```\\n
        \\n-    ```bash\\n-    spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --dt 8\\n-    ```\\n+General usage:\\n+```sh\\n+spotdl [operation] [options]
        QUERY\\n+```\\n \\n-- #### To change number of threads used when searching
        for songs run\\n+There are different **operations** spotDL can perform. The
        *default* is `download`, which simply downloads the songs from YouTube and
        embeds metadata.\\n \\n-    ```bash\\n-    spotdl [songUrl] --st [number]\\n-
        \   ```\\n+The **query** for spotDL is usually a list of Spotify URLs, but
        for some operations like **sync**, only a single link or file is required.\\n+For
        a list of all **options** use ```spotdl -h```\\n \\n-    example:\\n+<details>\\n+<summary
        style=\\\"font-size:1em\\\"><strong>Supported operations</strong></summary>\\n
        \\n-    ```bash\\n-    spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --st 8\\n-    ```\\n+- `save`: Saves only the metadata from Spotify without
        downloading anything.\\n+    - Usage:\\n+        `spotdl save [query] --save-file
        {filename}.spotdl`\\n \\n-- #### To ignore your ffmpeg version run\\n+- `web`:
        Starts a web interface instead of using the command line. However, it has
        limited features and only supports downloading single songs.\\n \\n-    ```bash\\n-
        \   spotdl [songUrl] --ignore-ffmpeg-version\\n-    ```\\n+- `url`: Get direct
        download link for each song from the query.\\n+    - Usage:\\n+        `spotdl
        url [query]`\\n \\n-- #### To use path template\\n+- `sync`: Updates directories.
        Compares the directory with the current state of the playlist. Newly added
        songs will be downloaded and removed songs will be deleted. No other songs
        will be downloaded and no other files will be deleted.\\n \\n-    ```bash\\n-
        \   spotdl [songUrl] --path-template 'template'\\n-    ```\\n+    - Usage:\\n+
        \       `spotdl sync [query] --save-file {filename}.spotdl`\\n \\n-    example:\\n+
        \       This create a new **sync** file, to update the directory in the future,
        use:\\n \\n-    ```bash\\n-    spotdl https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b
        --path-template '{artist}/{album}/{title} - {artist}.{ext}'\\n-    ```\\n+
        \       `spotdl sync {filename}.spotdl`\\n \\n-    possible values:\\n-    -
        {artist}\\n-    - {artists}\\n-    - {title}\\n-    - {album}\\n-    - {ext}\\n-
        \   - {playlist}\\n+- `meta`: Updates metadata for the provided song files.\\n+</details>\\n
        \\n-## `pipx` Isolated Environment Alternative\\n+## Music Sourcing and Audio
        Quality\\n \\n-For users who are not familiar with `pipx`, it can be used
        to run scripts **without**\\n-installing the spotDL package and all the dependencies
        globally with pip. (Effectively\\n-skipping over the [spotDL Installation](#Installing-spotDL)
        step)\\n+spotDL uses YouTube as a source for music downloads. This method
        is used to avoid any issues related to downloading music from Spotify.\\n
        \\n-First, you will need to install `pipx` by running:\\n+> **Note**\\n+>
        Users are responsible for their actions and potential legal consequences.
        We do not support unauthorized downloading of copyrighted material and take
        no responsibility for user actions.\\n \\n-```bash\\n-python3 -m pip install
        --user pipx\\n-python3 -m pipx ensurepath\\n-```\\n+### Audio Quality\\n \\n-Next,
        you can jump directly to running spotDL with:\\n+spotDL downloads music from
        YouTube and is designed to always download the highest possible bitrate; which
        is 128 kbps for regular users and 256 kbps for YouTube Music premium users.\\n
        \\n-```bash\\n-pipx run spotdl ...\\n-```\\n+Check the [Audio Formats](docs/usage.md#audio-formats-and-quality)
        page for more info.\\n \\n-## Contributor Guide\\n+## Contributing\\n \\n
        Interested in contributing? Check out our [CONTRIBUTING.md](docs/CONTRIBUTING.md)
        to find\\n-resources around contributing along with a guide on how to set
        up a development\\n-environment.\\n+resources around contributing along with
        a guide on how to set up a development environment.\\n \\n-## Contributors\\n+####
        Join our amazing community as a code contributor, and help accelerate\\n+<br><br>\\n+<a
        href=\\\"https://github.com/spotDL/spotify-downloader/graphs/contributors\\\">\\n+
        \ <img class=\\\"dark-light\\\" src=\\\"https://contrib.rocks/image?repo=spotDL/spotify-downloader&anon=0&columns=25&max=100&r=true\\\"
        />\\n+</a>\\n+## Donate\\n \\n-[![contributors](https://contributors-img.web.app/image?repo=spotdl/spotify-downloader)](https://github.com/spotdl/spotify-downloader/graphs/contributors)\\n+help
        support the development and maintenance of the software \u2764\uFE0F\\n \\n-##
        Authors\\n-\\n-1. [@ritiek](https://github.com/ritiek) for creating and maintaining
        spotDL for 4 years\\n-2. [@rocketinventor](https://github.com/rocketinventor)
        for figuring out YouTube Music\\n-   querying\\n-3. [@MikhailZex](https://github.com/MikhailZex)
        for, never mind...\\n+[![paypal](https://img.shields.io/badge/paypal-%2300457C.svg?&style=for-the-badge&logo=paypal&logoColor=white)](https://paypal.me/kko7)\\n+[![kofi](https://img.shields.io/badge/kofi-%23F16061.svg?&style=for-the-badge&logo=ko-fi&logoColor=white)](https://ko-fi.com/xnetcat)\\n
        \\n ## License\\n \\n-[MIT](/LICENSE)\\n+This project is Licensed under the
        [MIT](/LICENSE) License.\\n+\"},{\"sha\":\"18f09306117d359a19a8c9b24389776d4d412315\",\"filename\":\"docker-compose.yml\",\"status\":\"added\",\"additions\":6,\"deletions\":0,\"changes\":6,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docker-compose.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docker-compose.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docker-compose.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,6 @@\\n+version: \\\"3\\\"\\n+services:\\n+  spotdl:\\n+    image:
        \\\"spotdl/spotify-downloader\\\"\\n+    volumes:\\n+      - .:/music\"},{\"sha\":\"1532fbe06353502cb94410507c84b9e32d64cb59\",\"filename\":\"docs/CODE_OF_CONDUCT.md\",\"status\":\"added\",\"additions\":114,\"deletions\":0,\"changes\":114,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2FCODE_OF_CONDUCT.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2FCODE_OF_CONDUCT.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FCODE_OF_CONDUCT.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,114 @@\\n+# Contributor Covenant Code of Conduct\\n+\\n+## Our Pledge\\n+\\n+We
        as members, contributors, and leaders pledge to make participation in our
        community a\\n+harassment-free experience for everyone, regardless of age,
        body size, visible or invisible\\n+disability, ethnicity, sex characteristics,
        gender identity and expression, level of\\n+experience, education, socio-economic
        status, nationality, personal appearance, race, religion,\\n+or sexual identity
        and orientation.\\n+\\n+We pledge to act and interact in ways that contribute
        to an open, welcoming, diverse,\\n+inclusive, and healthy community.\\n+\\n+##
        Our Standards\\n+\\n+Examples of behavior that contributes to a positive environment
        for our community include:\\n+\\n+- Demonstrating empathy and kindness toward
        other people\\n+- Being respectful of differing opinions, viewpoints, and
        experiences\\n+- Giving and gracefully accepting constructive feedback\\n+-
        Accepting responsibility and apologizing to those affected by our mistakes,
        and learning from\\n+  the experience\\n+- Focusing on what is best not just
        for us as individuals, but for the overall community\\n+\\n+Examples of unacceptable
        behavior include:\\n+\\n+- The use of sexualized language or imagery, and
        sexual attention or advances of any kind\\n+- Trolling, insulting or derogatory
        comments, and personal or political attacks\\n+- Public or private harassment\\n+-
        Publishing others' private information, such as a physical or email address,
        without their\\n+  explicit permission\\n+- Other conduct which could reasonably
        be considered inappropriate in a professional setting\\n+\\n+## Enforcement
        Responsibilities\\n+\\n+Community leaders are responsible for clarifying and
        enforcing our standards of acceptable\\n+behavior and will take appropriate
        and fair corrective action in response to any behavior that\\n+they deem inappropriate,
        threatening, offensive, or harmful.\\n+\\n+Community leaders have the right
        and responsibility to remove, edit, or reject comments,\\n+commits, code,
        wiki edits, issues, and other contributions that are not aligned to this Code
        of\\n+Conduct, and will communicate reasons for moderation decisions when
        appropriate.\\n+\\n+## Scope\\n+\\n+This Code of Conduct applies within all
        community spaces, and also applies when an individual\\n+is officially representing
        the community in public spaces. Examples of representing our\\n+community
        include using an official e-mail address, posting via an official social media\\n+account,
        or acting as an appointed representative at an online or offline event.\\n+\\n+##
        Enforcement\\n+\\n+Instances of abusive, harassing, or otherwise unacceptable
        behavior may be reported to the\\n+community leaders responsible for enforcement
        at spotdladmins@googlegroups.com. All complaints\\n+will be reviewed and investigated
        promptly and fairly.\\n+\\n+All community leaders are obligated to respect
        the privacy and security of the reporter of any\\n+incident.\\n+\\n+## Enforcement
        Guidelines\\n+\\n+Community leaders will follow these Community Impact Guidelines
        in determining the consequences\\n+for any action they deem in violation of
        this Code of Conduct:\\n+\\n+### 1. Correction\\n+\\n+**Community Impact**:
        Use of inappropriate language or other behavior deemed unprofessional or\\n+unwelcome
        in the community.\\n+\\n+**Consequence**: A private, written warning from
        community leaders, providing clarity around\\n+the nature of the violation
        and an explanation of why the behavior was inappropriate. A public\\n+apology
        may be requested.\\n+\\n+### 2. Warning\\n+\\n+**Community Impact**: A violation
        through a single incident or series of actions.\\n+\\n+**Consequence**: A
        warning with consequences for continued behavior. No interaction with the\\n+people
        involved, including unsolicited interaction with those enforcing the Code
        of Conduct,\\n+for a specified period of time. This includes avoiding interactions
        in community spaces as well\\n+as external channels like social media. Violating
        these terms may lead to a temporary or\\n+permanent ban.\\n+\\n+### 3. Temporary
        Ban\\n+\\n+**Community Impact**: A serious violation of community standards,
        including sustained\\n+inappropriate behavior.\\n+\\n+**Consequence**: A temporary
        ban from any sort of interaction or public communication with the\\n+community
        for a specified period of time. No public or private interaction with the
        people\\n+involved, including unsolicited interaction with those enforcing
        the Code of Conduct, is\\n+allowed during this period. Violating these terms
        may lead to a permanent ban.\\n+\\n+### 4. Permanent Ban\\n+\\n+**Community
        Impact**: Demonstrating a pattern of violation of community standards, including\\n+sustained
        inappropriate behavior, harassment of an individual, or aggression toward
        or\\n+disparagement of classes of individuals.\\n+\\n+**Consequence**: A permanent
        ban from any sort of public interaction within the community.\\n+\\n+## Attribution\\n+\\n+This
        Code of Conduct is adapted from the [Contributor Covenant][homepage], version
        2.0,\\n+available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\\n+\\n+Community
        Impact Guidelines were inspired by\\n+[Mozilla's code of conduct enforcement
        ladder](https://github.com/mozilla/diversity).\\n+\\n+For answers to common
        questions about this code of conduct, see the FAQ at\\n+https://www.contributor-covenant.org/faq.
        Translations are available at\\n+https://www.contributor-covenant.org/translations.\\n+\\n+[homepage]:
        https://www.contributor-covenant.org\"},{\"sha\":\"8159c61e622db05f0eed4eb98ac7265f8298a64a\",\"filename\":\"docs/CONTRIBUTING.md\",\"status\":\"modified\",\"additions\":293,\"deletions\":157,\"changes\":450,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2FCONTRIBUTING.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2FCONTRIBUTING.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FCONTRIBUTING.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,215 +1,351 @@\\n-<!--- mdformat-toc start --slug=github --->\\n+<!-- omit
        in toc -->\\n+\\n+# Contributing to spotdl\\n+\\n+First off, thanks for taking
        the time to contribute! \u2764\uFE0F\\n+\\n+All types of contributions are
        encouraged and valued. See the\\n+[Table of Contents](#table-of-contents)
        for different ways to help and details about how this\\n+project handles them.
        Please make sure to read the relevant section before making your\\n+contribution.
        It will make it a lot easier for us maintainers and smooth out the experience
        for\\n+everyone involved. The community looks forward to your contributions.
        \U0001F389\\n+\\n+> And if you like the project, but just don't have time
        to contribute, that's fine. There are\\n+> other easy ways to support the
        project and show your appreciation, which we would also be\\n+> very happy
        about:\\n+>\\n+> - Star the project\\n+> - Tweet about it\\n+> - Refer this
        project in your project's readme\\n+> - Mention the project at local meetups
        and tell your friends/colleagues\\n+\\n+<!-- omit in toc -->\\n+\\n+## Table
        of Contents\\n+\\n+- [I Have a Question](#i-have-a-question)\\n+- [I Want
        To Contribute](#i-want-to-contribute)\\n+- [Reporting Bugs](#reporting-bugs)\\n+-
        [Suggesting Enhancements](#suggesting-enhancements)\\n+- [Linting, Formatting
        and Type-checking](#Linting,-Formatting-and-Type-checking)\\n+- [Python Documentation](#Python-Documentation)\\n+-
        [Overview of the Project Structure](#Overview-of-the-Project-Structure)\\n+-
        [Join The Project Team](#Join-The-Project-Team)\\n+\\n+## I Have a Question\\n+\\n+>
        If you want to ask a question, we assume that you have read the available\\n+>
        [Documentation](https://github.com/spotDL/spotify-downloader/).\\n+\\n+Before
        you ask a question, it is best to search for existing\\n+[Issues](https://github.com/spotDL/spotify-downloader/issues)
        that might help you. In case you\\n+have found a suitable issue and still
        need clarification, you can write your question in this\\n+issue. It is also
        advisable to search the internet for answers first.\\n+\\n+If you then still
        feel the need to ask a question and need clarification, we recommend the\\n+following:\\n+\\n+-
        Open an [Issue](https://github.com/spotDL/spotify-downloader/issues/new).\\n+-
        Provide as much context as you can about what you're running into.\\n+- Provide
        project and platform versions (nodejs, npm, etc), depending on what seems
        relevant.\\n+\\n+We will then take care of the issue as soon as possible.\\n+\\n+<!--\\n+You
        might want to create a separate issue tag for questions and include it in
        this description. People should then tag their issues accordingly.\\n+\\n+Depending
        on how large the project is, you may want to outsource the questioning, e.g.
        to Stack Overflow or Gitter. You may add additional contact and information
        possibilities:\\n+- IRC\\n+- Slack\\n+- Gitter\\n+- Stack Overflow tag\\n+-
        Blog\\n+- FAQ\\n+- Roadmap\\n+- E-Mail List\\n+- Forum\\n+-->\\n+\\n+## I
        Want To Contribute\\n+\\n+> ### Legal Notice <!-- omit in toc -->\\n+>\\n+>
        When contributing to this project, you must agree that you have authored 100%
        of the content,\\n+> that you have the necessary rights to the content and
        that the content you contribute may be\\n+> provided under the project license.\\n+\\n+###
        Reporting Bugs\\n+\\n+<!-- omit in toc -->\\n+\\n+#### Before Submitting a
        Bug Report\\n+\\n+A good bug report shouldn't leave others needing to chase
        you up for more information.\\n+Therefore, we ask you to investigate carefully,
        collect information and describe the issue in\\n+detail in your report. Please
        complete the following steps in advance to help us fix any\\n+potential bug
        as fast as possible.\\n+\\n+- Make sure that you are using the latest version.\\n+-
        Determine if your bug is really a bug and not an error on your side e.g. using
        incompatible\\n+  environment components/versions (Make sure that you have
        read the\\n+  [documentation](https://github.com/spotDL/spotify-downloader/).
        If you are looking for\\n+  support, you might want to check [this section](#i-have-a-question)).\\n+-
        To see if other users have experienced (and potentially already solved) the
        same issue you\\n+  are having, check if there is not already a bug report
        existing for your bug or error in the\\n+  [bug tracker](https://github.com/spotDL/spotify-downloader/issues?q=label%3Abug).\\n+-
        Also make sure to search the internet (including Stack Overflow) to see if
        users outside of\\n+  the GitHub community have discussed the issue.\\n+-
        Collect information about the bug:\\n+- Stack trace (Traceback)\\n+- OS, Platform
        and Version (Windows, Linux, macOS, x86, ARM)\\n+- Version of the interpreter,
        compiler, SDK, runtime environment, package manager, depending on\\n+  what
        seems relevant.\\n+- Possibly your input and the output\\n+- Can you reliably
        reproduce the issue? And can you also reproduce it with older versions?\\n+\\n+<!--
        omit in toc -->\\n+\\n+#### How Do I Submit a Good Bug Report?\\n+\\n+> You
        must never report security related issues, vulnerabilities or bugs to the
        issue tracker,\\n+> or elsewhere in public. Instead sensitive bugs must be
        sent by discord to xnetcat#8144.\\n+\\n+<!-- You may add a PGP key to allow
        the messages to be sent encrypted as well. -->\\n+\\n+We use GitHub issues
        to track bugs and errors. If you run into an issue with the project:\\n+\\n+-
        Open an [Issue](https://github.com/spotDL/spotify-downloader/issues/new).
        (Since we can't be\\n+  sure at this point whether it is a bug or not, we
        ask you not to talk about a bug yet and not\\n+  to label the issue.)\\n+-
        Explain the behavior you would expect and the actual behavior.\\n+- Please
        provide as much context as possible and describe the *reproduction steps*
        that someone\\n+  else can follow to recreate the issue on their own. This
        usually includes your code. For good\\n+  bug reports you should isolate the
        problem and create a reduced test case.\\n+- Provide the information you collected
        in the previous section.\\n \\n-# CONTRIBUTING\\n+Once it's filed:\\n \\n-##
        Which contributions get accepted and which ones don't?\\n+- The project team
        will label the issue accordingly.\\n+- A team member will try to reproduce
        the issue with your provided steps. If there are no\\n+  reproduction steps
        or no obvious way to reproduce the issue, the team will ask you for those\\n+
        \ steps and mark the issue as `needs-repro`. Bugs with the `needs-repro` tag
        will not be\\n+  addressed until they are reproduced.\\n+- If the team is
        able to reproduce the issue, it will be marked `needs-fix`, as well as\\n+
        \ possibly other tags (such as `critical`), and the issue will be left to
        be\\n+  [implemented by someone](#your-first-code-contribution).\\n \\n-For
        the sake of maintainability and ease-of-use standards, we are not able to
        accept all\\n-contributions that come to spotDL - don't get us wrong,\\n-**ALL
        CONTRIBUTIONS ARE WELCOME...** So just which contributions get accepted and
        which\\n-ones don't? That's what we're here to answer.\\n+<!-- You might want
        to create an issue template for bugs and errors that can be used as a guide
        and that defines the structure of the information to be included. If you do
        so, reference it here in the description. -->\\n \\n-______________________________________________________________________\\n+###
        Suggesting Enhancements\\n \\n-## A short note to contributors\\n+This section
        guides you through submitting an enhancement suggestion for spotdl, **including\\n+completely
        new features and minor improvements to existing functionality**. Following
        these\\n+guidelines will help maintainers and the community to understand
        your suggestion and find\\n+related suggestions.\\n \\n-1. Further on in this
        document, we use the term 'Users' interchangeably for both people who\\n-
        \  use spotDL as a command line tool and those who use spotDL as a library.\\n+<!--
        omit in toc -->\\n \\n-2. These requirements are aimed at helping future contributors
        (people like you) more than\\n-   its aimed at users, code quality and other
        such things.\\n+#### Before Submitting an Enhancement\\n \\n-3. Most of the
        requirements we need for a contribution to be accepted overlap with each\\n-
        \  other, so our 5-point requirements is more of a 3.5-point requirements.\\n+-
        Make sure that you are using the latest version.\\n+- Read the [documentation](https://github.com/spotDL/spotify-downloader/)
        carefully and find\\n+  out if the functionality is already covered, maybe
        by an individual configuration.\\n+- Perform a [search](https://github.com/spotDL/spotify-downloader/issues)
        to see if the\\n+  enhancement has already been suggested. If it has, add
        a comment to the existing issue\\n+  instead of opening a new one.\\n+- Find
        out whether your idea fits with the scope and aims of the project. It's up
        to you to\\n+  make a strong case to convince the project's developers of
        the merits of this feature. Keep\\n+  in mind that we want features that will
        be useful to the majority of our users and not just a\\n+  small subset. If
        you're just targeting a minority of users, consider writing an add-on/plugin\\n+
        \ library.\\n \\n-4. Yes, there might be times when you can't both improve
        spotDL and stick to the\\n-   requirements, in those rare cases, focus on
        improvement first and do your best ot meet the\\n-   requirements. Sometimes,
        you have to take a step back to take several forward.\\n+<!-- omit in toc
        -->\\n \\n-5. Most of the requirements are subjective to an extent. In your
        view, your code might meet\\n-   the requirements, in reality, from the experience
        handling many, many previous\\n-   contributions, this might not be the case.\\n+####
        How Do I Submit a Good Enhancement Suggestion?\\n \\n-6. The maintainers have
        no obligation to accept your contribution just because you put in a\\n-   lot
        of effort into it, so please feel free to open an issue about what ever it
        is that you\\n-   wish to contribute to get in touch with maintainers before
        you put in all that effort.\\n-   The maintainer will do their best to help
        you with your contributions.\\n+Enhancement suggestions are tracked as\\n+[GitHub
        issues](https://github.com/spotDL/spotify-downloader/issues).\\n \\n-______________________________________________________________________\\n+-
        Use a **clear and descriptive title** for the issue to identify the suggestion.\\n+-
        Provide a **step-by-step description of the suggested enhancement** in as
        many details as\\n+  possible.\\n+- **Describe the current behavior** and
        **explain which behavior you expected to see instead**\\n+  and why. At this
        point you can also tell which alternatives do not work for you.\\n+- You may
        want to **include screenshots and animated GIFs** which help you demonstrate
        the\\n+  steps or point out the part which the suggestion is related to. You
        can use\\n+  [this tool](https://www.cockos.com/licecap/) to record GIFs on
        macOS and Windows, and\\n+  [this tool](https://github.com/colinkeenan/silentcast)
        or\\n+  [this tool](https://github.com/GNOME/byzanz) on Linux.\\n+      <!--
        this should only be included if the project has a GUI -->\\n+- **Explain why
        this enhancement would be useful** to most spotdl users. You may also want
        to\\n+  point out the other projects that solved it better and which could
        serve as inspiration.\\n \\n-## The basic requirements of any contribution\\n+<!--
        You might want to create an issue template for enhancement suggestions that
        can be used as a guide and that defines the structure of the information to
        be included. If you do so, reference it here in the description. -->\\n \\n-1.
        **'Ease-of-use'** and **'minimal user-know-how'**\\n+### Developing\\n \\n-
        \  - *If an application has a steep learning curve, I'd rather not use it*
        - Everybody\\n+Fork the repository on Github and then clone it.\\n \\n-   -
        Your users might not always be fellow programmers, ensure that your contribution
        makes\\n-     spotDL easier to use both as a tool and as a library or at least
        don't make it harder.\\n-     Making it easier to user means shallow learning
        curves and fewer steps as a script and\\n-     'self-contained code' as a
        library, that way users (coders) don't need to peek lower-level\\n-     code
        to understand just what the hell your code does, neither do future contributors
        have\\n-     to peek too - They are the guys who actually need to understand
        your code.\\n+```bash\\n+git clone [your username]/spotify-downloader\\n+cd
        spotify-downloader\\n+```\\n \\n-   - eg.\\n+**Install poetry**\\n \\n-     -
        spotDL v2 used a unix style command-line interface, spotDL v3 uses a much
        simpler command\\n-       line interface that doesn't require any of the unix
        style input flags like `-d` or\\n-       `--download`, for a user, thats less
        stuff to type (easier to use) and also less stuff to\\n-       know - if the
        user is not a programmer, he/she/them don't have to learn to type unix-style\\n-
        \      commands.\\n+```\\n+pip install poetry\\n+```\\n \\n-     - every function
        has a standardized docStrings and type definitions, library users (other\\n-
        \      coders) don't need to look at the source code to either figure out
        the type of inputs to\\n-       be passed or what the function does. Thats
        less things they have to look, refer or figure\\n-       out. As a programmer
        you've probably wished that people wrote code like that, you and I we\\n-
        \      might as well start.\\n+**Then, to install spotDL in-place, run the
        following**\\n \\n-2. **Minimum steps** b/w the user and the end result\\n+```\\n+poetry
        install\\n+```\\n \\n-   - *'Civilization progresses by increasing the number
        of important actions that one can\\n-     perform without thinking'* - Alfred
        North Whitehead\\n+**Then, to activate virtual environment run the following**\\n
        \\n-   - You can put in as many intermediate steps as you require internally
        to get something done\\n-     but, you either decrease the steps b/w the user
        and what the user wants or at least, don't\\n-     increase the number of
        steps.\\n+```\\n+poetry shell\\n+```\\n \\n-   - eg.\\n+All changes will now
        affect the poetry installation of the spotDL cli.\\n \\n-     - In early revisions
        of spotDL, search utilities written to get playlist tracks returned\\n-       spotify
        links which the user (programmer during use as a library) had to then pass
        to a\\n-       `SongObj` constructor and then further pass the song object
        to the downloader. Now, the\\n-       search utilities to get playlist tracks
        directly returns a list of `SongObj` - thereby,\\n-       eliminating 1 step
        b/w the user (programmer) and the end result even though there is the\\n-
        \      additional intermediate step of passing the spotify links to the `SongObj`.\\n+###
        Linting, Formatting and Type-checking\\n \\n-     - In spotDL v2 command line,
        the user (the guy downloading songs) would first have to run\\n-       `spotdl
        --list $playlistLink` to write all songUrl's to a text file and then pass
        the text\\n-       file to the spotDL script in the next step which would
        then re-query spotify for song\\n-       details and proceed to download the
        song. In spotDL v3, all you have to do is run\\n-       `spotdl $thing` where
        'thing' might be a song, album, playlist or a song search query and\\n-       it
        goes about getting the requisite tracks and downloading them eliminating 2-3
        steps b/w\\n-       the user (guy downloading songs) and the end result (downloaded,
        tagged songs)\\n+- We use [`pylint`](https://pypi.org/project/pylint/) for
        linting and expect a score above `9`\\n \\n-3. **Simplicity** and **readability**
        of code\\n+  ```bash\\n+  pylint --limit-inference-results 0 --fail-under
        9 ./spotdl\\n+  ```\\n \\n-   - *The primary job of a programmed is to manage
        complexity* - Code Complete, Steve McConnell\\n+- We use [`black`](https://pypi.org/project/black/)
        for code formatting\\n \\n-   - Look man, seriously, software can get insanely
        complicated. In the real world there are\\n-     physical limits to complexity,
        there is no such limit in software - thing can get as\\n-     complicated
        as you wish but, the human brain is not designed to understand 'systems'.
        We\\n-     have no intuitive feel for 'software systems' like we do for running
        down the stairs (try\\n-     running down the stairs while looking at your
        feet, you'll understand just how intuitively\\n-     you move around), in
        other terms - you can slowly put together complex systems but,\\n-     others
        can't understand them the way you do. Beyond a point even you can't predict
        how\\n-     everything will work together. Every programmer at some point
        of time has fixed a bug only\\n-     to realize that the fix created another
        bug - that your biological incapability to\\n-     understand systems. So,
        make it a point to keep things simple when you code, and simplify\\n-     your
        code later.\\n+  ```bash\\n+  black ./spotdl\\n+  ```\\n \\n-   - Your not
        going to stick around forever, eventually someone else has to take over. Make\\n-
        \    their job easier, write code that is 'easy to understand and contribute
        to'\\n+- We use [`mypy`](https://pypi.org/project/mypy/) for type-checking
        and expect no errors at all\\n \\n-   - eg.\\n+  To install type-stubs the
        first time around\\n \\n-     - spotDL v3 was written from scratch, why? To
        simplify it. The fact that it went from\\n-       approx. 47 files in v2 to
        just around 12 files in v3 with almost no loss of functionality\\n-       is
        a good measure of the effort that went into simplifying spotDL.\\n+  ```bash\\n+
        \ mypy --ignore-missing-imports --follow-imports silent --install-types --non-interactive
        ./spotdl\\n+  ```\\n \\n-     - almost all naming, be it of functions, variables
        or classes in v3 is meant to describe the\\n-       functionality of that
        variable/function/class to some extent. As tempting as it is to\\n-       name
        variables like `x`, they got more descriptive names like `totalSongCount`.
        Most\\n-       function run into a 100+ lines while the actual code is just
        33 lines and with a little\\n-       'smart coding' possibly reducible to
        20 odd lines, why? The code is written to be 'read\\n-       and understood'
        not to 'save disk space' - your writing for the next contributor, not just\\n-
        \      for some feature you want.\\n+  ```bash\\n+  mypy ./spotdl\\n+  ```\\n
        \\n-4. Documentation, Documentation, some\\n-   **more documentation; Write
        documentation into your code.**\\n+- You can install these basic tools with\\n
        \\n-   - *good code is its own best documentation* - Code Complete, Steve
        McConnell\\n+  ```bash\\n+  pip install --force-reinstall --upgrade mypy black
        pylint\\n+  ```\\n \\n-   - In an ideal world, people would write such clear,
        readable, understandable code that there\\n-     would be no need for documentation.
        Have a doubt? Read the source code... We don't live\\n-     in that world.
        You know the code you wrote better than anyone else, write documentation\\n-
        \    for it. It doesn't have to be much - what are the inputs, what is the
        type of each input,\\n-     what does that bit of code do, any special quirky
        behavior to look out for - thats all you\\n-     need to put down. This will
        help users (other programmers using spotDL as a library)\\n+### Python Documentation\\n
        \\n-   - The hardest part of contributing is going through old code and figuring
        out what does\\n-     what, help out future contributors with that - use comments,
        use them as much as possible.\\n-     Put in reminders when your leveraging
        some weird python behavior, put in notes on just\\n-     what a particularly
        important code-block is doing, notes about docString-less functions\\n-     that
        have been imported and used and just about anything that could use additional
        notes\\n-     about it.\\n+Any submitted code is expected to have accompanying
        documentation\\n \\n-   - eg.\\n+#### mkdocs: generating documentation\\n
        \\n-     - every single function in spotDL v3 has a markdown formatted docString
        that describes the\\n-       basics required for documentation.\\n+- We generate
        our documentation with [`mkdocs`](https://www.mkdocs.org/)\\n \\n-     - every
        single place in spotDL v3 where python interpreting `None` as `False` has
        been used,\\n-       has an accompanying comment - `#! python evaluvates 'None'
        as 'False'` - its simple,\\n-       right? WRONG. Not a lot of python programmers
        even know about this 'behavior quirk' of\\n-       python.\\n+  ```bash\\n+
        \ pip install mkdocs\\n+  ```\\n \\n-5. Justified existence\\n+  `mkdocs`
        requires that all development packages are installed\\n \\n-   - *I write/accept
        code for 80% of users, not the 20% with special needs* - A maintainer,\\n-
        \    Vue.js\\n+  ```bash\\n+  poetry install\\n+  ```\\n \\n-   - The bigger
        a program gets, the harder it is to manage, improve, extend and maintain.
        From\\n-     experience the **Pareto principle** applies to code too - 20%
        of the code accounts form\\n-     80% of the functionality - So, in the name
        of maintainability, don't bother writing the\\n-     remaining 80% of code
        that provides only 20% of the functionality. If you are hellbent of\\n-     doing
        so, make a fork of spotDL, well even put up a link to your fork for other
        who\\n-     desperately need that 20% functionality.\\n+  generate docs with\\n
        \\n-   - Subject your code to [Zero-base accounting](/docs/code/CODE_GUIDELINES.md),
        it helps get\\n-     rid of all the 20% features you feel tempted to build
        - it'll also spare you that much\\n-     time and effort.\\n+  ```bash\\n+
        \ mkdocs build --strict\\n+  ```\\n \\n-   - eg.\\n+  view docs live-time
        while editing with\\n \\n-     - spotDL v2 was far more feature rich than
        v3, what did 99% of users use spotDL for? To\\n-       download songs. spotDL
        v3 got rid of all the additional, 'nice-to-have' features and\\n-       focused
        solely on downloading songs. Some might even say that it's under-featured,
        we\\n-       can't really argue with that, but we have no intentions of changing
        that.\\n+  ```bash\\n+  mkdocs serve\\n+  ```\\n \\n-______________________________________________________________________\\n+####
        DocString Formats\\n \\n-## Setup Local Environment for Development\\n+- For
        functions\\n \\n-1. Clone this repository\\n+  ```\\n+  one-liner about functions
        purpose\\n \\n-   ```bash\\n-   git clone https://github.com/spotDL/spotify-downloader.git\\n-
        \  cd spotify-downloader\\n-   ```\\n+  ### Args (optional)\\n+  - arg_name:
        description\\n \\n-2. Setup venv (Optional)\\n+  ### Returns (optional)\\n+
        \ - return value description\\n \\n-   - Windows\\n+  ### Errors (only if
        there are known unhandled Errors/thrown Errors)\\n+  - known errors\\n \\n-
        \    ```bash\\n-     py -3 -m venv env\\n-     .\\\\.venv\\\\Scripts\\\\activate\\n-
        \    ```\\n+  ### Notes (optional)\\n+  - notes if any\\n+  ```\\n \\n-   -
        Linux/macOS\\n+- For Classes\\n \\n-     ```bash\\n-     python3 -m venv .venv\\n-
        \    source .venv/bin/activate\\n-     ```\\n+  ```\\n+  one-liner about class
        purpose\\n \\n-3. Install requirements\\n+  ### Attributes\\n+  - attribute:
        description\\n \\n-   ```bash\\n-   pip install -e .\\n-   ```\\n+  ### Notes
        (optional)\\n+  - notes if any\\n+  ```\\n \\n-4. Use as command (no need
        to re-install after file changes)\\n+- For modules/package `__init__`\\n \\n-
        \  ```bash\\n-   spotdl [ARGUMENTS]\\n-   ```\\n+  ```\\n+  at max 3 lines
        about module/package purpose\\n+\\n+  optional usage example for module/package
        preferably showcasing most commonly used functionality\\n+  ```\\n+\\n+####
        Notes about docstrings\\n+\\n+- DocStrings are Inherited\\n+\\n+  ```\\n+
        \ class A:\\n+      def test(self):\\n+          \\\"\\\"\\\"Docstring for
        A.\\\"\\\"\\\"\\n+          pass\\n+\\n+  class B(A):\\n+      def test(self):\\n+
        \         pass\\n+  ```\\n+\\n+### Overview of the Project Structure\\n+\\n+|
        sub-package | purpose                                                            |\\n+|
        ----------- | ------------------------------------------------------------------
        |\\n+| `utils`     | Contains commonly used functions                                   |\\n+|
        `types`     | Custom data types used in the spotdl project                       |\\n+|
        `providers` | Different Providers to obtain info (like song details) from
        \       |\\n+| `download`  | Download manager                                                   |\\n+|
        `console`   | Different user-facing operations like download, preload and
        web-ui |\\n+| `__init__`  | Contains spotdl class that simplifies the download
        process         |\\n+\\n+### Join The Project Team\\n+\\n+[![Discord Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n+\\n+<!--
        omit in toc -->\\n+\\n+### Attribution\\n+\\n+This guide is based on the **contributing-gen**.\\n+[Make
        your own](https://github.com/bttger/contributing-gen)!\"},{\"sha\":\"7347e2454a9d289357e9c0654aa6a76ebb892e9a\",\"filename\":\"docs/CORE_VALUES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":48,\"changes\":48,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FCORE_VALUES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FCORE_VALUES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FCORE_VALUES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,48 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# CORE
        VALUES\\n-\\n-## What is this file?\\n-\\n-This is where we outline the fundamental
        ideas by which we decide what to do, what to keep\\n-and what to remove from
        spotDL.\\n-\\n-## The Deciding Factors - Our values\\n-\\n-- Simplicity:\\n-
        \ - What can we remove? Is this necessary to most (~80%+) of users?\\n-  -
        Can we make it easier to use? Fewer steps?\\n-- Focused Functionality:\\n-
        \ - spotDL is to download \\\"content\\\" from Spotify. Does this help doing
        that? (very narrow\\n-    focus here people) A.K.A - is this a \\\"need to
        have\\\"?\\n-  - if its a \\\"nice to have\\\", will most of the users use
        it? (note: its \\\"most users **use**\\\",\\n-    not \\\"most users **want**\\\")\\n--
        Users first, provided its maintainable:\\n-  - Will this do good to the users?
        They might have not even thought about it, it might make\\n-    things more
        complex (more understanding of spotdl required to use it) but will it benefit\\n-
        \   the majority (~80%+) of them in the process?\\n-  - Provided it helps
        the users, if it has a big impact on maintainability, its still a no-no.\\n-\\n-If
        a contribution satisfies at least 2 of our deciding values it gets accepted,
        else, it\\n-doesn't.\\n-\\n-## A few general notes\\n-\\n-1. The term 'users'
        is thrown around a lot. For a project like `FFmpeg`, users is that group\\n-
        \  of coders who are unafraid of a command-prompt (it says so on the downloads
        page itself).\\n-   Here, '***users***' refers not to developers but normal
        *homo sapiens* - just about\\n-   anybody who wants to download \\\"content\\\"
        from Spotify.\\n-\\n-2. The term 'maintainability' has also been given significant
        weight. This is used in 2\\n-   senses of the word:\\n-\\n-   - General Simplicity
        - Can I read the code \\\\***once** and understand what is going on?\\n-   -
        Industry standard maintainability measures (the same one outlined on betterCodeHub)\\n-\\n-3.
        The ideas outlined here are still very much a work in progress and is open
        to discussion\\n-   but, we will stick to these. Some of the biggest companies
        & many more ambitious projects\\n-   has all fallen to ruin because of the
        'undisciplined pursuit of more'. That should not\\n-   happen here. This is
        not so much of an outline of what we should do but, an outline of\\n-   what
        '**we should not do**'.\\n-\\n-4. You're encouraged to question each contribution/existing
        functionality as required.\"},{\"sha\":\"59eac58067603d2ede08e20f35f4a9e6ef39e832\",\"filename\":\"docs/INSTALLATION.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":63,\"changes\":63,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FINSTALLATION.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FINSTALLATION.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FINSTALLATION.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,63 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# spotDL
        Installation Guide\\n-\\n-spotDL is a free and open source tool that downloads
        your Spotify playlists & music\\n-\\n-> **The fastest, easiest, and most accurate
        command-line music downloader**\\n-\\n-## Prerequisites\\n-\\n-- Python 3.6.1
        or above (added to PATH)\\n-- FFmpeg 4.2 or above (added to PATH)\\n-\\n-###
        Adding Python to PATH\\n-\\n-When installing Python, ensure to select \\\"**Add
        to PATH**\\\".\\n-\\n-![Add to PATH Image](/docs/static/ADD_TO_PATH.png)\\n-\\n-###
        Installing FFmpeg\\n-\\n-- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n--
        OSX - `brew install ffmpeg`\\n-- Linux - `sudo apt install ffmpeg` or use
        your distros package manager\\n-\\n-### Verifying Versions\\n-\\n-`py -V`
        - Should return \\\"Python 3.X.X\\\". Please ensure you have v3.6.1 or greater.\\n-\\n-`FFmpeg
        -version` - Should return starting with \\\"ffmpeg version YYYY-MM-DD\\\"\\n-\\n-##
        Installing spotDL\\n-\\n-You can install spotDL by opening a terminal and
        typing:\\n-\\n-```shell\\n-pip install spotdl\\n-```\\n-\\n-If you require
        further help, ask in our [Discord Server](https://discord.gg/xCa23pwJWY)\\n-\\n-[![Discord
        Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n-\\n-##
        Where does spotDL download songs?\\n-\\n-spotDL downloads files to the folder
        where you ran spotDL from.\\n-\\n-Open pwsh/powershell/cmd/terminal/similar
        in the folder you want files to download to, or\\n-cd to desired folder.\\n-\\n-**Windows
        Shortcut:** Navigate to the folder you want the files to download to.\\n-`SHIFT
        + RIGHT CLICK`, then select \\\"Open PowerShell window here\\\"\\n-\\n-![Windows
        PWSH](/docs/static/POWERSHELL.png)\\n-\\n-## We have a public Discord server
        at **[discord.gg/xCa23pwJWY](https://discord.gg/xCa23pwJWY)!**\\n-\\n-[![Discord
        Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n-\\n-##
        Installation Guide Authors\\n-\\n-- Initial Draft - [@commanderabdu](https://github.com/commanderabdu)
        - NoSubwayzz\\n-- Editing & Updating - [@Silverarmor](https://github.com/Silverarmor)\"},{\"sha\":\"beb89fde156d3640db89eb60a362dba32249da53\",\"filename\":\"docs/code/CODE_GUIDELINES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":250,\"changes\":250,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FCODE_GUIDELINES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FCODE_GUIDELINES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2FCODE_GUIDELINES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,250 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!--
        Coding guidelines to go here, all of them - from the simple to the obscure
        -->\\n-\\n-# Code Guidelines\\n-\\n-Various code guidelines we request you
        to follow through and through your code (at least\\n-the code you contribute
        here). Some will seem important and useful, others dumb and\\n-inconsequential
        but then... Whatever (no fancy reasons here).\\n-\\n-______________________________________________________________________\\n-\\n-#
        Index\\n-\\n-1. Naming of\\n-\\n-   - [Variables](#Variables)\\n-   - [Functions](#Functions)\\n-
        \  - [Classes](#Classes)\\n-   - [General Conventions](#General)\\n-\\n-2.
        [Sizing of Modules/Classes/Functions](#Sizing)\\n-\\n-3. [In-line Documentation](#Documentation)\\n-\\n-4.
        [Zero-base accounting](#Zero-base-accounting)\\n-\\n-5. [Just how much of
        this is compulsory?](#Necessary-conventions)\\n-\\n-______________________________________________________________________\\n-\\n-#
        Naming conventions\\n-\\n-Internal consistency in naming greatly reduces the
        effort in understanding the codebase by\\n-getting rid of cognitive overhead
        allowing you to focus on what matters. This is\\n-especially useful in large
        codebases. The following naming conventions are only for\\n-python.\\n-\\n-##
        Variables\\n-\\n-- Use Camel case naming - Uppercase the first letter of each
        word after the first. eg,\\n-  - `songObject`\\n-  - `randomVariableThatNoOneCaresAbout`\\n-\\n-______________________________________________________________________\\n-\\n-##
        Functions\\n-\\n-- Use snake case - fully lowercase names with underscores
        instead of spaces. eg,\\n-  - `download`\\n-  - `save_to_disk`\\n-  - `songObj.get_contributing_artists`\\n-\\n-______________________________________________________________________\\n-\\n-##
        Classes\\n-\\n-- Capitalize the first letter of each word. eg,\\n-  - `DisplayManager`\\n-
        \ - `SongObj`\\n-  - `Spotdl`\\n-\\n-______________________________________________________________________\\n-\\n-##
        General\\n-\\n-- Use descriptive names - your names should convey the purpose.
        eg,\\n-\\n-  - `car` or `bus` instead of `fourTire` when you are referencing
        a 4-wheeled vehicle\\n-  - `download_song` instead of `get` you might also
        be *'getting'* song metadata - why the\\n-    confuse the reader?\\n-  - `DisplayManager`
        instead of `Manager` - *Was it 'DownloadManager' or just 'Manager'?\\n-    Crappy
        naming...*\\n-\\n-- Avoid abbreviations, if you can't use mnemonic abbreviations
        - stuff you can pronounce.\\n-  eg,\\n-\\n-  - `cLine` instead of `cne`\\n-
        \ - `DlManager` instead of `DlMngr`\\n-  - `download_from_spot` instead of
        `download_fr_spfy`\\n-\\n-______________________________________________________________________\\n-\\n-#
        Sizing\\n-\\n-500 line files are daunting - as someone new to the codebase,
        you don't know if you can\\n-get through all of that code... Sizing limits
        prevent you from writing mammoth code, force\\n-you to ruthlessly simplify
        and ensure proper abstraction (as it forces you to break-up\\n-any unusually
        large classes/functions you might have)\\n-\\n-- Python\\n-\\n-  - Keep python
        lines ***under 90 columns in length***, i.e. 90 characters per line including\\n-
        \   indents\\n-  - Keep python modules ***under 200 lines of code***, excluding
        comments, empty lines,\\n-    docstring's.\\n-  - Keep python classes ***under
        100 lines of code***, excluding comments, empty lines,\\n-    docstring's.\\n-
        \ - Keep python functions ***under 75 lines of code***, excluding comments,
        empty lines,\\n-    docstring's.\\n-\\n-- Markdown\\n-\\n-  - Keep Markdown
        lines ***under 100 columns in length***, i.e. 100 characters including\\n-
        \   spaces\\n-  - Keep Markdown files ***under 750 lines***, including comments
        and empty lines\\n-\\n-Counting lines of python code is arduous, so you can
        use the `totalLNC.py`, `funcLNC.py` &\\n-`classLNC.py` from the `.\\\\dev
        utils\\\\` folder to do the heavy lifting. Run them by passing\\n-them a folder
        name. eg, `python '.\\\\dev Utils\\\\classLNC.py' .\\\\spotdl`, all these
        command\\n-line utils, count 90 characters as a line, so you can't cheat by
        just writing longer but\\n-fewer lines of code.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Documentation\\n-\\n-With modern code editors like VS Code providing markdown-enabled
        docstring display when\\n-you hover over a function or class, referencing
        documentation is easier than ever before -\\n-provided you can write good
        in-line documentation.\\n-\\n-- Docstring's for functions\\n-\\n-  - Start
        with types of arg, arg name and purpose. Use markdown's code-syntax for arg
        type and\\n-    arg name, followed by a colon and description\\n-  - Note
        return type with `RETURNS` and an optional description of the same\\n-  -
        Describe the purpose of the given function, and other quirks\\n-  - Don't
        use coding terms except names of arg passed to function/class\\n-\\n-- Control
        flow comments\\n-\\n-  - Comment out control flow of your code before you
        start coding, use `#` for these comments\\n-  - Indent control flow comments
        as required\\n-  - Now, others who want to read your code don't have to put
        too much effort into figuring out\\n-    the control flow\\n-  - Don't use
        coding terms or reference functions and variables here except the most basic\\n-
        \   ones\\n-\\n-- Notes about the code\\n-\\n-  - Underline quirky behavior
        or details related to your code using comments, differentiate\\n-    these
        from control flow comments by starting them with `#!` instead of `#`\\n-  -
        Explain design decisions here\\n-  - Feel free to reference what ever you
        want\\n-\\n-- Your code itself\\n-\\n-  - Good code is it's own documentation\\n-
        \ - Don't be afraid to visually block out your code using multiple constitutive
        blank lines\\n-\\n-- An Example,\\n-\\n-  ```python\\n-\\n-  def download_img(imageUrl,
        savePath = '.\\\\img.jpg'):\\n-      '''\\n-      `str` `imgUrl` : Url of
        the image to be saved\\n-\\n-      `str` `savePath` : path at which file is
        to be saved\\n-\\n-      RETURNS `bool`\\n-\\n-      downloads image at `imageUrl`
        to `savePath`. Returns `True` if download is successful.\\n-      Folders
        in `savePath` are not created, you'll get an error if they don't exist.\\n-
        \     '''\\n-\\n-      # Setup a python do-while loop equivalent\\n-\\n-      #!
        As users of this library usually have terrible internet connections, we\\n-
        \     #! attempt to download the image up to 10 times on a UrlError\\n-      \\n-
        \     while True:\\n-          try:\\n-              # Attempt to read image
        as binary file\\n-              #! This is the usual cause of errors\\n-              \\n-
        \             imgData = urlopen(imageURL).read()\\n-\\n-\\n-\\n-\\n-              #
        Save image to disk\\n-\\n-              #! Though creating the required directories
        is an easy job, it is intensionally left\\n-              #! out here as this
        lib has to run in highly restricted directory trees environments\\n-              #!
        where the user doesn't necessarily have permissions to create directories.\\n-
        \             #! Assuming the user has no permission to create dirs, this
        code can still be used by\\n-              #! him/her/them to save images
        without having to edit the code themselves.\\n-              #!\\n-              #!
        We return True on success, thereby exiting the function\\n-\\n-              with
        open(savePath, 'wb') as file:\\n-                  file.write(imgData)\\n-\\n-
        \             return True\\n-\\n-\\n-\\n-\\n-          except UrlError or
        FileNotFoundError:\\n-              if errorCount > 10:\\n-\\n-                  #!
        Returns False on failing more than 10 times, exit func...\\n-                  return
        False\\n-              else:\\n-                  errorCount += 1\\n-  ```\\n-\\n-
        \ - There are only 11 lines of code, yet the function is 47 lines long. Is
        it worth it?\\n-    Absolutely. The next guy who comes along won't wonder
        why you attempt to download an image\\n-    10 times and won't get rid of
        the loop thinking it to be pointless, he/she/they wouldn't\\n-    attempt
        to create the necessary file directories as required - something that seems
        like a\\n-    more functional addition to the function than the while loop
        - knowing why that was left\\n-    out in the first place.\\n-\\n-  - The
        doc string allows someone who intends to use this function in their code a
        ready\\n-    reference to what each arg is used for and more importantly,
        just what the return value\\n-    does. On just another random day who would
        have ever thought that a 'download' function\\n-    returning True means that
        to download was successful?\\n-\\n-  - And the weird function structure makes
        sense without major head-whacking.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Zero-base accounting\\n-\\n-Zero-base accounting is a corporate system in
        which every department has to justify a need\\n-for its existence each year.
        If you can't justify the need, the department is dissolved.\\n-It is very
        easy to just add features and functionality to an OSS project, but with every\\n-single
        line of code, it also becomes harder to maintain - it's another piece of\\n-unnecessary
        code, another unneeded complication, anther thing you have to keep in mind\\n-while
        coding.\\n-\\n-Every top level module, class and function has an entry at\\n-[PURPOSES.md](..%5CDesign%20Docs%5CPURPOSES.md),
        if you can't put up a justification for\\n-any bit of top level code, that
        bit gets deleted, if there is any sub-code (think class\\n-methods under a
        class) don't keep in line with the **PURPOSES** file, that bit gets\\n-deleted.
        Essentially, the **PURPOSES** file, helps enforce abstraction, encapsulation
        and\\n-zero-base accounting.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Necessary conventions\\n-\\n-Now, now, you don't expect us to follow all of
        these while writing code do you? Nope we\\n-don't - that's a lot to ask. But
        we absolutely need you to follow\\n-[Naming conventions](#Naming-conventions)
        and\\n-[Zero-base accounting](#Zero-base-accounting). We also ask that you
        do your level best to\\n-comply with other guidelines, but feel free to be
        flexible in that. We have no intention\\n-to accept code that totally disregards
        the conventions.\"},{\"sha\":\"fcdae5bae852e2a9c7c974e9db5c1bc076e20d52\",\"filename\":\"docs/code/MODULES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":77,\"changes\":77,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FMODULES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FMODULES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2FMODULES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,77 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# Modules\\n-\\n-What
        are the various sub-packages and modules in spotDL? What do they do? Use this
        file a\\n-a general look up for what you want to do.\\n-\\n-## Index\\n-\\n-1.
        [search](#The-search-package)\\n-\\n-   - [provider](#provider)\\n-   - [songObj](#songObj)\\n-
        \  - [spotifyClient](#spotifyClient)\\n-   - [utils](#utils)\\n-\\n-2. [download](#The-download-package)\\n-\\n-
        \  - [downloader](#downloader)\\n-   - [ffmpeg](#ffmpeg)\\n-   - [progressHandlers](#progressHandlers)\\n-\\n-##
        The search package\\n-\\n-This is where are the song searching, matching and
        related code is organized. The only two\\n-modules you will ever need to use
        from this package if you intend to use spotDL as a\\n-library would be `spotdl.search.songObj`
        and `spotdl.search.utils`, all the other module's\\n-functionality hook into
        the aforementioned modules.\\n-\\n-### provider\\n-\\n-There are 2 modules
        here that return song details, the 'provider' module is one and\\n-'spotifyClient'
        is the other. The provider module queries YouTube Music and filters the\\n-results.\\n-\\n-###
        songObj\\n-\\n-This module houses the 'SongObj' class - something you will
        use often. The 'songObj'\\n-constitutes the only way to pass around and query
        song details within spotDL. All top\\n-level code within the 'search' package
        returns 'songObjects' and all top level code within\\n-the 'download' package
        take SongObj as inputs.\\n-\\n-### spotifyClient\\n-\\n-The 'spotifyClient'
        module is a wrapper around `spotipy.Spotify` class, it ensures that\\n-there
        is only one instance of the `Spotify` class at runtime and that the same class
        is\\n-shared across multiple 'internal name-spaces' instead of creating new
        clients each time.\\n-Essentially, it implements a 'singleton' pattern.\\n-\\n-###
        utils\\n-\\n-Simple utilities to handle the times when you deal with album/playlist
        Url's and song\\n-queries by name instead of track Url's.\\n-\\n-______________________________________________________________________\\n-\\n-##
        The download package\\n-\\n-This is where are the downloading, converting,
        tagging and related code is organized. The\\n-only two modules you will ever
        need to use from this package if you intend to use spotDL\\n-as a library
        would be `spotdl.download.downloader` and `spotdl.download.ffmpeg`, all the\\n-other
        module's functionality hook into the aforementioned modules.\\n-\\n-### downloader\\n-\\n-The
        downloader module is responsible for downloading the songs (from youtube if
        a match is\\n-found), converting them to mp3 format and applying metadata.\\n-\\n-###
        ffmpeg\\n-\\n-The ffmpeg module contains functions to verify `ffmpeg` version
        and convert downloaded\\n-songs to the `mp3` format.\\n-\\n-### progressHandlers\\n-\\n-The
        progressHandlers module handles the progress bar, download tracking and everything\\n-related
        to what you see in the terminal.\"},{\"sha\":\"a2a9397a2e4eaae9300fc03578d80dfc4527b2d5\",\"filename\":\"docs/code/OOP_REFRESHER.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":322,\"changes\":322,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FOOP_REFRESHER.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FOOP_REFRESHER.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2FOOP_REFRESHER.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,322 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!--
        refresher on Object Oriented Programing -->\\n-\\n-# Object Oriented Programing
        (*noun.*)\\n-\\n-It's a set of principles to handle complexity invented at
        Xerox Parc alongside the GUI.\\n-Theses principles are more important the
        bigger the codebase.\\n-\\n-We don't go into icky terminology here, just a
        couple of analogies.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Index\\n-\\n-1. [Abstraction](#Abstraction)\\n-2. [Encapsulation](#Encapsulation)\\n-3.
        [Polymorphism](#Polymorphism)\\n-4. [Inheritance](#Inheritance)\\n-5. [A Gist](#Gist)
        (for lazy guys & gals)\\n-\\n-______________________________________________________________________\\n-\\n-#
        The principles\\n-\\n-## Abstraction\\n-\\n-Abstraction is basically simplification
        - a car is not 100 screws of x size, 10032 screws\\n-of y size, 15 metal panels
        of this shape, 30 plastic panels of that shape, a steering\\n-wheel with a
        drive rod, wiring and a horn and a few thousand other parts working in unison\\n-perfectly
        resulting in 4 tires moving so that the whole vehicle moves forwards. A car
        is\\n-a chassis, an engine, a steering system, seats and safety features working
        to move a\\n-vehicle.\\n-\\n-The second, systems based explanation is easier
        to comprehend and manage. In other terms,\\n-abstraction is the ***breaking
        down of a big complex system\\n-into smaller, self-contained and single-purpose
        sub-systems*** and if necessary, even\\n-sub-sub-sub-systems. The key requirements
        here would be 'small', 'single-purpose' and\\n-'self-contained' subsystems.\\n-\\n-```python\\n-#
        An example of bad Abstraction.\\n-\\n-# a class named masterClass should ring
        alarm bells\\n-billingCounter = masterClass()\\n-\\n-# products still in the
        store and how many units are left\\n-inventory = billingCounter.getInventory()\\n-print(inventory)
        \       # {'akja fruit': 15,\\n-                        # 'sambesa': 93,\\n-
        \                       # ...,\\n-                        # 'zabberwokey fry':
        19\\n-                        # }\\n-\\n-# 198 customers had their products
        billed at this counter\\n-totalSales = billingCounter.getNumberOfSales()\\n-print(totalSales)
        \      # 198\\n-\\n-# 19,763u worth profits were made (u --> units, star wars
        currency)\\n-totalProfits = getProfit('today', billingCounter)\\n-print(totalProfits)
        \    # 19,763\\n-```\\n-\\n-Why is the above a bad example of Abstraction?
        It's not single purpose or self-contained.\\n-It's not single purpose because
        inventory has absolutely no relation with number of sales.\\n-It is not self
        contained because lets assume that `masterClass` majorly deals with\\n-finances
        - number of sales, profits, etc... having a function `getProfit` outside or
        the\\n-class breaks its 'self-contained-ness'. Some might argue otherwise
        but then, OOP is a set\\n-of principles, they are still a tiny bit subjective
        in nature.\\n-\\n-```python\\n-# This is a properly abstracted version of
        the previous 'bad' example. I do\\n-# realize that this is an absurd example
        but it serves its purpose so...\\n-#\\n-# The outputs are the same as before\\n-\\n-#
        inventory handling\\n-inventory = inventoryClass()\\n-\\n-currentInventory
        = inventory.getInventory()\\n-print(currentInventory)\\n-\\n-# finance handling\\n-finances
        = financeClass()\\n-\\n-totalSales = finances.getNumberOfSales()\\n-print(totalSales)\\n-\\n-totalProfits
        = finances.getProfits('today')\\n-print(totalProfits)\\n-```\\n-\\n-Yep, this
        is a bit longer, there is an additional class and the class names are absurd,\\n-but
        the above version of the 'bad' example is more descriptive through the code
        itself and\\n-also no one is scratching their heads as to what else the `billingCounter`
        object can dish\\n-out beyond inventory and finances. The perks of proper
        abstraction might not be visible\\n-in this rather silly example, but be rest
        assured, the bigger your codebase gets the more\\n-dangerous lack of abstraction
        becomes.\\n-\\n-______________________________________________________________________\\n-\\n-##
        Encapsulation\\n-\\n-While abstraction is all about simplification, encapsulation
        is about consistent\\n-abstraction. In essence, encapsulation says that if
        'chassis' is a referred to as a\\n-sub-component of a car, you can't go down
        to the details and start talking about some nut\\n-and bolt fitted on the
        door hinge. Encapsulation is about\\n-***ensuring a constant level of abstraction***.
        Not so clear huh? Nothing like a straight\\n-forward coded example.\\n-\\n-```python\\n-#
        An example of bad encapsulation\\n-\\n-# lets say that the inventory class
        provides access to the inventories of all\\n-# star wars superMarkets across
        the galaxy.\\n-inventory = inventoryClass()\\n-\\n-# d4a7 is the code of a
        superMarket on Tatooine, a star wars desert planet\\n-productCategory = inventory.getInventory('d4a7')['akja
        fruit'].details.category\\n-print('category of akja fruit is ' + productCategory)\\n-
        \                                           # category of akja fruit is 'fruit'\\n-```\\n-\\n-Why
        is this bad encapsulation? Because it breaks from a consistent level of abstraction.\\n-The
        `inventoryClass` is meant to simplify complexity, it deals at the level of\\n-inventories/products.
        to pull something like\\n-`getInventory('d4a7')['akja fruit'].details.category`
        means talking about details from a\\n-lower level of abstraction. The problem
        arises when someone tries to read your code, that\\n-person now has to know
        the inner workings of how products are stored in the\\n-`inventoryClass` to
        understand the above code which make to whole point of abstraction\\n-wasteful.\\n-\\n-```python\\n-#
        A better version of the 'bad' example.\\n-#\\n-# Outputs are same as before\\n-\\n-inventory
        = inventoryClass()\\n-\\n-tatooineInventory = inventory.getInventory('d4a7')\\n-productCategory
        = tatooineInventory.getCategory('akja fruit')\\n-print('category of akja fruit
        is ' + productCategory)\\n-```\\n-\\n-There is a lot of freedom to be gained
        by directly referencing details from lower levels\\n-of abstraction but for
        any project over 500 lines, the freedom is not worth the confusion\\n-and
        chaos it will eventually cause. The same extent of functionality can be produced
        with\\n-encapsulation like the example utilized a `getCategory` function,
        but adding function upon\\n-function to provide the same freedom/flexibility
        while ensuring encapsulation goes\\n-against the basic purpose of managing
        complexity (who can keep track of 20 functions\\n-provided by a single class?).
        Eventually you have to tradeoff 'managing of complexity'\\n-against 'freedom/flexibility'.
        In 99% or cases with codebases above 500 lines, it'd be\\n-better to manage
        complexity first and bother about flexibility/freedom later.\\n-\\n-Some coders
        enforce consistent abstraction via 'data hiding'. This author personally\\n-encourages
        such practices.\\n-\\n-______________________________________________________________________\\n-\\n-##
        Polymorphism\\n-\\n-Polymorphism comes from the greek words meaning 'different
        shapes', Polymorphism is a\\n-'generalization' relation - the ability to handle
        different classes/objects the same way\\n-(OR) the capability to use an instance
        without regard for its type. One of the most common\\n-ways of implementing
        polymorphism is via interfaces.\\n-\\n-```python\\n-# A bad example of polymorphism\\n-#\\n-#
        Print the areas of different shapes\\n-\\n-circle = shapeCircle(radius = 7)\\n-area
        = circle.area()\\n-print(area)\\n-\\n-squire = shapeSquire(side = 5)\\n-area
        = squire.sideSquire()\\n-print(area)\\n-\\n-rhombus = shapeRhombus(diagonals
        = (1, 5))\\n-area = rhombus.calculateArea()\\n-print(area)\\n-\\n-triangle
        = shapeTriangle(a = 15, b = 10, c = 13)\\n-area = triangle.halfBaseTimesHeight()\\n-print(area)\\n-\\n-#
        Remake of the 'bad' example using polymorphism\\n-\\n-circle = shapeCircle(radius
        = 7)\\n-squire = shapeSquire(side = 5)\\n-rhombus = shapeRhombus(diagonals
        = (1,5))\\n-triangle = shapeTriangle(a = 15, b = 10, c = 13)\\n-\\n-shapes
        = [circle, squire, rhombus, triangle]\\n-\\n-for shape in shapes:\\n-    area
        = shape.getArea()\\n-    print(area)\\n-```\\n-\\n-What's the difference?
        In the polymorphism based remake, the method to get area is\\n-standardized,
        this means that different shape classes that require deferent calculation
        to\\n-obtain the area can now be treated the exact same way.\\n-\\n-______________________________________________________________________\\n-\\n-##
        Inheritance\\n-\\n-Inheritance works alongside polymorphism just as abstraction
        works with encapsulation.\\n-while polymorphism is a 'generalization' relation.
        Inheritance is a 'specialization'\\n-relation. Don't build everything from
        scratch - leave the common features be, it reduces\\n-the details you have
        to keep in mind while coding.\\n-\\n-```python\\n-# An example without inheritance\\n-\\n-class
        car(object):\\n-    # code goes here\\n-\\n-    def getNumberPlate(self):\\n-
        \       return self.registrationNumber\\n-    \\n-    def getVehicleName(self):\\n-
        \       return self.model\\n-    \\n-    # more code\\n-\\n-class bike(object):\\n-
        \   # code goes here\\n-\\n-    def getNumberPlate(self):\\n-        return
        self.numberPlate\\n-    \\n-    def getVehicleName(self):\\n-        return
        self.bikeName\\n-    \\n-    # more code\\n-\\n-class tractor(object):\\n-
        \   # code goes here\\n-\\n-    def getNumberPlate(self):\\n-        return
        self.companyProvidedNumber\\n-    \\n-    def getVehicleName(self):\\n-        return
        self.modelName\\n-    \\n-    # more code\\n-```\\n-\\n-The polymorphism followed
        here make these objects fairly manageable but for someone\\n-reading all of
        this code, he/she/them will have to read through the same set of code\\n-multiple
        times. This usually causes two problems - ballooning of code and confusion
        that\\n-arises from reading the same set of code again and again in the context
        of different\\n-variables - *was it `self.modelName`\\n-or `self.bikeName`
        or `self.model`? I'm confused...*\\n-\\n-```python\\n-# An inheritance based
        example\\n-\\n-class vehicle(object):\\n-    # code goes here\\n-\\n-    def
        getNumberPlate(self):\\n-        return self.numberPlate\\n-    \\n-    def
        getVehicleName(self):\\n-        return self.name\\n-    \\n-    # more code\\n-\\n-class
        car(vehicle):\\n-    # car specific functions\\n-\\n-class bike(vehicle):\\n-
        \   # bike specific functions\\n-\\n-class tractor(vehicle):\\n-    # tractor
        specific functions\\n-\\n-```\\n-\\n-This example treat's `car`, `bike`, and
        `tractor` as special instances of `vehicle`,\\n-removing a lot of the confusion
        that accompanies the earlier example. Know what a\\n-particular function does
        in a parent class to a large extent allows you to know what a\\n-'child class'
        does. Only one note of warning here, use shallow inheritance, deep\\n-inheritance
        trees will have you searching for which parent/super-parent defines a\\n-particular
        variable/function and which parent/super-parent modifies those same\\n-variables/functions
        leading to a confusing mess.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Gist\\n-\\n-1. Abstraction\\n-\\n-   - breaking down of a big complex system
        into smaller, self-contained and single-purpose\\n-     sub-systems\\n-   -
        emphasis on ***small, self-contained*** and ***single-purpose***\\n-   - extra
        emphasis on ***self-contained*** and ***single-purpose***\\n-   - extra extra
        extra emphasis on ***single-purpose***\\n-   - Now read that ***x3 times***
        over\\n-\\n-2. Encapsulation\\n-\\n-   - consistent level of abstraction (emphasis
        on ***consistent***)\\n-   - A.K.A, no public referencing of internal-attributes,
        ***especially*** if the attributes\\n-     are ***complex objects***\\n-   -
        `knifeCompany = house.kitchen.knife.company.name`, ***DON'T DO THIS!***\\n-
        \  - ***hide as much as possible*** - enforce encapsulation\\n-\\n-3. Polymorphism\\n-\\n-
        \  - generalization relation - the capability to use an instance without regard
        for its type\\n-   - use ***standard interfaces*** for members of a logical
        class (triangles and circles belong\\n-     to the same logical class - 'shapes')
        as far as possible\\n-\\n-4. Inheritance\\n-\\n-   - specialization relation
        - don't build everything from scratch\\n-   - ***beware of deep inheritance***
        - i.e. more than 5 levels of inheritance\"},{\"sha\":\"8db983c58e8fe4001c1c5f095e925c789baeff9e\",\"filename\":\"docs/code/download/downloader.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fdownloader.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fdownloader.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fdownload%2Fdownloader.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of download\\\\downloader -->\"},{\"sha\":\"c1f72ae526a722b9daa44580726c66c9c08b782c\",\"filename\":\"docs/code/download/ffmpeg.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fffmpeg.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fffmpeg.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fdownload%2Fffmpeg.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of download\\\\ffmpeg -->\"},{\"sha\":\"5db7e570a11bf88cfda6777ffa36249d3e20d12c\",\"filename\":\"docs/code/download/progressHandlers.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2FprogressHandlers.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2FprogressHandlers.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fdownload%2FprogressHandlers.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of download\\\\progressHandlers -->\"},{\"sha\":\"8b73ed1e977e2a6bd06f6a7922c11b873b9c3c5b\",\"filename\":\"docs/code/search/provider.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Fprovider.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Fprovider.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2Fprovider.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\provider -->\"},{\"sha\":\"0e09653a33333b30ed2568614eb0d55e081be165\",\"filename\":\"docs/code/search/songObj.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FsongObj.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FsongObj.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2FsongObj.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\songObj -->\"},{\"sha\":\"ee30c13c74f3b1b035afcebd85802e2206612553\",\"filename\":\"docs/code/search/spotifyClient.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FspotifyClient.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FspotifyClient.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2FspotifyClient.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\spotifyClient -->\"},{\"sha\":\"e496812cb6978f0b2077e1e1f61b1b8d4b5d4706\",\"filename\":\"docs/code/search/utils.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Futils.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Futils.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2Futils.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\utils -->\"},{\"sha\":\"2be29b0be52bcdd6c42b7b6a201dd89f0e8e4a70\",\"filename\":\"docs/design/INTERFACES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FINTERFACES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FINTERFACES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fdesign%2FINTERFACES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of major spotDL interfaces -->\"},{\"sha\":\"ec8f059df1f5b402be374a382a2fc71b7a40b1b3\",\"filename\":\"docs/design/PURPOSES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":144,\"changes\":144,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FPURPOSES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FPURPOSES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fdesign%2FPURPOSES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,144 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# PURPOSES\\n-\\n-##
        What is this document?\\n-\\n-v3.0.0 of spotDL was found to be lacking in
        many ways. While it fixed many of the issues\\n-its predecessor had, it brought
        with it, many issues of its own. Primarily, poor\\n-access-control and unnecessary
        functionality.\\n-\\n-To address the issues of mucked-up class's, functions,
        modules and unnecessary\\n-functionality this project here on works on zero-base-accounting
        - if you can't justify\\n-it's need, you don't build it. The purpose of various
        functions, modules and classes will\\n-be listed here and adhered to strictly.
        This document then, represents the primary source\\n-of truth as to the requirement
        and responsibility of each unit of code.\\n-\\n-## Structure\\n-\\n-- module
        name\\n-  - class or function name\\n-    - **PURPOSE** and **REASON**\\n-\\n-Purpose
        and Reason are fairly similar words. By purpose we mean just what that class
        or\\n-function is meant to do, it's functionality. By Reason we mean justification
        as to why\\n-that class/function should exist\\n-\\n-______________________________________________________________________\\n-\\n-##
        songObj\\n-\\n-### songObj class\\n-\\n-**PURPOSE** songObj is meant to serve
        dual purposes - to act as an ***exchange currency***\\n-through out spotDL
        and as a central repository of all known details of a given song.\\n-\\n-**REASON**
        A lot of what spotDL does requires passing around of various details about\\n-songs.
        The songObj serves as a ***single-point-of-access*** to all the various details
        we\\n-might seek. The eliminates the need to query the same info multiple
        times from a server\\n-while eliminating any ambiguity as to code unit return
        types. It also allows a consistent\\n-interface to song details thereby adding
        to simplicity.\\n-\\n-______________________________________________________________________\\n-\\n-##
        spotifyClient\\n-\\n-### get_spotify_client function\\n-\\n-**PURPOSE** ensure
        that only a single instance of spotifyClient exists throughout the\\n-codebase.\\n-\\n-**REASON**
        Having different parts of code having to initialize spotifyClients when\\n-required,
        would make for a lot of duplicate code. Serves as a ***single-point-of-access***\\n-to
        a ***singleton spotifyClient***.\\n-\\n-**SEE ALSO** [initialize](#initialize-function)\\n-\\n-###
        initialize function\\n-\\n-**PURPOSE** To create a cache a SpotifyClient\\n-\\n-**REASON**
        Clubbing of client creation/caching with singleton-access requires passing
        of a\\n-client_id & client_secret the first time but not for subsequent calls.
        This ambiguity as\\n-to passing args is avoided.\\n-\\n-______________________________________________________________________\\n-\\n-##
        provider\\n-\\n-### \\\\_\\\\_query_and_simplify function\\n-\\n-**PURPOSE**
        To query YouTube Music and extract details from their hopelessly nested\\n-responses\\n-\\n-**REASON**
        Compartmentalize YouTube link matching. The whole search providing interface\\n-can
        be jointed into one massive function but then, making changes would be unduly\\n-difficult.\\n-\\n-###
        search_and_order function\\n-\\n-**PURPOSE** To filter, and measure the likelihood
        of available YouTube Music results being\\n-the songs the user is after\\n-\\n-**REASON**
        Although YouTube Music's results are far better than YouTube's, it still relies\\n-on
        an extent upon the user to select the best match according to what ever he/she/them
        is\\n-searching for. A program can not identify the best match like a human
        being who would\\n-identify the song by video thumbnail or album art. So we
        attempt to measure the extent to\\n-which it is the same song as the one provided
        by spotify.\\n-\\n-### search_and_get_best_match function\\n-\\n-**PURPOSE**
        To return the best possible match for a given song from spotify\\n-\\n-**REASON**
        To cater to the most common use case where you only need the best possible\\n-YouTube
        Music match link\\n-\\n-______________________________________________________________________\\n-\\n-##
        utils\\n-\\n-### search_for_song function\\n-\\n-**PURPOSE** Get song details
        from a search query instead of from a URL\\n-\\n-**REASON** The end-user might
        not always attempt to download songs from their URL's. To\\n-always use URL's
        would be a cumbersome process. This bypasses that effort by fetching the\\n-URL
        from a given query.\\n-\\n-### get_album_tracks\\n-\\n-**PURPOSE** Get details
        of all tracks in an album\\n-\\n-**REASON** Having to individually list out
        each track in an album is a pain\\n-\\n-### get_playlist_tracks\\n-\\n-**PURPOSE**
        Get details of all tracks in a playlist\\n-\\n-**REASON** Having to individually
        list out each track in a playlist is a greater pain than\\n-listing out each
        track in an album.\\n-\\n-## downloads\\n-\\n-### downloadManager class\\n-\\n-**PURPOSE**
        To download given songs, singly or in parallel, convert them to MP3 and embed\\n-required
        metadata\\n-\\n-**REASON** Come on, the whole point of spotDL is to download
        stuff\\n-\\n-### downloadTracker class\\n-\\n-**PURPOSE** to track the progress
        of downloads and enable download resuming\\n-\\n-**REASON** considering that
        downloading takes place in parallel, it is much easier to have\\n-tracking
        of downloads progressing live-time in parallel to downloading in a separate\\n-process
        instead of having it tracked in the main python process (its much simpler
        too)\\n-\\n-### displayManager class\\n-\\n-**PURPOSE** To ensure a clean
        UI for users even when downloading stuff in parallel\\n-\\n-**REASON** Using
        print methods in parallel with carriage returns (\\\\\\\\r) for clean updates\\n-will
        print in new lines as the print call is from different processes. THis creates
        a need\\n-for a common point of output. The easiest hi-lv way to do that is
        an autoproxy.\"},{\"sha\":\"cb931a28945c8e237e5a609ae3cc9910c52fa900\",\"filename\":\"docs/images/ADD_TO_PATH.png\",\"status\":\"renamed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fimages%2FADD_TO_PATH.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fimages%2FADD_TO_PATH.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fimages%2FADD_TO_PATH.png?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"previous_filename\":\"docs/static/ADD_TO_PATH.png\"},{\"sha\":\"2811367b09cf3705972e56cf550cd843f409038c\",\"filename\":\"docs/images/POWERSHELL.png\",\"status\":\"renamed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fimages%2FPOWERSHELL.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fimages%2FPOWERSHELL.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fimages%2FPOWERSHELL.png?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"previous_filename\":\"docs/static/POWERSHELL.png\"},{\"sha\":\"6d441ca322a5e30fac555be3434b35456b2a5395\",\"filename\":\"docs/images/WEB_UI.png\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fimages%2FWEB_UI.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fimages%2FWEB_UI.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fimages%2FWEB_UI.png?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"30bb6eaeacc86fdfb0ae424a4dd29170c9a9b4b8\",\"filename\":\"docs/index.md\",\"status\":\"added\",\"additions\":159,\"deletions\":0,\"changes\":159,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Findex.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Findex.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Findex.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,159 @@\\n+\\n+<!--- mdformat-toc start --slug=github --->\\n+\\n+<!---\\n+!!!
        IF EDITING THE README, ENSURE TO COPY THE WHOLE FILE TO index.md in `/docs/`
        AND REMOVE THE REFERENCES TO ReadTheDocs THERE.\\n+--->\\n+\\n+\\n+# spotDL
        v4\\n+\\n+**spotDL** finds songs from Spotify playlists on YouTube and downloads
        them - along with album art, lyrics and metadata.\\n+\\n+\\n+[![MIT License](https://img.shields.io/github/license/spotdl/spotify-downloader?color=44CC11&style=flat-square)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)\\n+[![PyPI
        version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+[![PyPi
        downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+![Contributors](https://img.shields.io/github/contributors/spotDL/spotify-downloader?style=flat-square)\\n+[![Discord](https://img.shields.io/discord/771628785447337985?label=discord&logo=discord&style=flat-square)](https://discord.gg/xCa23pwJWY)\\n+\\n+>
        spotDL: The fastest, easiest and most accurate command-line music downloader.\\n+\\n+______________________________________________________________________\\n+**[Read
        the documentation on ReadTheDocs!](https://spotdl.readthedocs.io)**\\n+______________________________________________________________________\\n+\\n+\\n+##
        Installation\\n+\\n+Refer to our [Installation Guide](https://spotdl.rtfd.io/en/latest/installation/)
        for more details.\\n+\\n+### Python (Recommended Method)\\n+  - _spotDL_ can
        be installed by running `pip install spotdl`.\\n+  - To update spotDL run
        `pip install --upgrade spotdl`\\n+  > On some systems you might have to change
        `pip` to `pip3`.\\n+\\n+\\n+### Other options\\n+\\n+- Prebuilt executable\\n+
        \ - You can download the latest version from the\\n+    [Releases Tab](https://github.com/spotDL/spotify-downloader/releases)\\n+-
        On Termux\\n+  - `curl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/scripts/termux.sh
        | sh`\\n+- Arch\\n+  - There is an [Arch User Repository (AUR) package](https://aur.archlinux.org/packages/python-spotdl/)
        for\\n+    spotDL.\\n+- Docker\\n+  - Build image:\\n+\\n+    ```bash\\n+
        \   docker build -t spotdl .\\n+    ```\\n+\\n+  - Launch container with spotDL
        parameters (see section below). You need to create mapped\\n+    volume to
        access song files\\n+\\n+    ```bash\\n+    docker run --rm -v $(pwd):/music
        spotdl download [trackUrl]\\n+    ```\\n+\\n+ - Build from source\\n+\\t```bash\\n+\\tgit
        clone https://github.com/spotDL/spotify-downloader && cd spotify-downloader\\n+\\tpip
        install poetry\\n+\\tpoetry install\\n+\\tpython3 scripts/build.py\\n+\\t```\\n+\\tAn
        executable is created in `spotify-downloader/dist/`.\\n+\\n+\\n+### Installing
        FFmpeg\\n+\\n+FFmpeg is required for spotDL. If using FFmpeg only for spotDL,
        you can simply install FFmpeg to your spotDL installation directory:\\n+`spotdl
        --download-ffmpeg`\\n+\\n+We recommend the above option, but if you want to
        install FFmpeg system-wide,\\n+follow these instructions\\n+\\n+- [Windows
        Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n+- OSX - `brew
        install ffmpeg`\\n+- Linux - `sudo apt install ffmpeg` or use your distro's
        package manager\\n+\\n+## Usage\\n+\\n+Using SpotDL without options::\\n+```sh\\n+spotdl
        [urls]\\n+```\\n+You can run _spotDL_ as a package if running it as a script
        doesn't work:\\n+```sh\\n+python -m spotdl [urls]\\n+```\\n+\\n+General usage:\\n+```sh\\n+spotdl
        [operation] [options] QUERY\\n+```\\n+When downloading songs, the song's Spotify
        Popularity variable [(described here)](https://developer.spotify.com/documentation/web-api/reference/get-track)
        is stored in metadata as a comment, so you can sort your downloaded songs
        by popularity.\\n+\\n+There are different **operations** spotDL can perform.
        The *default* is `download`, which simply downloads the songs from YouTube
        and embeds metadata.\\n+\\n+The **query** for spotDL is usually a list of
        Spotify URLs, but for some operations like **sync**, only a single link or
        file is required.\\n+For a list of all **options** use ```spotdl -h```\\n+\\n+####
        Supported operations\\n+\\n+- `save`: Saves only the metadata from Spotify
        without downloading anything.\\n+    - Usage:\\n+        `spotdl save [query]
        --save-file {filename}.spotdl`\\n+\\n+- `web`: Starts a web interface instead
        of using the command line. However, it has limited features and only supports
        downloading single songs.\\n+    - Usage:\\n+        `spotdl web`\\n+\\n+-
        `url`: Get direct download link for each song from the query.\\n+    - Usage:\\n+
        \       `spotdl url [query]`\\n+\\n+- `sync`: Updates directories. Compares
        the directory with the current state of the playlist. Newly added songs will
        be downloaded and removed songs will be deleted. No other songs will be downloaded
        and no other files will be deleted.\\n+\\n+    - Usage:\\n+        `spotdl
        sync [query] --save-file {filename}.spotdl`\\n+\\n+        This create a new
        **sync** file, to update the directory in the future, use:\\n+\\n+        `spotdl
        sync {filename}.spotdl`\\n+\\n+- `meta`: Updates metadata for the provided
        song files.\\n+</details>\\n+\\n+## Music Sourcing and Audio Quality\\n+\\n+spotDL
        uses YouTube as a source for music downloads. This method is used to avoid
        any issues related to downloading music from Spotify.\\n+\\n+> **Note**\\n+>
        Users are responsible for their actions and potential legal consequences.
        We do not support unauthorized downloading of copyrighted material and take
        no responsibility for user actions.\\n+\\n+### Audio Quality\\n+\\n+spotDL
        downloads music from YouTube and is designed to always download the highest
        possible bitrate; which is 128 kbps for regular users and 256 kbps for YouTube
        Music premium users.\\n+\\n+Check the [Audio Formats](usage#audio-formats-and-quality)
        page for more info.\\n+\\n+## Contributing\\n+\\n+Interested in contributing?
        Check out our [CONTRIBUTING.md](CONTRIBUTING) to find\\n+resources around
        contributing along with a guide on how to set up a development environment.\\n+\\n+##
        Donate\\n+\\n+help support the development and maintenance of the software
        \u2764\uFE0F\\n+\\n+[![paypal](https://img.shields.io/badge/paypal-%2300457C.svg?&style=for-the-badge&logo=paypal&logoColor=white)](https://paypal.me/kko7)\\n+[![kofi](https://img.shields.io/badge/kofi-%23F16061.svg?&style=for-the-badge&logo=ko-fi&logoColor=white)](https://ko-fi.com/xnetcat)\\n+\\n+##
        License\\n+\\n+This project is Licensed under the [MIT](/LICENSE) License.\\n+\"},{\"sha\":\"bbac5026aeef644bfec4c0f5f81d369d6d3bf12e\",\"filename\":\"docs/installation.md\",\"status\":\"added\",\"additions\":142,\"deletions\":0,\"changes\":142,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Finstallation.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Finstallation.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Finstallation.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,142 @@\\n+# spotDL Installation Guide\\n+\\n+spotDL is a free and
        open source tool that downloads your Spotify playlists & music\\n+\\n+> **The
        fastest, easiest, and most accurate command-line music downloader**\\n+\\n+##
        Install via Python\\n+\\n+> This is our recommended installation method.\\n+\\n+If
        you are on Windows, Install Visual C++ Redistributable (link below) and then
        proceed to\\n+install Python & FFmpeg\\n+\\n+### Prerequisites to spotDL\\n+\\n+-
        [Visual C++ 2019 redistributable](https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022)\\n+
        \ (on Windows)\\n+- Python 3.7 or above (added to PATH)\\n+- FFmpeg 4.2 or
        above (added to PATH)\\n+\\n+### Install Python to PATH\\n+\\n+> We recommend
        installing the latest version of Python\\n+\\n+When installing [Python](https://python.org/),
        ensure to select \\\"**Add to PATH**\\\".\\n+\\n+![Add to PATH Image](images/ADD_TO_PATH.png)\\n+\\n+###
        Installing spotDL\\n+\\n+> If you are not on Windows (e.g. OSX/UNIX), replace
        `pip` with `pip3` and `python` with\\n+> `python3` in all commands.\\n+\\n+Firstly,
        open a terminal. On Windows: Command Prompt, OSX: \\\"Terminal\\\", \\\\*UNIX:
        Bash or Zsh.\\n+\\n+Verify you have installed Python correctly via `python
        -V`. Ensure you have v3.7 or greater.\\n+\\n+Next, install spotDL by typing
        the following\\n+\\n+```shell\\n+pip install spotdl\\n+```\\n+\\n+### Installing
        FFmpeg\\n+\\n+If using FFmpeg only for spotDL, you can install FFmpeg to your
        local directory.\\n+`spotdl --download-ffmpeg` will download FFmpeg to your
        spotDL installation directory.\\n+\\n+We recommend the above option, but if
        you want to install FFmpeg system-wide,\\n+\\n+- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n+-
        OSX - `brew install ffmpeg`\\n+- Linux - `sudo apt install ffmpeg` or use
        your distro's package manager\\n+\\n+If you require further help, ask in our
        [Discord Server](https://discord.gg/xCa23pwJWY)\\n+\\n+[![Discord Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n+\\n+##
        Using Prebuilt Executable\\n+\\n+### Download the executable\\n+\\n+You can
        download the latest version from the\\n+[Releases Tab](https://github.com/spotDL/spotify-downloader/releases)\\n+\\n+###
        Running Web UI\\n+\\n+Web UI will start by default if no arguments are passed
        to the command line (after\\n+double-clicking for example)\\n+\\n+![Web UI](images/WEB_UI.png)\\n+\\n+###
        Running the CLI\\n+\\n+To use the command line interface just open your terminal
        and run\\n+`./spotdl-vX.X.X operation [urls]`\\n+\\n+## Docker Setup\\n+\\n+spotDL
        provides a Docker image.\\n+\\n+Install Docker: <https://docs.docker.com/engine/installation/>\\n+\\n+Install
        Docker Compose: <https://docs.docker.com/compose/install/>\\n+\\n+Docker documentation:
        <https://docs.docker.com/>\\n+\\n+### Built-in Docker Image\\n+\\n+- Build
        docker image `docker build -t spotdl .`\\n+- List spotdl options: `docker
        run --rm spotdl --help`\\n+- Download a song:\\n+  `docker run --rm -v $(pwd):/music
        spotdl download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b`\\n+\\n+###
        Docker Hub Image\\n+\\n+- Pull docker image from Docker hub: `docker pull
        spotdl/spotify-downloader`\\n+\\n+- Download a song using Docker image:\\n+
        \ `docker run --rm -v $(pwd):/music spotdl/spotify-downloader download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b`\\n+\\n+-
        Create a Docker container\\n+\\n+```\\n+docker create \\\\\\n+  --name=spotdl
        \\\\\\n+  -v <path to data>:/music \\\\\\n+  spotdl/spotify-downloader\\n+```\\n+\\n+###
        Docker Compose\\n+\\n+- Create a container using Docker Compose: `docker-compose
        up --no-start`\\n+- Download a song using Docker compose:\\n+  `docker-compose
        run --rm spotdl download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b`\\n+\\n+##
        Other Installation Methods\\n+\\n+### Termux\\n+\\n+We have a dedicated Termux
        installation script\\n+`curl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/scripts/termux.sh
        | sh`\\n+\\n+### Arch User Repository (AUR) package\\n+\\n+[You can find the
        AUR Package here](https://aur.archlinux.org/packages/python-spotdl)\\n+\\n+##
        Where does spotDL download songs?\\n+\\n+spotDL downloads files to the folder
        where you ran spotDL from.\\n+\\n+Open pwsh/powershell/cmd/terminal/similar
        in the folder you want files to download to, or cd to\\n+desired folder.\\n+\\n+**Windows
        Shortcut:** Navigate to the folder you want the files to download to.\\n+`SHIFT
        + RIGHT CLICK`, then select \\\"Open PowerShell window here\\\"\\n+\\n+![Windows
        PWSH](images/POWERSHELL.png)\\n+\\n+## We have a public Discord server at
        **[discord.gg/xCa23pwJWY](https://discord.gg/xCa23pwJWY)!**\\n+\\n+[![Discord
        Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\"},{\"sha\":\"fb98c194b347b0afb97ab0a1faa16f84e6b48286\",\"filename\":\"docs/static/logo-transparent.png\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo-transparent.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo-transparent.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fstatic%2Flogo-transparent.png?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"608b23b2c061f15b96d6cc334901edb79bab56ee\",\"filename\":\"docs/static/logo.png\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fstatic%2Flogo.png?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"56d2a1f6d220f5620412ca103845a2c250906668\",\"filename\":\"docs/troubleshooting.md\",\"status\":\"added\",\"additions\":132,\"deletions\":0,\"changes\":132,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Ftroubleshooting.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Ftroubleshooting.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Ftroubleshooting.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,132 @@\\n+# Troubleshooting / FAQ Guide\\n+\\n+As common issues or
        questions are encountered solutions will be added to this guide.\\n+\\n+???
        \\\"'spotdl' is not recognized\\\"\\n+\\n+    Python/(site packages) is not
        added to PATH correctly. You need to install Python from\\n+    <https://www.python.org/downloads/>\\n+\\n+
        \   Or you are using python from microsoft store. If so uninstall it and restart
        cmd. If this\\n+    doesn't work reinstall python.\\n+\\n+    ### Error message\\n+\\n+
        \   ```\\n+    'spotdl' is not recognized as an internal or external command,\\n+
        \   operable program or batch file.\\n+    ```\\n+\\n+    ### Solution\\n+\\n+
        \   Ensure to add to PATH when installing: ![python install](https://i.imgur.com/jWq5EnV.png)\\n+\\n+???
        \\\"spotdl: command not found\\\"\\n+\\n+    If you see this error after installing
        spotdl, that means that the bin (Binaries) folder is not\\n+    on `$PATH`\\n+\\n+
        \   ### Solution\\n+\\n+    #### `.bashrc`\\n+\\n+    Add `export PATH=~/.local/bin:$PATH`
        at the bottom of `~/.bashrc`\\n+\\n+    Then run `source ~/.bashrc`\\n+\\n+
        \   #### `.zshrc`\\n+\\n+    Add `export PATH=~/.local/bin:$PATH` at the bottom
        of `~/.zshrc` Then run `source ~/.zshrc`\\n+\\n+??? \\\"pkg_resources.DistributionNotFound\\\"\\n+\\n+
        \   Sometimes not all packages are installed but are required by yt-dlp for
        example: `brotli` or\\n+    `websockets`\\n+\\n+    ### Error Message\\n+\\n+
        \   `pkg_resources.DistributionNotFound: The 'websockets' distribution was
        not found and is required by yt-dlp`\\n+\\n+    ### Solution\\n+\\n+    `pip
        install brotli websockets yt-dlp -U`\\n+\\n+??? \\\"HTTP Error 404\\\"\\n+\\n+
        \   <https://github.com/plamere/spotipy/issues/795#issuecomment-1100321148>\\n+\\n+
        \   ### Error Message\\n+\\n+    `HTTP Error for GET to URL with Params: {}
        returned 404 due to None`\\n+\\n+    ### Solution\\n+\\n+    Update spotdl
        to the latest version which contains workaround.\\n+\\n+    `pip install -U
        spotdl`\\n+\\n+??? \\\"ssl.SSLError: \\\\[SSL: CERTIFICATE_VERIFY_FAILED\\\\]\\\"\\n+\\n+
        \   <https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error>\\n+\\n+
        \   ### Error Message\\n+\\n+    `urllib.error.URLError: <urlopen error [SSL:
        CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:847)>`\\n+\\n+
        \   ### Solution\\n+\\n+    <https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error>\\n+\\n+???
        \\\"RecursionError\\\"\\n+\\n+    <https://github.com/spotDL/spotify-downloader/issues/1493>\\n+\\n+
        \   ### Error Message\\n+\\n+    `RecursionError: maximum recursion depth
        exceeded`\\n+\\n+    ### Solution\\n+\\n+    Update spotdl\\n+\\n+    `pip
        install spotdl -U`\\n+\\n+??? \\\"RuntimeWarning\\\"\\n+\\n+    This happens
        when running spotdl using `python -m`.\\n+\\n+    ### Error Message\\n+\\n+
        \   ```\\n+    RuntimeWarning: 'spotdl.__main__' found in sys.modules after
        import of package 'spotdl',\\n+    but prior to execution of 'spotdl.__main__';
        this may result in unpredictable behaviour\\n+    warn(RuntimeWarning(msg))\\n+
        \   ```\\n+\\n+    ### Solution\\n+\\n+    You can ignore this error or just
        run spotdl directly\\n+\\n+??? \\\"Not found '\\\\_raw_ecb.so'\\\"\\n+\\n+
        \   This error is specific for M1 Macs only.\\n+\\n+    https://discord.com/channels/771628785447337985/871006150357823498\\n+
        \   https://discord.com/channels/771628785447337985/939475659238043738\\n+\\n+
        \   ### Error Message\\n+\\n+    ```\\n+    aise OSError(\\\"Cannot load native
        module '%s': %s\\\" % (name, \\\", \\\".join(attempts)))\\n+    OSError: Cannot
        load native module 'Cryptodome.Cipher._raw_ecb': Not found '_raw_ecb.cpython-39-darwin.so',\\n+
        \   Cannot load '_raw_ecb.abi3.so': dlopen(/opt/homebrew/lib/python3.9/site-packages/Cryptodome/Util/../Cipher/_raw_ecb.abi3.so,
        6): no suitable image found.  Did find:\\n+    /opt/homebrew/lib/python3.9/site-packages/Cryptodome/Util/../Cipher/_raw_ecb.abi3.so:
        mach-o, but wrong architecture\\n+    /opt/homebrew/lib/python3.9/site-packages/Cryptodome/Cipher/_raw_ecb.abi3.so:
        mach-o, but wrong architecture, Not found '_raw_ecb.so'\\n+    ```\\n+\\n+
        \   ### Solution\\n+\\n+    Possible solutions:\\n+\\n+    <https://discord.com/channels/771628785447337985/871006150357823498>\\n+
        \   <https://discord.com/channels/771628785447337985/939475659238043738>\"},{\"sha\":\"15043087380ab5d7d4bb9d5b200e106637fb5386\",\"filename\":\"docs/usage.md\",\"status\":\"added\",\"additions\":484,\"deletions\":0,\"changes\":484,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fusage.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/docs%2Fusage.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fusage.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,484 @@\\n+# spotDL usage examples\\n+\\n+## Downloading\\n+\\n+???
        Song info\\n+    To download a song, run\\n+\\n+    ```bash\\n+    spotdl
        download [trackUrl]\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+
        \   spotdl download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b\\n+
        \   ```\\n+\\n+??? Album info\\n+    To download an album, run\\n+\\n+    ```bash\\n+
        \   spotdl download [albumUrl]\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+
        \   spotdl download https://open.spotify.com/album/4yP0hdKOZPNshxUOjY0cZj\\n+
        \   ```\\n+\\n+??? Playlist info\\n+    To download a playlist, run\\n+\\n+
        \   ```bash\\n+    spotdl download [playlistUrl]\\n+    ```\\n+\\n+    example:\\n+\\n+
        \   ```bash\\n+    spotdl download https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID\\n+
        \   ```\\n+\\n+??? Artist info\\n+    To download all songs from an artist
        run\\n+\\n+    ```bash\\n+    spotdl download [artistUrl]\\n+    ```\\n+\\n+
        \   example:\\n+\\n+    ```bash\\n+    spotdl download https://open.spotify.com/artist/1Xyo4u8uXC1ZmMpatF05PJ\\n+
        \   ```\\n+\\n+??? Search info\\n+    To search for and download a song, run,
        with quotation marks\\n+\\n+    ```bash\\n+    spotdl download '[songQuery]'\\n+
        \   ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+    spotdl download 'The
        Weeknd - Blinding Lights'\\n+    ```\\n+\\n+??? info \\\"YouTube link with
        Spotify metadata\\\"\\n+    To download YouTube video with metadata from Spotify,
        run\\n+    > Noting the quote `\\\"` are required\\n+\\n+    ```bash\\n+    spotdl
        download \\\"YouTubeURL|SpotifyURL\\\"\\n+    ```\\n+\\n+    example:\\n+\\n+
        \   ```bash\\n+    spotdl download \\\"https://www.youtube.com/watch?v=XXYlFuWEuKI|https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b?si=b5c0790edc8f4904\\\"\\n+
        \   ```\\n+\\n+??? info \\\"Liked songs\\\"\\n+    To download liked Spotify
        songs run\\n+    > `--user-auth` is required\\n+\\n+    ```bash\\n+    spotdl
        download saved --user-auth\\n+    ```\\n+\\n+??? info \\\"All user playlists\\\"\\n+
        \   To download all user playlists run\\n+    > `--user-auth` is required\\n+\\n+
        \   ```bash\\n+    spotdl download all-user-playlists --user-auth\\n+    ```\\n+\\n+???
        info \\\"All user saved albums\\\"\\n+    To download all user saved albums
        run\\n+    > `--user-auth` is required\\n+\\n+    ```bash\\n+    spotdl download
        all-user-saved-albums --user-auth\\n+    ```\\n+\\n+You can queue up multiple
        download tasks by separating the arguments with spaces\\n+\\n+```bash\\n+spotdl
        download [songQuery1] [albumUrl] [songQuery2] ... (order does not matter)\\n+```\\n+\\n+example:\\n+\\n+```bash\\n+spotdl
        download 'The Weeknd - Blinding Lights' https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID
        ...\\n+```\\n+\\n+## Audio Formats and Quality\\n+\\n+Files are downloaded
        in MP3 format for the best compatibility across different platforms/players,
        but spotDL also supports other output formats like M4A and OPUS.\\n+\\n+>
        Note: spotDL never downloads songs in a bitrate higher than 128kbps, except
        for those with YTMusic Premium, where 256 kbps is available for M4A format.\\n+\\n+Note
        that using the `--bitrate` flag will convert the file to the specified bitrate,
        so it may result in larger file sizes with no significant change in quality.
        If you prefer smaller file sizes, consider using the default bitrate or a
        lower value.\\n+\\n+Converting files might not be ideal for some users who
        prefer the files in their original quality.\\n+\\n+Alternatively, you can
        use the `--bitrate disable` option to skip the conversion step for certain
        file formats such as **M4A**/**OPUS**.\\n+\\n+### YouTube Music Premium\\n+\\n+YouTube
        Music Premium users can use their account to download songs with a higher
        bitrate (256kbps).\\n+\\n+To download music in higher quality follow the steps
        below:\\n+\\n+1. Change quality in YouTube Music settings to highest possible.\\n+\\n+2.
        Get cookies.txt for https://music.youtube.com.\\n+> You can use [Get cookies.txt
        extension](https://chrome.google.com/webstore/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc)
        or [cookies.txt](https://addons.mozilla.org/en-US/firefox/addon/cookies-txt/)
        for this. More info [here](https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp)\\n+\\n+3.
        Add `--cookie-file cookies.txt` option to your spotDL command line options\\n+>
        Replace cookies.txt with the actual name of your cookies file\\n+\\n+4. Change
        the audio format to either **M4A** or **OPUS** to get the raw HQ file\\n+\\n+>
        **Note**\\n+> To get the best audio possible you should use **M4A**/**OPUS**
        audio format\\n+> with `--bitrate disable`\\n+\\n+\\n+\\n+\\n+## Syncing\\n+\\n+Sync
        function for the console. Keep local files up to date with playlists/albums/etc.\\n+This
        will download new songs and remove the ones that are no longer present in
        the playlists/albums/etc\\n+\\n+??? info \\\"Initialize Synchronization\\\"\\n+
        \   To create the sync file run\\n+\\n+    ```bash\\n+    spotdl sync [query]
        --save-file [fileName]\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+
        \   spotdl sync https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID --save-file
        \\\"the-weeknd.sync.spotdl\\\"\\n+    ```\\n+\\n+    > Note: The sync file
        has to end with .spotdl\\n+\\n+??? info \\\"Syncing\\\"\\n+    To sync the
        songs run\\n+\\n+    ```bash\\n+    spotdl sync [fileName]\\n+    ```\\n+\\n+
        \   example:\\n+\\n+    ```bash\\n+    spotdl sync \\\"the-weeknd.sync.spotdl\\\"\\n+
        \   ```\\n+\\n+## Saving\\n+\\n+Saves the songs metadata to a file for further
        use.\\n+\\n+```bash\\n+spotdl save [query] --save-file [fileName]\\n+```\\n+\\n+example:\\n+\\n+```bash\\n+spotdl
        save 'The Weeknd - Blinding Lights' --save-file 'the-weeknd.spotdl'\\n+```\\n+\\n+???
        info \\\"Preloading\\\"\\n+    Preload the download url to speed up the download
        process.\\n+\\n+    ```bash\\n+    spotdl save [query] --save-file [fileName]
        --preload\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+    spotdl
        save 'The Weeknd - Blinding Lights' --save-file 'the-weeknd.spotdl' --preload\\n+
        \   ```\\n+\\n+## Web UI (User Interface)\\n+\\n+To start the web UI, run\\n+\\n+```bash\\n+spotdl
        web\\n+```\\n+\\n+### Download Location\\n+\\n+By default, the web UI downloads
        files to a special directory, to overwrite this behavior\\n+add option `--web-use-output-dir`,
        which will make output directory follow `--output`\\n+\\n+## Config file\\n+\\n+###
        Config file location\\n+\\n+The config file is located at `C:\\\\Users\\\\user\\\\.spotdl\\\\config.json`\\n+or
        `~/.spotdl/config.json` under linux\\n+\\n+> Note: If you want to use XDG_DATA_HOME
        directory, run `mkdir $XDG_DATA_HOME/spotdl`, next time you run spotdl it
        will be automatically used.\\n+\\n+### Generate a config file\\n+\\n+To generate
        a config file, run\\n+\\n+```bash\\n+spotdl --generate-config\\n+```\\n+\\n+>
        Note: This will overwrite the existing config file.\\n+\\n+### Loading config\\n+\\n+Config
        file gets loaded automatically if it already exists, or if you've passed `--config`
        flag\\n+\\n+If you don't want config to load automatically change `load_config`
        option in config file to false\\n+\\n+```json\\n+{\\n+    \\\"load_config\\\":
        false\\n+}\\n+```\\n+\\n+### Default config\\n+\\n+```json\\n+{\\n+    \\\"client_id\\\":
        \\\"5f573c9620494bae87890c0f08a60293\\\",\\n+    \\\"client_secret\\\": \\\"212476d9b0f3472eaa762d90b19b0ba8\\\",\\n+
        \   \\\"auth_token\\\": null,\\n+    \\\"user_auth\\\": false,\\n+    \\\"headless\\\":
        false,\\n+    \\\"cache_path\\\": \\\"/Users/username/.spotdl/.spotipy\\\",\\n+
        \   \\\"no_cache\\\": false,\\n+    \\\"max_retries\\\": 3,\\n+    \\\"audio_providers\\\":
        [\\n+        \\\"youtube-music\\\"\\n+    ],\\n+    \\\"lyrics_providers\\\":
        [\\n+        \\\"genius\\\",\\n+        \\\"azlyrics\\\",\\n+        \\\"musixmatch\\\"\\n+
        \   ],\\n+    \\\"playlist_numbering\\\": false,\\n+    \\\"scan_for_songs\\\":
        false,\\n+    \\\"m3u\\\": null,\\n+    \\\"output\\\": \\\"{artists} - {title}.{output-ext}\\\",\\n+
        \   \\\"overwrite\\\": \\\"skip\\\",\\n+    \\\"search_query\\\": null,\\n+
        \   \\\"ffmpeg\\\": \\\"ffmpeg\\\",\\n+    \\\"bitrate\\\": null,\\n+    \\\"ffmpeg_args\\\":
        null,\\n+    \\\"format\\\": \\\"mp3\\\",\\n+    \\\"save_file\\\": null,\\n+
        \   \\\"filter_results\\\": true,\\n+    \\\"threads\\\": 4,\\n+    \\\"cookie_file\\\":
        null,\\n+    \\\"restrict\\\": null,\\n+    \\\"print_errors\\\": false,\\n+
        \   \\\"sponsor_block\\\": false,\\n+    \\\"preload\\\": false,\\n+    \\\"archive\\\":
        null,\\n+    \\\"load_config\\\": true,\\n+    \\\"log_level\\\": \\\"INFO\\\",\\n+
        \   \\\"simple_tui\\\": false,\\n+    \\\"fetch_albums\\\": false,\\n+    \\\"id3_separator\\\":
        \\\"/\\\",\\n+    \\\"ytm_data\\\": false,\\n+    \\\"add_unavailable\\\":
        false,\\n+    \\\"generate_lrc\\\": false,\\n+    \\\"force_update_metadata\\\":
        false,\\n+    \\\"web_use_output_dir\\\": false,\\n+    \\\"port\\\": 8800,\\n+
        \   \\\"host\\\": \\\"localhost\\\",\\n+    \\\"keep_alive\\\": false,\\n+
        \   \\\"allowed_origins\\\": null,\\n+    \\\"keep_sessions\\\": false,\\n+
        \   \\\"only_verified_results\\\": false\\n+}\\n+```\\n+\\n+#### `output`
        variables\\n+\\n+The `output` key supports several variables:\\n+\\n+| Variable
        | Explanation | Example |\\n+|----------|-------------|---------|\\n+| `{title}`
        | Song title | Dark Horse |\\n+| `{artists}` | Song artists | Katy Perry,
        Juicy J |\\n+| `{artist}` | Primary artist | Katy Perry |\\n+| `{album}` |
        Album name | PRISM |\\n+| `{album-artist}` | Primary artist of the album |
        Katy Perry |\\n+| `{genre}` | Genre | dance pop |\\n+| `{disc-number}` | Useful
        for multi-disc releases | 1 |\\n+| `{disc-count}` | Total number of discs
        in the album | 1 |\\n+| `{duration}` | Duration of the song in seconds | 215.672
        |\\n+| `{year}` | Year of release | 2013 |\\n+| `{original-date}` | Date of
        original release | 2013-01-01 |\\n+| `{track-number}` | Track number in the
        album | 06 |\\n+| `{tracks-count}` | Total number of tracks in the album |
        13 |\\n+| `{isrc} `| International Standard Recording Code | USUM71311296
        |\\n+| `{track-id}` | Spotify song ID | 4jbmgIyjGoXjY01XxatOx6 |\\n+| `{publisher}
        `| Record label | Capitol Records (CAP) |\\n+| `{list-length}` | Number of
        items in a playlist | 10 |\\n+| `{list-position}` | Position of the song in
        a playlist | 1 |\\n+| `{list-name}` | Name of the playlist | Saved |\\n+|
        `{output-ext}` | File extension | mp3 |\\n+\\n+## CLI (Command Line Interface)\\n+\\n+###
        Command line options\\n+\\n+```\\n+options:\\n+  -h, --help            show
        this help message and exit\\n+\\n+Main options:\\n+  {download,save,web,sync,meta,url}\\n+
        \                       The operation to perform.\\n+                        download:
        Download the songs to the disk and embed metadata.\\n+                        save:
        Saves the songs metadata to a file for further use.\\n+                        web:
        Starts a web interface to simplify the download process.\\n+                        sync:
        Removes songs that are no longer present, downloads new ones\\n+                        meta:
        Update your audio files with metadata\\n+                        url: Get
        the download URL for songs\\n+\\n+  query                 Spotify/YouTube
        URL for a song/playlist/album/artist/etc. to download.\\n+\\n+                        For
        album/playlist/artist searching, include 'album:', 'playlist:', 'artist:'\\n+
        \                       (ie. 'album:the album name' you can mix these options
        to get more accurate results).\\n+\\n+                        To download
        liked songs use 'saved' as the query, to download all user playlists\\n+                        use
        'all-user-playlists, to download all songs from all followed artists use 'all-user-followed-artists',
        to download all user saved albums use 'all-user-saved-albums'\\n+\\n+                        For
        manual audio matching, you can use the format 'YouTubeURL|SpotifyURL'\\n+
        \                       You can only use album/playlist/tracks urls when downloading/matching
        youtube urls.\\n+                        When using youtube url without spotify
        url, you won't be able to use `--fetch-albums` option.\\n+\\n+  --audio [{youtube,youtube-music,slider-kz,soundcloud,bandcamp,piped}
        ...]\\n+                        The audio provider to use. You can provide
        more than one for fallback.\\n+  --lyrics [{genius,musixmatch,azlyrics,synced}
        ...]\\n+                        The lyrics provider to use. You can provide
        more than one for fallback. Synced lyrics might not work correctly with some
        music players. For such cases it's better to use `--generate-lrc`\\n+                        option.\\n+
        \ --config              Use the config file to download songs. It's located
        under C:\\\\Users\\\\user\\\\.spotdl\\\\config.json or ~/.spotdl/config.json
        under linux\\n+  --search-query SEARCH_QUERY\\n+                        The
        search query to use, available variables: {title}, {artists}, {artist}, {album},
        {album-artist}, {genre}, {disc-number}, {disc-count}, {duration}, {year},
        {original-date}, {track-number},\\n+                        {tracks-count},
        {isrc}, {track-id}, {publisher}, {list-length}, {list-position}, {list-name},
        {output-ext}\\n+  --dont-filter-results\\n+                        Disable
        filtering results.\\n+  --only-verified-results\\n+                        Use
        only verified results. (Not all providers support this)\\n+\\n+Spotify options:\\n+
        \ --user-auth           Login to Spotify using OAuth.\\n+  --client-id CLIENT_ID\\n+
        \                       The client id to use when logging in to Spotify.\\n+
        \ --client-secret CLIENT_SECRET\\n+                        The client secret
        to use when logging in to Spotify.\\n+  --auth-token AUTH_TOKEN\\n+                        The
        authorization token to use directly to log in to Spotify.\\n+  --cache-path
        CACHE_PATH\\n+                        The path where spotipy cache file will
        be stored.\\n+  --no-cache            Disable caching (both requests and token).\\n+
        \ --max-retries MAX_RETRIES\\n+                        The maximum number
        of retries to perform when getting metadata.\\n+  --headless            Run
        in headless mode.\\n+  --use-cache-file      Use the cache file to get metadata.
        It's located under C:\\\\Users\\\\user\\\\.spotdl\\\\.spotify_cache or ~/.spotdl/.spotify_cache
        under linux. It only caches tracks and gets updated whenever spotDL gets\\n+
        \                       metadata from Spotify. (It may provide outdated metadata
        use with caution)\\n+\\n+FFmpeg options:\\n+  --ffmpeg FFMPEG       The ffmpeg
        executable to use.\\n+  --threads THREADS     The number of threads to use
        when downloading songs.\\n+  --bitrate {auto,disable,8k,16k,24k,32k,40k,48k,64k,80k,96k,112k,128k,160k,192k,224k,256k,320k,0,1,2,3,4,5,6,7,8,9}\\n+
        \                       The constant/variable bitrate to use for the output
        file. Values from 0 to 9 are variable bitrates. Auto will use the bitrate
        of the original file. Disable will disable the bitrate option. (In\\n+                        case
        of m4a and opus files, auto and disable will skip the conversion)\\n+  --ffmpeg-args
        FFMPEG_ARGS\\n+                        Additional ffmpeg arguments passed
        as a string.\\n+\\n+Output options:\\n+  --format {mp3,flac,ogg,opus,m4a,wav}\\n+
        \                       The format to download the song in.\\n+  --save-file
        SAVE_FILE\\n+                        The file to save/load the songs data
        from/to. It has to end with .spotdl. If combined with the download operation,
        it will save the songs data to the file. Required for save/sync (use - to\\n+
        \                       print to stdout when using save).\\n+  --preload             Preload
        the download url to speed up the download process.\\n+  --output OUTPUT       Specify
        the downloaded file name format, available variables: {title}, {artists},
        {artist}, {album}, {album-artist}, {genre}, {disc-number}, {disc-count}, {duration},
        {year}, {original-date},\\n+                        {track-number}, {tracks-count},
        {isrc}, {track-id}, {publisher}, {list-length}, {list-position}, {list-name},
        {output-ext}\\n+  --m3u [M3U]           Name of the m3u file to save the songs
        to. Defaults to {list[0]}.m3u8 If you want to generate a m3u for each list
        in the query use {list}, If you want to generate a m3u file based on the first\\n+
        \                       list in the query use {list[0]}, (0 is the first list
        in the query, 1 is the second, etc. songs don't count towards the list number)\\n+
        \ --cookie-file COOKIE_FILE\\n+                        Path to cookies file.\\n+
        \ --overwrite {skip,force,metadata}\\n+                        How to handle
        existing/duplicate files. (When combined with --scan-for-songs force will
        remove all duplicates, and metadata will only apply metadata to the latest
        song and will remove the\\n+                        rest. )\\n+  --restrict
        [{ascii,strict,none}]\\n+                        Restrict filenames to a sanitized
        set of characters for better compatibility\\n+  --print-errors        Print
        errors (wrong songs, failed downloads etc) on exit, useful for long playlist\\n+
        \ --save-errors SAVE_ERRORS\\n+                        Save errors (wrong
        songs, failed downloads etc) to a file\\n+  --sponsor-block       Use the
        sponsor block to download songs from yt/ytm.\\n+  --archive ARCHIVE     Specify
        the file name for an archive of already downloaded songs\\n+  --playlist-numbering
        \ Sets each track in a playlist to have the playlist's name as its album,
        and album art as the playlist's icon\\n+  --scan-for-songs      Scan the output
        directory for existing files. This option should be combined with the --overwrite
        option to control how existing files are handled. (Output directory is the
        last directory that\\n+                        is not a template variable
        in the output template)\\n+  --fetch-albums        Fetch all albums from songs
        in query\\n+  --id3-separator ID3_SEPARATOR\\n+                        Change
        the separator used in the id3 tags. Only supported for mp3 files.\\n+  --ytm-data
        \           Use ytm data instead of spotify data when downloading using ytm
        link.\\n+  --add-unavailable     Add unavailable songs to the m3u/archive
        files when downloading\\n+  --generate-lrc        Generate lrc files for downloaded
        songs. Requires `synced` provider to be present in the lyrics providers list.\\n+
        \ --force-update-metadata\\n+                        Force update metadata
        for songs that already have metadata.\\n+  --sync-without-deleting\\n+                        Sync
        without deleting songs that are not in the query.\\n+  --max-filename-length
        MAX_FILENAME_LENGTH\\n+                        Max file name length. (This
        won't override the max file name length enforced by the OS)\\n+  --yt-dlp-args
        YT_DLP_ARGS\\n+                        Arguments to pass to yt-dlp\\n+  --detect-formats
        [{mp3,flac,ogg,opus,m4a,wav} ...]\\n+                        Detect already
        downloaded songs with file format different from the --format option (When
        combined with --m3u option, only first detected format will be added to m3u
        file)\\n+  --redownload          to redownload the local song in diffrent
        format using --format for meta operation\\n+  --ignore-albums [IGNORE_ALBUMS
        ...]\\n+                        ignores the song of the given albums\\n+  --skip-explicit
        \      Skip explicit songs\\n+  --proxy PROXY         Http(s) proxy server
        for download song. Example: http://host:port\\n+\\n+Web options:\\n+  --host
        HOST           The host to use for the web server.\\n+  --port PORT           The
        port to run the web server on.\\n+  --keep-alive          Keep the web server
        alive even when no clients are connected.\\n+  --allowed-origins [ALLOWED_ORIGINS
        ...]\\n+                        The allowed origins for the web server.\\n+
        \ --web-use-output-dir  Use the output directory instead of the session directory
        for downloads. (This might cause issues if you have multiple users using the
        web-ui at the same time)\\n+  --keep-sessions       Keep the session directory
        after the web server is closed.\\n+\\n+Misc options:\\n+  --log-level {CRITICAL,FATAL,ERROR,WARN,WARNING,INFO,MATCH,DEBUG,NOTSET}\\n+
        \                       Select log level.\\n+  --simple-tui          Use a
        simple tui.\\n+  --log-format LOG_FORMAT\\n+                        Custom
        logging format to use. More info: https://docs.python.org/3/library/logging.html#logrecord-attributes\\n+\\n+Other
        options:\\n+  --download-ffmpeg     Download ffmpeg to spotdl directory.\\n+
        \ --generate-config     Generate a config file. This will overwrite current
        config if present.\\n+  --check-for-updates   Check for new version.\\n+  --profile
        \            Run in profile mode. Useful for debugging.\\n+  --version, -v
        \        Show the version number and exit.\\n+```\"},{\"sha\":\"75c098de4a56174a0f63774ff81e75879aaad71e\",\"filename\":\"mkdocs.yml\",\"status\":\"added\",\"additions\":79,\"deletions\":0,\"changes\":79,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/mkdocs.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/mkdocs.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/mkdocs.yml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,79 @@\\n+site_name: spotDL\\n+site_description: Download your Spotify
        playlists and songs along with album art and metadata\\n+site_author: xnetcat\\n+site_url:
        \\\"https://spotdl.github.io/spotify-downloader\\\"\\n+repo_url: \\\"https://github.com/spotDL/spotify-downloader\\\"\\n+repo_name:
        \\\"spotdl/spotify-downloader\\\"\\n+site_dir: \\\"site\\\"\\n+\\n+nav:\\n+-
        Home: index.md\\n+- Installation: installation.md\\n+- Usage:\\n+  - Usage
        examples: usage.md\\n+  - Troubleshooting: troubleshooting.md\\n+- Development:\\n+
        \ - Code Of Conduct: CODE_OF_CONDUCT.md\\n+  - Contributing: CONTRIBUTING.md\\n+-
        Code Reference: reference/\\n+\\n+theme:\\n+  name: material\\n+  features:\\n+
        \   - content.code.annotate\\n+    - navigation.tabs\\n+    - navigation.top\\n+
        \   - toc.integrate\\n+\\n+  palette:\\n+  - media: \\\"(prefers-color-scheme:
        light)\\\"\\n+    scheme: default\\n+    primary: teal\\n+    accent: purple\\n+
        \   toggle:\\n+      icon: material/weather-sunny\\n+      name: Switch to
        dark mode\\n+  - media: \\\"(prefers-color-scheme: dark)\\\"\\n+    scheme:
        slate\\n+    primary: black\\n+    accent: lime\\n+    toggle:\\n+      icon:
        material/weather-night\\n+      name: Switch to light mode\\n+\\n+plugins:\\n+-
        gen-files:\\n+    scripts:\\n+    - scripts/docs/gen_ref_nav.py\\n+- search\\n+-
        literate-nav:\\n+    nav_file: SUMMARY.md\\n+- section-index\\n+- mkdocstrings:\\n+
        \   handlers:\\n+      python:\\n+        options:\\n+          docstring_options:\\n+
        \           ignore_init_summary: yes\\n+          merge_init_into_class: yes\\n+
        \         show_submodules: no\\n+\\n+markdown_extensions:\\n+- admonition\\n+-
        pymdownx.details\\n+- pymdownx.emoji\\n+- pymdownx.magiclink\\n+- pymdownx.tasklist\\n+-
        pymdownx.superfences\\n+- pymdownx.snippets:\\n+    check_paths: true\\n+-
        pymdownx.tabbed:\\n+    alternate_style: true\\n+- pymdownx.highlight:\\n+
        \   use_pygments: true\\n+    pygments_lang_class: true\\n+- toc:\\n+    permalink:
        \\\"\xA4\\\"\\n+\\n+watch:\\n+- spotdl\"},{\"sha\":\"beb4a68e35f8b28bc0d013a18afb72d0ce3ffc21\",\"filename\":\"poetry.lock\",\"status\":\"added\",\"additions\":2911,\"deletions\":0,\"changes\":2911,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/poetry.lock\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/poetry.lock\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/poetry.lock?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"38d0439d832980877540b23461e75a8cfd82a48b\",\"filename\":\"pyproject.toml\",\"status\":\"added\",\"additions\":100,\"deletions\":0,\"changes\":100,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/pyproject.toml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/pyproject.toml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/pyproject.toml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,100 @@\\n+[tool.poetry]\\n+name = \\\"spotdl\\\"\\n+version = \\\"4.2.4\\\"\\n+description
        = \\\"Download your Spotify playlists and songs along with album art and metadata\\\"\\n+license
        = \\\"MIT\\\"\\n+authors = [\\\"spotDL Team <spotdladmins@googlegroups.com>\\\"]\\n+maintainers
        = [\\\"xnetcat <xnetcat.dev@gmail.com>\\\"]\\n+readme = \\\"README.md\\\"\\n+repository
        = \\\"https://github.com/spotDL/spotify-downloader.git\\\"\\n+homepage = \\\"https://github.com/spotDL/spotify-downloader/\\\"\\n+documentation
        = \\\"https://spotdl.rtfd.io/en/latest/\\\"\\n+keywords = [\\\"spotify\\\",
        \\\"downloader\\\", \\\"spotdl\\\", \\\"music\\\"]\\n+classifiers = [\\n+
        \   \\\"Intended Audience :: End Users/Desktop\\\",\\n+    \\\"License ::
        OSI Approved :: MIT License\\\",\\n+    \\\"Programming Language :: Python\\\",\\n+
        \   \\\"Programming Language :: Python :: 3\\\",\\n+    \\\"Programming Language
        :: Python :: 3 :: Only\\\",\\n+    \\\"Programming Language :: Python :: 3.8\\\",\\n+
        \   \\\"Programming Language :: Python :: 3.9\\\",\\n+    \\\"Programming
        Language :: Python :: 3.10\\\",\\n+    \\\"Programming Language :: Python
        :: 3.11\\\",\\n+    \\\"Programming Language :: Python :: 3.12\\\",\\n+    \\\"Topic
        :: Multimedia\\\",\\n+    \\\"Topic :: Multimedia :: Sound/Audio\\\",\\n+
        \   \\\"Topic :: Utilities\\\",\\n+]\\n+\\n+[tool.poetry.dependencies]\\n+python
        = \\\">=3.8,<3.13\\\"\\n+\\n+spotipy = \\\"^2.23.0\\\"\\n+ytmusicapi = \\\"^1.3.2\\\"\\n+pytube
        = \\\"^15.0.0\\\"\\n+yt-dlp = \\\"^2023.11.16\\\"\\n+mutagen = \\\"^1.47.0\\\"\\n+rich
        = \\\"^13.7.0\\\"\\n+beautifulsoup4 = \\\"^4.12.2\\\"\\n+requests = \\\"^2.31.0\\\"\\n+rapidfuzz
        = \\\"^3.5.2\\\"\\n+python-slugify = {extras = [\\\"unidecode\\\"], version
        = \\\"^8.0.1\\\"}\\n+uvicorn = \\\"^0.23.2\\\"\\n+pydantic = \\\"^2.5.2\\\"\\n+fastapi
        = \\\"^0.103.0\\\"\\n+platformdirs = \\\"^3.11.0\\\"\\n+pykakasi = \\\"^2.2.1\\\"\\n+syncedlyrics
        = \\\"^0.7.0\\\"\\n+soundcloud-v2 = \\\"^1.3.1\\\"\\n+setuptools = \\\"^69.0.2\\\"\\n+\\n+[tool.poetry.group.dev.dependencies]\\n+pytest
        = \\\"^7.4.3\\\"\\n+pytest-mock = \\\"^3.12.0\\\"\\n+pytest-vcr = \\\"^1.0.2\\\"\\n+pyfakefs
        = \\\"^5.3.2\\\"\\n+pytest-cov = \\\"^4.1.0\\\"\\n+pytest-subprocess = \\\"^1.5.0\\\"\\n+pytest-asyncio
        = \\\"^0.21.1\\\"\\n+mypy = \\\"^1.7.1\\\"\\n+pylint = \\\"^3.0.2\\\"\\n+black
        = \\\"^23.11.0\\\"\\n+mdformat-gfm = \\\"^0.3.5\\\"\\n+types-orjson = \\\"^3.6.2\\\"\\n+types-python-slugify
        = \\\"^8.0.0.3\\\"\\n+types-requests = \\\"==2.31.0.6\\\"\\n+types-setuptools
        = \\\"^69.0.0.0\\\"\\n+types-toml = \\\"^0.10.8.7\\\"\\n+types-ujson = \\\"^5.8.0.1\\\"\\n+pyinstaller
        = \\\"^6.2.0\\\"\\n+mkdocs = \\\"^1.5.3\\\"\\n+isort = \\\"^5.12.0\\\"\\n+dill
        = \\\"^0.3.7\\\"\\n+mkdocs-material = \\\"^9.4.14\\\"\\n+mkdocstrings = \\\"^0.22.0\\\"\\n+mkdocstrings-python
        = \\\"^1.7.5\\\"\\n+pymdown-extensions = \\\"^10.5\\\"\\n+mkdocs-gen-files
        = \\\"^0.5.0\\\"\\n+mkdocs-literate-nav = \\\"^0.6.0\\\"\\n+mkdocs-section-index
        = \\\"^0.3.5\\\"\\n+vcrpy = \\\"^5.1.0\\\"\\n+\\n+[tool.poetry.scripts]\\n+spotdl
        = \\\"spotdl:console_entry_point\\\"\\n+\\n+[tool.isort]\\n+profile = \\\"black\\\"\\n+\\n+[build-system]\\n+requires
        = [\\\"poetry-core>=1.0.0\\\"]\\n+build-backend = \\\"poetry.core.masonry.api\\\"\\n+\\n+[tool.pylint.format]\\n+limit-inference-results
        = 0\\n+fail-under = 9\\n+\\n+[tool.pytest.ini_options]\\n+asyncio_mode = \\\"auto\\\"\\n+markers
        = [\\n+    \\\"vcr\\\",\\n+]\"},{\"sha\":\"1a4eb51a957c9991f582d8431b30e582586f64da\",\"filename\":\"scripts/build.py\",\"status\":\"added\",\"additions\":29,\"deletions\":0,\"changes\":29,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fbuild.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fbuild.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fbuild.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,29 @@\\n+import os\\n+import sys\\n+from pathlib import Path\\n+\\n+import
        PyInstaller.__main__  # type: ignore\\n+import pykakasi\\n+import yt_dlp\\n+import
        ytmusicapi\\n+\\n+from spotdl._version import __version__\\n+\\n+LOCALES_PATH
        = str((Path(ytmusicapi.__file__).parent / \\\"locales\\\"))\\n+PYKAKASI_PATH
        = str((Path(pykakasi.__file__).parent / \\\"data\\\"))\\n+YTDLP_PATH = str(Path(yt_dlp.__file__).parent
        / \\\"__pyinstaller\\\")\\n+\\n+PyInstaller.__main__.run(\\n+    [\\n+        \\\"spotdl/__main__.py\\\",\\n+
        \       \\\"--onefile\\\",\\n+        \\\"--add-data\\\",\\n+        f\\\"{LOCALES_PATH}{os.pathsep}ytmusicapi/locales\\\",\\n+
        \       \\\"--add-data\\\",\\n+        f\\\"{PYKAKASI_PATH}{os.pathsep}pykakasi/data\\\",\\n+
        \       f\\\"--additional-hooks-dir={YTDLP_PATH}\\\",\\n+        \\\"--name\\\",\\n+
        \       f\\\"spotdl-{__version__}-{sys.platform}\\\",\\n+        \\\"--console\\\",\\n+
        \   ]\\n+)\"},{\"sha\":\"4d08f4ad1b89106a5812bb53ce0cab4f4bb11404\",\"filename\":\"scripts/docs/gen_ref_nav.py\",\"status\":\"added\",\"additions\":46,\"deletions\":0,\"changes\":46,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fdocs%2Fgen_ref_nav.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fdocs%2Fgen_ref_nav.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fdocs%2Fgen_ref_nav.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,46 @@\\n+\\\"\\\"\\\"Generate the code reference pages and navigation.\\\"\\\"\\\"\\n+\\n+from
        pathlib import Path\\n+\\n+import mkdocs_gen_files\\n+\\n+nav = mkdocs_gen_files.Nav()
        \ # type: ignore\\n+\\n+IGNORE = (\\n+    (\\\"_version\\\",),\\n+    # ('__init__',)\\n+)\\n+\\n+for
        path in Path(\\\"spotdl\\\").glob(\\\"**/*.py\\\"):\\n+    module_path = path.relative_to(\\\"spotdl\\\").with_suffix(\\\"\\\")\\n+
        \   doc_path = path.relative_to(\\\"spotdl\\\").with_suffix(\\\".md\\\")\\n+
        \   full_doc_path = Path(\\\"reference\\\", doc_path)\\n+\\n+    if module_path.parts
        in IGNORE:\\n+        continue\\n+\\n+    parts = tuple(module_path.parts)\\n+\\n+
        \   if parts[-1] == \\\"__init__\\\":\\n+        if len(parts) != 1:\\n+            parts
        = parts[:-1]\\n+\\n+        doc_path = doc_path.with_name(\\\"index.md\\\")\\n+
        \       full_doc_path = full_doc_path.with_name(\\\"index.md\\\")\\n+    elif
        parts[-1] == \\\"__main__\\\":\\n+        continue\\n+\\n+    nav[parts] =
        doc_path.as_posix()\\n+\\n+    with mkdocs_gen_files.open(full_doc_path, \\\"w\\\")
        as fd:\\n+        if parts == (\\\"__init__\\\",):\\n+            fd.write(\\\":::
        spotdl\\\")\\n+            continue\\n+\\n+        IDENT = \\\"spotdl.\\\"
        + \\\".\\\".join(parts)\\n+        fd.write(f\\\"::: {IDENT}\\\")\\n+\\n+
        \   mkdocs_gen_files.set_edit_path(full_doc_path, path)\\n+\\n+with mkdocs_gen_files.open(\\\"reference/SUMMARY.md\\\",
        \\\"w\\\") as nav_file:\\n+    nav_file.writelines(nav.build_literate_nav())\"},{\"sha\":\"fb86e49e0ce33b4ece4880f05bfadf624ebf358f\",\"filename\":\"scripts/docs/requirements.txt\",\"status\":\"added\",\"additions\":8,\"deletions\":0,\"changes\":8,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fdocs%2Frequirements.txt\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fdocs%2Frequirements.txt\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fdocs%2Frequirements.txt?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,8 @@\\n+mkdocs\\n+mkdocs-material\\n+mkdocstrings\\n+mkdocstrings-python\\n+mkdocs-gen-files\\n+mkdocs-literate-nav\\n+mkdocs-section-index\\n+pymdown-extensions\"},{\"sha\":\"9e49a0d4f2084e89e1b9154a954227ee9a6ec43f\",\"filename\":\"scripts/make_binzip.sh\",\"status\":\"added\",\"additions\":24,\"deletions\":0,\"changes\":24,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fmake_binzip.sh\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Fmake_binzip.sh\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fmake_binzip.sh?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,24 @@\\n+#!/bin/bash\\n+\\n+CODE_FOLDERS=\\\"spotdl spotdl/console
        spotdl/download spotdl/providers spotdl/providers/audio spotdl/providers/lyrics
        spotdl/types spotdl/utils\\\"\\n+PYTHON=\\\"/usr/bin/env python3\\\"\\n+\\n+mkdir
        -p zip\\n+\\n+for d in $CODE_FOLDERS; do\\n+    mkdir -p \\\"zip/$d\\\"\\n+
        \   cp -pPR \\\"$d\\\"/*.py \\\"zip/$d/\\\"\\n+done\\n+\\n+touch -t 200001010101
        zip/spotdl/*.py zip/spotdl/**/*.py\\n+mv zip/spotdl/__main__.py zip/\\n+cd
        zip\\n+zip -q -r spotdl spotdl/**.py spotdl/**/* spotdl/**/*.py __main__.py\\n+mv
        spotdl.zip ../spotdl.zip\\n+cd ..\\n+rm -rf zip\\n+\\n+echo '#!'\\\"$PYTHON\\\"
        > spotDL\\n+cat spotdl.zip >> spotDL\\n+rm spotdl.zip\\n+chmod a+x spotDL\"},{\"sha\":\"317f40729406ab976c54592671bfb076a00e5847\",\"filename\":\"scripts/termux.sh\",\"status\":\"added\",\"additions\":33,\"deletions\":0,\"changes\":33,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Ftermux.sh\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/scripts%2Ftermux.sh\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Ftermux.sh?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,33 @@\\n+# setup-storage\\n+termux-setup-storage\\n+\\n+# update packages\\n+pkg
        update -y\\n+\\n+# install python and ffmpeg\\n+pkg install -y python ffmpeg\\n+\\n+#
        install spotdl\\n+pip install -U spotdl\\n+\\n+if [ ! -d \\\"$HOME/bin\\\"
        ]; then\\n+    mkdir \\\"$HOME/bin\\\"\\n+fi\\n+\\n+if [ ! -f \\\"$HOME/bin/termux-url-opener\\\"
        ]; then\\n+    touch $HOME/bin/termux-url-opener\\n+fi\\n+\\n+cat > $HOME/bin/termux-url-opener
        <<EOL\\n+#!/data/data/com.termux/files/usr/bin/bash\\n+SONGS=\\\"$HOME/storage/shared/songs\\\"\\n+SPOTDL=\\\"/data/data/com.termux/files/usr/bin/spotdl\\\"\\n+if
        [[ $1 == *\\\"open.spotify.com\\\"* ]]; then\\n+    if [[ ! -d $SONGS ]];
        then\\n+        mkdir $SONGS\\n+    fi\\n+    cd $SONGS\\n+    $SPOTDL \\\"$1\\\"\\n+
        \   read -n 1 -s -p \\\"Press Any Key To Exit.\\\"\\n+fi\\n+EOL\\n\\\\ No
        newline at end of file\"},{\"sha\":\"b719b266c9654488feb9d4ef8c978d1e647986c1\",\"filename\":\"setup.cfg\",\"status\":\"removed\",\"additions\":0,\"deletions\":66,\"changes\":66,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.cfg\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.cfg\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/setup.cfg?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,66 +0,0 @@\\n-[metadata]\\n-version = 3.9.4\\n-\\n-name = spotdl\\n-url
        = https://github.com/spotDL/spotify-downloader\\n-download_url = https://pypi.org/project/spotdl/\\n-author
        = spotDL Team\\n-author_email = spotdladmins@googlegroups.com\\n-license =
        MIT\\n-description = Download your Spotify playlists and songs along with
        album art and metadata\\n-long_description = file:README.md\\n-long_description_content_type
        = text/markdown\\n-keywords = spotify downloader download music youtube mp3
        album metadata\\n-classifiers =\\n-    Intended Audience :: End Users/Desktop\\n-
        \   License :: OSI Approved :: MIT License\\n-    Programming Language ::
        Python\\n-    Programming Language :: Python :: 3\\n-    Programming Language
        :: Python :: 3 :: Only\\n-    Programming Language :: Python :: 3.6\\n-    Programming
        Language :: Python :: 3.7\\n-    Programming Language :: Python :: 3.8\\n-
        \   Programming Language :: Python :: 3.9\\n-    Topic :: Multimedia\\n-    Topic
        :: Multimedia :: Sound/Audio\\n-    Topic :: Utilities\\n-\\n-[options]\\n-include_package_data
        = true\\n-install_requires =\\n-    spotipy >= 2.19.0\\n-    pytube >= 11.0.0\\n-
        \   rich\\n-    rapidfuzz\\n-    mutagen\\n-    ytmusicapi\\n-    yt-dlp\\n-
        \   beautifulsoup4\\n-    requests\\n-    Unidecode\\n-python_requires = >=3.6.1\\n-packages
        = find:\\n-\\n-[options.extras_require]\\n-test =\\n-    pytest >= 6.0\\n-
        \   pytest-mock >= 3.3.1\\n-    pytest-vcr >= 1.0.2\\n-    pyfakefs >= 4.3.0\\n-
        \   pytest-cov >= 2.10.1\\n-    pytest-subprocess\\n-dev =\\n-    tox\\n-
        \   mypy==0.790\\n-    flake8==3.8.4\\n-\\n-[options.entry_points]\\n-console_scripts=\\n-
        \   spotdl = spotdl:console_entry_point\\n-\\n-[mypy]\\n-ignore_missing_imports
        = True\\n-\\n-[flake8]\\n-max-line-length = 100\\n-ignore = E301,W605\"},{\"sha\":\"7f1a1763ca9cebc7bc16576d353d3284ee5d3c7d\",\"filename\":\"setup.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":4,\"changes\":4,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/setup.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,4 +0,0 @@\\n-from setuptools import setup\\n-\\n-if __name__ == \\\"__main__\\\":\\n-
        \   setup()\"},{\"sha\":\"8a34499b4e8aeb3e98b0f9b91840acfcfda3c749\",\"filename\":\"spotdl/__init__.py\",\"status\":\"modified\",\"additions\":164,\"deletions\":1,\"changes\":165,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1 +1,164 @@\\n-from .__main__ import console_entry_point\\n+\\\"\\\"\\\"\\n+Init
        module for spotdl. This module contains the main entry point for spotdl.\\n+And
        Spotdl class\\n+\\\"\\\"\\\"\\n+\\n+import asyncio\\n+import concurrent.futures\\n+import
        logging\\n+from pathlib import Path\\n+from typing import List, Optional,
        Tuple, Union\\n+\\n+from spotdl._version import __version__\\n+from spotdl.console
        import console_entry_point\\n+from spotdl.download.downloader import Downloader\\n+from
        spotdl.types.options import DownloaderOptionalOptions, DownloaderOptions\\n+from
        spotdl.types.song import Song\\n+from spotdl.utils.search import parse_query\\n+from
        spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__ = [\\\"Spotdl\\\",
        \\\"console_entry_point\\\", \\\"__version__\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        Spotdl:\\n+    \\\"\\\"\\\"\\n+    Spotdl class, which simplifies the process
        of downloading songs from Spotify.\\n+\\n+    ```python\\n+    from spotdl
        import Spotdl\\n+\\n+    spotdl = Spotdl(client_id='your-client-id', client_secret='your-client-secret')\\n+\\n+
        \   songs = spotdl.search(['joji - test drive',\\n+        'https://open.spotify.com/track/4cOdK2wGLETKBW3PvgPWqT'])\\n+\\n+
        \   results = spotdl.download_songs(songs)\\n+    song, path = spotdl.download(songs[0])\\n+
        \   ```\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+
        \       client_id: str,\\n+        client_secret: str,\\n+        user_auth:
        bool = False,\\n+        cache_path: Optional[str] = None,\\n+        no_cache:
        bool = False,\\n+        headless: bool = False,\\n+        downloader_settings:
        Optional[\\n+            Union[DownloaderOptionalOptions, DownloaderOptions]\\n+
        \       ] = None,\\n+        loop: Optional[asyncio.AbstractEventLoop] = None,\\n+
        \   ):\\n+        \\\"\\\"\\\"\\n+        Initialize the Spotdl class\\n+\\n+
        \       ### Arguments\\n+        - client_id: Spotify client id\\n+        -
        client_secret: Spotify client secret\\n+        - user_auth: If true, user
        will be prompted to authenticate\\n+        - cache_path: Path to cache directory\\n+
        \       - no_cache: If true, no cache will be used\\n+        - headless:
        If true, no browser will be opened\\n+        - downloader_settings: Settings
        for the downloader\\n+        - loop: Event loop to use\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if downloader_settings is None:\\n+            downloader_settings
        = {}\\n+\\n+        # Initialize spotify client\\n+        SpotifyClient.init(\\n+
        \           client_id=client_id,\\n+            client_secret=client_secret,\\n+
        \           user_auth=user_auth,\\n+            cache_path=cache_path,\\n+
        \           no_cache=no_cache,\\n+            headless=headless,\\n+        )\\n+\\n+
        \       # Initialize downloader\\n+        self.downloader = Downloader(\\n+
        \           settings=downloader_settings,\\n+            loop=loop,\\n+        )\\n+\\n+
        \   def search(self, query: List[str]) -> List[Song]:\\n+        \\\"\\\"\\\"\\n+
        \       Search for songs.\\n+\\n+        ### Arguments\\n+        - query:
        List of search queries\\n+\\n+        ### Returns\\n+        - A list of Song
        objects\\n+\\n+        ### Notes\\n+        - query can be a list of song
        titles, urls, uris\\n+        \\\"\\\"\\\"\\n+\\n+        return parse_query(\\n+
        \           query,\\n+            self.downloader.settings[\\\"threads\\\"],\\n+
        \           self.downloader.settings[\\\"ytm_data\\\"],\\n+            self.downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       )\\n+\\n+    def get_download_urls(self, songs: List[Song]) -> List[Optional[str]]:\\n+
        \       \\\"\\\"\\\"\\n+        Get the download urls for a list of songs.\\n+\\n+
        \       ### Arguments\\n+        - songs: List of Song objects\\n+\\n+        ###
        Returns\\n+        - A list of urls if successful.\\n+\\n+        ### Notes\\n+
        \       - This function is multi-threaded.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       urls: List[Optional[str]] = []\\n+        with concurrent.futures.ThreadPoolExecutor(\\n+
        \           max_workers=self.downloader.settings[\\\"threads\\\"]\\n+        )
        as executor:\\n+            future_to_song = {\\n+                executor.submit(self.downloader.search,
        song): song for song in songs\\n+            }\\n+            for future in
        concurrent.futures.as_completed(future_to_song):\\n+                song =
        future_to_song[future]\\n+                try:\\n+                    data
        = future.result()\\n+                    urls.append(data)\\n+                except
        Exception as exc:\\n+                    logger.error(\\\"%s generated an
        exception: %s\\\", song, exc)\\n+\\n+        return urls\\n+\\n+    def download(self,
        song: Song) -> Tuple[Song, Optional[Path]]:\\n+        \\\"\\\"\\\"\\n+        Download
        and convert song to the output format.\\n+\\n+        ### Arguments\\n+        -
        song: Song object\\n+\\n+        ### Returns\\n+        - A tuple containing
        the song and the path to the downloaded file if successful.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return self.downloader.download_song(song)\\n+\\n+    def download_songs(self,
        songs: List[Song]) -> List[Tuple[Song, Optional[Path]]]:\\n+        \\\"\\\"\\\"\\n+
        \       Download and convert songs to the output format.\\n+\\n+        ###
        Arguments\\n+        - songs: List of Song objects\\n+\\n+        ### Returns\\n+
        \       - A list of tuples containing the song and the path to the downloaded
        file if successful.\\n+        \\\"\\\"\\\"\\n+\\n+        return self.downloader.download_multiple_songs(songs)\"},{\"sha\":\"19805064d34314b68b82dc42ca4e6103e0a538c1\",\"filename\":\"spotdl/__main__.py\",\"status\":\"modified\",\"additions\":5,\"deletions\":0,\"changes\":5,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2F__main__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2F__main__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2F__main__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,3 +1,8 @@\\n+\\\"\\\"\\\"\\n+Main module for spotdl. Exports version and
        main function.\\n+\\\"\\\"\\\"\\n+\\n+from spotdl._version import __version__\\n
        from spotdl.console import console_entry_point\\n \\n if __name__ == \\\"__main__\\\":\"},{\"sha\":\"15fa020e6363b73a602d9ab93f5c6eec22848a4f\",\"filename\":\"spotdl/_version.py\",\"status\":\"added\",\"additions\":5,\"deletions\":0,\"changes\":5,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2F_version.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2F_version.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2F_version.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,5 @@\\n+\\\"\\\"\\\"\\n+Version module for spotdl.\\n+\\\"\\\"\\\"\\n+\\n+__version__
        = \\\"4.2.4\\\"\"},{\"sha\":\"39361721bc8763fbe77d8fab33352ec14fcd9768\",\"filename\":\"spotdl/console/__init__.py\",\"status\":\"modified\",\"additions\":7,\"deletions\":88,\"changes\":95,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,90 +1,9 @@\\n-import os\\n-import sys\\n-from pathlib import Path\\n-import
        signal\\n+\\\"\\\"\\\"\\n+Console module, contains the console entry point
        and different subcommands.\\n+\\\"\\\"\\\"\\n \\n-from spotdl.download import
        ffmpeg, DownloadManager\\n-from spotdl.parsers import parse_arguments, parse_query\\n-from
        spotdl.search import SpotifyClient\\n+from spotdl.console.entry_point import
        console_entry_point\\n \\n-\\n-def console_entry_point():\\n-    \\\"\\\"\\\"\\n-
        \   This is where all the console processing magic happens.\\n-    Its super
        simple, rudimentary even but, it's dead simple & it works.\\n-    \\\"\\\"\\\"\\n-\\n-
        \   # Parse arguments\\n-    arguments = parse_arguments()\\n-\\n-    # Convert
        arguments to dict\\n-    args_dict = vars(arguments)\\n-\\n-    if arguments.ffmpeg:\\n-
        \       args_dict[\\\"ffmpeg\\\"] = str(Path(arguments.ffmpeg).absolute())\\n-
        \   else:\\n-        args_dict[\\\"ffmpeg\\\"] = \\\"ffmpeg\\\"\\n-\\n-    #
        Check if ffmpeg has correct version, if not exit\\n-    if (\\n-        ffmpeg.has_correct_version(arguments.ignore_ffmpeg_version,
        args_dict[\\\"ffmpeg\\\"])\\n-        is False\\n-    ):\\n-        sys.exit(1)\\n-\\n-
        \   if \\\"saved\\\" in arguments.query and not arguments.user_auth:\\n-        arguments.user_auth
        = True\\n-        print(\\n-            \\\"Detected 'saved' in command line,
        but no --user-auth flag. Enabling Anyways.\\\"\\n-        )\\n-        print(\\\"Please
        Log In...\\\")\\n-\\n-    # Initialize spotify client\\n-    SpotifyClient.init(\\n-
        \       client_id=\\\"5f573c9620494bae87890c0f08a60293\\\",\\n-        client_secret=\\\"212476d9b0f3472eaa762d90b19b0ba8\\\",\\n-
        \       user_auth=arguments.user_auth,\\n-    )\\n-\\n-    # Change directory
        if user specified correct output path\\n-    if arguments.output:\\n-        if
        not os.path.isdir(arguments.output):\\n-            sys.exit(\\\"The output
        directory doesn't exist.\\\")\\n-        print(f\\\"Will download to: {os.path.abspath(arguments.output)}\\\")\\n-
        \       os.chdir(arguments.output)\\n-\\n-    # Start download manager\\n-
        \   with DownloadManager(args_dict) as downloader:\\n-        if not arguments.debug_termination:\\n-\\n-
        \           def graceful_exit(signal, frame):\\n-                downloader.display_manager.close()\\n-
        \               sys.exit(0)\\n-\\n-            signal.signal(signal.SIGINT,
        graceful_exit)\\n-            signal.signal(signal.SIGTERM, graceful_exit)\\n-\\n-
        \       # Find tracking files in queries\\n-        tracking_files = [\\n-
        \           query for query in arguments.query if query.endswith(\\\".spotdlTrackingFile\\\")\\n-
        \       ]\\n-\\n-        # Restart downloads\\n-        for tracking_file
        in tracking_files:\\n-            print(\\\"Preparing to resume download...\\\")\\n-
        \           downloader.resume_download_from_tracking_file(tracking_file)\\n-\\n-
        \       # Get songs\\n-        song_list = parse_query(\\n-            arguments.query,\\n-
        \           arguments.output_format,\\n-            arguments.use_youtube,\\n-
        \           arguments.generate_m3u,\\n-            arguments.lyrics_provider,\\n-
        \           arguments.search_threads,\\n-            arguments.path_template,\\n-
        \       )\\n-\\n-        # Start downloading\\n-        if len(song_list)
        > 0:\\n-            downloader.download_multiple_songs(song_list)\\n+__all__
        = [\\n+    \\\"console_entry_point\\\",\\n+]\"},{\"sha\":\"be0858a872853c928d44c42159727f254af49e3f\",\"filename\":\"spotdl/console/download.py\",\"status\":\"added\",\"additions\":33,\"deletions\":0,\"changes\":33,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fdownload.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fdownload.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fdownload.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,33 @@\\n+\\\"\\\"\\\"\\n+Download module for the console.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import List\\n+\\n+from spotdl.download.downloader import Downloader\\n+from
        spotdl.utils.search import get_simple_songs\\n+\\n+__all__ = [\\\"download\\\"]\\n+\\n+\\n+def
        download(\\n+    query: List[str],\\n+    downloader: Downloader,\\n+) ->
        None:\\n+    \\\"\\\"\\\"\\n+    Find songs with the provided audio provider
        and save them to the disk.\\n+\\n+    ### Arguments\\n+    - query: list of
        strings to search for.\\n+    \\\"\\\"\\\"\\n+\\n+    # Parse the query\\n+
        \   songs = get_simple_songs(\\n+        query,\\n+        use_ytm_data=downloader.settings[\\\"ytm_data\\\"],\\n+
        \       playlist_numbering=downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       albums_to_ignore=downloader.settings[\\\"ignore_albums\\\"],\\n+    )\\n+\\n+
        \   # Download the songs\\n+    downloader.download_multiple_songs(songs)\"},{\"sha\":\"9b8e9e4d34b905aee4f599af3aa101c3c2ed47a3\",\"filename\":\"spotdl/console/entry_point.py\",\"status\":\"added\",\"additions\":158,\"deletions\":0,\"changes\":158,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fentry_point.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fentry_point.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fentry_point.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,158 @@\\n+\\\"\\\"\\\"\\n+Module that holds the entry point for the
        console.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+import signal\\n+import
        sys\\n+import time\\n+\\n+from spotdl.console.download import download\\n+from
        spotdl.console.meta import meta\\n+from spotdl.console.save import save\\n+from
        spotdl.console.sync import sync\\n+from spotdl.console.url import url\\n+from
        spotdl.console.web import web\\n+from spotdl.download.downloader import Downloader,
        DownloaderError\\n+from spotdl.utils.arguments import parse_arguments\\n+from
        spotdl.utils.config import create_settings\\n+from spotdl.utils.console import
        ACTIONS, generate_initial_config, is_executable\\n+from spotdl.utils.downloader
        import check_ytmusic_connection\\n+from spotdl.utils.ffmpeg import FFmpegError,
        download_ffmpeg, is_ffmpeg_installed\\n+from spotdl.utils.logging import init_logging\\n+from
        spotdl.utils.spotify import SpotifyClient, SpotifyError, save_spotify_cache\\n+\\n+__all__
        = [\\\"console_entry_point\\\", \\\"OPERATIONS\\\"]\\n+\\n+OPERATIONS = {\\n+
        \   \\\"download\\\": download,\\n+    \\\"sync\\\": sync,\\n+    \\\"save\\\":
        save,\\n+    \\\"meta\\\": meta,\\n+    \\\"url\\\": url,\\n+}\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def console_entry_point():\\n+    \\\"\\\"\\\"\\n+
        \   Console entry point for spotdl. This is where the magic happens.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Create config file if it doesn't exist\\n+    generate_initial_config()\\n+\\n+
        \   # Check if sys.argv contains an action\\n+    # If it does, we run the
        action and exit\\n+    try:\\n+        action_to_run = next(\\n+            action
        for action_name, action in ACTIONS.items() if action_name in sys.argv\\n+
        \       )\\n+    except StopIteration:\\n+        action_to_run = None\\n+\\n+
        \   if action_to_run:\\n+        action_to_run()\\n+        return None\\n+\\n+
        \   # Parse the arguments\\n+    arguments = parse_arguments()\\n+\\n+    #
        Create settings dicts\\n+    spotify_settings, downloader_settings, web_settings
        = create_settings(arguments)\\n+\\n+    init_logging(downloader_settings[\\\"log_level\\\"],
        downloader_settings[\\\"log_format\\\"])\\n+\\n+    # If the application is
        frozen, we check for ffmpeg\\n+    # if it's not present download it create
        config file\\n+    if is_executable():\\n+        if is_ffmpeg_installed()
        is False:\\n+            download_ffmpeg()\\n+\\n+    # Check if ffmpeg is
        installed\\n+    if is_ffmpeg_installed(downloader_settings[\\\"ffmpeg\\\"])
        is False:\\n+        raise FFmpegError(\\n+            \\\"FFmpeg is not installed.
        Please run `spotdl --download-ffmpeg` to install it, \\\"\\n+            \\\"or
        `spotdl --ffmpeg /path/to/ffmpeg` to specify the path to ffmpeg.\\\"\\n+        )\\n+\\n+
        \   # Check if we are not blocked by ytm\\n+    if \\\"youtube-music\\\" in
        downloader_settings[\\\"audio_providers\\\"]:\\n+        if not check_ytmusic_connection():\\n+
        \           raise DownloaderError(\\n+                \\\"You are blocked
        by YouTube Music. \\\"\\n+                \\\"Please use a VPN, change youtube-music
        to piped, or use other audio providers\\\"\\n+            )\\n+\\n+    # Initialize
        spotify client\\n+    SpotifyClient.init(**spotify_settings)\\n+    spotify_client
        = SpotifyClient()\\n+\\n+    # If the application is frozen start web ui\\n+
        \   # or if the operation is `web`\\n+    if is_executable() or arguments.operation
        == \\\"web\\\":\\n+        # Start web ui\\n+        web(web_settings, downloader_settings)\\n+\\n+
        \       return None\\n+\\n+    # Check if save file is present and if it's
        valid\\n+    if isinstance(downloader_settings[\\\"save_file\\\"], str) and
        (\\n+        not downloader_settings[\\\"save_file\\\"].endswith(\\\".spotdl\\\")\\n+
        \       and not downloader_settings[\\\"save_file\\\"] == \\\"-\\\"\\n+    ):\\n+
        \       raise DownloaderError(\\\"Save file has to end with .spotdl\\\")\\n+\\n+
        \   # Check if the user is logged in\\n+    if (\\n+        arguments.query\\n+
        \       and \\\"saved\\\" in arguments.query\\n+        and not spotify_settings[\\\"user_auth\\\"]\\n+
        \   ):\\n+        raise SpotifyError(\\n+            \\\"You must be logged
        in to use the saved query. \\\"\\n+            \\\"Log in by adding the --user-auth
        flag\\\"\\n+        )\\n+\\n+    # Initialize the downloader\\n+    # for
        download, load and preload operations\\n+    downloader = Downloader(downloader_settings)\\n+\\n+
        \   def graceful_exit(_signal, _frame):\\n+        if spotify_settings[\\\"use_cache_file\\\"]:\\n+
        \           save_spotify_cache(spotify_client.cache)\\n+\\n+        downloader.progress_handler.close()\\n+
        \       sys.exit(0)\\n+\\n+    signal.signal(signal.SIGINT, graceful_exit)\\n+
        \   signal.signal(signal.SIGTERM, graceful_exit)\\n+\\n+    start_time = time.perf_counter()\\n+\\n+
        \   try:\\n+        # Pick the operation to perform\\n+        # based on
        the name and run it!\\n+        OPERATIONS[arguments.operation](\\n+            query=arguments.query,\\n+
        \           downloader=downloader,\\n+        )\\n+    except Exception:\\n+
        \       end_time = time.perf_counter()\\n+        logger.debug(\\\"Took %d
        seconds\\\", end_time - start_time)\\n+\\n+        downloader.progress_handler.close()\\n+
        \       logger.exception(\\\"An error occurred\\\")\\n+\\n+        sys.exit(1)\\n+\\n+
        \   end_time = time.perf_counter()\\n+    logger.debug(\\\"Took %d seconds\\\",
        end_time - start_time)\\n+\\n+    if spotify_settings[\\\"use_cache_file\\\"]:\\n+
        \       save_spotify_cache(spotify_client.cache)\\n+\\n+    downloader.progress_handler.close()\\n+\\n+
        \   return None\"},{\"sha\":\"35d2557d3eed78a496057ee978f650abd60d4a86\",\"filename\":\"spotdl/console/meta.py\",\"status\":\"added\",\"additions\":180,\"deletions\":0,\"changes\":180,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fmeta.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fmeta.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fmeta.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,180 @@\\n+\\\"\\\"\\\"\\n+Sync Lyrics module for the console\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import logging\\n+from pathlib import Path\\n+from typing import
        List\\n+\\n+from spotdl.download.downloader import Downloader\\n+from spotdl.types.song
        import Song\\n+from spotdl.utils.ffmpeg import FFMPEG_FORMATS\\n+from spotdl.utils.lrc
        import generate_lrc\\n+from spotdl.utils.metadata import embed_metadata, get_file_metadata\\n+from
        spotdl.utils.search import QueryError, get_search_results, parse_query, reinit_song\\n+\\n+__all__
        = [\\\"meta\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+def
        meta(query: List[str], downloader: Downloader) -> None:\\n+    \\\"\\\"\\\"\\n+
        \   This function applies metadata to the selected songs\\n+    based on the
        file name.\\n+    If song already has metadata, missing metadata is added\\n+\\n+
        \   ### Arguments\\n+    - query: list of strings to search for.\\n+    -
        downloader: Already initialized downloader instance.\\n+\\n+    ### Notes\\n+
        \   - This function is multi-threaded.\\n+    \\\"\\\"\\\"\\n+\\n+    # Create
        a list of all songs from all paths in query\\n+    paths: List[Path] = []\\n+
        \   for path in query:\\n+        test_path = Path(path)\\n+        if not
        test_path.exists():\\n+            logger.error(\\\"Path does not exist: %s\\\",
        path)\\n+            continue\\n+\\n+        if test_path.is_dir():\\n+            for
        out_format in FFMPEG_FORMATS:\\n+                paths.extend(test_path.glob(f\\\"*.{out_format}\\\"))\\n+
        \       elif test_path.is_file():\\n+            if test_path.suffix.split(\\\".\\\")[-1]
        not in FFMPEG_FORMATS:\\n+                logger.error(\\\"File is not a supported
        audio format: %s\\\", path)\\n+                continue\\n+\\n+            paths.append(test_path)\\n+\\n+
        \   def process_file(file: Path):\\n+        # metadata of the file, url is
        present in the file.\\n+        song_meta = get_file_metadata(file, downloader.settings[\\\"id3_separator\\\"])\\n+\\n+
        \       # Check if song has metadata\\n+        # and if it has all the required
        fields\\n+        # if it has all of these fields, we can assume that the
        metadata is correct\\n+        if song_meta and not downloader.settings[\\\"force_update_metadata\\\"]:\\n+
        \           if (\\n+                song_meta.get(\\\"artist\\\")\\n+                and
        song_meta.get(\\\"artists\\\")\\n+                and song_meta.get(\\\"name\\\")\\n+
        \               and song_meta.get(\\\"lyrics\\\")\\n+                and song_meta.get(\\\"album_art\\\")\\n+
        \           ):\\n+                logger.info(\\\"Song already has metadata:
        %s\\\", file.name)\\n+                if downloader.settings[\\\"generate_lrc\\\"]:\\n+
        \                   lrc_file = file.with_suffix(\\\".lrc\\\")\\n+                    if
        lrc_file.exists():\\n+                        logger.info(\\\"Lrc file already
        exists for %s\\\", file.name)\\n+                        return None\\n+\\n+
        \                   song = Song.from_missing_data(\\n+                        name=song_meta[\\\"name\\\"],\\n+
        \                       artists=song_meta[\\\"artists\\\"],\\n+                        artist=song_meta[\\\"artist\\\"],\\n+
        \                   )\\n+\\n+                    generate_lrc(song, file)\\n+
        \                   if lrc_file.exists():\\n+                        logger.info(\\\"Saved
        lrc file for %s\\\", song.display_name)\\n+                    else:\\n+                        logger.info(\\\"Could
        not find lrc file for %s\\\", song.display_name)\\n+\\n+                return
        None\\n+\\n+        # Same as above\\n+        if (\\n+            not song_meta\\n+
        \           or None\\n+            in [\\n+                song_meta.get(\\\"name\\\"),\\n+
        \               song_meta.get(\\\"album_art\\\"),\\n+                song_meta.get(\\\"artist\\\"),\\n+
        \               song_meta.get(\\\"artists\\\"),\\n+                song_meta.get(\\\"track_number\\\"),\\n+
        \           ]\\n+            or downloader.settings[\\\"force_update_metadata\\\"]\\n+
        \       ):\\n+            # Song does not have metadata, or it is missing
        some fields\\n+            # or we are forcing update of metadata\\n+            #
        so we search for it\\n+            logger.debug(\\\"Searching metadata for
        %s\\\", file.name)\\n+            search_results = get_search_results(file.stem)\\n+
        \           if not search_results:\\n+                logger.error(\\\"Could
        not find metadata for %s\\\", file.name)\\n+                return None\\n+\\n+
        \           song = search_results[0]\\n+        else:\\n+            # Song
        has metadata, so we use it to reinitialize the song object\\n+            #
        and fill in the missing metadata\\n+            try:\\n+                song
        = reinit_song(Song.from_missing_data(**song_meta))\\n+            except QueryError:\\n+
        \               logger.error(\\\"Could not find metadata for %s\\\", file.name)\\n+
        \               return None\\n+\\n+        # Check if the song has lyric\\n+
        \       # if not use downloader to find lyrics\\n+        if song_meta is
        None or song_meta.get(\\\"lyrics\\\") is None:\\n+            logger.debug(\\\"Fetching
        lyrics for %s\\\", song.display_name)\\n+            song.lyrics = downloader.search_lyrics(song)\\n+
        \           if song.lyrics:\\n+                logger.info(\\\"Found lyrics
        for song: %s\\\", song.display_name)\\n+        else:\\n+            song.lyrics
        = song_meta.get(\\\"lyrics\\\")\\n+\\n+        # Apply metadata to the song\\n+
        \       embed_metadata(file, song)\\n+\\n+        logger.info(\\\"Applied
        metadata to %s\\\", file.name)\\n+\\n+        if downloader.settings[\\\"generate_lrc\\\"]:\\n+
        \           lrc_file = file.with_suffix(\\\".lrc\\\")\\n+            if lrc_file.exists():\\n+
        \               logger.info(\\\"Lrc file already exists for %s\\\", file.name)\\n+
        \               return None\\n+\\n+            generate_lrc(song, file)\\n+
        \           if lrc_file.exists():\\n+                logger.info(\\\"Saved
        lrc file for %s\\\", song.display_name)\\n+            else:\\n+                logger.info(\\\"Could
        not find lrc file for %s\\\", song.display_name)\\n+        return None\\n+\\n+
        \   async def pool_worker(file_path: Path) -> None:\\n+        async with
        downloader.semaphore:\\n+            # The following function calls blocking
        code, which would block whole event loop.\\n+            # Therefore it has
        to be called in a separate thread via ThreadPoolExecutor. This\\n+            #
        is not a problem, since GIL is released for the I/O operations, so it shouldn't\\n+
        \           # hurt performance.\\n+            await downloader.loop.run_in_executor(None,
        process_file, file_path)\\n+\\n+    tasks = [pool_worker(path) for path in
        paths]\\n+\\n+    # call all task asynchronously, and wait until all are finished\\n+
        \   downloader.loop.run_until_complete(asyncio.gather(*tasks))\\n+\\n+    #
        to re-download the local songs\\n+    if downloader.settings[\\\"redownload\\\"]:\\n+
        \       songs_url: List[str] = []\\n+        for file in paths:\\n+            meta_data
        = get_file_metadata(\\n+                Path(file), downloader.settings[\\\"id3_separator\\\"]\\n+
        \           )\\n+            if meta_data and meta_data[\\\"url\\\"]:\\n+
        \               songs_url.append(meta_data[\\\"url\\\"])\\n+\\n+        songs_list
        = parse_query(\\n+            songs_url,\\n+            downloader.settings[\\\"threads\\\"],\\n+
        \           downloader.settings[\\\"ytm_data\\\"],\\n+            downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       )\\n+\\n+        downloader.download_multiple_songs(songs_list)\"},{\"sha\":\"4ee431735a71edd029ea42d55a1174894c921d6d\",\"filename\":\"spotdl/console/save.py\",\"status\":\"added\",\"additions\":106,\"deletions\":0,\"changes\":106,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fsave.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fsave.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fsave.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,106 @@\\n+\\\"\\\"\\\"\\n+Save module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import json\\n+import logging\\n+from typing import List\\n+\\n+from
        spotdl.download.downloader import Downloader, DownloaderError\\n+from spotdl.types.song
        import Song\\n+from spotdl.utils.m3u import gen_m3u_files\\n+from spotdl.utils.search
        import parse_query\\n+\\n+__all__ = [\\\"save\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+def
        save(\\n+    query: List[str],\\n+    downloader: Downloader,\\n+) -> None:\\n+
        \   \\\"\\\"\\\"\\n+    Save metadata from spotify to the disk.\\n+\\n+    ###
        Arguments\\n+    - query: list of strings to search for.\\n+    - downloader:
        Already initialized downloader instance.\\n+\\n+    ### Notes\\n+    - This
        function is multi-threaded.\\n+    \\\"\\\"\\\"\\n+\\n+    save_path = downloader.settings[\\\"save_file\\\"]\\n+
        \   m3u_file = downloader.settings[\\\"m3u\\\"]\\n+\\n+    to_stdout = save_path
        == \\\"-\\\"\\n+\\n+    if save_path is None and not to_stdout:\\n+        raise
        DownloaderError(\\\"Save file is not specified\\\")\\n+\\n+    # Parse the
        query\\n+    songs = parse_query(\\n+        query,\\n+        downloader.settings[\\\"threads\\\"],\\n+
        \       downloader.settings[\\\"ytm_data\\\"],\\n+        downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \   )\\n+    save_data = [song.json for song in songs]\\n+\\n+    def process_song(song:
        Song):\\n+        try:\\n+            data = downloader.search(song)\\n+            if
        data is None:\\n+                logger.error(\\\"Could not find a match for
        %s\\\", song.display_name)\\n+\\n+                return None\\n+\\n+            logger.info(\\\"Found
        url for %s: %s\\\", song.display_name, data)\\n+\\n+            return {**song.json,
        \\\"download_url\\\": data}\\n+        except Exception as exception:\\n+
        \           logger.error(\\\"%s generated an exception: %s\\\", song.display_name,
        exception)\\n+\\n+        return None\\n+\\n+    async def pool_worker(song:
        Song):\\n+        async with downloader.semaphore:\\n+            # The following
        function calls blocking code, which would block whole event loop.\\n+            #
        Therefore it has to be called in a separate thread via ThreadPoolExecutor.
        This\\n+            # is not a problem, since GIL is released for the I/O
        operations, so it shouldn't\\n+            # hurt performance.\\n+            return
        await downloader.loop.run_in_executor(None, process_song, song)\\n+\\n+    if
        downloader.settings[\\\"preload\\\"]:\\n+        tasks = [pool_worker(song)
        for song in songs]\\n+\\n+        # call all task asynchronously, and wait
        until all are finished\\n+        save_data = list(downloader.loop.run_until_complete(asyncio.gather(*tasks)))\\n+\\n+
        \   if to_stdout:\\n+        # Print the songs to stdout\\n+        print(json.dumps(save_data,
        indent=4, ensure_ascii=False))\\n+    elif save_path:\\n+        # Save the
        songs to a file\\n+        with open(save_path, \\\"w\\\", encoding=\\\"utf-8\\\")
        as save_file:\\n+            json.dump(save_data, save_file, indent=4, ensure_ascii=False)\\n+\\n+
        \   if m3u_file:\\n+        gen_m3u_files(\\n+            songs,\\n+            m3u_file,\\n+
        \           downloader.settings[\\\"output\\\"],\\n+            downloader.settings[\\\"format\\\"],\\n+
        \           downloader.settings[\\\"restrict\\\"],\\n+            False,\\n+
        \       )\\n+\\n+    if not to_stdout:\\n+        logger.info(\\n+            \\\"Saved
        %s song%s to %s\\\",\\n+            len(save_data),\\n+            \\\"s\\\"
        if len(save_data) > 1 else \\\"\\\",\\n+            save_path,\\n+        )\"},{\"sha\":\"a94d9aba31ac5e30e9e13a4d8f8f12594bf671f2\",\"filename\":\"spotdl/console/sync.py\",\"status\":\"added\",\"additions\":174,\"deletions\":0,\"changes\":174,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fsync.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fsync.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fsync.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,174 @@\\n+\\\"\\\"\\\"\\n+Sync module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import logging\\n+from typing import List\\n+\\n+from spotdl.download.downloader
        import Downloader\\n+from spotdl.types.song import Song\\n+from spotdl.utils.formatter
        import create_file_name\\n+from spotdl.utils.m3u import gen_m3u_files\\n+from
        spotdl.utils.search import parse_query\\n+\\n+__all__ = [\\\"sync\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def sync(\\n+    query: List[str],\\n+
        \   downloader: Downloader,\\n+) -> None:\\n+    \\\"\\\"\\\"\\n+    Sync
        function for the console.\\n+    It will download the songs and remove the
        ones that are no longer\\n+    present in the playlists/albums/etc\\n+\\n+\\n+
        \   ### Arguments\\n+    - query: list of strings to search for.\\n+    -
        downloader: Already initialized downloader instance.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   save_path = downloader.settings[\\\"save_file\\\"]\\n+    downloader.settings[\\\"save_file\\\"]
        = None\\n+\\n+    m3u_file = downloader.settings[\\\"m3u\\\"]\\n+    downloader.settings[\\\"m3u\\\"]
        = None\\n+\\n+    # Query and save file\\n+    # Create initial sync file\\n+
        \   if query and save_path:\\n+        if any(req for req in query if req.endswith(\\\".spotdl\\\")):\\n+
        \           # If the query contains a .spotdl file, and we are about to create\\n+
        \           # .spotdl file, raise an error.\\n+            raise ValueError(\\n+
        \               \\\"Cannot create a sync file with a .spotdl file in the query.\\\"\\n+
        \           )\\n+\\n+        # Parse the query\\n+        songs_list = parse_query(\\n+
        \           query,\\n+            downloader.settings[\\\"threads\\\"],\\n+
        \           downloader.settings[\\\"ytm_data\\\"],\\n+            downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       )\\n+\\n+        # Create sync file\\n+        with open(save_path,
        \\\"w\\\", encoding=\\\"utf-8\\\") as save_file:\\n+            json.dump(\\n+
        \               {\\n+                    \\\"type\\\": \\\"sync\\\",\\n+                    \\\"query\\\":
        query,\\n+                    \\\"songs\\\": [song.json for song in songs_list],\\n+
        \               },\\n+                save_file,\\n+                indent=4,\\n+
        \               ensure_ascii=False,\\n+            )\\n+\\n+        # Perform
        initial download\\n+        downloader.download_multiple_songs(songs_list)\\n+\\n+
        \       # Create m3u file\\n+        if m3u_file:\\n+            gen_m3u_files(\\n+
        \               songs_list,\\n+                m3u_file,\\n+                downloader.settings[\\\"output\\\"],\\n+
        \               downloader.settings[\\\"format\\\"],\\n+                downloader.settings[\\\"restrict\\\"],\\n+
        \               False,\\n+            )\\n+\\n+        return None\\n+\\n+
        \   # If the query is a single file, download it\\n+    if len(query) == 1
        and query[0].endswith(\\\".spotdl\\\") and not save_path:\\n+        # Load
        the sync file\\n+        with open(query[0], \\\"r\\\", encoding=\\\"utf-8\\\")
        as sync_file:\\n+            sync_data = json.load(sync_file)\\n+\\n+        #
        Verify the sync file\\n+        if (\\n+            not isinstance(sync_data,
        dict)\\n+            or sync_data.get(\\\"type\\\") != \\\"sync\\\"\\n+            or
        sync_data.get(\\\"songs\\\") is None\\n+        ):\\n+            raise ValueError(\\\"Sync
        file is not a valid sync file.\\\")\\n+\\n+        # Parse the query\\n+        songs_playlist
        = parse_query(\\n+            sync_data[\\\"query\\\"],\\n+            downloader.settings[\\\"threads\\\"],\\n+
        \           downloader.settings[\\\"ytm_data\\\"],\\n+            downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       )\\n+\\n+        # Get the names and URLs of previously downloaded
        songs from the sync file\\n+        old_files = []\\n+        for entry in
        sync_data[\\\"songs\\\"]:\\n+            file_name = create_file_name(\\n+
        \               Song.from_dict(entry),\\n+                downloader.settings[\\\"output\\\"],\\n+
        \               downloader.settings[\\\"format\\\"],\\n+                downloader.settings[\\\"restrict\\\"],\\n+
        \           )\\n+            old_files.append((file_name, entry[\\\"url\\\"]))\\n+\\n+
        \       new_urls = [song.url for song in songs_playlist]\\n+\\n+        #
        Delete all song files whose URL is no longer part of the latest playlist\\n+
        \       if not downloader.settings[\\\"sync_without_deleting\\\"]:\\n+            to_delete
        = [path for (path, url) in old_files if url not in new_urls]\\n+\\n+            for
        file in to_delete:\\n+                if file.exists():\\n+                    logger.info(\\\"Deleting
        %s\\\", file)\\n+                    try:\\n+                        file.unlink()\\n+
        \                   except (PermissionError, OSError) as exc:\\n+                        logger.debug(\\n+
        \                           \\\"Could not remove temp file: %s, error: %s\\\",
        file, exc\\n+                        )\\n+                else:\\n+                    logger.debug(\\\"%s
        does not exist.\\\", file)\\n+\\n+            if len(to_delete) == 0:\\n+
        \               logger.info(\\\"Nothing to delete...\\\")\\n+            else:\\n+
        \               logger.info(\\\"%s old songs were deleted.\\\", len(to_delete))\\n+\\n+
        \       if m3u_file:\\n+            gen_m3u_files(\\n+                songs_playlist,\\n+
        \               m3u_file,\\n+                downloader.settings[\\\"output\\\"],\\n+
        \               downloader.settings[\\\"format\\\"],\\n+                downloader.settings[\\\"restrict\\\"],\\n+
        \               False,\\n+            )\\n+\\n+        # Write the new sync
        file\\n+        with open(query[0], \\\"w\\\", encoding=\\\"utf-8\\\") as
        save_file:\\n+            json.dump(\\n+                {\\n+                    \\\"type\\\":
        \\\"sync\\\",\\n+                    \\\"query\\\": sync_data[\\\"query\\\"],\\n+
        \                   \\\"songs\\\": [song.json for song in songs_playlist],\\n+
        \               },\\n+                save_file,\\n+                indent=4,\\n+
        \               ensure_ascii=False,\\n+            )\\n+\\n+        downloader.download_multiple_songs(songs_playlist)\\n+\\n+
        \       return None\\n+\\n+    raise ValueError(\\n+        \\\"Wrong combination
        of arguments. \\\"\\n+        \\\"Either provide a query and a save path.
        Or a single sync file in the query\\\"\\n+    )\"},{\"sha\":\"cd92a095a1a91a9f1c57dfd6896c0455122320b8\",\"filename\":\"spotdl/console/url.py\",\"status\":\"added\",\"additions\":63,\"deletions\":0,\"changes\":63,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Furl.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Furl.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Furl.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,63 @@\\n+\\\"\\\"\\\"\\n+Url module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import logging\\n+from typing import List\\n+\\n+from spotdl.download.downloader
        import Downloader\\n+from spotdl.types.song import Song\\n+from spotdl.utils.search
        import parse_query\\n+\\n+__all__ = [\\\"url\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+def
        url(\\n+    query: List[str],\\n+    downloader: Downloader,\\n+) -> None:\\n+
        \   \\\"\\\"\\\"\\n+    Print download url for the provided songs.\\n+\\n+
        \   ### Arguments\\n+    - query: list of strings to search for.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Parse the query\\n+    songs = parse_query(\\n+        query,\\n+        downloader.settings[\\\"threads\\\"],\\n+
        \       downloader.settings[\\\"ytm_data\\\"],\\n+        downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \   )\\n+\\n+    def process_song(song: Song):\\n+        try:\\n+            data
        = downloader.search(song)\\n+            if data is None:\\n+                logger.error(\\\"Could
        not find a match for %s\\\", song.display_name)\\n+\\n+                return
        None\\n+\\n+            audio_provider = downloader.audio_providers[0]\\n+
        \           download_url = audio_provider.get_download_metadata(data)[\\\"url\\\"]\\n+\\n+
        \           print(download_url)\\n+        except Exception as exception:\\n+
        \           logger.error(\\\"%s generated an exception: %s\\\", song.display_name,
        exception)\\n+\\n+        return None\\n+\\n+    async def pool_worker(song:
        Song):\\n+        async with downloader.semaphore:\\n+            # The following
        function calls blocking code, which would block whole event loop.\\n+            #
        Therefore it has to be called in a separate thread via ThreadPoolExecutor.
        This\\n+            # is not a problem, since GIL is released for the I/O
        operations, so it shouldn't\\n+            # hurt performance.\\n+            return
        await downloader.loop.run_in_executor(None, process_song, song)\\n+\\n+    tasks
        = [pool_worker(song) for song in songs]\\n+    downloader.loop.run_until_complete(asyncio.gather(*tasks))\"},{\"sha\":\"77463a01c8e6c2aaa978c3d9ec668d2eb0afc714\",\"filename\":\"spotdl/console/web.py\",\"status\":\"added\",\"additions\":133,\"deletions\":0,\"changes\":133,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fweb.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fconsole%2Fweb.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fweb.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,133 @@\\n+\\\"\\\"\\\"\\n+Web module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import logging\\n+import sys\\n+import webbrowser\\n+\\n+from fastapi
        import Depends, FastAPI\\n+from fastapi.middleware.cors import CORSMiddleware\\n+from
        uvicorn import Config, Server\\n+\\n+from spotdl._version import __version__\\n+from
        spotdl.types.options import DownloaderOptions, WebOptions\\n+from spotdl.utils.config
        import get_spotdl_path\\n+from spotdl.utils.github import download_github_dir\\n+from
        spotdl.utils.logging import NAME_TO_LEVEL\\n+from spotdl.utils.web import
        (\\n+    ALLOWED_ORIGINS,\\n+    SPAStaticFiles,\\n+    app_state,\\n+    fix_mime_types,\\n+
        \   get_current_state,\\n+    router,\\n+)\\n+\\n+__all__ = [\\\"web\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def web(web_settings: WebOptions,
        downloader_settings: DownloaderOptions):\\n+    \\\"\\\"\\\"\\n+    Run the
        web server.\\n+\\n+    ### Arguments\\n+    - web_settings: Web server settings.\\n+
        \   - downloader_settings: Downloader settings.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Apply the fix for mime types\\n+    fix_mime_types()\\n+\\n+    # Set
        up the app loggers\\n+    uvicorn_logger = logging.getLogger(\\\"uvicorn\\\")\\n+
        \   uvicorn_logger.propagate = False\\n+\\n+    spotipy_logger = logging.getLogger(\\\"spotipy\\\")\\n+
        \   spotipy_logger.setLevel(logging.NOTSET)\\n+\\n+    # Initialize the web
        server settings\\n+    app_state.web_settings = web_settings\\n+    app_state.logger
        = uvicorn_logger\\n+\\n+    # Create the event loop\\n+    app_state.loop
        = (\\n+        asyncio.new_event_loop()\\n+        if sys.platform != \\\"win32\\\"\\n+
        \       else asyncio.ProactorEventLoop()  # type: ignore\\n+    )\\n+\\n+
        \   downloader_settings[\\\"simple_tui\\\"] = True\\n+\\n+    # Download web
        app from GitHub\\n+    logger.info(\\\"Updating web app \\\\n\\\")\\n+    web_app_dir
        = str(get_spotdl_path().absolute())\\n+    download_github_dir(\\n+        \\\"https://github.com/spotdl/web-ui/tree/master/dist\\\",\\n+
        \       output_dir=web_app_dir,\\n+    )\\n+\\n+    app_state.api = FastAPI(\\n+
        \       title=\\\"spotDL\\\",\\n+        description=\\\"Download music from
        Spotify\\\",\\n+        version=__version__,\\n+        dependencies=[Depends(get_current_state)],\\n+
        \   )\\n+\\n+    app_state.api.include_router(router)\\n+\\n+    # Add the
        CORS middleware\\n+    app_state.api.add_middleware(\\n+        CORSMiddleware,\\n+
        \       allow_origins=ALLOWED_ORIGINS + web_settings[\\\"allowed_origins\\\"]\\n+
        \       if web_settings[\\\"allowed_origins\\\"]\\n+        else ALLOWED_ORIGINS,\\n+
        \       allow_credentials=True,\\n+        allow_methods=[\\\"*\\\"],\\n+
        \       allow_headers=[\\\"*\\\"],\\n+    )\\n+\\n+    # Add the static files\\n+
        \   app_state.api.mount(\\n+        \\\"/\\\",\\n+        SPAStaticFiles(directory=web_app_dir
        + \\\"/dist\\\", html=True),\\n+        name=\\\"static\\\",\\n+    )\\n+\\n+
        \   config = Config(\\n+        app=app_state.api,\\n+        host=web_settings[\\\"host\\\"],\\n+
        \       port=web_settings[\\\"port\\\"],\\n+        workers=1,\\n+        log_level=NAME_TO_LEVEL[downloader_settings[\\\"log_level\\\"]],\\n+
        \       loop=app_state.loop,  # type: ignore\\n+    )\\n+\\n+    app_state.server
        = Server(config)\\n+\\n+    app_state.downloader_settings = downloader_settings\\n+\\n+
        \   # Open the web browser\\n+    webbrowser.open(f\\\"http://{web_settings['host']}:{web_settings['port']}/\\\")\\n+\\n+
        \   if not web_settings[\\\"web_use_output_dir\\\"]:\\n+        logger.info(\\n+
        \           \\\"Files are stored in temporary directory \\\"\\n+            \\\"and
        will be deleted after the program exits \\\"\\n+            \\\"to save them
        to current directory permanently \\\"\\n+            \\\"enable the `web_use_output_dir`
        option \\\"\\n+        )\\n+    else:\\n+        logger.info(\\n+            \\\"Files
        are stored in current directory \\\"\\n+            \\\"to save them to temporary
        directory \\\"\\n+            \\\"disable the `web_use_output_dir` option
        \\\"\\n+        )\\n+\\n+    logger.info(\\\"Starting web server \\\\n\\\")\\n+\\n+
        \   # Start the web server\\n+    app_state.loop.run_until_complete(app_state.server.serve())\"},{\"sha\":\"ce8f55dfbee8e16f15116bb9facc29da1409ec7c\",\"filename\":\"spotdl/download/__init__.py\",\"status\":\"modified\",\"additions\":3,\"deletions\":5,\"changes\":8,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fdownload%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fdownload%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,5 +1,3 @@\\n-from spotdl.download.tracking_file_handler import DownloadTracker\\n-from
        spotdl.download.progress_ui_handler import DisplayManager\\n-from spotdl.download.ffmpeg
        import convert, has_correct_version\\n-from spotdl.download.embed_metadata
        import set_id3_data\\n-from spotdl.download.downloader import DownloadManager\\n+\\\"\\\"\\\"\\n+Download
        module that holds the downloader and progress handler modules.\\n+\\\"\\\"\\\"\"},{\"sha\":\"58c39d1437aeb5b11e8da2212da1da3e08ff6170\",\"filename\":\"spotdl/download/downloader.py\",\"status\":\"modified\",\"additions\":735,\"deletions\":212,\"changes\":947,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fdownload%2Fdownloader.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fdownload%2Fdownloader.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fdownloader.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,297 +1,820 @@\\n-import sys\\n-import shutil\\n+\\\"\\\"\\\"\\n+Downloader
        module, this is where all the downloading pre/post processing happens etc.\\n+\\\"\\\"\\\"\\n+\\n
        import asyncio\\n+import datetime\\n+import json\\n+import logging\\n+import
        re\\n+import shutil\\n+import sys\\n import traceback\\n-import concurrent.futures\\n-\\n+from
        argparse import Namespace\\n from pathlib import Path\\n-from yt_dlp import
        YoutubeDL\\n-from typing import List, Optional\\n-\\n-from spotdl.search import
        SongObject\\n-from spotdl.download.progress_ui_handler import YTDLLogger\\n-from
        spotdl.download import ffmpeg, set_id3_data, DisplayManager, DownloadTracker\\n-from
        spotdl.providers.provider_utils import (\\n-    _get_converted_file_path,\\n-
        \   _parse_path_template,\\n+from typing import Dict, List, Optional, Tuple,
        Type, Union\\n+\\n+from yt_dlp.postprocessor.modify_chapters import ModifyChaptersPP\\n+from
        yt_dlp.postprocessor.sponsorblock import SponsorBlockPP\\n+\\n+from spotdl.download.progress_handler
        import ProgressHandler\\n+from spotdl.providers.audio import (\\n+    AudioProvider,\\n+
        \   BandCamp,\\n+    Piped,\\n+    SliderKZ,\\n+    SoundCloud,\\n+    YouTube,\\n+
        \   YouTubeMusic,\\n+)\\n+from spotdl.providers.lyrics import AzLyrics, Genius,
        LyricsProvider, MusixMatch, Synced\\n+from spotdl.types.options import DownloaderOptionalOptions,
        DownloaderOptions\\n+from spotdl.types.song import Song\\n+from spotdl.utils.archive
        import Archive\\n+from spotdl.utils.config import (\\n+    DOWNLOADER_OPTIONS,\\n+
        \   GlobalConfig,\\n+    create_settings_type,\\n+    get_errors_path,\\n+
        \   get_temp_path,\\n+    modernize_settings,\\n )\\n+from spotdl.utils.ffmpeg
        import FFmpegError, convert, get_ffmpeg_path\\n+from spotdl.utils.formatter
        import create_file_name\\n+from spotdl.utils.lrc import generate_lrc\\n+from
        spotdl.utils.m3u import gen_m3u_files\\n+from spotdl.utils.metadata import
        MetadataError, embed_metadata\\n+from spotdl.utils.search import gather_known_songs,
        reinit_song, songs_from_albums\\n+\\n+__all__ = [\\n+    \\\"AUDIO_PROVIDERS\\\",\\n+
        \   \\\"LYRICS_PROVIDERS\\\",\\n+    \\\"Downloader\\\",\\n+    \\\"DownloaderError\\\",\\n+
        \   \\\"SPONSOR_BLOCK_CATEGORIES\\\",\\n+]\\n+\\n+AUDIO_PROVIDERS: Dict[str,
        Type[AudioProvider]] = {\\n+    \\\"youtube\\\": YouTube,\\n+    \\\"youtube-music\\\":
        YouTubeMusic,\\n+    \\\"slider-kz\\\": SliderKZ,\\n+    \\\"soundcloud\\\":
        SoundCloud,\\n+    \\\"bandcamp\\\": BandCamp,\\n+    \\\"piped\\\": Piped,\\n+}\\n+\\n+LYRICS_PROVIDERS:
        Dict[str, Type[LyricsProvider]] = {\\n+    \\\"genius\\\": Genius,\\n+    \\\"musixmatch\\\":
        MusixMatch,\\n+    \\\"azlyrics\\\": AzLyrics,\\n+    \\\"synced\\\": Synced,\\n+}\\n+\\n+SPONSOR_BLOCK_CATEGORIES
        = {\\n+    \\\"sponsor\\\": \\\"Sponsor\\\",\\n+    \\\"intro\\\": \\\"Intermission/Intro
        Animation\\\",\\n+    \\\"outro\\\": \\\"Endcards/Credits\\\",\\n+    \\\"selfpromo\\\":
        \\\"Unpaid/Self Promotion\\\",\\n+    \\\"preview\\\": \\\"Preview/Recap\\\",\\n+
        \   \\\"filler\\\": \\\"Filler Tangent\\\",\\n+    \\\"interaction\\\": \\\"Interaction
        Reminder\\\",\\n+    \\\"music_offtopic\\\": \\\"Non-Music Section\\\",\\n+}\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class DownloaderError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to downloaders.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class Downloader:\\n+    \\\"\\\"\\\"\\n+    Downloader
        class, this is where all the downloading pre/post processing happens etc.\\n+
        \   It handles the downloading/moving songs, multithreading, metadata embedding
        etc.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+        settings:
        Optional[Union[DownloaderOptionalOptions, DownloaderOptions]] = None,\\n+
        \       loop: Optional[asyncio.AbstractEventLoop] = None,\\n+    ):\\n+        \\\"\\\"\\\"\\n+
        \       Initialize the Downloader class.\\n \\n+        ### Arguments\\n+
        \       - settings: The settings to use.\\n+        - loop: The event loop
        to use.\\n+\\n+        ### Notes\\n+        - `search-query` uses the same
        format as `output`.\\n+        - if `audio_provider` or `lyrics_provider`
        is a list, then if no match is found,\\n+            the next provider in
        the list will be used.\\n+        \\\"\\\"\\\"\\n+\\n+        if settings
        is None:\\n+            settings = {}\\n+\\n+        # Create settings dictionary,
        fill in missing values with defaults\\n+        # from spotdl.types.options.DOWNLOADER_OPTIONS\\n+
        \       self.settings: DownloaderOptions = DownloaderOptions(\\n+            **create_settings_type(\\n+
        \               Namespace(config=False), dict(settings), DOWNLOADER_OPTIONS\\n+
        \           )  # type: ignore\\n+        )\\n \\n-class DownloadManager:\\n-
        \   def __init__(self, arguments: Optional[dict] = None):\\n-        # start
        a server for objects shared across processes\\n-        self.display_manager
        = DisplayManager()\\n-        self.download_tracker = DownloadTracker()\\n+
        \       # Handle deprecated values in config file\\n+        modernize_settings(self.settings)\\n+
        \       logger.debug(\\\"Downloader settings: %s\\\", self.settings)\\n \\n-
        \       if arguments is None:\\n-            arguments = {}\\n+        # If
        no audio providers specified, raise an error\\n+        if len(self.settings[\\\"audio_providers\\\"])
        == 0:\\n+            raise DownloaderError(\\n+                \\\"No audio
        providers specified. Please specify at least one.\\\"\\n+            )\\n
        \\n-        arguments.setdefault(\\\"ffmpeg\\\", \\\"ffmpeg\\\")\\n-        arguments.setdefault(\\\"output_format\\\",
        \\\"mp3\\\")\\n-        arguments.setdefault(\\\"download_threads\\\", 4)\\n-
        \       arguments.setdefault(\\\"path_template\\\", None)\\n+        # If
        ffmpeg is the default value and it's not installed\\n+        # try to use
        the spotdl's ffmpeg\\n+        self.ffmpeg = self.settings[\\\"ffmpeg\\\"]\\n+
        \       if self.ffmpeg == \\\"ffmpeg\\\" and shutil.which(\\\"ffmpeg\\\")
        is None:\\n+            ffmpeg_exec = get_ffmpeg_path()\\n+            if
        ffmpeg_exec is None:\\n+                raise DownloaderError(\\\"ffmpeg is
        not installed\\\")\\n \\n-        if sys.platform == \\\"win32\\\":\\n-            #
        ! ProactorEventLoop is required on Windows to run subprocess asynchronously\\n-
        \           # ! it is default since Python 3.8 but has to be changed for previous
        versions\\n-            loop = asyncio.ProactorEventLoop()\\n-            asyncio.set_event_loop(loop)\\n+
        \           self.ffmpeg = str(ffmpeg_exec.absolute())\\n \\n-        self.loop
        = asyncio.get_event_loop()\\n-        # ! semaphore is required to limit concurrent
        asyncio executions\\n-        self.semaphore = asyncio.Semaphore(arguments[\\\"download_threads\\\"])\\n+
        \       logger.debug(\\\"FFmpeg path: %s\\\", self.ffmpeg)\\n \\n-        #
        ! thread pool executor is used to run blocking (CPU-bound) code from a thread\\n-
        \       self.thread_executor = concurrent.futures.ThreadPoolExecutor(\\n-
        \           max_workers=arguments[\\\"download_threads\\\"]\\n+        self.loop
        = loop or (\\n+            asyncio.new_event_loop()\\n+            if sys.platform
        != \\\"win32\\\"\\n+            else asyncio.ProactorEventLoop()  # type:
        ignore\\n         )\\n \\n-        self.arguments = arguments\\n+        if
        loop is None:\\n+            asyncio.set_event_loop(self.loop)\\n+\\n+        #
        semaphore is required to limit concurrent asyncio executions\\n+        self.semaphore
        = asyncio.Semaphore(self.settings[\\\"threads\\\"])\\n+\\n+        self.progress_handler
        = ProgressHandler(self.settings[\\\"simple_tui\\\"])\\n+\\n+        # Gather
        already present songs\\n+        self.scan_formats = self.settings[\\\"detect_formats\\\"]
        or [self.settings[\\\"format\\\"]]\\n+        self.known_songs: Dict[str,
        List[Path]] = {}\\n+        if self.settings[\\\"scan_for_songs\\\"]:\\n+
        \           logger.info(\\\"Scanning for known songs, this might take a while...\\\")\\n+
        \           for scan_format in self.scan_formats:\\n+                logger.debug(\\\"Scanning
        for %s files\\\", scan_format)\\n+\\n+                found_files = gather_known_songs(self.settings[\\\"output\\\"],
        scan_format)\\n+\\n+                logger.debug(\\\"Found %s %s files\\\",
        len(found_files), scan_format)\\n+\\n+                for song_url, song_paths
        in found_files.items():\\n+                    known_paths = self.known_songs.get(song_url)\\n+
        \                   if known_paths is None:\\n+                        self.known_songs[song_url]
        = song_paths\\n+                    else:\\n+                        self.known_songs[song_url].extend(song_paths)\\n+\\n+
        \       logger.debug(\\\"Found %s known songs\\\", len(self.known_songs))\\n+\\n+
        \       # Initialize lyrics providers\\n+        self.lyrics_providers: List[LyricsProvider]
        = []\\n+        for lyrics_provider in self.settings[\\\"lyrics_providers\\\"]:\\n+
        \           lyrics_class = LYRICS_PROVIDERS.get(lyrics_provider)\\n+            if
        lyrics_class is None:\\n+                raise DownloaderError(f\\\"Invalid
        lyrics provider: {lyrics_provider}\\\")\\n+\\n+            self.lyrics_providers.append(lyrics_class())\\n+\\n+
        \       # Initialize audio providers\\n+        self.audio_providers: List[AudioProvider]
        = []\\n+        for audio_provider in self.settings[\\\"audio_providers\\\"]:\\n+
        \           audio_class = AUDIO_PROVIDERS.get(audio_provider)\\n+            if
        audio_class is None:\\n+                raise DownloaderError(f\\\"Invalid
        audio provider: {audio_provider}\\\")\\n+\\n+            self.audio_providers.append(\\n+
        \               audio_class(\\n+                    output_format=self.settings[\\\"format\\\"],\\n+
        \                   cookie_file=self.settings[\\\"cookie_file\\\"],\\n+                    search_query=self.settings[\\\"search_query\\\"],\\n+
        \                   filter_results=self.settings[\\\"filter_results\\\"],\\n+
        \                   yt_dlp_args=self.settings[\\\"yt_dlp_args\\\"],\\n+                )\\n+
        \           )\\n+\\n+        # Initialize list of errors\\n+        self.errors:
        List[str] = []\\n \\n-    def __enter__(self):\\n-        return self\\n+
        \       # Initialize proxy server\\n+        proxy = self.settings[\\\"proxy\\\"]\\n+
        \       proxies = None\\n+        if proxy:\\n+            if not re.match(pattern=r\\\"(http|https)://\\\\d{1,5}\\\",
        string=proxy):\\n+                raise DownloaderError(f\\\"Invalid proxy
        server: {proxy}\\\")\\n+            proxies = {\\\"http\\\": proxy, \\\"https\\\":
        proxy}\\n+            logger.info(\\\"Setting proxy server: %s\\\", proxy)\\n
        \\n-    def __exit__(self, type, value, traceback):\\n-        self.display_manager.close()\\n+
        \       GlobalConfig.set_parameter(\\\"proxies\\\", proxies)\\n \\n-        temp_folder
        = Path(\\\"spotdl-temp\\\")\\n+        # Initialize archive\\n+        self.url_archive
        = Archive()\\n+        if self.settings[\\\"archive\\\"]:\\n+            self.url_archive.load(self.settings[\\\"archive\\\"])\\n
        \\n-        if temp_folder.exists():\\n-            shutil.rmtree(temp_folder)\\n+
        \       logger.debug(\\\"Archive: %d urls\\\", len(self.url_archive))\\n \\n-
        \   def download_single_song(self, song_object: SongObject) -> None:\\n+        logger.debug(\\\"Downloader
        initialized\\\")\\n+\\n+    def download_song(self, song: Song) -> Tuple[Song,
        Optional[Path]]:\\n         \\\"\\\"\\\"\\n-        `song_object` `song` :
        song to be downloaded\\n+        Download a single song.\\n \\n-        RETURNS
        `~`\\n+        ### Arguments\\n+        - song: The song to download.\\n \\n-
        \       downloads the given song\\n+        ### Returns\\n+        - tuple
        with the song and the path to the downloaded file if successful.\\n         \\\"\\\"\\\"\\n
        \\n-        self.download_tracker.clear()\\n-        self.download_tracker.load_song_list([song_object])\\n+
        \       self.progress_handler.set_song_count(1)\\n \\n-        self.display_manager.set_song_count_to(1)\\n+
        \       results = self.download_multiple_songs([song])\\n \\n-        self._download_asynchronously([song_object])\\n+
        \       return results[0]\\n \\n-    def download_multiple_songs(self, song_list:
        List[SongObject]) -> None:\\n+    def download_multiple_songs(\\n+        self,
        songs: List[Song]\\n+    ) -> List[Tuple[Song, Optional[Path]]]:\\n         \\\"\\\"\\\"\\n-
        \       `list<song_object>` `song_list` : list of songs to be downloaded\\n+
        \       Download multiple songs to the temp directory.\\n \\n-        RETURNS
        `~`\\n+        ### Arguments\\n+        - songs: The songs to download.\\n
        \\n-        downloads the given songs in parallel\\n+        ### Returns\\n+
        \       - list of tuples with the song and the path to the downloaded file
        if successful.\\n         \\\"\\\"\\\"\\n \\n-        self.download_tracker.clear()\\n-
        \       self.download_tracker.load_song_list(song_list)\\n+        if self.settings[\\\"fetch_albums\\\"]:\\n+
        \           albums = set(song.album_id for song in songs if song.album_id
        is not None)\\n+            logger.info(\\n+                \\\"Fetching %d
        album%s\\\", len(albums), \\\"s\\\" if len(albums) > 1 else \\\"\\\"\\n+            )\\n
        \\n-        self.display_manager.set_song_count_to(len(song_list))\\n+            songs.extend(songs_from_albums(list(albums)))\\n
        \\n-        self._download_asynchronously(song_list)\\n+            # Remove
        duplicates\\n+            return_obj = {}\\n+            for song in songs:\\n+
        \               return_obj[song.url] = song\\n \\n-    def resume_download_from_tracking_file(self,
        tracking_file_path: str) -> None:\\n-        \\\"\\\"\\\"\\n-        `str`
        `tracking_file_path` : path to a .spotdlTrackingFile\\n+            songs
        = list(return_obj.values())\\n \\n-        RETURNS `~`\\n+        logger.debug(\\\"Downloading
        %d songs\\\", len(songs))\\n \\n-        downloads songs present on the .spotdlTrackingFile
        in parallel\\n-        \\\"\\\"\\\"\\n+        if self.settings[\\\"archive\\\"]:\\n+
        \           songs = [song for song in songs if song.url not in self.url_archive]\\n+
        \           logger.debug(\\\"Filtered %d songs with archive\\\", len(songs))\\n+\\n+
        \       self.progress_handler.set_song_count(len(songs))\\n+\\n+        #
        Create tasks list\\n+        tasks = [self.pool_download(song) for song in
        songs]\\n+\\n+        # Call all task asynchronously, and wait until all are
        finished\\n+        results = list(self.loop.run_until_complete(asyncio.gather(*tasks)))\\n
        \\n-        self.download_tracker.clear()\\n-        self.download_tracker.load_tracking_file(tracking_file_path)\\n+
        \       # Print errors\\n+        if self.settings[\\\"print_errors\\\"]:\\n+
        \           for error in self.errors:\\n+                logger.error(error)\\n
        \\n-        song_list = self.download_tracker.get_song_list()\\n+        if
        self.settings[\\\"save_errors\\\"]:\\n+            with open(\\n+                self.settings[\\\"save_errors\\\"],
        \\\"w\\\", encoding=\\\"utf-8\\\"\\n+            ) as error_file:\\n+                error_file.write(\\\"\\\\n\\\".join(self.errors))\\n
        \\n-        self.display_manager.set_song_count_to(len(song_list))\\n+            logger.info(\\\"Saved
        errors to %s\\\", self.settings[\\\"save_errors\\\"])\\n \\n-        self._download_asynchronously(song_list)\\n+
        \       # Save archive\\n+        if self.settings[\\\"archive\\\"]:\\n+            for
        result in results:\\n+                if result[1] or self.settings[\\\"add_unavailable\\\"]:\\n+
        \                   self.url_archive.add(result[0].url)\\n \\n-    def _download_asynchronously(self,
        song_obj_list):\\n-        tasks = [self._pool_download(song) for song in
        song_obj_list]\\n-        # call all task asynchronously, and wait until all
        are finished\\n-        self.loop.run_until_complete(asyncio.gather(*tasks))\\n+
        \           self.url_archive.save(self.settings[\\\"archive\\\"])\\n+            logger.info(\\n+
        \               \\\"Saved archive with %d urls to %s\\\",\\n+                len(self.url_archive),\\n+
        \               self.settings[\\\"archive\\\"],\\n+            )\\n+\\n+        #
        Create m3u playlist\\n+        if self.settings[\\\"m3u\\\"]:\\n+            song_list
        = [\\n+                song\\n+                for song, path in results\\n+
        \               if path or self.settings[\\\"add_unavailable\\\"]\\n+            ]\\n+\\n+
        \           gen_m3u_files(\\n+                song_list,\\n+                self.settings[\\\"m3u\\\"],\\n+
        \               self.settings[\\\"output\\\"],\\n+                self.settings[\\\"format\\\"],\\n+
        \               self.settings[\\\"restrict\\\"],\\n+                False,\\n+
        \               self.settings[\\\"detect_formats\\\"],\\n+            )\\n
        \\n-    async def _pool_download(self, song_obj: SongObject):\\n-        #
        ! Run asynchronous task in a pool to make sure that all processes\\n-        #
        ! don't run at once.\\n+        # Save results to a file\\n+        if self.settings[\\\"save_file\\\"]:\\n+
        \           with open(self.settings[\\\"save_file\\\"], \\\"w\\\", encoding=\\\"utf-8\\\")
        as save_file:\\n+                json.dump([song.json for song, _ in results],
        save_file, indent=4)\\n+\\n+            logger.info(\\\"Saved results to %s\\\",
        self.settings[\\\"save_file\\\"])\\n+\\n+        return results\\n+\\n+    async
        def pool_download(self, song: Song) -> Tuple[Song, Optional[Path]]:\\n+        \\\"\\\"\\\"\\n+
        \       Run asynchronous task in a pool to make sure that all processes.\\n+\\n+
        \       ### Arguments\\n+        - song: The song to download.\\n+\\n+        ###
        Returns\\n+        - tuple with the song and the path to the downloaded file
        if successful.\\n+\\n+        ### Notes\\n+        - This method calls `self.search_and_download`
        in a new thread.\\n+        \\\"\\\"\\\"\\n \\n         # tasks that cannot
        acquire semaphore will wait here until it's free\\n         # only certain
        amount of tasks can acquire the semaphore at the same time\\n         async
        with self.semaphore:\\n-            return await self.download_song(song_obj)\\n+
        \           return await self.loop.run_in_executor(None, self.search_and_download,
        song)\\n \\n-    async def download_song(self, song_object: SongObject) ->
        None:\\n+    def search(self, song: Song) -> str:\\n         \\\"\\\"\\\"\\n-
        \       `song_object` `song_object` : song to be downloaded\\n+        Search
        for a song using all available providers.\\n \\n-        RETURNS `~`\\n+        ###
        Arguments\\n+        - song: The song to search for.\\n \\n-        Downloads,
        Converts, Normalizes song & embeds metadata as ID3 tags.\\n+        ### Returns\\n+
        \       - tuple with download url and audio provider if successful.\\n         \\\"\\\"\\\"\\n
        \\n-        display_progress_tracker = self.display_manager.new_progress_tracker(\\n-
        \           song_object\\n-        )\\n+        for audio_provider in self.audio_providers:\\n+
        \           url = audio_provider.search(song, self.settings[\\\"only_verified_results\\\"])\\n+
        \           if url:\\n+                return url\\n \\n-        # ! since
        most errors are expected to happen within this function, we wrap in\\n-        #
        ! exception catcher to prevent blocking on multiple downloads\\n-        try:\\n+
        \           logger.debug(\\\"%s failed to find %s\\\", audio_provider.name,
        song.display_name)\\n \\n-            # ! all YouTube downloads are to .\\\\Temp;
        they are then converted and put into .\\\\ and\\n-            # ! finally
        followed up with ID3 metadata tags\\n+        raise LookupError(f\\\"No results
        found for song: {song.display_name}\\\")\\n \\n-            # ! we explicitly
        use the os.path.join function here to ensure download is\\n-            #
        ! platform agnostic\\n+    def search_lyrics(self, song: Song) -> Optional[str]:\\n+
        \       \\\"\\\"\\\"\\n+        Search for lyrics using all available providers.\\n
        \\n-            # Create a spotdl-temp folder if not present\\n-            temp_folder
        = Path(\\\"spotdl-temp\\\")\\n+        ### Arguments\\n+        - song: The
        song to search for.\\n \\n-            if not temp_folder.exists():\\n-                temp_folder.mkdir()\\n+
        \       ### Returns\\n+        - lyrics if successful else None.\\n+        \\\"\\\"\\\"\\n
        \\n-            if self.arguments[\\\"path_template\\\"] is not None:\\n-
        \               converted_file_path = _parse_path_template(\\n-                    self.arguments[\\\"path_template\\\"],\\n-
        \                   song_object,\\n-                    self.arguments[\\\"output_format\\\"],\\n-
        \               )\\n-            else:\\n-                converted_file_path
        = _get_converted_file_path(\\n-                    song_object, self.arguments[\\\"output_format\\\"]\\n+
        \       for lyrics_provider in self.lyrics_providers:\\n+            lyrics
        = lyrics_provider.get_lyrics(song.name, song.artists)\\n+            if lyrics:\\n+
        \               logger.debug(\\n+                    \\\"Found lyrics for
        %s on %s\\\", song.display_name, lyrics_provider.name\\n                 )\\n
        \\n-            # if a song is already downloaded skip it\\n-            if
        converted_file_path.is_file():\\n-                if self.display_manager:\\n-
        \                   display_progress_tracker.notify_download_skip()\\n-                if
        self.download_tracker:\\n-                    self.download_tracker.notify_download_completion(song_object)\\n+
        \               return lyrics\\n \\n-                # ! None is the default
        return value of all functions, we just explicitly define\\n-                #
        ! it here as a continent way to avoid executing the rest of the function.\\n-
        \               return None\\n+            logger.debug(\\n+                \\\"%s
        failed to find lyrics for %s\\\",\\n+                lyrics_provider.name,\\n+
        \               song.display_name,\\n+            )\\n \\n-            converted_file_path.parent.mkdir(parents=True,
        exist_ok=True)\\n+        return None\\n \\n-            if self.arguments[\\\"output_format\\\"]
        == \\\"m4a\\\":\\n-                ytdl_format = \\\"bestaudio[ext=m4a]/bestaudio/best\\\"\\n-
        \           elif self.arguments[\\\"output_format\\\"] == \\\"opus\\\":\\n-
        \               ytdl_format = \\\"bestaudio[ext=webm]/bestaudio/best\\\"\\n-
        \           else:\\n-                ytdl_format = \\\"bestaudio\\\"\\n-\\n-
        \           # download Audio from YouTube\\n-            audio_handler = YoutubeDL(\\n-
        \               {\\n-                    \\\"format\\\": ytdl_format,\\n-
        \                   \\\"outtmpl\\\": f\\\"{temp_folder}/%(id)s.%(ext)s\\\",\\n-
        \                   \\\"quiet\\\": True,\\n-                    \\\"no_warnings\\\":
        True,\\n-                    \\\"encoding\\\": \\\"UTF-8\\\",\\n-                    \\\"logger\\\":
        YTDLLogger(),\\n-                    \\\"progress_hooks\\\": [display_progress_tracker.ytdl_progress_hook]\\n-
        \                   if display_progress_tracker\\n-                    else
        [],\\n-                }\\n+    def search_and_download(self, song: Song)
        -> Tuple[Song, Optional[Path]]:\\n+        \\\"\\\"\\\"\\n+        Search
        for the song and download it.\\n+\\n+        ### Arguments\\n+        - song:
        The song to download.\\n+\\n+        ### Returns\\n+        - tuple with the
        song and the path to the downloaded file if successful.\\n+\\n+        ###
        Notes\\n+        - This function is synchronous.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       # Check if song has name/artist and url/song_id\\n+        if not
        (song.name and (song.artists or song.artist)) and not (\\n+            song.url
        or song.song_id\\n+        ):\\n+            logger.error(\\\"Song is missing
        required fields: %s\\\", song.display_name)\\n+            self.errors.append(f\\\"Song
        is missing required fields: {song.display_name}\\\")\\n+\\n+            return
        song, None\\n+\\n+        reinitialized = False\\n+        try:\\n+            #
        Create the output file path\\n+            output_file = create_file_name(\\n+
        \               song=song,\\n+                template=self.settings[\\\"output\\\"],\\n+
        \               file_extension=self.settings[\\\"format\\\"],\\n+                restrict=self.settings[\\\"restrict\\\"],\\n+
        \               file_name_length=self.settings[\\\"max_filename_length\\\"],\\n+
        \           )\\n+        except Exception:\\n+            song = reinit_song(song)\\n+\\n+
        \           output_file = create_file_name(\\n+                song=song,\\n+
        \               template=self.settings[\\\"output\\\"],\\n+                file_extension=self.settings[\\\"format\\\"],\\n+
        \               restrict=self.settings[\\\"restrict\\\"],\\n+                file_name_length=self.settings[\\\"max_filename_length\\\"],\\n
        \            )\\n \\n+            reinitialized = True\\n+\\n+        if song.explicit
        is True and self.settings[\\\"skip_explicit\\\"] is True:\\n+            logger.info(\\\"Skipping
        explicit song: %s\\\", song.display_name)\\n+            return song, None\\n+\\n+
        \       # Initalize the progress tracker\\n+        display_progress_tracker
        = self.progress_handler.get_new_tracker(song)\\n+\\n+        try:\\n+            #
        Create the temp folder path\\n+            temp_folder = get_temp_path()\\n+\\n+
        \           # Check if there is an already existing song file, with the same
        spotify URL in its\\n+            # metadata, but saved under a different
        name. If so, save its path.\\n+            dup_song_paths: List[Path] = self.known_songs.get(song.url,
        [])\\n+\\n+            # Remove files from the list that have the same path
        as the output file\\n+            dup_song_paths = [\\n+                dup_song_path\\n+
        \               for dup_song_path in dup_song_paths\\n+                if
        (dup_song_path.absolute() != output_file.absolute())\\n+                and
        dup_song_path.exists()\\n+            ]\\n+\\n+            file_exists = output_file.exists()
        or dup_song_paths\\n+            if not self.settings[\\\"scan_for_songs\\\"]:\\n+
        \               for file_extension in self.scan_formats:\\n+                    ext_path
        = output_file.with_suffix(f\\\".{file_extension}\\\")\\n+                    if
        ext_path.exists():\\n+                        dup_song_paths.append(ext_path)\\n+\\n+
        \           if dup_song_paths:\\n+                logger.debug(\\n+                    \\\"Found
        duplicate songs for %s at %s\\\",\\n+                    song.display_name,\\n+
        \                   dup_song_paths,\\n+                )\\n+\\n+            #
        If the file already exists and we don't want to overwrite it,\\n+            #
        we can skip the download\\n+            if file_exists and self.settings[\\\"overwrite\\\"]
        == \\\"skip\\\":\\n+                logger.info(\\n+                    \\\"Skipping
        %s (file already exists) %s\\\",\\n+                    song.display_name,\\n+
        \                   \\\"(duplicate)\\\" if dup_song_paths else \\\"\\\",\\n+
        \               )\\n+\\n+                display_progress_tracker.notify_download_skip()\\n+
        \               return song, output_file\\n+\\n+            # Check if we
        have all the metadata\\n+            # and that the song object is not a placeholder\\n+
        \           # If it's None extract the current metadata\\n+            # And
        reinitialize the song object\\n+            # Force song reinitialization
        if we are fetching albums\\n+            # they have most metadata but not
        all\\n+            if (\\n+                (song.name is None and song.url)\\n+
        \               or (self.settings[\\\"fetch_albums\\\"] and reinitialized
        is False)\\n+                or None\\n+                in [\\n+                    song.genres,\\n+
        \                   song.disc_count,\\n+                    song.tracks_count,\\n+
        \                   song.track_number,\\n+                    song.album_id,\\n+
        \                   song.album_artist,\\n+                ]\\n+            ):\\n+
        \               song = reinit_song(song)\\n+                reinitialized
        = True\\n+\\n+            # Don't skip if the file exists and overwrite is
        set to force\\n+            if file_exists and self.settings[\\\"overwrite\\\"]
        == \\\"force\\\":\\n+                logger.info(\\n+                    \\\"Overwriting
        %s %s\\\",\\n+                    song.display_name,\\n+                    \\\"
        (duplicate)\\\" if dup_song_paths else \\\"\\\",\\n+                )\\n+\\n+
        \               # If the duplicate song path is not None, we can delete the
        old file\\n+                for dup_song_path in dup_song_paths:\\n+                    try:\\n+
        \                       logger.info(\\\"Removing duplicate file: %s\\\", dup_song_path)\\n+\\n+
        \                       dup_song_path.unlink()\\n+                    except
        (PermissionError, OSError) as exc:\\n+                        logger.debug(\\n+
        \                           \\\"Could not remove duplicate file: %s, error:
        %s\\\",\\n+                            dup_song_path,\\n+                            exc,\\n+
        \                       )\\n+\\n+            # Find song lyrics and add them
        to the song object\\n             try:\\n-                downloaded_file_path_string
        = await self._perform_audio_download_async(\\n-                    converted_file_path.name.rsplit(\\\".\\\",
        1)[0],\\n-                    temp_folder,\\n-                    audio_handler,\\n-
        \                   song_object.youtube_link,\\n+                lyrics =
        self.search_lyrics(song)\\n+                if lyrics is None:\\n+                    logger.debug(\\n+
        \                       \\\"No lyrics found for %s, lyrics providers: %s\\\",\\n+
        \                       song.display_name,\\n+                        \\\",
        \\\".join(\\n+                            [lprovider.name for lprovider in
        self.lyrics_providers]\\n+                        ),\\n+                    )\\n+
        \               else:\\n+                    song.lyrics = lyrics\\n+            except
        Exception as exc:\\n+                logger.debug(\\\"Could not search for
        lyrics: %s\\\", exc)\\n+\\n+            # If the file already exists and we
        want to overwrite the metadata,\\n+            # we can skip the download\\n+
        \           if file_exists and self.settings[\\\"overwrite\\\"] == \\\"metadata\\\":\\n+
        \               most_recent_duplicate: Optional[Path] = None\\n+                if
        dup_song_paths:\\n+                    # Get the most recent duplicate song
        path and remove the rest\\n+                    most_recent_duplicate = max(\\n+
        \                       dup_song_paths,\\n+                        key=lambda
        dup_song_path: dup_song_path.stat().st_mtime,\\n+                    )\\n+\\n+
        \                   # Remove the rest of the duplicate song paths\\n+                    for
        old_song_path in dup_song_paths:\\n+                        if most_recent_duplicate
        == old_song_path:\\n+                            continue\\n+\\n+                        try:\\n+
        \                           logger.info(\\\"Removing duplicate file: %s\\\",
        old_song_path)\\n+                            old_song_path.unlink()\\n+                        except
        (PermissionError, OSError) as exc:\\n+                            logger.debug(\\n+
        \                               \\\"Could not remove duplicate file: %s, error:
        %s\\\",\\n+                                old_song_path,\\n+                                exc,\\n+
        \                           )\\n+\\n+                    # Move the old file
        to the new location\\n+                    if most_recent_duplicate:\\n+                        most_recent_duplicate.replace(\\n+
        \                           output_file.with_suffix(f\\\".{self.settings['format']}\\\")\\n+
        \                       )\\n+\\n+                # Update the metadata\\n+
        \               embed_metadata(output_file=output_file, song=song)\\n+\\n+
        \               logger.info(\\n+                    f\\\"Updated metadata
        for {song.display_name}\\\"\\n+                    f\\\", moved to new location:
        {output_file}\\\"\\n+                    if most_recent_duplicate\\n+                    else
        \\\"\\\"\\n                 )\\n-            except Exception:\\n-                print(\\n-
        \                   f'Unable to get audio stream for \\\"{song_object.song_name}\\\"
        '\\n-                    f'by \\\"{song_object.contributing_artists[0]}\\\"
        '\\n-                    f'from video \\\"{song_object.youtube_link}\\\"'\\n+\\n+
        \               display_progress_tracker.notify_complete()\\n+\\n+                return
        song, output_file\\n+\\n+            # Create the output directory if it doesn't
        exist\\n+            output_file.parent.mkdir(parents=True, exist_ok=True)\\n+
        \           if song.download_url is None:\\n+                download_url
        = self.search(song)\\n+            else:\\n+                download_url =
        song.download_url\\n+\\n+            # Initialize audio downloader\\n+            audio_downloader:
        Union[AudioProvider, Piped]\\n+            if self.settings[\\\"audio_providers\\\"][0]
        == \\\"piped\\\":\\n+                audio_downloader = Piped(\\n+                    output_format=self.settings[\\\"format\\\"],\\n+
        \                   cookie_file=self.settings[\\\"cookie_file\\\"],\\n+                    search_query=self.settings[\\\"search_query\\\"],\\n+
        \                   filter_results=self.settings[\\\"filter_results\\\"],\\n+
        \                   yt_dlp_args=self.settings[\\\"yt_dlp_args\\\"],\\n                 )\\n-
        \               return None\\n+            else:\\n+                audio_downloader
        = AudioProvider(\\n+                    output_format=self.settings[\\\"format\\\"],\\n+
        \                   cookie_file=self.settings[\\\"cookie_file\\\"],\\n+                    search_query=self.settings[\\\"search_query\\\"],\\n+
        \                   filter_results=self.settings[\\\"filter_results\\\"],\\n+
        \                   yt_dlp_args=self.settings[\\\"yt_dlp_args\\\"],\\n+                )\\n+\\n+
        \           logger.debug(\\\"Downloading %s using %s\\\", song.display_name,
        download_url)\\n \\n-            if downloaded_file_path_string is None:\\n-
        \               return None\\n+            # Add progress hook to the audio
        provider\\n+            audio_downloader.audio_handler.add_progress_hook(\\n+
        \               display_progress_tracker.yt_dlp_progress_hook\\n+            )\\n+\\n+
        \           download_info = audio_downloader.get_download_metadata(\\n+                download_url,
        download=True\\n+            )\\n \\n-            if display_progress_tracker:\\n-
        \               display_progress_tracker.notify_youtube_download_completion()\\n+
        \           temp_file = Path(\\n+                temp_folder / f\\\"{download_info['id']}.{download_info['ext']}\\\"\\n+
        \           )\\n \\n-            downloaded_file_path = Path(downloaded_file_path_string)\\n+
        \           if download_info is None:\\n+                logger.debug(\\n+
        \                   \\\"No download info found for %s, url: %s\\\",\\n+                    song.display_name,\\n+
        \                   download_url,\\n+                )\\n+\\n+                raise
        DownloaderError(\\n+                    f\\\"yt-dlp failed to get metadata
        for: {song.name} - {song.artist}\\\"\\n+                )\\n \\n+            display_progress_tracker.notify_download_complete()\\n+\\n+
        \           # Copy the downloaded file to the output file\\n+            #
        if the temp file and output file have the same extension\\n+            #
        and the bitrate is set to auto or disable\\n+            # Don't copy if the
        audio provider is piped\\n+            # unless the bitrate is set to disable\\n
        \            if (\\n-                downloaded_file_path.suffix == \\\".m4a\\\"\\n-
        \               and self.arguments[\\\"output_format\\\"] == \\\"m4a\\\"\\n+
        \               self.settings[\\\"bitrate\\\"] in [\\\"auto\\\", \\\"disable\\\",
        None]\\n+                and temp_file.suffix == output_file.suffix\\n+            )
        and not (\\n+                self.settings[\\\"audio_providers\\\"][0] ==
        \\\"piped\\\"\\n+                and self.settings[\\\"bitrate\\\"] != \\\"disable\\\"\\n
        \            ):\\n-                downloaded_file_path.rename(converted_file_path)\\n-
        \               ffmpeg_success = True\\n+                shutil.move(str(temp_file),
        output_file)\\n+                success = True\\n+                result =
        None\\n             else:\\n-                ffmpeg_success = await ffmpeg.convert(\\n-
        \                   downloaded_file_path=downloaded_file_path,\\n-                    converted_file_path=converted_file_path,\\n-
        \                   output_format=self.arguments[\\\"output_format\\\"],\\n-
        \                   ffmpeg_path=self.arguments[\\\"ffmpeg\\\"],\\n+                if
        self.settings[\\\"bitrate\\\"] in [\\\"auto\\\", None]:\\n+                    #
        Use the bitrate from the download info if it exists\\n+                    #
        otherwise use `copy`\\n+                    bitrate = (\\n+                        f\\\"{int(download_info['abr'])}k\\\"\\n+
        \                       if download_info.get(\\\"abr\\\")\\n+                        else
        \\\"copy\\\"\\n+                    )\\n+                elif self.settings[\\\"bitrate\\\"]
        == \\\"disable\\\":\\n+                    bitrate = None\\n+                else:\\n+
        \                   bitrate = str(self.settings[\\\"bitrate\\\"])\\n+\\n+
        \               # Convert the downloaded file to the output format\\n+                success,
        result = convert(\\n+                    input_file=temp_file,\\n+                    output_file=output_file,\\n+
        \                   ffmpeg=self.ffmpeg,\\n+                    output_format=self.settings[\\\"format\\\"],\\n+
        \                   bitrate=bitrate,\\n+                    ffmpeg_args=self.settings[\\\"ffmpeg_args\\\"],\\n+
        \                   progress_handler=display_progress_tracker.ffmpeg_progress_hook,\\n+
        \               )\\n+\\n+            # Remove the temp file\\n+            if
        temp_file.exists():\\n+                try:\\n+                    temp_file.unlink()\\n+
        \               except (PermissionError, OSError) as exc:\\n+                    logger.debug(\\n+
        \                       \\\"Could not remove temp file: %s, error: %s\\\",
        temp_file, exc\\n+                    )\\n+\\n+                    raise DownloaderError(\\n+
        \                       f\\\"Could not remove temp file: {temp_file}, possible
        duplicate song\\\"\\n+                    ) from exc\\n+\\n+            if
        not success and result:\\n+                # If the conversion failed and
        there is an error message\\n+                # create a file with the error
        message\\n+                # and save it in the errors directory\\n+                #
        raise an exception with file path\\n+                file_name = (\\n+                    get_errors_path()\\n+
        \                   / f\\\"ffmpeg_error_{datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}.txt\\\"\\n
        \                )\\n \\n-            if display_progress_tracker:\\n-                display_progress_tracker.notify_conversion_completion()\\n+
        \               error_message = \\\"\\\"\\n+                for key, value
        in result.items():\\n+                    error_message += f\\\"### {key}:\\\\n{str(value).strip()}\\\\n\\\\n\\\"\\n
        \\n-            if ffmpeg_success is False:\\n-                # delete the
        file that wasn't successfully converted\\n-                converted_file_path.unlink()\\n-
        \           else:\\n-                # if a file was successfully downloaded,
        tag it\\n-                set_id3_data(\\n-                    converted_file_path,
        song_object, self.arguments[\\\"output_format\\\"]\\n+                with
        open(file_name, \\\"w\\\", encoding=\\\"utf-8\\\") as error_path:\\n+                    error_path.write(error_message)\\n+\\n+
        \               # Remove the file that failed to convert\\n+                if
        output_file.exists():\\n+                    output_file.unlink()\\n+\\n+
        \               raise FFmpegError(\\n+                    f\\\"Failed to convert
        {song.display_name}, \\\"\\n+                    f\\\"you can find error here:
        {str(file_name.absolute())}\\\"\\n                 )\\n \\n-            #
        Do the necessary cleanup\\n-            if display_progress_tracker:\\n-                display_progress_tracker.notify_download_completion()\\n+
        \           download_info[\\\"filepath\\\"] = str(output_file)\\n \\n-            if
        self.download_tracker:\\n-                self.download_tracker.notify_download_completion(song_object)\\n+
        \           # Set the song's download url\\n+            if song.download_url
        is None:\\n+                song.download_url = download_url\\n \\n-            #
        delete the unnecessary YouTube download File\\n-            if downloaded_file_path
        and downloaded_file_path.is_file():\\n-                downloaded_file_path.unlink()\\n+
        \           display_progress_tracker.notify_conversion_complete()\\n \\n-
        \       except Exception as e:\\n-            tb = traceback.format_exc()\\n-
        \           if display_progress_tracker:\\n-                display_progress_tracker.notify_error(e,
        tb)\\n-            else:\\n-                raise e\\n+            # SponsorBlock
        post processor\\n+            if self.settings[\\\"sponsor_block\\\"]:\\n+
        \               # Initialize the sponsorblock post processor\\n+                post_processor
        = SponsorBlockPP(\\n+                    audio_downloader.audio_handler, SPONSOR_BLOCK_CATEGORIES\\n+
        \               )\\n \\n-    async def _perform_audio_download_async(\\n-
        \       self, converted_file_name, temp_folder, track_audio_stream, youtube_link\\n-
        \   ):\\n-        # ! The following function calls blocking code, which would
        block whole event loop.\\n-        # ! Therefore it has to be called in a
        separate thread via ThreadPoolExecutor. This\\n-        # ! is not a problem,
        since GIL is released for the I/O operations, so it shouldn't\\n-        #
        ! hurt performance.\\n-        return await self.loop.run_in_executor(\\n-
        \           self.thread_executor,\\n-            self._perform_audio_download,\\n-
        \           converted_file_name,\\n-            temp_folder,\\n-            track_audio_stream,\\n-
        \           youtube_link,\\n-        )\\n+                # Run the post processor
        to get the sponsor segments\\n+                _, download_info = post_processor.run(download_info)\\n+
        \               chapters = download_info[\\\"sponsorblock_chapters\\\"]\\n
        \\n-    def _perform_audio_download(\\n-        self, converted_file_name,
        temp_folder, audio_handler, youtube_link\\n-    ):\\n-        # ! The actual
        download, if there is any error, it'll be here,\\n-        try:\\n-            data
        = audio_handler.extract_info(youtube_link)\\n-            # ! This is equivalent
        to a failed download, we do nothing, the song remains on\\n-            #
        ! download_trackers download queue and all is well...\\n-            return
        Path(temp_folder / f\\\"{data['id']}.{data['ext']}\\\")\\n-        except
        Exception as e:\\n-            temp_files = Path(temp_folder).glob(f\\\"{converted_file_name}.*\\\")\\n-
        \           for temp_file in temp_files:\\n-                temp_file.unlink()\\n-
        \           raise e\\n+                # If there are sponsor segments, remove
        them\\n+                if len(chapters) > 0:\\n+                    logger.info(\\n+
        \                       \\\"Removing %s sponsor segments for %s\\\",\\n+                        len(chapters),\\n+
        \                       song.display_name,\\n+                    )\\n+\\n+
        \                   # Initialize the modify chapters post processor\\n+                    modify_chapters
        = ModifyChaptersPP(\\n+                        downloader=audio_downloader.audio_handler,\\n+
        \                       remove_sponsor_segments=SPONSOR_BLOCK_CATEGORIES,\\n+
        \                   )\\n+\\n+                    # Run the post processor
        to remove the sponsor segments\\n+                    # this returns a list
        of files to delete\\n+                    files_to_delete, download_info =
        modify_chapters.run(download_info)\\n+\\n+                    # Delete the
        files that were created by the post processor\\n+                    for file_to_delete
        in files_to_delete:\\n+                        Path(file_to_delete).unlink()\\n+\\n+
        \           try:\\n+                embed_metadata(output_file, song, self.settings[\\\"id3_separator\\\"])\\n+
        \           except Exception as exception:\\n+                raise MetadataError(\\n+
        \                   \\\"Failed to embed metadata to the song\\\"\\n+                )
        from exception\\n+\\n+            if self.settings[\\\"generate_lrc\\\"]:\\n+
        \               generate_lrc(song, output_file)\\n+\\n+            display_progress_tracker.notify_complete()\\n+\\n+
        \           # Add the song to the known songs\\n+            self.known_songs.get(song.url,
        []).append(output_file)\\n+\\n+            logger.info('Downloaded \\\"%s\\\":
        %s', song.display_name, song.download_url)\\n+\\n+            return song,
        output_file\\n+        except (Exception, UnicodeEncodeError) as exception:\\n+
        \           if isinstance(exception, UnicodeEncodeError):\\n+                exception_cause
        = exception\\n+                exception = DownloaderError(\\n+                    \\\"You
        may need to add PYTHONIOENCODING=utf-8 to your environment\\\"\\n+                )\\n+\\n+
        \               exception.__cause__ = exception_cause\\n+\\n+            display_progress_tracker.notify_error(\\n+
        \               traceback.format_exc(), exception, True\\n+            )\\n+
        \           self.errors.append(\\n+                f\\\"{song.url} - {exception.__class__.__name__}:
        {exception}\\\"\\n+            )\\n+            return song, None\"},{\"sha\":\"2555113e3d24b7c86ae1aee49a249d703002b386\",\"filename\":\"spotdl/download/embed_metadata.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":301,\"changes\":301,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fembed_metadata.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fembed_metadata.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fembed_metadata.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,301 +0,0 @@\\n-import base64\\n-from pathlib import Path\\n-\\n-from urllib.request
        import urlopen\\n-from mutagen.oggopus import OggOpus\\n-from mutagen.mp4
        import MP4, MP4Cover\\n-from mutagen.flac import Picture, FLAC\\n-from mutagen.oggvorbis
        import OggVorbis\\n-from mutagen.easyid3 import EasyID3, ID3\\n-from mutagen.id3
        import APIC as AlbumCover, USLT, COMM as Comment\\n-\\n-from spotdl.search
        import SongObject\\n-\\n-\\n-# Apple has specific tags - see mutagen docs
        -\\n-# http://mutagen.readthedocs.io/en/latest/api/mp4.html\\n-M4A_TAG_PRESET
        = {\\n-    \\\"album\\\": \\\"\\\\xa9alb\\\",\\n-    \\\"artist\\\": \\\"\\\\xa9ART\\\",\\n-
        \   \\\"date\\\": \\\"\\\\xa9day\\\",\\n-    \\\"title\\\": \\\"\\\\xa9nam\\\",\\n-
        \   \\\"year\\\": \\\"\\\\xa9day\\\",\\n-    \\\"originaldate\\\": \\\"purd\\\",\\n-
        \   \\\"comment\\\": \\\"\\\\xa9cmt\\\",\\n-    \\\"group\\\": \\\"\\\\xa9grp\\\",\\n-
        \   \\\"writer\\\": \\\"\\\\xa9wrt\\\",\\n-    \\\"genre\\\": \\\"\\\\xa9gen\\\",\\n-
        \   \\\"tracknumber\\\": \\\"trkn\\\",\\n-    \\\"albumartist\\\": \\\"aART\\\",\\n-
        \   \\\"discnumber\\\": \\\"disk\\\",\\n-    \\\"cpil\\\": \\\"cpil\\\",\\n-
        \   \\\"albumart\\\": \\\"covr\\\",\\n-    \\\"copyright\\\": \\\"cprt\\\",\\n-
        \   \\\"tempo\\\": \\\"tmpo\\\",\\n-    \\\"lyrics\\\": \\\"\\\\xa9lyr\\\",\\n-
        \   \\\"explicit\\\": \\\"rtng\\\",\\n-}\\n-\\n-TAG_PRESET = {key: key for
        key in M4A_TAG_PRESET}\\n-\\n-\\n-def _set_id3_mp3(converted_file_path: str,
        song_object: SongObject):\\n-    # embed song details\\n-    # ! we save tags
        as both ID3 v2.3 and v2.4\\n-    # ! The simple ID3 tags\\n-    audio_file
        = EasyID3(converted_file_path)\\n-\\n-    audio_file = _embed_mp3_metadata(audio_file,
        song_object)\\n-\\n-    # ! save as both ID3 v2.3 & v2.4 as v2.3 isn't fully
        features and\\n-    # ! windows doesn't support v2.4 until later versions
        of Win10\\n-    audio_file.save(v2_version=3)\\n-\\n-    audio_file = _embed_mp3_cover(audio_file,
        song_object, converted_file_path)\\n-    audio_file = _embed_mp3_lyrics(audio_file,
        song_object)\\n-    # ! setting song links as comment (helpful for devs)\\n-
        \   audio_file.add(Comment(encoding=3, text=song_object.youtube_link))\\n-\\n-
        \   audio_file.save(v2_version=3)\\n-\\n-\\n-def _set_id3_m4a(converted_file_path:
        str, song_object: SongObject):\\n-    # embed song details\\n-    # ! we save
        tags as both ID3 v2.3 and v2.4\\n-    # ! The simple ID3 tags\\n-    audio_file
        = MP4(converted_file_path)\\n-\\n-    audio_file = _embed_basic_metadata(audio_file,
        song_object, \\\"m4a\\\", M4A_TAG_PRESET)\\n-    audio_file = _embed_m4a_metadata(audio_file,
        song_object)\\n-\\n-    audio_file.save()\\n-\\n-\\n-def _set_id3_flac(converted_file_path:
        str, song_object: SongObject):\\n-    audio_file = FLAC(converted_file_path)\\n-\\n-
        \   audio_file = _embed_basic_metadata(audio_file, song_object, \\\"flac\\\")\\n-
        \   audio_file = _embed_ogg_metadata(audio_file, song_object)\\n-    audio_file
        = _embed_cover(audio_file, song_object, \\\"flac\\\")\\n-\\n-    audio_file.save()\\n-\\n-\\n-def
        _set_id3_opus(converted_file_path: str, song_object: SongObject):\\n-    audio_file
        = OggOpus(converted_file_path)\\n-\\n-    audio_file = _embed_basic_metadata(audio_file,
        song_object, \\\"opus\\\")\\n-    audio_file = _embed_ogg_metadata(audio_file,
        song_object)\\n-    audio_file = _embed_cover(audio_file, song_object, \\\"opus\\\")\\n-\\n-
        \   audio_file.save()\\n-\\n-\\n-def _set_id3_ogg(converted_file_path: str,
        song_object: SongObject):\\n-    audio_file = OggVorbis(converted_file_path)\\n-\\n-
        \   audio_file = _embed_basic_metadata(audio_file, song_object, \\\"ogg\\\")\\n-
        \   audio_file = _embed_ogg_metadata(audio_file, song_object)\\n-    audio_file
        = _embed_cover(audio_file, song_object, \\\"ogg\\\")\\n-\\n-    audio_file.save()\\n-\\n-\\n-def
        _embed_mp3_metadata(audio_file, song_object: SongObject):\\n-\\n-    # ! Get
        rid of all existing ID3 tags (if any exist)\\n-    audio_file.delete()\\n-\\n-
        \   # ! song name\\n-    audio_file[\\\"title\\\"] = song_object.song_name\\n-
        \   audio_file[\\\"titlesort\\\"] = song_object.song_name\\n-\\n-    # ! track
        number\\n-    audio_file[\\\"tracknumber\\\"] = str(song_object.track_number)\\n-\\n-
        \   # ! disc number\\n-    audio_file[\\\"discnumber\\\"] = str(song_object.disc_number)\\n-\\n-
        \   # ! genres (pretty pointless if you ask me)\\n-    # ! we only apply the
        first available genre as ID3 v2.3 doesn't support multiple\\n-    # ! genres
        and ~80% of the world PC's run Windows - an OS with no ID3 v2.4 support\\n-
        \   genres = song_object.genres\\n-    if len(genres) > 0:\\n-        audio_file[\\\"genre\\\"]
        = genres[0]\\n-\\n-    # ! all involved artists\\n-    audio_file[\\\"artist\\\"]
        = song_object.contributing_artists\\n-\\n-    # ! album name\\n-    audio_file[\\\"album\\\"]
        = song_object.album_name\\n-\\n-    # ! album artist (all of 'em)\\n-    audio_file[\\\"albumartist\\\"]
        = song_object.album_artists\\n-\\n-    # ! album release date (to what ever
        precision available)\\n-    audio_file[\\\"date\\\"] = song_object.album_release\\n-
        \   audio_file[\\\"originaldate\\\"] = song_object.album_release\\n-\\n-    return
        audio_file\\n-\\n-\\n-def _embed_mp3_cover(audio_file, song_object, converted_file_path):\\n-
        \   # ! setting the album art\\n-    audio_file = ID3(converted_file_path)\\n-
        \   if song_object.album_cover_url:\\n-        rawAlbumArt = urlopen(song_object.album_cover_url).read()\\n-
        \       audio_file[\\\"APIC\\\"] = AlbumCover(\\n-            encoding=3,
        mime=\\\"image/jpeg\\\", type=3, desc=\\\"Cover\\\", data=rawAlbumArt\\n-
        \       )\\n-\\n-    return audio_file\\n-\\n-\\n-def _embed_mp3_lyrics(audio_file,
        song_object):\\n-    # ! setting the lyrics\\n-    lyrics = song_object.lyrics\\n-
        \   if not lyrics:\\n-        return audio_file\\n-\\n-    USLTOutput = USLT(encoding=3,
        lang=\\\"eng\\\", desc=\\\"desc\\\", text=lyrics)\\n-    audio_file[\\\"USLT::'eng'\\\"]
        = USLTOutput\\n-\\n-    return audio_file\\n-\\n-\\n-def _embed_m4a_metadata(audio_file,
        song_object: SongObject):\\n-    # set year\\n-    years = song_object.album_release.split(\\\"-\\\")\\n-
        \   if len(years) >= 1:\\n-        audio_file[M4A_TAG_PRESET[\\\"year\\\"]]
        = years[0]\\n-\\n-    # set youtube link as comment\\n-    youtube_link =
        song_object.youtube_link\\n-    if youtube_link:\\n-        audio_file[M4A_TAG_PRESET[\\\"comment\\\"]]
        = youtube_link\\n-\\n-    # set lyrics\\n-    lyrics = song_object.lyrics\\n-
        \   if lyrics:\\n-        audio_file[M4A_TAG_PRESET[\\\"lyrics\\\"]] = lyrics\\n-\\n-
        \   # Explicit values: Dirty: 4, Clean: 2, None: 0\\n-    audio_file[M4A_TAG_PRESET[\\\"explicit\\\"]]
        = (0,)\\n-    if song_object.album_cover_url:\\n-        try:\\n-            audio_file[M4A_TAG_PRESET[\\\"albumart\\\"]]
        = [\\n-                MP4Cover(\\n-                    urlopen(song_object.album_cover_url).read(),\\n-
        \                   imageformat=MP4Cover.FORMAT_JPEG,\\n-                )\\n-
        \           ]\\n-        except IndexError:\\n-            pass\\n-\\n-    return
        audio_file\\n-\\n-\\n-def _embed_basic_metadata(\\n-    audio_file, song_object:
        SongObject, encoding, preset=TAG_PRESET\\n-):\\n-\\n-    # set main artist\\n-
        \   artists = song_object.contributing_artists\\n-    if len(artists):\\n-
        \       audio_file[preset[\\\"artist\\\"]] = artists[0]\\n-        audio_file[preset[\\\"albumartist\\\"]]
        = artists[0]\\n-\\n-    # set song title\\n-    song_title = song_object.song_name\\n-
        \   if song_title:\\n-        audio_file[preset[\\\"title\\\"]] = song_title\\n-\\n-
        \   # set album name\\n-    album_name = song_object.album_name\\n-    if
        album_name:\\n-        audio_file[preset[\\\"album\\\"]] = album_name\\n-\\n-
        \   # set release data\\n-    release_data = song_object.album_release\\n-
        \   if release_data:\\n-        audio_file[preset[\\\"date\\\"]] = release_data\\n-
        \       audio_file[preset[\\\"originaldate\\\"]] = release_data\\n-\\n-    #
        set genre\\n-    genres = song_object.genres\\n-    if len(genres) >= 1:\\n-
        \       audio_file[preset[\\\"genre\\\"]] = genres[0]\\n-\\n-    # set disc
        number\\n-    disc_number = song_object.disc_number\\n-    if disc_number:\\n-
        \       if encoding in [\\\"flac\\\", \\\"ogg\\\", \\\"opus\\\"]:\\n-            audio_file[preset[\\\"discnumber\\\"]]
        = str(disc_number)\\n-        else:\\n-            audio_file[preset[\\\"discnumber\\\"]]
        = [(disc_number, 0)]\\n-\\n-    # set track number\\n-    track_number = song_object.track_number\\n-
        \   if track_number:\\n-        if encoding in [\\\"flac\\\", \\\"ogg\\\",
        \\\"opus\\\"]:\\n-            audio_file[preset[\\\"tracknumber\\\"]] = str(track_number)\\n-
        \       else:\\n-            audio_file[preset[\\\"tracknumber\\\"]] = [(track_number,
        0)]\\n-\\n-    return audio_file\\n-\\n-\\n-def _embed_ogg_metadata(audio_file,
        song_object: SongObject):\\n-    # set year\\n-    years = song_object.album_release.split(\\\"-\\\")\\n-
        \   if len(years) >= 1:\\n-        audio_file[\\\"year\\\"] = years[0]\\n-\\n-
        \   # set youtube link as comment\\n-    youtube_link = song_object.youtube_link\\n-
        \   if youtube_link:\\n-        audio_file[\\\"comment\\\"] = youtube_link\\n-\\n-
        \   # set lyrics\\n-    lyrics = song_object.lyrics\\n-    if lyrics:\\n-
        \       audio_file[\\\"lyrics\\\"] = lyrics\\n-\\n-    return audio_file\\n-\\n-\\n-def
        _embed_cover(audio_file, song_object, encoding):\\n-    if song_object.album_cover_url
        is None:\\n-        return audio_file\\n-\\n-    image = Picture()\\n-    image.type
        = 3\\n-    image.desc = \\\"Cover\\\"\\n-    image.mime = \\\"image/jpeg\\\"\\n-
        \   image.data = urlopen(song_object.album_cover_url).read()\\n-\\n-    if
        encoding == \\\"flac\\\":\\n-        audio_file.add_picture(image)\\n-    elif
        encoding in [\\\"ogg\\\", \\\"opus\\\"]:\\n-        # From the Mutagen docs
        (https://mutagen.readthedocs.io/en/latest/user/vcomment.html)\\n-        image_data
        = image.write()\\n-        encoded_data = base64.b64encode(image_data)\\n-
        \       vcomment_value = encoded_data.decode(\\\"ascii\\\")\\n-        audio_file[\\\"metadata_block_picture\\\"]
        = [vcomment_value]\\n-\\n-    return audio_file\\n-\\n-\\n-SET_ID3_FUNCTIONS
        = {\\n-    \\\"mp3\\\": _set_id3_mp3,\\n-    \\\"flac\\\": _set_id3_flac,\\n-
        \   \\\"opus\\\": _set_id3_opus,\\n-    \\\"ogg\\\": _set_id3_ogg,\\n-    \\\"m4a\\\":
        _set_id3_m4a,\\n-}\\n-\\n-\\n-def set_id3_data(converted_file_path, song_object,
        output_format):\\n-    function = SET_ID3_FUNCTIONS.get(output_format)\\n-
        \   if function:\\n-        function(converted_file_path, song_object)\"},{\"sha\":\"ea391a0a4578075fb264486f446aba19abf74349\",\"filename\":\"spotdl/download/ffmpeg.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":136,\"changes\":136,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fffmpeg.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,136 +0,0 @@\\n-import asyncio\\n-import subprocess\\n-import sys\\n-import
        re\\n-\\n-\\n-def has_correct_version(\\n-    skip_version_check: bool = False,
        ffmpeg_path: str = \\\"ffmpeg\\\"\\n-) -> bool:\\n-    try:\\n-        process
        = subprocess.Popen(\\n-            [ffmpeg_path, \\\"-version\\\"],\\n-            stdout=subprocess.PIPE,\\n-
        \           stderr=subprocess.PIPE,\\n-            encoding=\\\"utf-8\\\",\\n-
        \       )\\n-    except FileNotFoundError:\\n-        print(\\\"FFmpeg was
        not found, spotDL cannot continue.\\\", file=sys.stderr)\\n-        return
        False\\n-\\n-    output = \\\"\\\".join(process.communicate())\\n-\\n-    #
        remove all non numeric characters from string example: n4.3\\n-    if skip_version_check:\\n-
        \       return True\\n-\\n-    result = re.search(r\\\"ffmpeg version \\\\w?(\\\\d+\\\\.)?(\\\\d+)\\\",
        output)\\n-\\n-    # fallback to copyright date check\\n-    if result is
        not None:\\n-        version_str = result.group(0)\\n-\\n-        # remove
        all non numeric characters from string example: n4.3\\n-        version_str
        = re.sub(r\\\"[a-zA-Z]\\\", \\\"\\\", version_str)\\n-        version = float(version_str)\\n-\\n-
        \       if version < 4.2:\\n-            print(\\n-                f\\\"Your
        FFmpeg installation is too old ({version}), please update to 4.2+\\\\n\\\",\\n-
        \               file=sys.stderr,\\n-            )\\n-            return False\\n-\\n-
        \       return True\\n-    else:\\n-        # fallback to copyright date check\\n-
        \       date_result = re.search(r\\\"Copyright \\\\(c\\\\) \\\\d\\\\d\\\\d\\\\d\\\\-202\\\\d\\\",
        output)\\n-\\n-        if date_result is not None:\\n-            return True\\n-\\n-
        \       print(\\\"Your FFmpeg version couldn't be detected\\\", file=sys.stderr)\\n-
        \       return False\\n-\\n-\\n-async def convert(\\n-    downloaded_file_path,
        converted_file_path, ffmpeg_path, output_format\\n-) -> bool:\\n-    # ! '-abr
        true' automatically determines and passes the\\n-    # ! audio encoding bitrate
        to the filters and encoder. This ensures that the\\n-    # ! sampled length
        of songs matches the actual length (i.e. a 5 min song won't display\\n-    #
        ! as 47 seconds long in your music player, yeah that was an issue earlier.)\\n-\\n-
        \   downloaded_file_path = str(downloaded_file_path.absolute())\\n-    converted_file_path
        = str(converted_file_path.absolute())\\n-\\n-    formats = {\\n-        \\\"mp3\\\":
        [\\\"-codec:a\\\", \\\"libmp3lame\\\"],\\n-        \\\"flac\\\": [\\\"-codec:a\\\",
        \\\"flac\\\"],\\n-        \\\"ogg\\\": [\\\"-codec:a\\\", \\\"libvorbis\\\"],\\n-
        \       \\\"opus\\\": [\\\"-vn\\\", \\\"-c:a\\\", \\\"copy\\\"]\\n-        if
        downloaded_file_path.endswith(\\\".webm\\\")\\n-        else [\\\"-c:a\\\",
        \\\"libopus\\\"],\\n-        \\\"m4a\\\": [\\\"-codec:a\\\", \\\"aac\\\",
        \\\"-vn\\\"],\\n-        \\\"wav\\\": [],\\n-    }\\n-\\n-    bitrates = {\\n-
        \       \\\"mp3\\\": [\\\"-q:a\\\", \\\"0\\\"],\\n-        \\\"flac\\\": [],\\n-
        \       \\\"ogg\\\": [\\\"-q:a\\\", \\\"5\\\"],\\n-        \\\"opus\\\": []
        if downloaded_file_path.endswith(\\\".webm\\\") else [\\\"-b:a\\\", \\\"160K\\\"],\\n-
        \       \\\"m4a\\\": [] if downloaded_file_path.endswith(\\\".m4a\\\") else
        [\\\"-b:a\\\", \\\"160K\\\"],\\n-        \\\"wav\\\": [],\\n-    }\\n-\\n-
        \   if output_format is None:\\n-        output_format_command = formats[\\\"mp3\\\"]\\n-
        \       output_bitrate = bitrates[\\\"mp3\\\"]\\n-    else:\\n-        output_format_command
        = formats[output_format]\\n-        output_bitrate = bitrates[output_format]\\n-\\n-
        \   if ffmpeg_path is None:\\n-        ffmpeg_path = \\\"ffmpeg\\\"\\n-\\n-
        \   arguments = [  # type: ignore\\n-        \\\"-i\\\",\\n-        downloaded_file_path,\\n-
        \       *output_format_command,\\n-        \\\"-abr\\\",\\n-        \\\"true\\\",\\n-
        \       *output_bitrate,\\n-        \\\"-v\\\",\\n-        \\\"debug\\\",\\n-
        \       converted_file_path,\\n-    ]\\n-\\n-    process = await asyncio.subprocess.create_subprocess_exec(\\n-
        \       ffmpeg_path,\\n-        *arguments,\\n-        stdout=asyncio.subprocess.PIPE,\\n-
        \       stderr=asyncio.subprocess.PIPE,\\n-    )\\n-\\n-    proc_out = await
        process.communicate()\\n-\\n-    if proc_out[0] or proc_out[1]:\\n-        out
        = str(b\\\"\\\".join(proc_out))\\n-    else:\\n-        out = \\\"\\\"\\n-\\n-
        \   if process.returncode != 0:\\n-        message = (\\n-            f\\\"ffmpeg
        returned an error ({process.returncode})\\\"\\n-            f'\\\\nffmpeg
        arguments: \\\"{\\\" \\\".join(arguments)}\\\"'\\n-            \\\"\\\\nffmpeg
        gave this output:\\\"\\n-            \\\"\\\\n=====\\\\n\\\"\\n-            f\\\"{out}\\\"\\n-
        \           \\\"\\\\n=====\\\\n\\\"\\n-        )\\n-\\n-        print(message,
        file=sys.stderr)\\n-        return False\\n-\\n-    return True\"},{\"sha\":\"49c15d783d035ea7e6814accd706ec19ef8d2ce6\",\"filename\":\"spotdl/download/progress_handler.py\",\"status\":\"added\",\"additions\":440,\"deletions\":0,\"changes\":440,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fdownload%2Fprogress_handler.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fdownload%2Fprogress_handler.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fprogress_handler.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,440 @@\\n+\\\"\\\"\\\"\\n+Module that holds the ProgressHandler class
        and Song Tracker class.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from typing
        import Any, Callable, Dict, List, Optional\\n+\\n+from rich import get_console\\n+from
        rich.console import JustifyMethod, OverflowMethod\\n+from rich.highlighter
        import Highlighter\\n+from rich.markup import escape\\n+from rich.progress
        import (\\n+    BarColumn,\\n+    Progress,\\n+    ProgressColumn,\\n+    Task,\\n+
        \   TaskID,\\n+    TimeRemainingColumn,\\n+)\\n+from rich.style import StyleType\\n+from
        rich.text import Text\\n+\\n+from spotdl.types.song import Song\\n+from spotdl.utils.static
        import BAD_CHARS\\n+\\n+__all__ = [\\n+    \\\"ProgressHandler\\\",\\n+    \\\"SongTracker\\\",\\n+
        \   \\\"ProgressHandlerError\\\",\\n+    \\\"SizedTextColumn\\\",\\n+]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class ProgressHandlerError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions raised by ProgressHandler
        subclasses.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+class SizedTextColumn(ProgressColumn):\\n+
        \   \\\"\\\"\\\"\\n+    Custom sized text column based on the Rich library.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+        text_format:
        str,\\n+        style: StyleType = \\\"none\\\",\\n+        justify: JustifyMethod
        = \\\"left\\\",\\n+        markup: bool = True,\\n+        highlighter: Optional[Highlighter]
        = None,\\n+        overflow: Optional[OverflowMethod] = None,\\n+        width:
        int = 20,\\n+    ) -> None:\\n+        \\\"\\\"\\\"\\n+        A column containing
        text.\\n+\\n+        ### Arguments\\n+        - text_format: The format string
        to use for the text.\\n+        - style: The style to use for the text.\\n+
        \       - justify: The justification to use for the text.\\n+        - markup:
        Whether or not the text should be rendered as markup.\\n+        - highlighter:
        A Highlighter to use for highlighting the text.\\n+        - overflow: The
        overflow method to use for truncating the text.\\n+        - width: The maximum
        width of the text.\\n+        \\\"\\\"\\\"\\n+\\n+        self.text_format
        = text_format\\n+        self.justify: JustifyMethod = justify\\n+        self.style
        = style\\n+        self.markup = markup\\n+        self.highlighter = highlighter\\n+
        \       self.overflow: Optional[OverflowMethod] = overflow\\n+        self.width
        = width\\n+        super().__init__()\\n+\\n+    def render(self, task: Task)
        -> Text:\\n+        \\\"\\\"\\\"\\n+        Render the Column.\\n+\\n+        ###
        Arguments\\n+        - task: The Task to render.\\n+\\n+        ### Returns\\n+
        \       - A Text object.\\n+        \\\"\\\"\\\"\\n+\\n+        _text = self.text_format.format(task=task)\\n+
        \       if self.markup:\\n+            text = Text.from_markup(_text, style=self.style,
        justify=self.justify)\\n+        else:\\n+            text = Text(_text, style=self.style,
        justify=self.justify)\\n+        if self.highlighter:\\n+            self.highlighter.highlight(text)\\n+\\n+
        \       text.truncate(max_width=self.width, overflow=self.overflow, pad=True)\\n+
        \       return text\\n+\\n+\\n+class ProgressHandler:\\n+    \\\"\\\"\\\"\\n+
        \   Class for handling the progress of a download, including the progress
        bar.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+        simple_tui:
        bool = False,\\n+        update_callback: Optional[Callable[[Any, str], None]]
        = None,\\n+        web_ui: bool = False,\\n+    ):\\n+        \\\"\\\"\\\"\\n+
        \       Initialize the progress handler.\\n+\\n+        ### Arguments\\n+
        \       - simple_tui: Whether or not to use the simple TUI.\\n+        - update_callback:
        A callback to call when the progress bar is updated.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.songs: List[Song] = []\\n+        self.song_count: int = 0\\n+
        \       self.overall_progress = 0\\n+        self.overall_total = 100\\n+
        \       self.overall_completed_tasks = 0\\n+        self.update_callback =
        update_callback\\n+        self.previous_overall = self.overall_completed_tasks\\n+\\n+
        \       self.simple_tui = simple_tui\\n+        self.web_ui = web_ui\\n+        self.quiet
        = logger.getEffectiveLevel() < 10\\n+        self.overall_task_id: Optional[TaskID]
        = None\\n+\\n+        if not self.simple_tui:\\n+            console = get_console()\\n+\\n+
        \           self.rich_progress_bar = Progress(\\n+                SizedTextColumn(\\n+
        \                   \\\"[white]{task.description}\\\",\\n+                    overflow=\\\"ellipsis\\\",\\n+
        \                   width=int(console.width / 3),\\n+                ),\\n+
        \               SizedTextColumn(\\n+                    \\\"{task.fields[message]}\\\",
        width=18, style=\\\"nonimportant\\\"\\n+                ),\\n+                BarColumn(bar_width=None,
        finished_style=\\\"green\\\"),\\n+                \\\"[progress.percentage]{task.percentage:>3.0f}%\\\",\\n+
        \               TimeRemainingColumn(),\\n+                # Normally when
        you exit the progress context manager (or call stop())\\n+                #
        the last refreshed display remains in the terminal with the cursor on\\n+
        \               # the following line. You can also make the progress display
        disappear on\\n+                # exit by setting transient=True on the Progress
        constructor\\n+                transient=True,\\n+            )\\n+\\n+            #
        Basically a wrapper for rich's: with ... as ...\\n+            self.rich_progress_bar.__enter__()\\n+\\n+
        \   def add_song(self, song: Song) -> None:\\n+        \\\"\\\"\\\"\\n+        Adds
        a song to the list of songs.\\n+\\n+        ### Arguments\\n+        - song:
        The song to add.\\n+        \\\"\\\"\\\"\\n+\\n+        self.songs.append(song)\\n+
        \       self.set_song_count(len(self.songs))\\n+\\n+    def set_songs(self,
        songs: List[Song]) -> None:\\n+        \\\"\\\"\\\"\\n+        Sets the list
        of songs to be downloaded.\\n+\\n+        ### Arguments\\n+        - songs:
        The list of songs to download.\\n+        \\\"\\\"\\\"\\n+\\n+        self.songs
        = songs\\n+        self.set_song_count(len(songs))\\n+\\n+    def set_song_count(self,
        count: int) -> None:\\n+        \\\"\\\"\\\"\\n+        Set the number of
        songs to download.\\n+\\n+        ### Arguments\\n+        - count: The number
        of songs to download.\\n+        \\\"\\\"\\\"\\n+\\n+        self.song_count
        = count\\n+        self.overall_total = 100 * count\\n+\\n+        if not
        self.simple_tui:\\n+            if self.song_count > 4:\\n+                self.overall_task_id
        = self.rich_progress_bar.add_task(\\n+                    description=\\\"Total\\\",\\n+
        \                   message=(\\n+                        f\\\"{self.overall_completed_tasks}/{int(self.overall_total
        / 100)} \\\"\\n+                        \\\"complete\\\"\\n+                    ),\\n+
        \                   total=self.overall_total,\\n+                    visible=(not
        self.quiet),\\n+                )\\n+\\n+    def update_overall(self) -> None:\\n+
        \       \\\"\\\"\\\"\\n+        Update the overall progress bar.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if not self.simple_tui:\\n+            # If the overall progress bar
        exists\\n+            if self.overall_task_id is not None:\\n+                self.rich_progress_bar.update(\\n+
        \                   self.overall_task_id,\\n+                    message=f\\\"{self.overall_completed_tasks}/\\\"\\n+
        \                   f\\\"{int(self.overall_total / 100)} \\\"\\n+                    \\\"complete\\\",\\n+
        \                   completed=self.overall_progress,\\n+                )\\n+
        \       else:\\n+            if self.previous_overall != self.overall_completed_tasks:\\n+
        \               logger.info(\\n+                    \\\"%s/%s complete\\\",
        self.overall_completed_tasks, self.song_count\\n+                )\\n+                self.previous_overall
        = self.overall_completed_tasks\\n+\\n+    def get_new_tracker(self, song:
        Song) -> \\\"SongTracker\\\":\\n+        \\\"\\\"\\\"\\n+        Get a new
        progress tracker.\\n+\\n+        ### Arguments\\n+        - song: The song
        to track.\\n+\\n+        ### Returns\\n+        - A new progress tracker.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        return SongTracker(self, song)\\n+\\n+
        \   def close(self) -> None:\\n+        \\\"\\\"\\\"\\n+        Close the
        Tui Progress Handler.\\n+        \\\"\\\"\\\"\\n+\\n+        if not self.simple_tui:\\n+
        \           self.rich_progress_bar.stop()\\n+\\n+        logging.shutdown()\\n+\\n+\\n+class
        SongTracker:\\n+    \\\"\\\"\\\"\\n+    Class to track the progress of a song.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    def __init__(self, parent, song: Song) -> None:\\n+
        \       \\\"\\\"\\\"\\n+        Initialize the Tui Song Tracker.\\n+\\n+        ###
        Arguments\\n+        - parent: The parent Tui Progress Handler.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.parent: \\\"ProgressHandler\\\" = parent\\n+        self.song
        = song\\n+\\n+        # Clean up the song name\\n+        # from weird unicode
        characters\\n+        self.song_name = \\\"\\\".join(\\n+            char\\n+
        \           for char in self.song.display_name\\n+            if char not
        in [chr(i) for i in BAD_CHARS]\\n+        )\\n+\\n+        self.progress:
        int = 0\\n+        self.old_progress: int = 0\\n+        self.status = \\\"\\\"\\n+\\n+
        \       if not self.parent.simple_tui:\\n+            self.task_id = self.parent.rich_progress_bar.add_task(\\n+
        \               description=escape(self.song_name),\\n+                message=\\\"Download
        Started\\\",\\n+                total=100,\\n+                completed=self.progress,\\n+
        \               start=False,\\n+                visible=(not self.parent.quiet),\\n+
        \           )\\n+\\n+    def update(self, message=\\\"\\\"):\\n+        \\\"\\\"\\\"\\n+
        \       Called at every event.\\n+\\n+        ### Arguments\\n+        - message:
        The message to display.\\n+        \\\"\\\"\\\"\\n+\\n+        old_message
        = self.status\\n+        self.status = message\\n+\\n+        # The change
        in progress since last update\\n+        delta = self.progress - self.old_progress\\n+\\n+
        \       if not self.parent.simple_tui:\\n+            # Update the progress
        bar\\n+            # `start_task` called everytime to ensure progress is remove
        from indeterminate state\\n+            self.parent.rich_progress_bar.start_task(self.task_id)\\n+
        \           self.parent.rich_progress_bar.update(\\n+                self.task_id,\\n+
        \               description=escape(self.song_name),\\n+                message=message,\\n+
        \               completed=self.progress,\\n+            )\\n+\\n+            #
        If task is complete\\n+            if self.progress == 100 or message == \\\"Error\\\":\\n+
        \               self.parent.overall_completed_tasks += 1\\n+                self.parent.rich_progress_bar.remove_task(self.task_id)\\n+
        \       else:\\n+            # If task is complete\\n+            if self.progress
        == 100 or message == \\\"Error\\\":\\n+                self.parent.overall_completed_tasks
        += 1\\n+\\n+            # When running web ui print progress\\n+            #
        only one time when downloading/converting/embedding\\n+            if self.parent.web_ui
        and old_message != self.status:\\n+                logger.info(\\\"%s: %s\\\",
        self.song_name, message)\\n+            elif not self.parent.web_ui and delta:\\n+
        \               logger.info(\\\"%s: %s\\\", self.song_name, message)\\n+\\n+
        \       # Update the overall progress bar\\n+        if self.parent.song_count
        == self.parent.overall_completed_tasks:\\n+            self.parent.overall_progress
        = self.parent.song_count * 100\\n+        else:\\n+            self.parent.overall_progress
        += delta\\n+\\n+        self.parent.update_overall()\\n+        self.old_progress
        = self.progress\\n+\\n+        if self.parent.update_callback:\\n+            self.parent.update_callback(self,
        message)\\n+\\n+    def notify_error(\\n+        self, message: str, traceback:
        Exception, finish: bool = False\\n+    ) -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Logs an error message.\\n+\\n+        ### Arguments\\n+        - message:
        The message to log.\\n+        - traceback: The traceback of the error.\\n+
        \       - finish: Whether to finish the task.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.update(\\\"Error\\\")\\n+        if finish:\\n+            self.progress
        = 100\\n+\\n+        if logger.getEffectiveLevel() == logging.DEBUG:\\n+            logger.exception(message)\\n+
        \       else:\\n+            logger.error(\\\"%s: %s\\\", traceback.__class__.__name__,
        traceback)\\n+\\n+    def notify_download_complete(self, status=\\\"Converting\\\")
        -> None:\\n+        \\\"\\\"\\\"\\n+        Notifies the progress handler
        that the song has been downloaded.\\n+\\n+        ### Arguments\\n+        -
        status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+        self.progress
        = 50\\n+        self.update(status)\\n+\\n+    def notify_conversion_complete(self,
        status=\\\"Embedding metadata\\\") -> None:\\n+        \\\"\\\"\\\"\\n+        Notifies
        the progress handler that the song has been converted.\\n+\\n+        ###
        Arguments\\n+        - status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.progress = 95\\n+        self.update(status)\\n+\\n+    def notify_complete(self,
        status=\\\"Done\\\") -> None:\\n+        \\\"\\\"\\\"\\n+        Notifies
        the progress handler that the song has been downloaded and converted.\\n+\\n+
        \       ### Arguments\\n+        - status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.progress = 100\\n+        self.update(status)\\n+\\n+    def
        notify_download_skip(self, status=\\\"Skipped\\\") -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Notifies the progress handler that the song has been skipped.\\n+\\n+
        \       ### Arguments\\n+        - status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.progress = 100\\n+        self.update(status)\\n+\\n+    def
        ffmpeg_progress_hook(self, progress: int) -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Updates the progress.\\n+\\n+        ### Arguments\\n+        - progress:
        The progress to update to.\\n+        \\\"\\\"\\\"\\n+\\n+        if self.parent.simple_tui
        and not self.parent.web_ui:\\n+            self.progress = 50\\n+        else:\\n+
        \           self.progress = 50 + int(progress * 0.45)\\n+\\n+        self.update(\\\"Converting\\\")\\n+\\n+
        \   def yt_dlp_progress_hook(self, data: Dict[str, Any]) -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Updates the progress.\\n+\\n+        ### Arguments\\n+        - progress:
        The progress to update to.\\n+        \\\"\\\"\\\"\\n+\\n+        if data[\\\"status\\\"]
        == \\\"downloading\\\":\\n+            file_bytes = data.get(\\\"total_bytes\\\")\\n+
        \           if file_bytes is None:\\n+                file_bytes = data.get(\\\"total_bytes_estimate\\\")\\n+\\n+
        \           downloaded_bytes = data.get(\\\"downloaded_bytes\\\")\\n+            if
        self.parent.simple_tui and not self.parent.web_ui:\\n+                self.progress
        = 50\\n+            elif file_bytes and downloaded_bytes:\\n+                self.progress
        = downloaded_bytes / file_bytes * 50\\n+\\n+            self.update(\\\"Downloading\\\")\"},{\"sha\":\"f9d718a82ef21232687b7caa519bda1a8e7a0088\",\"filename\":\"spotdl/download/progress_ui_handler.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":308,\"changes\":308,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fprogress_ui_handler.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fprogress_ui_handler.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fprogress_ui_handler.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,308 +0,0 @@\\n-from typing import Optional\\n-\\n-from rich.text import
        Text\\n-from rich.theme import Theme\\n-from rich.progress import Task\\n-from
        rich.console import Console\\n-from rich.style import StyleType\\n-from rich.highlighter
        import Highlighter\\n-from rich.progress import BarColumn, TimeRemainingColumn,
        Progress, ProgressColumn\\n-from rich.console import (\\n-    JustifyMethod,\\n-
        \   detect_legacy_windows,\\n-    OverflowMethod,\\n-)\\n-\\n-from spotdl.search
        import SongObject\\n-\\n-custom_theme = Theme(\\n-    {\\n-        \\\"bar.back\\\":
        \\\"grey23\\\",\\n-        \\\"bar.complete\\\": \\\"rgb(165,66,129)\\\",\\n-
        \       \\\"bar.finished\\\": \\\"rgb(114,156,31)\\\",\\n-        \\\"bar.pulse\\\":
        \\\"rgb(165,66,129)\\\",\\n-        \\\"general\\\": \\\"green\\\",\\n-        \\\"nonimportant\\\":
        \\\"rgb(40,100,40)\\\",\\n-        \\\"progress.data.speed\\\": \\\"red\\\",\\n-
        \       \\\"progress.description\\\": \\\"none\\\",\\n-        \\\"progress.download\\\":
        \\\"green\\\",\\n-        \\\"progress.filesize\\\": \\\"green\\\",\\n-        \\\"progress.filesize.total\\\":
        \\\"green\\\",\\n-        \\\"progress.percentage\\\": \\\"green\\\",\\n-
        \       \\\"progress.remaining\\\": \\\"rgb(40,100,40)\\\",\\n-    }\\n-)\\n-\\n-\\n-class
        YTDLLogger(object):\\n-    def debug(self, msg):\\n-        pass\\n-\\n-    def
        warning(self, msg):\\n-        pass\\n-\\n-    def error(self, msg):\\n-        raise
        Exception(msg)\\n-\\n-\\n-class SizedTextColumn(ProgressColumn):\\n-    \\\"\\\"\\\"A
        column containing text.\\\"\\\"\\\"\\n-\\n-    def __init__(\\n-        self,\\n-
        \       text_format: str,\\n-        style: StyleType = \\\"none\\\",\\n-
        \       justify: JustifyMethod = \\\"left\\\",\\n-        markup: bool = True,\\n-
        \       highlighter: Highlighter = None,\\n-        overflow: Optional[OverflowMethod]
        = None,\\n-        width: int = 20,\\n-    ) -> None:\\n-        self.text_format
        = text_format\\n-        self.justify: JustifyMethod = justify\\n-        self.style
        = style\\n-        self.markup = markup\\n-        self.highlighter = highlighter\\n-
        \       self.overflow: Optional[OverflowMethod] = overflow\\n-        self.width
        = width\\n-        super().__init__()\\n-\\n-    def render(self, task: \\\"Task\\\")
        -> Text:\\n-        _text = self.text_format.format(task=task)\\n-        if
        self.markup:\\n-            text = Text.from_markup(_text, style=self.style,
        justify=self.justify)\\n-        else:\\n-            text = Text(_text, style=self.style,
        justify=self.justify)\\n-        if self.highlighter:\\n-            self.highlighter.highlight(text)\\n-\\n-
        \       text.truncate(max_width=self.width, overflow=self.overflow, pad=True)\\n-
        \       return text\\n-\\n-\\n-class DisplayManager:\\n-    def __init__(self):\\n-\\n-
        \       # ! Change color system if \\\"legacy\\\" windows terminal to prevent
        wrong colors displaying\\n-        self.is_legacy = detect_legacy_windows()\\n-\\n-
        \       # ! dumb_terminals automatically handled by rich. Color system is
        too but it is incorrect\\n-        # ! for legacy windows ... so no color
        for y'all.\\n-        self.console = Console(\\n-            theme=custom_theme,
        color_system=\\\"truecolor\\\" if not self.is_legacy else None\\n-        )\\n-\\n-
        \       self._rich_progress_bar = Progress(\\n-            SizedTextColumn(\\n-
        \               \\\"[white]{task.description}\\\",\\n-                overflow=\\\"ellipsis\\\",\\n-
        \               width=int(self.console.width / 3),\\n-            ),\\n-            SizedTextColumn(\\\"{task.fields[message]}\\\",
        width=18, style=\\\"nonimportant\\\"),\\n-            BarColumn(bar_width=None,
        finished_style=\\\"green\\\"),\\n-            \\\"[progress.percentage]{task.percentage:>3.0f}%\\\",\\n-
        \           TimeRemainingColumn(),\\n-            console=self.console,\\n-
        \           # ! Normally when you exit the progress context manager (or call
        stop())\\n-            # ! the last refreshed display remains in the terminal
        with the cursor on\\n-            # ! the following line. You can also make
        the progress display disappear on\\n-            # ! exit by setting transient=True
        on the Progress constructor\\n-            transient=self.is_legacy,\\n-        )\\n-\\n-
        \       self.song_count = 0\\n-        self.overall_task_id = None\\n-        self.overall_progress
        = 0\\n-        self.overall_total = 100\\n-        self.overall_completed_tasks
        = 0\\n-        self.quiet = False\\n-\\n-        # ! Basically a wrapper for
        rich's: with ... as ...\\n-        self._rich_progress_bar.__enter__()\\n-\\n-
        \   def print(self, *text, color=\\\"green\\\"):\\n-        \\\"\\\"\\\"\\n-
        \       `text` : `any`  Text to be printed to screen\\n-        Use this self.print
        to replace default print().\\n-        \\\"\\\"\\\"\\n-\\n-        if self.quiet:\\n-
        \           return\\n-\\n-        line = \\\" \\\".join(str(item) for item
        in text)\\n-        if color:\\n-            self._rich_progress_bar.console.print(f\\\"[{color}]{line}\\\")\\n-
        \       else:\\n-            self._rich_progress_bar.console.print(line)\\n-\\n-
        \   def set_song_count_to(self, song_count: int) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `int` `song_count` : number of songs being downloaded\\n-        RETURNS
        `~`\\n-        sets the size of the progressbar based on the number of songs
        in the current\\n-        download set\\n-        \\\"\\\"\\\"\\n-\\n-        #
        ! all calculations are based of the arbitrary choice that 1 song consists
        of\\n-        # ! 100 steps/points/iterations\\n-        self.song_count =
        song_count\\n-\\n-        self.overall_total = 100 * song_count\\n-\\n-        if
        self.song_count > 4:\\n-            self.overall_task_id = self._rich_progress_bar.add_task(\\n-
        \               description=\\\"Total\\\",\\n-                process_id=\\\"0\\\",\\n-
        \               message=f\\\"{self.overall_completed_tasks}/{int(self.overall_total
        / 100)} complete\\\",\\n-                total=self.overall_total,\\n-                visible=(not
        self.quiet),\\n-            )\\n-\\n-    def update_overall(self):\\n-        \\\"\\\"\\\"\\n-
        \       Updates the overall progress bar.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       # If the overall progress bar exists\\n-        if self.overall_task_id
        is not None:\\n-            self._rich_progress_bar.update(\\n-                self.overall_task_id,\\n-
        \               message=f\\\"{self.overall_completed_tasks}/{int(self.overall_total
        / 100)} complete\\\",\\n-                completed=self.overall_progress,\\n-
        \           )\\n-\\n-    def new_progress_tracker(self, songObj):\\n-        \\\"\\\"\\\"\\n-
        \       returns new instance of `_ProgressTracker` that follows the `songObj`
        download subprocess\\n-        \\\"\\\"\\\"\\n-        return _ProgressTracker(self,
        songObj)\\n-\\n-    def close(self) -> None:\\n-        \\\"\\\"\\\"\\n-        clean
        up rich\\n-        \\\"\\\"\\\"\\n-\\n-        self._rich_progress_bar.stop()\\n-\\n-\\n-#
        ========================\\n-# === Progress Tracker ===\\n-# ========================\\n-\\n-\\n-class
        _ProgressTracker:\\n-    def __init__(self, parent, song_object: SongObject):\\n-
        \       self.parent = parent\\n-        self.song_object = song_object\\n-\\n-
        \       self.progress = 0\\n-        self.old_progress = 0\\n-        self.download_id
        = 0\\n-        self.status = \\\"\\\"\\n-\\n-        self.task_id = self.parent._rich_progress_bar.add_task(\\n-
        \           description=song_object.display_name,\\n-            process_id=str(self.download_id),\\n-
        \           message=\\\"Download Started\\\",\\n-            total=100,\\n-
        \           completed=self.progress,\\n-            start=False,\\n-            visible=(not
        self.parent.quiet),\\n-        )\\n-\\n-    def notify_download_skip(self)
        -> None:\\n-        \\\"\\\"\\\"\\n-        updates progress bar to reflect
        a song being skipped\\n-        \\\"\\\"\\\"\\n-\\n-        self.progress
        = 100\\n-        self.update(\\\"Skipping\\\")\\n-\\n-    def ytdl_progress_hook(self,
        data) -> None:\\n-        \\\"\\\"\\\"\\n-        Progress hook for youtube-dl.
        It is called each time\\n-        bytes are read from youtube.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       # ! This will be called until download is complete, i.e we get an
        overall\\n-\\n-        if data[\\\"status\\\"] == \\\"downloading\\\":\\n-
        \           file_bytes = data[\\\"total_bytes\\\"]\\n-            downloaded_bytes
        = data[\\\"downloaded_bytes\\\"]\\n-\\n-            if file_bytes and downloaded_bytes:\\n-
        \               self.progress = downloaded_bytes / file_bytes * 90\\n-\\n-
        \           self.update(\\\"Downloading\\\")\\n-\\n-    def notify_youtube_download_completion(self)
        -> None:\\n-        \\\"\\\"\\\"\\n-        updates progresbar to reflect
        a audio conversion being completed\\n-        \\\"\\\"\\\"\\n-\\n-        self.progress
        = 90  # self.progress + 5\\n-        self.update(\\\"Converting\\\")\\n-\\n-
        \   def notify_conversion_completion(self) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       updates progresbar to reflect a audio conversion being completed\\n-
        \       \\\"\\\"\\\"\\n-\\n-        self.progress = 95  # self.progress +
        5\\n-        self.update(\\\"Tagging\\\")\\n-\\n-    def notify_download_completion(self)
        -> None:\\n-        \\\"\\\"\\\"\\n-        updates progresbar to reflect
        a download being completed\\n-        \\\"\\\"\\\"\\n-\\n-        # ! Download
        completion implie ID# tag embedding was just finished\\n-        self.progress
        = 100  # self.progress + 5\\n-        self.update(\\\"Done\\\")\\n-\\n-    def
        notify_error(self, e, tb):\\n-        \\\"\\\"\\\"\\n-        `e` : error
        message\\n-        `tb` : traceback\\n-        Freezes the progress bar and
        prints the traceback received\\n-        \\\"\\\"\\\"\\n-        self.update(message=\\\"Error
        \\\" + self.status)\\n-\\n-        message = (\\n-            f\\\"Error:
        {e}\\\\tWhile {self.status}: {self.song_object.display_name}\\\\n {tb}\\\"\\n-
        \       )\\n-\\n-        self.parent.print(message, color=\\\"red\\\")\\n-\\n-
        \   def update(self, message=\\\"\\\"):\\n-        \\\"\\\"\\\"\\n-        Called
        at every event.\\n-        \\\"\\\"\\\"\\n-\\n-        self.status = message\\n-\\n-
        \       # The change in progress since last update\\n-        delta = self.progress
        - self.old_progress\\n-\\n-        # Update the progress bar\\n-        #
        ! `start_task` called everytime to ensure progress is remove from indeterminate
        state\\n-        self.parent._rich_progress_bar.start_task(self.task_id)\\n-
        \       self.parent._rich_progress_bar.update(\\n-            self.task_id,\\n-
        \           description=self.song_object.display_name,\\n-            process_id=str(self.download_id),\\n-
        \           message=message,\\n-            completed=self.progress,\\n-        )\\n-\\n-
        \       # If task is complete\\n-        if self.progress == 100 or message
        == \\\"Error\\\":\\n-            self.parent.overall_completed_tasks += 1\\n-
        \           if self.parent.is_legacy:\\n-                self.parent._rich_progress_bar.remove_task(self.task_id)\\n-\\n-
        \       # Update the overall progress bar\\n-        self.parent.overall_progress
        += delta\\n-        self.parent.update_overall()\\n-\\n-        self.old_progress
        = self.progress\"},{\"sha\":\"c98a4096a02326198dce513edf32137bc69455ea\",\"filename\":\"spotdl/download/tracking_file_handler.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":107,\"changes\":107,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Ftracking_file_handler.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Ftracking_file_handler.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Ftracking_file_handler.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,107 +0,0 @@\\n-from pathlib import Path\\n-from typing import Optional,
        List\\n-\\n-from spotdl.search import SongObject, song_gatherer\\n-from spotdl.utils.song_name_utils
        import format_name\\n-\\n-\\n-class DownloadTracker:\\n-    def __init__(self):\\n-
        \       self.song_list = []\\n-        self.save_file: Optional[Path] = None\\n-\\n-
        \   def load_tracking_file(self, tracking_file_path: str) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `str` `tracking_file_path` : path to a .spotdlTrackingFile\\n-\\n-
        \       RETURNS `~`\\n-\\n-        reads songsObj's from disk and prepares
        to track their download\\n-        \\\"\\\"\\\"\\n-\\n-        # Attempt to
        read .spotdlTrackingFile, raise exception if file can't be read\\n-        tracking_file
        = Path(tracking_file_path).resolve()\\n-        if not tracking_file.is_file():\\n-
        \           raise FileNotFoundError(\\n-                f\\\"no such tracking
        file found: {tracking_file_path}\\\"\\n-            )\\n-\\n-        with
        tracking_file.open(\\\"rb\\\") as file_handle:\\n-            song_data_dumps
        = eval(file_handle.read().decode())\\n-\\n-        # Save path to .spotdlTrackingFile\\n-
        \       self.save_file = tracking_file\\n-\\n-        # convert song data
        dumps to songObj's\\n-        # ! see, songGatherer.get_data_dump and songGatherer.from_dump
        for more details\\n-        for dump in song_data_dumps:\\n-            self.song_list.append(song_gatherer.from_dump(dump))\\n-\\n-
        \   def load_song_list(self, song_list: List[SongObject]) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `list<songOjb>` `song_list` : songObj's being downloaded\\n-\\n-        RETURNS
        `~`\\n-\\n-        prepares to track download of provided songObj's\\n-        \\\"\\\"\\\"\\n-\\n-
        \       self.song_list = song_list\\n-\\n-        self.backup_to_disk()\\n-\\n-
        \   def get_song_list(self) -> List[SongObject]:\\n-        \\\"\\\"\\\"\\n-
        \       RETURNS `list<songObj>\\n-\\n-        get songObj's representing songs
        yet to be downloaded\\n-        \\\"\\\"\\\"\\n-        return self.song_list\\n-\\n-
        \   def backup_to_disk(self):\\n-        \\\"\\\"\\\"\\n-        RETURNS `~`\\n-\\n-
        \       backs up details of songObj's yet to be downloaded to a .spotdlTrackingFile\\n-
        \       \\\"\\\"\\\"\\n-        # remove tracking file if no songs left in
        queue\\n-        # ! we use 'return None' as a convenient exit point\\n-        if
        len(self.song_list) == 0:\\n-            if self.save_file and self.save_file.is_file():\\n-
        \               self.save_file.unlink()\\n-\\n-            return None\\n-\\n-
        \       # prepare datadumps of all songObj's yet to be downloaded\\n-        song_data_dumps
        = [song.data_dump for song in self.song_list]\\n-\\n-        # ! the default
        naming of a tracking file is $nameOfFirstSOng.spotdlTrackingFile,\\n-        #
        ! it needs a little fixing because of disallowed characters in file naming\\n-
        \       if not self.save_file:\\n-            song_name = self.song_list[0].song_name\\n-\\n-
        \           song_name = format_name(song_name)\\n-\\n-            self.save_file
        = Path(song_name + \\\".spotdlTrackingFile\\\")\\n-\\n-        # save encoded
        string to a file\\n-        with open(self.save_file, \\\"wb\\\") as file_handle:\\n-
        \           file_handle.write(str(song_data_dumps).encode())\\n-\\n-    def
        notify_download_completion(self, song_object: SongObject) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `songObj` `songObj` : songObj representing song that has been downloaded\\n-\\n-
        \       RETURNS `~`\\n-\\n-        removes given songObj from download queue
        and updates .spotdlTrackingFile\\n-        \\\"\\\"\\\"\\n-\\n-        if
        song_object in self.song_list:\\n-            self.song_list.remove(song_object)\\n-\\n-
        \       self.backup_to_disk()\\n-\\n-    def clear(self):\\n-        self.song_list
        = []\\n-        self.save_file = None\"},{\"sha\":\"f9bf42453dfcb0bf0db444ea09d5ca21f63126f7\",\"filename\":\"spotdl/parsers/__init__.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":2,\"changes\":2,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fparsers%2F__init__.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,2 +0,0 @@\\n-from spotdl.parsers.argument_parser import parse_arguments
        \ # noqa: F401\\n-from spotdl.parsers.query_parser import parse_query  # noqa:
        F401\"},{\"sha\":\"3a35eff6b3e92fd1528add903bafcf0d64eabd5f\",\"filename\":\"spotdl/parsers/argument_parser.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":178,\"changes\":178,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fargument_parser.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fargument_parser.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fparsers%2Fargument_parser.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,178 +0,0 @@\\n-from argparse import ArgumentParser, RawDescriptionHelpFormatter\\n-\\n-import
        pkg_resources\\n-\\n-help_notice = r\\\"\\\"\\\"\\n-To download a song run,\\n-
        \   spotdl [trackUrl]\\n-    ex. spotdl https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b\\n-\\n-To
        download a album run,\\n-    spotdl [albumUrl]\\n-    ex. spotdl https://open.spotify.com/album/4yP0hdKOZPNshxUOjY0cZj\\n-\\n-To
        download a playlist, run:\\n-    spotdl [playlistUrl]\\n-    ex. spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID\\n-\\n-To
        download your saved songs, run:\\n-    spotdl --user-auth saved\\n-\\n-To
        download all songs from an artist run:\\n-    spotdl [artistUrl]\\n-    ex.
        spotdl https://open.spotify.com/artist/1fZAAHNWdSM5gqbi9o5iEA\\n-\\n-To download
        youtube video with metadata from spotify run:\\n-    spotdl \\\"YouTubeURL|SpotifyURL\\\"\\n-
        \   ex. spotdl \\\"https://www.youtube.com/watch?v=EO7XnC1YpVo|https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3\\\"\\n-
        \   Note: urls that you pass have to be quoted properly ex. \\\"YouTubeURL|SpotifyUrl\\\"\\n-\\n-To
        change output format run:\\n-    spotdl [songUrl] --output-format mp3/m4a/flac/opus/ogg/wav\\n-
        \   ex. spotdl [songUrl] --output-format opus\\n-\\n-To specifiy path template
        run:\\n-    spotdl [songUrl] -p 'template'\\n-    ex. spotdl [songUrl] -p
        \\\"{playlist}/{artists}/{album} - {title} {artist}.{ext}\\\"\\n-\\n-To use
        FFmpeg binary that is not on PATH run:\\n-    spotdl [songUrl] --ffmpeg path/to/your/ffmpeg.exe\\n-
        \   ex. spotdl [songUrl] --ffmpeg C:\\\\ffmpeg\\\\bin\\\\ffmpeg.exe\\n-\\n-To
        generate .m3u file for each playlist run:\\n-    spotdl [playlistUrl] --m3u\\n-
        \   ex. spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID --m3u\\n-\\n-To
        use Youtube instead of YouTube Music run:\\n-    spotdl [songUrl] --use-youtube\\n-
        \   ex. spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --use-youtube\\n-\\n-To
        change number of threads used when downloading songs run:\\n-    spotdl [songUrl]
        --dt [number]\\n-    ex. spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --dt 8\\n-\\n-To change number of threads used when searching for songs run:\\n-
        \   spotdl [songUrl] --st [number]\\n-    ex. spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --st 8\\n-\\n-To ignore your ffmpeg version run:\\n-    spotdl --ignore-ffmpeg-version\\n-\\n-To
        search for and download a song, run, with quotation marks:\\n-Note: This is
        not accurate and often causes errors.\\n-    spotdl [songQuery]\\n-    ex.
        spotdl 'The Weeknd - Blinding Lights'\\n-\\n-To resume a failed/incomplete
        download, run:\\n-    spotdl [pathToTrackingFile]\\n-    ex. spotdl 'The Weeknd
        - Blinding Lights.spotdlTrackingFile'\\n-\\n-    .spotdlTrackingFiles are
        automatically created when a download starts and deleted on completion\\n-\\n-You
        can queue up multiple download tasks by separating the arguments with spaces:\\n-
        \   spotdl [songQuery1] [albumUrl] [songQuery2] ... (order does not matter)\\n-
        \   ex. spotdl 'The Weeknd - Blinding Lights'\\n-            https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID
        ...\\n-\\n-You can use the --debug-termination flag to figure out where in
        the code spotdl got stuck.\\n-\\n-spotDL downloads up to 4 songs in parallel,
        so for a faster experience,\\n-download albums and playlist, rather than tracks.\\n-\\\"\\\"\\\"
        \ # noqa: E501\\n-\\n-\\n-def parse_arguments():\\n-    # Initialize argument
        parser\\n-    parser = ArgumentParser(\\n-        prog=\\\"spotdl\\\",\\n-
        \       description=help_notice,\\n-        formatter_class=RawDescriptionHelpFormatter,\\n-
        \   )\\n-\\n-    # Search query\\n-    parser.add_argument(\\n-        \\\"query\\\",
        type=str, nargs=\\\"+\\\", help=\\\"URL/String for a song/album/playlist/artist\\\"\\n-
        \   )\\n-\\n-    # Version\\n-    version = pkg_resources.require(\\\"spotdl\\\")[0].version\\n-
        \   parser.add_argument(\\\"--version\\\", \\\"-v\\\", action=\\\"version\\\",
        version=version)\\n-\\n-    # Option to enable debug termination\\n-    parser.add_argument(\\\"--debug-termination\\\",
        action=\\\"store_true\\\")\\n-\\n-    # Option to specify output directory\\n-
        \   parser.add_argument(\\\"--output\\\", \\\"-o\\\", help=\\\"Output directory
        path\\\")\\n-\\n-    # Option to specify output format\\n-    parser.add_argument(\\n-
        \       \\\"--output-format\\\",\\n-        \\\"--of\\\",\\n-        help=\\\"Output
        format\\\",\\n-        choices={\\\"mp3\\\", \\\"m4a\\\", \\\"flac\\\", \\\"ogg\\\",
        \\\"opus\\\", \\\"wav\\\"},\\n-        default=\\\"mp3\\\",\\n-    )\\n-\\n-
        \   # Option to enable user auth\\n-    parser.add_argument(\\n-        \\\"--user-auth\\\",
        help=\\\"Use User Authentication\\\", action=\\\"store_true\\\"\\n-    )\\n-\\n-
        \   # Option to use youtube instead of youtube music\\n-    parser.add_argument(\\n-
        \       \\\"--use-youtube\\\", help=\\\"Use youtube instead of YTM\\\", action=\\\"store_true\\\"\\n-
        \   )\\n-\\n-    # Option to select a lyrics provider\\n-    parser.add_argument(\\n-
        \       \\\"--lyrics-provider\\\",\\n-        help=\\\"Select a lyrics provider\\\",\\n-
        \       type=str,\\n-        choices=[\\\"genius\\\", \\\"musixmatch\\\"],\\n-
        \       default=\\\"musixmatch\\\",\\n-    )\\n-\\n-    # Option to provide
        path template for downloaded files\\n-    parser.add_argument(\\n-        \\\"-p\\\",\\n-
        \       \\\"--path-template\\\",\\n-        help=\\\"Path template for downloaded
        files\\\",\\n-        type=str,\\n-        default=None,\\n-    )\\n-\\n-
        \   # Option to specify path to local ffmpeg\\n-    parser.add_argument(\\\"-f\\\",
        \\\"--ffmpeg\\\", help=\\\"Path to ffmpeg\\\", dest=\\\"ffmpeg\\\")\\n-\\n-
        \   # Option to ignore ffmpeg version\\n-    parser.add_argument(\\n-        \\\"--ignore-ffmpeg-version\\\",
        help=\\\"Ignore ffmpeg version\\\", action=\\\"store_true\\\"\\n-    )\\n-\\n-
        \   # Option to specify number of threads to use when downloading songs\\n-
        \   parser.add_argument(\\n-        \\\"--download-threads\\\",\\n-        \\\"--dt\\\",\\n-
        \       help=\\\"Number of threads used when downloading songs\\\",\\n-        type=int,\\n-
        \       default=4,\\n-    )\\n-\\n-    # Option to specify number of threads
        to use when searching for songs\\n-    parser.add_argument(\\n-        \\\"--search-threads\\\",\\n-
        \       \\\"--st\\\",\\n-        help=\\\"Number of threads used when searching
        for songs\\\",\\n-        type=int,\\n-        default=4,\\n-    )\\n-\\n-
        \   # Option to generate .m3u\\n-    parser.add_argument(\\n-        \\\"--generate-m3u\\\",\\n-
        \       \\\"--m3u\\\",\\n-        help=\\\"Generate .m3u file for each playlist\\\",\\n-
        \       action=\\\"store_true\\\",\\n-    )\\n-\\n-    return parser.parse_args()\"},{\"sha\":\"684ad1097b56be543e0074b679ce39f47e18101b\",\"filename\":\"spotdl/parsers/query_parser.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":180,\"changes\":180,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fquery_parser.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fquery_parser.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fparsers%2Fquery_parser.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,180 +0,0 @@\\n-from typing import List\\n-from pathlib import Path\\n-\\n-from
        spotdl.search import SongObject, song_gatherer\\n-from spotdl.providers import
        lyrics_providers, metadata_provider\\n-\\n-\\n-def parse_query(\\n-    query:
        List[str],\\n-    format,\\n-    use_youtube,\\n-    generate_m3u,\\n-    lyrics_provider,\\n-
        \   threads,\\n-    path_template,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-
        \   Parse query and return list containing song object\\n-    \\\"\\\"\\\"\\n-\\n-
        \   songs_list = []\\n-\\n-    # Iterate over all search queries and add them
        to songs_list\\n-    for request in query:\\n-        if request.endswith(\\\".spotdlTrackingFile\\\"):\\n-
        \           continue\\n-\\n-        songs_list.extend(\\n-            parse_request(\\n-
        \               request,\\n-                format,\\n-                use_youtube,\\n-
        \               generate_m3u,\\n-                lyrics_provider,\\n-                threads,\\n-
        \               path_template,\\n-            )\\n-        )\\n-\\n-        #
        linefeed to visually separate output for each query\\n-        print()\\n-\\n-
        \   # remove duplicates\\n-    seen_songs = set()\\n-    songs = []\\n-    for
        song in songs_list:\\n-        if song.file_name not in seen_songs:\\n-            songs.append(song)\\n-
        \           seen_songs.add(song.file_name)\\n-\\n-    return songs\\n-\\n-\\n-def
        parse_request(\\n-    request: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    generate_m3u: bool = False,\\n-    lyrics_provider:
        str = None,\\n-    threads: int = 1,\\n-    path_template: str = None,\\n-)
        -> List[SongObject]:\\n-    song_list: List[SongObject] = []\\n-    if (\\n-
        \       (\\\"youtube.com/watch?v=\\\" in request or \\\"youtu.be/\\\" in request)\\n-
        \       and \\\"open.spotify.com\\\" in request\\n-        and \\\"track\\\"
        in request\\n-        and \\\"|\\\" in request\\n-    ):\\n-        urls =
        request.split(\\\"|\\\")\\n-\\n-        if len(urls) <= 1 or \\\"youtu\\\"
        not in urls[0] or \\\"spotify\\\" not in urls[1]:\\n-            print(\\\"Incorrect
        format used, please use YouTubeURL|SpotifyURL\\\")\\n-        else:\\n-            print(\\\"Fetching
        YouTube video with spotify metadata\\\")\\n-            song_list = [\\n-
        \               song\\n-                for song in [\\n-                    get_youtube_meta_track(\\n-
        \                       urls[0], urls[1], output_format, lyrics_provider\\n-
        \                   )\\n-                ]\\n-                if song is not
        None\\n-            ]\\n-    elif \\\"open.spotify.com\\\" in request and
        \\\"track\\\" in request:\\n-        print(\\\"Fetching Song...\\\")\\n-        song
        = song_gatherer.from_spotify_url(\\n-            request, output_format, use_youtube,
        lyrics_provider\\n-        )\\n-        try:\\n-            song_list = [song]
        if song.youtube_link is not None else []\\n-        except (OSError, ValueError,
        LookupError):\\n-            song_list = []\\n-    elif \\\"open.spotify.com\\\"
        in request and \\\"album\\\" in request:\\n-        print(\\\"Fetching Album...\\\")\\n-
        \       song_list = song_gatherer.from_album(\\n-            request,\\n-
        \           output_format,\\n-            use_youtube,\\n-            lyrics_provider,\\n-
        \           generate_m3u,\\n-            threads,\\n-            path_template,\\n-
        \       )\\n-    elif \\\"open.spotify.com\\\" in request and \\\"playlist\\\"
        in request:\\n-        print(\\\"Fetching Playlist...\\\")\\n-        song_list
        = song_gatherer.from_playlist(\\n-            request,\\n-            output_format,\\n-
        \           use_youtube,\\n-            lyrics_provider,\\n-            generate_m3u,\\n-
        \           threads,\\n-            path_template,\\n-        )\\n-    elif
        \\\"open.spotify.com\\\" in request and \\\"artist\\\" in request:\\n-        print(\\\"Fetching
        artist...\\\")\\n-        song_list = song_gatherer.from_artist(\\n-            request,
        output_format, use_youtube, lyrics_provider, threads\\n-        )\\n-    elif
        request == \\\"saved\\\":\\n-        print(\\\"Fetching Saved Songs...\\\")\\n-
        \       song_list = song_gatherer.from_saved_tracks(\\n-            output_format,
        use_youtube, lyrics_provider, threads\\n-        )\\n-    else:\\n-        print('Searching
        Spotify for song named \\\"%s\\\"...' % request)\\n-        try:\\n-            song_list
        = song_gatherer.from_search_term(\\n-                request, output_format,
        use_youtube, lyrics_provider\\n-            )\\n-        except Exception
        as e:\\n-            print(e)\\n-\\n-    # filter out NONE songObj items (already
        downloaded)\\n-    song_list = [song_object for song_object in song_list if
        song_object is not None]\\n-\\n-    return song_list\\n-\\n-\\n-def get_youtube_meta_track(\\n-
        \   youtube_url: str,\\n-    spotify_url: str,\\n-    output_format: str =
        None,\\n-    lyrics_provider: str = None,\\n-):\\n-    # check if URL is a
        playlist, user, artist or album, if yes raise an Exception,\\n-    # else
        procede\\n-\\n-    # Get the Song Metadata\\n-    raw_track_meta, raw_artist_meta,
        raw_album_meta = metadata_provider.from_url(\\n-        spotify_url\\n-    )\\n-\\n-
        \   song_name = raw_track_meta[\\\"name\\\"]\\n-    contributing_artist =
        [artist[\\\"name\\\"] for artist in raw_track_meta[\\\"artists\\\"]]\\n-    converted_file_name
        = SongObject.create_file_name(\\n-        song_name, [artist[\\\"name\\\"]
        for artist in raw_track_meta[\\\"artists\\\"]]\\n-    )\\n-\\n-    if output_format
        is None:\\n-        output_format = \\\"mp3\\\"\\n-\\n-    converted_file_path
        = Path(\\\".\\\", f\\\"{converted_file_name}.{output_format}\\\")\\n-\\n-
        \   # if a song is already downloaded skip it\\n-    if converted_file_path.is_file():\\n-
        \       print(f'Skipping \\\"{converted_file_name}\\\" as it\\\\'s already
        downloaded')\\n-        return None\\n-\\n-    # (try to) Get lyrics from
        musixmatch/genius\\n-    # use musixmatch as the default provider\\n-    if
        lyrics_provider == \\\"genius\\\":\\n-        lyrics = lyrics_providers.get_lyrics_genius(song_name,
        contributing_artist)\\n-    else:\\n-        lyrics = lyrics_providers.get_lyrics_musixmatch(song_name,
        contributing_artist)\\n-\\n-    return SongObject(\\n-        raw_track_meta,
        raw_album_meta, raw_artist_meta, youtube_url, lyrics, None\\n-    )\"},{\"sha\":\"8476a7bc3444b321b2187588b34bd9d81a5271bc\",\"filename\":\"spotdl/providers/__init__.py\",\"status\":\"modified\",\"additions\":3,\"deletions\":9,\"changes\":12,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -1,9 +1,3 @@\\n-from spotdl.providers.metadata_provider import from_url\\n-from
        spotdl.providers import ytm_provider as youtube_music\\n-from spotdl.providers
        import lyrics_providers\\n-from spotdl.providers.provider_utils import (\\n-
        \   _create_song_title,\\n-    _match_percentage,\\n-    _parse_duration,\\n-)\\n-from
        spotdl.utils.song_name_utils import format_name\\n+\\\"\\\"\\\"\\n+Different
        types of data providers for spotdl.\\n+\\\"\\\"\\\"\"},{\"sha\":\"2b6dddae03b7804a08410cd8d15016a083148159\",\"filename\":\"spotdl/providers/audio/__init__.py\",\"status\":\"added\",\"additions\":29,\"deletions\":0,\"changes\":29,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,29 @@\\n+\\\"\\\"\\\"\\n+Audio providers for spotdl.\\n+\\\"\\\"\\\"\\n+\\n+from
        spotdl.providers.audio.bandcamp import BandCamp\\n+from spotdl.providers.audio.base
        import (\\n+    ISRC_REGEX,\\n+    AudioProvider,\\n+    AudioProviderError,\\n+
        \   YTDLLogger,\\n+)\\n+from spotdl.providers.audio.piped import Piped\\n+from
        spotdl.providers.audio.sliderkz import SliderKZ\\n+from spotdl.providers.audio.soundcloud
        import SoundCloud\\n+from spotdl.providers.audio.youtube import YouTube\\n+from
        spotdl.providers.audio.ytmusic import YouTubeMusic\\n+\\n+__all__ = [\\n+
        \   \\\"YouTube\\\",\\n+    \\\"YouTubeMusic\\\",\\n+    \\\"SliderKZ\\\",\\n+
        \   \\\"SoundCloud\\\",\\n+    \\\"BandCamp\\\",\\n+    \\\"Piped\\\",\\n+
        \   \\\"AudioProvider\\\",\\n+    \\\"AudioProviderError\\\",\\n+    \\\"YTDLLogger\\\",\\n+
        \   \\\"ISRC_REGEX\\\",\\n+]\"},{\"sha\":\"114ddee8f999e8204c031c1032d7d1f80f8c410b\",\"filename\":\"spotdl/providers/audio/bandcamp.py\",\"status\":\"added\",\"additions\":211,\"deletions\":0,\"changes\":211,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fbandcamp.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fbandcamp.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fbandcamp.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,211 @@\\n+\\\"\\\"\\\"\\n+BandCamp module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from typing import Any, Dict,
        List, Optional, Tuple\\n+\\n+import requests\\n+\\n+from spotdl.providers.audio.base
        import AudioProvider\\n+from spotdl.types.result import Result\\n+from spotdl.utils.config
        import GlobalConfig\\n+\\n+__all__ = [\\\"BandCamp\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        BandCampTrack:\\n+    \\\"\\\"\\\"\\n+    BandCamp track class based on the
        bandcamp_api library\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(self, artist_id:
        int, track_id: int):\\n+        # object info\\n+        self.type = \\\"track\\\"\\n+\\n+
        \       # track information\\n+        self.track_id: int = 0\\n+        self.track_title:
        str = \\\"\\\"\\n+        self.track_number: int = 0\\n+        self.track_duration_seconds:
        float = 0.00\\n+        self.track_streamable: Optional[bool] = None\\n+        self.has_lyrics:
        Optional[bool] = None\\n+        self.lyrics: str = \\\"\\\"\\n+        self.is_price_set:
        Optional[bool] = None\\n+        self.price: dict = {}\\n+        self.require_email:
        Optional[bool] = None\\n+        self.is_purchasable: Optional[bool] = None\\n+
        \       self.is_free: Optional[bool] = None\\n+        self.is_preorder: Optional[bool]
        = None\\n+        self.tags: list = []\\n+        self.track_url: str = \\\"\\\"\\n+\\n+
        \       # art\\n+        self.art_id: int = 0\\n+        self.art_url: str
        = \\\"\\\"\\n+\\n+        # artist information\\n+        self.artist_id:
        int = 0\\n+        self.artist_title: str = \\\"\\\"\\n+\\n+        # album
        information\\n+        self.album_id: int = 0\\n+        self.album_title:
        str = \\\"\\\"\\n+\\n+        # label\\n+        self.label_id: int = 0\\n+
        \       self.label_title: str = \\\"\\\"\\n+\\n+        # about\\n+        self.about:
        str = \\\"\\\"\\n+        self.credits: str = \\\"\\\"\\n+        self.date_released_unix:
        int = 0\\n+\\n+        # advanced\\n+        self.date_last_modified_unix:
        int = 0\\n+        self.date_published_unix: int = 0\\n+        self.supporters:
        list = []\\n+\\n+        response = requests.get(\\n+            url=\\\"https://bandcamp.com/api/mobile/25/tralbum_details?band_id=\\\"\\n+
        \           + str(artist_id)\\n+            + \\\"&tralbum_id=\\\"\\n+            +
        str(track_id)\\n+            + \\\"&tralbum_type=t\\\",\\n+            timeout=10,\\n+
        \           proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+        )\\n+
        \       result = response.json()\\n+        self.track_id = result[\\\"id\\\"]\\n+
        \       self.track_title = result[\\\"title\\\"]\\n+        self.track_number
        = result[\\\"tracks\\\"][0][\\\"track_num\\\"]\\n+        self.track_duration_seconds
        = result[\\\"tracks\\\"][0][\\\"duration\\\"]\\n+        self.track_streamable
        = result[\\\"tracks\\\"][0][\\\"is_streamable\\\"]\\n+        self.has_lyrics
        = result[\\\"tracks\\\"][0][\\\"has_lyrics\\\"]\\n+\\n+        # getting lyrics,
        if there is any\\n+        if self.has_lyrics is True:\\n+            resp
        = requests.get(\\n+                \\\"https://bandcamp.com/api/mobile/25/tralbum_lyrics?tralbum_id=\\\"\\n+
        \               + str(self.track_id)\\n+                + \\\"&tralbum_type=t\\\",\\n+
        \               timeout=10,\\n+                proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \           )\\n+            rjson = resp.json()\\n+            self.lyrics
        = rjson[\\\"lyrics\\\"][str(self.track_id)]\\n+\\n+        self.is_price_set
        = result[\\\"is_set_price\\\"]\\n+        self.price = {\\\"currency\\\":
        result[\\\"currency\\\"], \\\"amount\\\": result[\\\"price\\\"]}\\n+        self.require_email
        = result[\\\"require_email\\\"]\\n+        self.is_purchasable = result[\\\"is_purchasable\\\"]\\n+
        \       self.is_free = result[\\\"free_download\\\"]\\n+        self.is_preorder
        = result[\\\"is_preorder\\\"]\\n+\\n+        for tag in result[\\\"tags\\\"]:\\n+
        \           self.tags.append(tag[\\\"name\\\"])\\n+\\n+        self.art_id
        = result[\\\"art_id\\\"]\\n+        self.art_url = \\\"https://f4.bcbits.com/img/a\\\"
        + str(self.art_id) + \\\"_0.jpg\\\"\\n+\\n+        self.artist_id = result[\\\"band\\\"][\\\"band_id\\\"]\\n+
        \       self.artist_title = result[\\\"band\\\"][\\\"name\\\"]\\n+\\n+        self.album_id
        = result[\\\"album_id\\\"]\\n+        self.album_title = result[\\\"album_title\\\"]\\n+\\n+
        \       self.label_id = result[\\\"label_id\\\"]\\n+        self.label_title
        = result[\\\"label\\\"]\\n+\\n+        self.about = result[\\\"about\\\"]\\n+
        \       self.credits = result[\\\"credits\\\"]\\n+\\n+        self.date_released_unix
        = result[\\\"release_date\\\"]\\n+\\n+        self.track_url = result[\\\"bandcamp_url\\\"]\\n+\\n+\\n+def
        search(search_string: str = \\\"\\\"):\\n+    \\\"\\\"\\\"\\n+    I got this
        api url from the iOS app\\n+    needs a way of removing characters\\n+    that
        will screw up an url\\n+    keep url safe characters\\n+\\n+    ### Arguments\\n+
        \   - search_string: The search term to search for.\\n+\\n+    ### Returns\\n+
        \   - A list of artist and track ids if found\\n+    \\\"\\\"\\\"\\n+\\n+
        \   response = requests.get(\\n+        \\\"https://bandcamp.com/api/fuzzysearch/2/app_autocomplete?q=\\\"\\n+
        \       + search_string\\n+        + \\\"&param_with_locations=true\\\",\\n+
        \       timeout=10,\\n+        proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \   )\\n+\\n+    results = response.json()[\\\"results\\\"]\\n+\\n+    return_results:
        List[Tuple[str, str]] = []\\n+\\n+    for item in results:\\n+        if item[\\\"type\\\"]
        == \\\"t\\\":\\n+            return_results.append((item[\\\"band_id\\\"],
        item[\\\"id\\\"]))\\n+\\n+    return return_results\\n+\\n+\\n+class BandCamp(AudioProvider):\\n+
        \   \\\"\\\"\\\"\\n+    SoundCloud audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+
        \   SUPPORTS_ISRC = False\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] =
        [{}]\\n+\\n+    def get_results(self, search_term: str, *_args, **_kwargs)
        -> List[Result]:\\n+        \\\"\\\"\\\"\\n+        Get results from slider.kz\\n+\\n+
        \       ### Arguments\\n+        - search_term: The search term to search
        for.\\n+        - args: Unused.\\n+        - kwargs: Unused.\\n+\\n+        ###
        Returns\\n+        - A list of slider.kz results if found, None otherwise.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        try:\\n+            results = search(search_term)\\n+
        \       except KeyError:\\n+            return []\\n+        except Exception
        as exc:\\n+            logger.error(\\\"Failed to get results from BandCamp\\\",
        exc_info=exc)\\n+            return []\\n+\\n+        simplified_results:
        List[Result] = []\\n+        for result in results:\\n+            track =
        BandCampTrack(int(result[0]), int(result[1]))\\n+\\n+            simplified_results.append(\\n+
        \               Result(\\n+                    source=\\\"bandcamp\\\",\\n+
        \                   url=track.track_url,\\n+                    verified=False,\\n+
        \                   name=track.track_title,\\n+                    duration=track.track_duration_seconds,\\n+
        \                   author=track.artist_title,\\n+                    result_id=track.track_url,\\n+
        \                   search_query=search_term,\\n+                    album=track.album_title,\\n+
        \                   artists=tuple(track.artist_title.split(\\\", \\\")),\\n+
        \               )\\n+            )\\n+\\n+        return simplified_results\"},{\"sha\":\"36e18f43ade8f356a6adf23604d742fc62987748\",\"filename\":\"spotdl/providers/audio/base.py\",\"status\":\"added\",\"additions\":388,\"deletions\":0,\"changes\":388,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fbase.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fbase.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fbase.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,388 @@\\n+\\\"\\\"\\\"\\n+Base audio provider module.\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+import re\\n+import shlex\\n+from typing import Any, Dict, List,
        Optional, Tuple\\n+\\n+from yt_dlp import YoutubeDL\\n+\\n+from spotdl.types.result
        import Result\\n+from spotdl.types.song import Song\\n+from spotdl.utils.config
        import get_temp_path\\n+from spotdl.utils.formatter import (\\n+    args_to_ytdlp_options,\\n+
        \   create_search_query,\\n+    create_song_title,\\n+)\\n+from spotdl.utils.matching
        import get_best_matches, order_results\\n+\\n+__all__ = [\\\"AudioProviderError\\\",
        \\\"AudioProvider\\\", \\\"ISRC_REGEX\\\", \\\"YTDLLogger\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class AudioProviderError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to audio searching/downloading.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class YTDLLogger:\\n+    \\\"\\\"\\\"\\n+    Custom
        YT-dlp logger.\\n+    \\\"\\\"\\\"\\n+\\n+    def debug(self, msg):\\n+        \\\"\\\"\\\"\\n+
        \       YTDL uses this to print debug messages.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       pass  # pylint: disable=W0107\\n+\\n+    def warning(self, msg):\\n+
        \       \\\"\\\"\\\"\\n+        YTDL uses this to print warnings.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       pass  # pylint: disable=W0107\\n+\\n+    def error(self, msg):\\n+
        \       \\\"\\\"\\\"\\n+        YTDL uses this to print errors.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise AudioProviderError(msg)\\n+\\n+\\n+ISRC_REGEX = re.compile(r\\\"^[A-Z]{2}-?\\\\w{3}-?\\\\d{2}-?\\\\d{5}$\\\")\\n+\\n+\\n+class
        AudioProvider:\\n+    \\\"\\\"\\\"\\n+    Base class for all other providers.
        Provides some common functionality.\\n+    Handles the yt-dlp audio handler.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC: bool\\n+    GET_RESULTS_OPTS: List[Dict[str,
        Any]]\\n+\\n+    def __init__(\\n+        self,\\n+        output_format:
        str = \\\"mp3\\\",\\n+        cookie_file: Optional[str] = None,\\n+        search_query:
        Optional[str] = None,\\n+        filter_results: bool = True,\\n+        yt_dlp_args:
        Optional[str] = None,\\n+    ) -> None:\\n+        \\\"\\\"\\\"\\n+        Base
        class for audio providers.\\n+\\n+        ### Arguments\\n+        - output_directory:
        The directory to save the downloaded songs to.\\n+        - output_format:
        The format to save the downloaded songs in.\\n+        - cookie_file: The
        path to a file containing cookies to be used by YTDL.\\n+        - search_query:
        The query to use when searching for songs.\\n+        - filter_results: Whether
        to filter results.\\n+        \\\"\\\"\\\"\\n+\\n+        self.output_format
        = output_format\\n+        self.cookie_file = cookie_file\\n+        self.search_query
        = search_query\\n+        self.filter_results = filter_results\\n+\\n+        if
        self.output_format == \\\"m4a\\\":\\n+            ytdl_format = \\\"bestaudio[ext=m4a]/bestaudio/best\\\"\\n+
        \       elif self.output_format == \\\"opus\\\":\\n+            ytdl_format
        = \\\"bestaudio[ext=webm]/bestaudio/best\\\"\\n+        else:\\n+            ytdl_format
        = \\\"bestaudio\\\"\\n+\\n+        yt_dlp_options = {\\n+            \\\"format\\\":
        ytdl_format,\\n+            \\\"quiet\\\": True,\\n+            \\\"no_warnings\\\":
        True,\\n+            \\\"encoding\\\": \\\"UTF-8\\\",\\n+            \\\"logger\\\":
        YTDLLogger(),\\n+            \\\"cookiefile\\\": self.cookie_file,\\n+            \\\"outtmpl\\\":
        f\\\"{get_temp_path()}/%(id)s.%(ext)s\\\",\\n+            \\\"retries\\\":
        5,\\n+        }\\n+\\n+        if yt_dlp_args:\\n+            user_options
        = args_to_ytdlp_options(shlex.split(yt_dlp_args))\\n+            yt_dlp_options.update(user_options)\\n+\\n+
        \       self.audio_handler = YoutubeDL(yt_dlp_options)\\n+\\n+    def get_results(self,
        search_term: str, **kwargs) -> List[Result]:\\n+        \\\"\\\"\\\"\\n+        Get
        results from audio provider.\\n+\\n+        ### Arguments\\n+        - search_term:
        The search term to use.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - A list of results.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise NotImplementedError\\n+\\n+    def get_views(self, url: str)
        -> int:\\n+        \\\"\\\"\\\"\\n+        Get the number of views for a video.\\n+\\n+
        \       ### Arguments\\n+        - url: The url of the video.\\n+\\n+        ###
        Returns\\n+        - The number of views.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       data = self.get_download_metadata(url)\\n+\\n+        return data[\\\"view_count\\\"]\\n+\\n+
        \   def search(self, song: Song, only_verified: bool = False) -> Optional[str]:\\n+
        \       \\\"\\\"\\\"\\n+        Search for a song and return best match.\\n+\\n+
        \       ### Arguments\\n+        - song: The song to search for.\\n+\\n+        ###
        Returns\\n+        - The url of the best match or None if no match was found.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # Create initial search query\\n+        search_query
        = create_song_title(song.name, song.artists).lower()\\n+        if self.search_query:\\n+
        \           search_query = create_search_query(\\n+                song, self.search_query,
        False, None, True\\n+            )\\n+\\n+        logger.debug(\\\"[%s] Searching
        for %s\\\", song.song_id, search_query)\\n+\\n+        isrc_urls: List[str]
        = []\\n+\\n+        # search for song using isrc if it's available\\n+        if
        song.isrc and self.SUPPORTS_ISRC and not self.search_query:\\n+            isrc_results
        = self.get_results(song.isrc, **self.GET_RESULTS_OPTS[0])\\n+\\n+            if
        only_verified:\\n+                isrc_results = [result for result in isrc_results
        if result.verified]\\n+\\n+            isrc_urls = [result.url for result
        in isrc_results]\\n+            sorted_isrc_results = order_results(isrc_results,
        song, self.search_query)\\n+            logger.debug(\\n+                \\\"[%s]
        Found %s results for ISRC %s\\\",\\n+                song.song_id,\\n+                len(isrc_results),\\n+
        \               song.isrc,\\n+            )\\n+\\n+            if len(isrc_results)
        > 0:\\n+                # get the best result, if the score is above 80 return
        it\\n+                best_isrc_results = sorted(\\n+                    sorted_isrc_results.items(),
        key=lambda x: x[1], reverse=True\\n+                )\\n+                logger.debug(\\n+
        \                   \\\"[%s] Filtered to %s ISRC results\\\",\\n+                    song.song_id,\\n+
        \                   len(best_isrc_results),\\n+                )\\n+\\n+                if
        len(best_isrc_results) > 0:\\n+                    best_isrc = best_isrc_results[0]\\n+
        \                   if best_isrc[1] > 80.0:\\n+                        logger.debug(\\n+
        \                           \\\"[%s] Best ISRC result is %s with score %s\\\",\\n+
        \                           song.song_id,\\n+                            best_isrc[0].url,\\n+
        \                           best_isrc[1],\\n+                        )\\n+\\n+
        \                       return best_isrc[0].url\\n+\\n+        results: Dict[Result,
        float] = {}\\n+        for options in self.GET_RESULTS_OPTS:\\n+            #
        Query YTM by songs only first, this way if we get correct result on the first
        try\\n+            # we don't have to make another request\\n+            search_results
        = self.get_results(search_query, **options)\\n+\\n+            if only_verified:\\n+
        \               search_results = [\\n+                    result for result
        in search_results if result.verified\\n+                ]\\n+\\n+            logger.debug(\\n+
        \               \\\"[%s] Found %s results for search query %s with options
        %s\\\",\\n+                song.song_id,\\n+                len(search_results),\\n+
        \               search_query,\\n+                options,\\n+            )\\n+\\n+
        \           # Check if any of the search results is in the\\n+            #
        first isrc results, since they are not hashable we have to check\\n+            #
        by name\\n+            isrc_result = next(\\n+                (result for
        result in search_results if result.url in isrc_urls),\\n+                None,\\n+
        \           )\\n+\\n+            if isrc_result:\\n+                logger.debug(\\n+
        \                   \\\"[%s] Best ISRC result is %s\\\", song.song_id, isrc_result.url\\n+
        \               )\\n+\\n+                return isrc_result.url\\n+\\n+            logger.debug(\\n+
        \               \\\"[%s] Have to filter results: %s\\\", song.song_id, self.filter_results\\n+
        \           )\\n+\\n+            if self.filter_results:\\n+                #
        Order results\\n+                new_results = order_results(search_results,
        song, self.search_query)\\n+            else:\\n+                new_results
        = {}\\n+                if len(search_results) > 0:\\n+                    new_results
        = {search_results[0]: 100.0}\\n+\\n+            logger.debug(\\\"[%s] Filtered
        to %s results\\\", song.song_id, len(new_results))\\n+\\n+            # song
        type results are always more accurate than video type,\\n+            # so
        if we get score of 80 or above\\n+            # we are almost 100% sure that
        this is the correct link\\n+            if len(new_results) != 0:\\n+                #
        get the result with highest score\\n+                best_result, best_score
        = self.get_best_result(new_results)\\n+                logger.debug(\\n+                    \\\"[%s]
        Best result is %s with score %s\\\",\\n+                    song.song_id,\\n+
        \                   best_result.url,\\n+                    best_score,\\n+
        \               )\\n+\\n+                if best_score >= 80 and best_result.verified:\\n+
        \                   logger.debug(\\n+                        \\\"[%s] Returning
        verified best result %s with score %s\\\",\\n+                        song.song_id,\\n+
        \                       best_result.url,\\n+                        best_score,\\n+
        \                   )\\n+\\n+                    return best_result.url\\n+\\n+
        \               # Update final results with new results\\n+                results.update(new_results)\\n+\\n+
        \       # No matches found\\n+        if not results:\\n+            logger.debug(\\\"[%s]
        No results found\\\", song.song_id)\\n+            return None\\n+\\n+        #
        get the result with highest score\\n+        best_result, best_score = self.get_best_result(results)\\n+
        \       logger.debug(\\n+            \\\"[%s] Returning best result %s with
        score %s\\\",\\n+            song.song_id,\\n+            best_result.url,\\n+
        \           best_score,\\n+        )\\n+\\n+        return best_result.url\\n+\\n+
        \   def get_best_result(self, results: Dict[Result, float]) -> Tuple[Result,
        float]:\\n+        \\\"\\\"\\\"\\n+        Get the best match from the results\\n+
        \       using views and average match\\n+\\n+        ### Arguments\\n+        -
        results: A dictionary of results and their scores\\n+\\n+        ### Returns\\n+
        \       - The best match URL and its score\\n+        \\\"\\\"\\\"\\n+\\n+
        \       best_results = get_best_matches(results, 8)\\n+\\n+        # If we
        have only one result, return it\\n+        if len(best_results) == 1:\\n+
        \           return best_results[0][0], best_results[0][1]\\n+\\n+        #
        Initial best result based on the average match\\n+        best_result = best_results[0]\\n+\\n+
        \       # If the best result has a score higher than 80%\\n+        # and
        it's a isrc search, return it\\n+        if best_result[1] > 80 and best_result[0].isrc_search:\\n+
        \           return best_result[0], best_result[1]\\n+\\n+        # If we have
        more than one result,\\n+        # return the one with the highest score\\n+
        \       # and most views\\n+        if len(best_results) > 1:\\n+            views:
        List[int] = []\\n+            for best_result in best_results:\\n+                if
        best_result[0].views:\\n+                    views.append(best_result[0].views)\\n+
        \               else:\\n+                    views.append(self.get_views(best_result[0].url))\\n+\\n+
        \           highest_views = max(views)\\n+            lowest_views = min(views)\\n+\\n+
        \           if highest_views in (0, lowest_views):\\n+                return
        best_result[0], best_result[1]\\n+\\n+            weighted_results: List[Tuple[Result,
        float]] = []\\n+            for index, best_result in enumerate(best_results):\\n+
        \               result_views = views[index]\\n+                views_score
        = (\\n+                    (result_views - lowest_views) / (highest_views
        - lowest_views)\\n+                ) * 15\\n+                score = min(best_result[1]
        + views_score, 100)\\n+                weighted_results.append((best_result[0],
        score))\\n+\\n+            # Now we return the result with the highest score\\n+
        \           return max(weighted_results, key=lambda x: x[1])\\n+\\n+        return
        best_result[0], best_result[1]\\n+\\n+    def get_download_metadata(self,
        url: str, download: bool = False) -> Dict:\\n+        \\\"\\\"\\\"\\n+        Get
        metadata for a download using yt-dlp.\\n+\\n+        ### Arguments\\n+        -
        url: The url to get metadata for.\\n+\\n+        ### Returns\\n+        -
        A dictionary containing the metadata.\\n+        \\\"\\\"\\\"\\n+\\n+        try:\\n+
        \           data = self.audio_handler.extract_info(url, download=download)\\n+\\n+
        \           if data:\\n+                return data\\n+        except Exception
        as exception:\\n+            logger.debug(exception)\\n+            raise
        AudioProviderError(f\\\"YT-DLP download error - {url}\\\") from exception\\n+\\n+
        \       raise AudioProviderError(f\\\"No metadata found for the provided url
        {url}\\\")\\n+\\n+    @property\\n+    def name(self) -> str:\\n+        \\\"\\\"\\\"\\n+
        \       Get the name of the provider.\\n+\\n+        ### Returns\\n+        -
        The name of the provider.\\n+        \\\"\\\"\\\"\\n+\\n+        return self.__class__.__name__\"},{\"sha\":\"99e0aa9cf34aa380d7fa05013be468b54fec56de\",\"filename\":\"spotdl/providers/audio/piped.py\",\"status\":\"added\",\"additions\":172,\"deletions\":0,\"changes\":172,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fpiped.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fpiped.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fpiped.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,172 @@\\n+\\\"\\\"\\\"\\n+Piped module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+\\n+import logging\\n+import shlex\\n+from typing
        import Any, Dict, List, Optional\\n+\\n+import requests\\n+from yt_dlp import
        YoutubeDL\\n+\\n+from spotdl.providers.audio.base import ISRC_REGEX, AudioProvider,
        YTDLLogger\\n+from spotdl.types.result import Result\\n+from spotdl.utils.config
        import GlobalConfig, get_temp_path\\n+from spotdl.utils.formatter import args_to_ytdlp_options\\n+\\n+__all__
        = [\\\"Piped\\\"]\\n+logger = logging.getLogger(__name__)\\n+\\n+HEADERS =
        {\\n+    \\\"accept\\\": \\\"*/*\\\",\\n+}\\n+\\n+\\n+class Piped(AudioProvider):\\n+
        \   \\\"\\\"\\\"\\n+    YouTube Music audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+
        \   SUPPORTS_ISRC = True\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] = [\\n+
        \       {\\\"filter\\\": \\\"music_songs\\\"},\\n+        {\\\"filter\\\":
        \\\"music_videos\\\"},\\n+    ]\\n+\\n+    def __init__(  # pylint: disable=super-init-not-called\\n+
        \       self,\\n+        output_format: str = \\\"mp3\\\",\\n+        cookie_file:
        Optional[str] = None,\\n+        search_query: Optional[str] = None,\\n+        filter_results:
        bool = True,\\n+        yt_dlp_args: Optional[str] = None,\\n+    ) -> None:\\n+
        \       \\\"\\\"\\\"\\n+        Pipe audio provider class\\n+\\n+        ###
        Arguments\\n+        - output_directory: The directory to save the downloaded
        songs to.\\n+        - output_format: The format to save the downloaded songs
        in.\\n+        - cookie_file: The path to a file containing cookies to be
        used by YTDL.\\n+        - search_query: The query to use when searching for
        songs.\\n+        - filter_results: Whether to filter results.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.output_format = output_format\\n+        self.cookie_file = cookie_file\\n+
        \       self.search_query = search_query\\n+        self.filter_results =
        filter_results\\n+\\n+        if self.output_format == \\\"m4a\\\":\\n+            ytdl_format
        = \\\"best[ext=m4a]/best\\\"\\n+        elif self.output_format == \\\"opus\\\":\\n+
        \           ytdl_format = \\\"best[ext=webm]/best\\\"\\n+        else:\\n+
        \           ytdl_format = \\\"best\\\"\\n+\\n+        yt_dlp_options = {\\n+
        \           \\\"format\\\": ytdl_format,\\n+            \\\"quiet\\\": True,\\n+
        \           \\\"no_warnings\\\": True,\\n+            \\\"encoding\\\": \\\"UTF-8\\\",\\n+
        \           \\\"logger\\\": YTDLLogger(),\\n+            \\\"cookiefile\\\":
        self.cookie_file,\\n+            \\\"outtmpl\\\": f\\\"{get_temp_path()}/%(id)s.%(ext)s\\\",\\n+
        \           \\\"retries\\\": 5,\\n+        }\\n+\\n+        if yt_dlp_args:\\n+
        \           user_options = args_to_ytdlp_options(shlex.split(yt_dlp_args))\\n+
        \           yt_dlp_options.update(user_options)\\n+\\n+        self.audio_handler
        = YoutubeDL(yt_dlp_options)\\n+        self.session = requests.Session()\\n+\\n+
        \   def get_results(self, search_term: str, **kwargs) -> List[Result]:\\n+
        \       \\\"\\\"\\\"\\n+        Get results from YouTube Music API and simplify
        them\\n+\\n+        ### Arguments\\n+        - search_term: The search term
        to search for.\\n+        - kwargs: other keyword arguments passed to the
        `YTMusic.search` method.\\n+\\n+        ### Returns\\n+        - A list of
        simplified results (dicts)\\n+        \\\"\\\"\\\"\\n+\\n+        if kwargs
        is None:\\n+            kwargs = {}\\n+\\n+        params = {\\\"q\\\": search_term,
        **kwargs}\\n+\\n+        response = self.session.get(\\n+            \\\"https://pipedapi.kavin.rocks/search\\\",\\n+
        \           params=params,\\n+            headers=HEADERS,\\n+            timeout=20,\\n+
        \       )\\n+\\n+        search_results = response.json()\\n+\\n+        #
        Simplify results\\n+        results = []\\n+        for result in search_results[\\\"items\\\"]:\\n+
        \           isrc_result = ISRC_REGEX.search(search_term)\\n+\\n+            results.append(\\n+
        \               Result(\\n+                    source=\\\"piped\\\",\\n+                    url=f\\\"https://piped.video{result['url']}\\\",\\n+
        \                   verified=kwargs.get(\\\"filter\\\") == \\\"music_songs\\\",\\n+
        \                   name=result[\\\"title\\\"],\\n+                    duration=result[\\\"duration\\\"],\\n+
        \                   author=result[\\\"uploaderName\\\"],\\n+                    result_id=result[\\\"url\\\"].split(\\\"?v=\\\")[1],\\n+
        \                   artists=(result[\\\"uploaderName\\\"],)\\n+                    if
        kwargs.get(\\\"filter\\\") == \\\"music_songs\\\"\\n+                    else
        None,\\n+                    isrc_search=isrc_result is not None,\\n+                    search_query=search_term,\\n+
        \               )\\n+            )\\n+\\n+        return results\\n+\\n+    def
        get_download_metadata(self, url: str, download: bool = False) -> Dict:\\n+
        \       \\\"\\\"\\\"\\n+        Get metadata for a download using yt-dlp.\\n+\\n+
        \       ### Arguments\\n+        - url: The url to get metadata for.\\n+\\n+
        \       ### Returns\\n+        - A dictionary containing the metadata.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        url_id = url.split(\\\"?v=\\\")[1]\\n+
        \       piped_data = requests.get(\\n+            f\\\"https://pipedapi.kavin.rocks/streams/{url_id}\\\",\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       ).json()\\n+\\n+        yt_dlp_json = {\\n+            \\\"title\\\":
        piped_data[\\\"title\\\"],\\n+            \\\"id\\\": url_id,\\n+            \\\"view_count\\\":
        piped_data[\\\"views\\\"],\\n+            \\\"extractor\\\": \\\"Generic\\\",\\n+
        \           \\\"formats\\\": [],\\n+        }\\n+\\n+        for audio_stream
        in piped_data[\\\"audioStreams\\\"]:\\n+            yt_dlp_json[\\\"formats\\\"].append(\\n+
        \               {\\n+                    \\\"url\\\": audio_stream[\\\"url\\\"],\\n+
        \                   \\\"ext\\\": \\\"webm\\\" if audio_stream[\\\"codec\\\"]
        == \\\"opus\\\" else \\\"m4a\\\",\\n+                    \\\"abr\\\": audio_stream[\\\"quality\\\"].split(\\\"
        \\\")[0],\\n+                    \\\"filesize\\\": audio_stream[\\\"contentLength\\\"],\\n+
        \               }\\n+            )\\n+\\n+        return self.audio_handler.process_video_result(yt_dlp_json,
        download=download)\"},{\"sha\":\"657cc7501b1ac003b9e8da766394292425c7af21\",\"filename\":\"spotdl/providers/audio/sliderkz.py\",\"status\":\"added\",\"additions\":94,\"deletions\":0,\"changes\":94,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fsliderkz.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fsliderkz.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fsliderkz.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,94 @@\\n+\\\"\\\"\\\"\\n+SliderKZ module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from typing import Any, Dict,
        List\\n+\\n+import requests\\n+\\n+from spotdl.providers.audio.base import
        AudioProvider\\n+from spotdl.types.result import Result\\n+from spotdl.utils.config
        import GlobalConfig\\n+\\n+__all__ = [\\\"SliderKZ\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+HEADERS
        = {\\n+    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64;
        rv:109.0) Gecko/20100101 Firefox/111.0\\\"\\n+}\\n+\\n+\\n+class SliderKZ(AudioProvider):\\n+
        \   \\\"\\\"\\\"\\n+    Slider.kz audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+
        \   SUPPORTS_ISRC = False\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] =
        [{}]\\n+\\n+    def get_results(self, search_term: str, *_args, **_kwargs)
        -> List[Result]:\\n+        \\\"\\\"\\\"\\n+        Get results from slider.kz\\n+\\n+
        \       ### Arguments\\n+        - search_term: The search term to search
        for.\\n+        - args: Unused.\\n+        - kwargs: Unused.\\n+\\n+        ###
        Returns\\n+        - A list of slider.kz results if found, None otherwise.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        search_results = None\\n+        max_retries
        = 0\\n+\\n+        while not search_results and max_retries < 3:\\n+            try:\\n+
        \               search_response = requests.get(\\n+                    url=\\\"https://slider.kz/vk_auth.php?q=\\\"
        + search_term,\\n+                    headers=HEADERS,\\n+                    timeout=5,\\n+
        \                   proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \               )\\n+\\n+                # Check if the response is valid\\n+
        \               if len(search_response.text) > 30:\\n+                    #
        Set the search results to the json response\\n+                    # effectively
        breaking out of the loop\\n+                    search_results = search_response.json()\\n+\\n+
        \           except Exception as exc:\\n+                logger.debug(\\n+
        \                   \\\"Slider.kz search failed for query %s with error: %s.
        Retrying...\\\",\\n+                    search_term,\\n+                    exc,\\n+
        \               )\\n+\\n+            max_retries += 1\\n+\\n+        if not
        search_results:\\n+            logger.debug(\\\"Slider.kz search failed for
        query %s\\\", search_term)\\n+            return []\\n+\\n+        results
        = []\\n+        for result in search_results[\\\"audios\\\"][\\\"\\\"]:\\n+
        \           # urls from slider.kz sometimes are relative, so we need to add
        the domain\\n+            if \\\"https://\\\" not in result[\\\"url\\\"]:\\n+
        \               result[\\\"url\\\"] = \\\"https://slider.kz/\\\" + result[\\\"url\\\"]\\n+\\n+
        \           results.append(\\n+                Result(\\n+                    source=\\\"slider.kz\\\",\\n+
        \                   url=result.get(\\\"url\\\"),\\n+                    verified=False,\\n+
        \                   name=result.get(\\\"tit_art\\\"),\\n+                    duration=int(result.get(\\\"duration\\\",
        -9999)),\\n+                    author=\\\"slider.kz\\\",\\n+                    result_id=result.get(\\\"id\\\"),\\n+
        \                   views=1,\\n+                )\\n+            )\\n+\\n+
        \       return results\"},{\"sha\":\"8a317b116ddc9c3927312e0a7abd1630cd5ba696\",\"filename\":\"spotdl/providers/audio/soundcloud.py\",\"status\":\"added\",\"additions\":94,\"deletions\":0,\"changes\":94,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fsoundcloud.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fsoundcloud.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fsoundcloud.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,94 @@\\n+\\\"\\\"\\\"\\n+SoundCloud module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+import re\\n+from itertools
        import islice\\n+from typing import Any, Dict, List\\n+\\n+from soundcloud
        import SoundCloud as SoundCloudClient\\n+\\n+from spotdl.providers.audio.base
        import AudioProvider\\n+from spotdl.types.result import Result\\n+\\n+__all__
        = [\\\"SoundCloud\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        SoundCloud(AudioProvider):\\n+    \\\"\\\"\\\"\\n+    SoundCloud audio provider
        class\\n+    \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC = False\\n+    GET_RESULTS_OPTS:
        List[Dict[str, Any]] = [{}]\\n+\\n+    def __init__(self, *args: Any, **kwargs:
        Any) -> None:\\n+        \\\"\\\"\\\"\\n+        Initialize the SoundCloud
        API\\n+\\n+        ### Arguments\\n+        - args: Arguments passed to the
        `AudioProvider` class.\\n+        - kwargs: Keyword arguments passed to the
        `AudioProvider` class.\\n+        \\\"\\\"\\\"\\n+\\n+        super().__init__(*args,
        **kwargs)\\n+        self.client = SoundCloudClient()\\n+\\n+    def get_results(self,
        search_term: str, *_args, **_kwargs) -> List[Result]:\\n+        \\\"\\\"\\\"\\n+
        \       Get results from slider.kz\\n+\\n+        ### Arguments\\n+        -
        search_term: The search term to search for.\\n+        - args: Unused.\\n+
        \       - kwargs: Unused.\\n+\\n+        ### Returns\\n+        - A list of
        slider.kz results if found, None otherwise.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       results = list(islice(self.client.search(search_term), 20))\\n+        regex
        = r\\\"^(.+?)-|(\\\\(\\\\w+[\\\\s\\\\S]*\\\\))\\\"\\n+        # Because anyone
        can post on soundcloud, we do another search with an edited search\\n+        #
        The regex removes anything in brackets and the artist(s)'s name(s) if in the
        name\\n+        edited_search_term = re.sub(regex, \\\"\\\", search_term)\\n+
        \       results.extend(list(islice(self.client.search(edited_search_term),
        20)))\\n+\\n+        # Simplify results\\n+        simplified_results = []\\n+
        \       for result in results:\\n+            if result.kind != \\\"track\\\":\\n+
        \               continue\\n+\\n+            # Ignore results that are not
        playable\\n+            if \\\"/preview/\\\" in result.media.transcodings[0].url:\\n+
        \               continue\\n+\\n+            album = self.client.get_track_albums(result.id)\\n+\\n+
        \           try:\\n+                album_name = next(album).title\\n+            except
        StopIteration:\\n+                album_name = None\\n+\\n+            simplified_results.append(\\n+
        \               Result(\\n+                    source=\\\"soundcloud\\\",\\n+
        \                   url=result.permalink_url,\\n+                    name=result.title,\\n+
        \                   verified=result.user.verified,\\n+                    duration=result.full_duration,\\n+
        \                   author=result.user.username,\\n+                    result_id=result.id,\\n+
        \                   isrc_search=False,\\n+                    search_query=search_term,\\n+
        \                   views=result.playback_count,\\n+                    explicit=False,\\n+
        \                   album=album_name,\\n+                )\\n+            )\\n+\\n+
        \       return simplified_results\"},{\"sha\":\"817fccdd6e8c32e586aa3bb81835d77b5a3e1ee9\",\"filename\":\"spotdl/providers/audio/youtube.py\",\"status\":\"added\",\"additions\":71,\"deletions\":0,\"changes\":71,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fyoutube.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fyoutube.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fyoutube.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,71 @@\\n+\\\"\\\"\\\"\\n+Youtube module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+from typing import Any, Dict, List, Optional\\n+\\n+from
        pytube import Search\\n+from pytube import YouTube as PyTube\\n+\\n+from spotdl.providers.audio.base
        import AudioProvider\\n+from spotdl.types.result import Result\\n+\\n+__all__
        = [\\\"YouTube\\\"]\\n+\\n+\\n+class YouTube(AudioProvider):\\n+    \\\"\\\"\\\"\\n+
        \   YouTube audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC
        = False\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] = [{}]\\n+\\n+    def
        get_results(\\n+        self, search_term: str, *_args, **_kwargs\\n+    )
        -> List[Result]:  # pylint: disable=W0221\\n+        \\\"\\\"\\\"\\n+        Get
        results from YouTube\\n+\\n+        ### Arguments\\n+        - search_term:
        The search term to search for.\\n+        - args: Unused.\\n+        - kwargs:
        Unused.\\n+\\n+        ### Returns\\n+        - A list of YouTube results
        if found, None otherwise.\\n+        \\\"\\\"\\\"\\n+\\n+        search_results:
        Optional[List[PyTube]] = Search(search_term).results\\n+\\n+        if not
        search_results:\\n+            return []\\n+\\n+        results = []\\n+        for
        result in search_results:\\n+            if result.watch_url:\\n+                try:\\n+
        \                   duration = result.length\\n+                except Exception:\\n+
        \                   duration = 0\\n+\\n+                try:\\n+                    views
        = result.views\\n+                except Exception:\\n+                    views
        = 0\\n+\\n+                results.append(\\n+                    Result(\\n+
        \                       source=self.name,\\n+                        url=result.watch_url,\\n+
        \                       verified=False,\\n+                        name=result.title,\\n+
        \                       duration=duration,\\n+                        author=result.author,\\n+
        \                       search_query=search_term,\\n+                        views=views,\\n+
        \                       result_id=result.video_id,\\n+                    )\\n+
        \               )\\n+\\n+        return results\"},{\"sha\":\"a9fd0112ae36cb247c50148f0272bd117abd03a5\",\"filename\":\"spotdl/providers/audio/ytmusic.py\",\"status\":\"added\",\"additions\":88,\"deletions\":0,\"changes\":88,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fytmusic.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Faudio%2Fytmusic.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fytmusic.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,88 @@\\n+\\\"\\\"\\\"\\n+YTMusic module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+from typing import Any, Dict, List\\n+\\n+from
        ytmusicapi import YTMusic\\n+\\n+from spotdl.providers.audio.base import ISRC_REGEX,
        AudioProvider\\n+from spotdl.types.result import Result\\n+from spotdl.utils.formatter
        import parse_duration\\n+\\n+__all__ = [\\\"YouTubeMusic\\\"]\\n+\\n+\\n+class
        YouTubeMusic(AudioProvider):\\n+    \\\"\\\"\\\"\\n+    YouTube Music audio
        provider class\\n+    \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC = True\\n+    GET_RESULTS_OPTS:
        List[Dict[str, Any]] = [\\n+        {\\\"filter\\\": \\\"songs\\\", \\\"ignore_spelling\\\":
        True, \\\"limit\\\": 50},\\n+        {\\\"filter\\\": \\\"videos\\\", \\\"ignore_spelling\\\":
        True, \\\"limit\\\": 50},\\n+    ]\\n+\\n+    def __init__(self, *args: Any,
        **kwargs: Any) -> None:\\n+        \\\"\\\"\\\"\\n+        Initialize the
        YouTube Music API\\n+\\n+        ### Arguments\\n+        - args: Arguments
        passed to the `AudioProvider` class.\\n+        - kwargs: Keyword arguments
        passed to the `AudioProvider` class.\\n+        \\\"\\\"\\\"\\n+\\n+        super().__init__(*args,
        **kwargs)\\n+\\n+        self.client = YTMusic(language=\\\"de\\\")\\n+\\n+
        \   def get_results(self, search_term: str, **kwargs) -> List[Result]:\\n+
        \       \\\"\\\"\\\"\\n+        Get results from YouTube Music API and simplify
        them\\n+\\n+        ### Arguments\\n+        - search_term: The search term
        to search for.\\n+        - kwargs: other keyword arguments passed to the
        `YTMusic.search` method.\\n+\\n+        ### Returns\\n+        - A list of
        simplified results (dicts)\\n+        \\\"\\\"\\\"\\n+\\n+        search_results
        = self.client.search(search_term, **kwargs)\\n+\\n+        # Simplify results\\n+
        \       results = []\\n+        for result in search_results:\\n+            if
        (\\n+                result is None\\n+                or result.get(\\\"videoId\\\")
        is None\\n+                or result.get(\\\"artists\\\") in [[], None]\\n+
        \           ):\\n+                continue\\n+\\n+            isrc_result
        = ISRC_REGEX.search(search_term)\\n+\\n+            results.append(\\n+                Result(\\n+
        \                   source=self.name,\\n+                    url=(\\n+                        f'https://{\\\"music\\\"
        if result[\\\"resultType\\\"] == \\\"song\\\" else \\\"www\\\"}'\\n+                        f\\\".youtube.com/watch?v={result['videoId']}\\\"\\n+
        \                   ),\\n+                    verified=result.get(\\\"resultType\\\")
        == \\\"song\\\",\\n+                    name=result[\\\"title\\\"],\\n+                    result_id=result[\\\"videoId\\\"],\\n+
        \                   author=result[\\\"artists\\\"][0][\\\"name\\\"],\\n+                    artists=tuple(map(lambda
        a: a[\\\"name\\\"], result[\\\"artists\\\"])),\\n+                    duration=parse_duration(result.get(\\\"duration\\\")),\\n+
        \                   isrc_search=isrc_result is not None,\\n+                    search_query=search_term,\\n+
        \                   explicit=result.get(\\\"isExplicit\\\"),\\n+                    album=result.get(\\\"album\\\",
        {}).get(\\\"name\\\")\\n+                    if result.get(\\\"album\\\")\\n+
        \                   else None,\\n+                )\\n+            )\\n+\\n+
        \       return results\"},{\"sha\":\"e46a3bb80e890ec43b8f8205113e1aa995c79966\",\"filename\":\"spotdl/providers/lyrics/__init__.py\",\"status\":\"added\",\"additions\":11,\"deletions\":0,\"changes\":11,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,11 @@\\n+\\\"\\\"\\\"\\n+Lyrics providers for spotdl.\\n+\\\"\\\"\\\"\\n+\\n+from
        spotdl.providers.lyrics.azlyrics import AzLyrics\\n+from spotdl.providers.lyrics.base
        import LyricsProvider\\n+from spotdl.providers.lyrics.genius import Genius\\n+from
        spotdl.providers.lyrics.musixmatch import MusixMatch\\n+from spotdl.providers.lyrics.synced
        import Synced\\n+\\n+__all__ = [\\\"AzLyrics\\\", \\\"Genius\\\", \\\"MusixMatch\\\",
        \\\"Synced\\\", \\\"LyricsProvider\\\"]\"},{\"sha\":\"45222465559e4c872ced517f7ab93257304ce5b8\",\"filename\":\"spotdl/providers/lyrics/azlyrics.py\",\"status\":\"added\",\"additions\":147,\"deletions\":0,\"changes\":147,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fazlyrics.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fazlyrics.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fazlyrics.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,147 @@\\n+\\\"\\\"\\\"\\n+AZLyrics lyrics module.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import Dict, List, Optional\\n+\\n+import requests\\n+from bs4 import
        BeautifulSoup\\n+\\n+from spotdl.providers.lyrics.base import LyricsProvider\\n+\\n+__all__
        = [\\\"AzLyrics\\\"]\\n+\\n+\\n+class AzLyrics(LyricsProvider):\\n+    \\\"\\\"\\\"\\n+
        \   AZLyrics lyrics provider class.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(self):\\n+
        \       super().__init__()\\n+\\n+        self.session = requests.Session()\\n+
        \       self.session.headers.update(self.headers)\\n+\\n+        self.x_code
        = self.get_x_code()\\n+\\n+    def get_results(self, name: str, artists: List[str],
        **_) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+        Returns the results
        for the given song.\\n+\\n+        ### Arguments\\n+        - name: The name
        of the song.\\n+        - artists: The artists of the song.\\n+        - kwargs:
        Additional arguments.\\n+\\n+        ### Returns\\n+        - A dictionary
        with the results. (The key is the title and the value is the url.)\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if self.x_code is None:\\n+            self.x_code = self.get_x_code()\\n+\\n+
        \       if self.x_code is None:\\n+            return {}\\n+\\n+        #
        Join every artist by comma in artists\\n+        artist_str = \\\", \\\".join(artist
        for artist in artists if artist)\\n+\\n+        params = {\\n+            \\\"q\\\":
        f\\\"{artist_str} - {name}\\\",\\n+            \\\"x\\\": self.x_code,\\n+
        \       }\\n+\\n+        counter = 0\\n+        soup = None\\n+        while
        counter < 4:\\n+            try:\\n+                response = self.session.get(\\n+
        \                   \\\"https://search.azlyrics.com/search.php\\\", params=params\\n+
        \               )\\n+            except requests.ConnectionError:\\n+                continue\\n+\\n+
        \           if not response.ok:\\n+                counter += 1\\n+                continue\\n+\\n+
        \           soup = BeautifulSoup(response.content, \\\"html.parser\\\")\\n+
        \           break\\n+\\n+        if soup is None:\\n+            return {}\\n+\\n+
        \       td_tags = soup.find_all(\\\"td\\\")\\n+        if len(td_tags) ==
        0:\\n+            return {}\\n+\\n+        results = {}\\n+        for td_tag
        in td_tags:\\n+            a_tags = td_tag.find_all(\\\"a\\\", href=True)\\n+
        \           if len(a_tags) == 0:\\n+                continue\\n+\\n+            a_tag
        = a_tags[0]\\n+            url = a_tag[\\\"href\\\"].strip()\\n+            if
        url == \\\"\\\":\\n+                continue\\n+\\n+            title = td_tag.find(\\\"span\\\").get_text().strip()\\n+
        \           artist = td_tag.find(\\\"b\\\").get_text().strip()\\n+\\n+            results[f\\\"{artist}
        - {title}\\\"] = url\\n+\\n+        return results\\n+\\n+    def extract_lyrics(self,
        url: str, **_) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Extracts
        the lyrics from the given url.\\n+\\n+        ### Arguments\\n+        - url:
        The url to extract the lyrics from.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+\\n+        response = self.session.get(url)\\n+
        \       soup = BeautifulSoup(response.content, \\\"html.parser\\\")\\n+\\n+
        \       # Find all divs that don't have a class\\n+        div_tags = soup.find_all(\\\"div\\\",
        class_=False, id_=False)\\n+\\n+        # Find the div with the longest text\\n+
        \       lyrics_div = sorted(div_tags, key=lambda x: len(x.text))[-1]\\n+\\n+
        \       # extract lyrics from div and clean it up\\n+        lyrics = lyrics_div.get_text().strip()\\n+\\n+
        \       return lyrics\\n+\\n+    def get_x_code(self) -> Optional[str]:\\n+
        \       \\\"\\\"\\\"\\n+        Returns the x_code used by AZLyrics.\\n+\\n+
        \       ### Returns\\n+        - The x_code used by AZLyrics or None if it
        couldn't be retrieved.\\n+        \\\"\\\"\\\"\\n+\\n+        x_code = None\\n+\\n+
        \       try:\\n+            self.session.get(\\\"https://www.azlyrics.com/\\\")\\n+\\n+
        \           resp = self.session.get(\\\"https://www.azlyrics.com/geo.js\\\")\\n+\\n+
        \           # extract value from js code\\n+            js_code = resp.text\\n+
        \           start_index = js_code.find('value\\\"') + 9\\n+            end_index
        = js_code[start_index:].find('\\\");')\\n+\\n+            x_code = js_code[start_index
        : start_index + end_index]\\n+        except requests.ConnectionError:\\n+
        \           pass\\n+\\n+        return x_code\"},{\"sha\":\"43f1227b10e8865f9976edfc955d228b5a70aead\",\"filename\":\"spotdl/providers/lyrics/base.py\",\"status\":\"added\",\"additions\":123,\"deletions\":0,\"changes\":123,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fbase.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fbase.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fbase.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,123 @@\\n+\\\"\\\"\\\"\\n+Base module for all other lyrics providers.\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+from typing import Dict, List, Optional\\n+\\n+from spotdl.utils.formatter
        import ratio, slugify\\n+\\n+__all__ = [\\\"LyricsProvider\\\"]\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class LyricsProvider:\\n+    \\\"\\\"\\\"\\n+
        \   Base class for all other lyrics providers.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   def __init__(self):\\n+        \\\"\\\"\\\"\\n+        Init the lyrics
        provider searchand set headers.\\n+        \\\"\\\"\\\"\\n+\\n+        self.headers
        = {\\n+            \\\"Connection\\\": \\\"keep-alive\\\",\\n+            \\\"Pragma\\\":
        \\\"no-cache\\\",\\n+            \\\"Cache-Control\\\": \\\"no-cache\\\",\\n+
        \           \\\"sec-ch-ua\\\": '\\\"Chromium\\\";v=\\\"104\\\", \\\" Not A;Brand\\\";v=\\\"99\\\",
        \\\"Google Chrome\\\";v=\\\"104\\\"',\\n+            \\\"User-Agent\\\": \\\"Mozilla/5.0
        (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \\\"\\n+            \\\"(KHTML,
        like Gecko) Chrome/104.0.0.0 Safari/537.36\\\",\\n+            \\\"Accept\\\":
        \\\"*/*\\\",\\n+            \\\"Sec-Fetch-Site\\\": \\\"same-origin\\\",\\n+
        \           \\\"Sec-Fetch-Mode\\\": \\\"cors\\\",\\n+            \\\"Sec-Fetch-Dest\\\":
        \\\"empty\\\",\\n+            \\\"Accept-Language\\\": \\\"en-US;q=0.8,en;q=0.7\\\",\\n+
        \       }\\n+\\n+    def get_results(self, name: str, artists: List[str],
        **kwargs) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+        Returns the
        results for the given song.\\n+\\n+        ### Arguments\\n+        - name:
        The name of the song.\\n+        - artists: The artists of the song.\\n+        -
        kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+        - A dictionary
        with the results. (The key is the title and the value is the url.)\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise NotImplementedError\\n+\\n+    def extract_lyrics(self, url:
        str, **kwargs) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Extracts
        the lyrics from the given url.\\n+\\n+        ### Arguments\\n+        - url:
        The url to extract the lyrics from.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+\\n+        raise NotImplementedError\\n+\\n+
        \   def get_lyrics(self, name: str, artists: List[str], **kwargs) -> Optional[str]:\\n+
        \       \\\"\\\"\\\"\\n+        Returns the lyrics for the given song.\\n+\\n+
        \       ### Arguments\\n+        - name: The name of the song.\\n+        -
        artists: The artists of the song.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+        try:\\n+            results
        = self.get_results(name, artists, **kwargs)\\n+        except Exception as
        exc:\\n+            logger.debug(\\n+                \\\"%s: Failed to get
        results for %s - %s: %s\\\",\\n+                self.name,\\n+                name,\\n+
        \               \\\", \\\".join(artists),\\n+                exc,\\n+            )\\n+
        \           return None\\n+\\n+        if not results:\\n+            return
        None\\n+\\n+        results_with_score = {}\\n+        for title, url in results.items():\\n+
        \           score = ratio(slugify(title), slugify(f\\\"{name} - {', '.join(artists)}\\\"))\\n+
        \           results_with_score[score] = url\\n+\\n+        if not results_with_score:\\n+
        \           return None\\n+\\n+        # Get song url with highest title match\\n+
        \       score, url = max(results_with_score.items(), key=lambda x: x[0])\\n+\\n+
        \       # Only return lyrics if the title match is at least 55%\\n+        if
        score < 55:\\n+            return None\\n+\\n+        try:\\n+            return
        self.extract_lyrics(url, **kwargs)\\n+        except Exception as exc:\\n+
        \           logger.debug(\\n+                \\\"%s: Failed to extract lyrics
        from %s: %s\\\", self.name, url, exc\\n+            )\\n+            return
        None\\n+\\n+    @property\\n+    def name(self) -> str:\\n+        \\\"\\\"\\\"\\n+
        \       Returns the name of the lyrics provider.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return self.__class__.__name__\"},{\"sha\":\"1f529b35d6fa39efa40c3aefe48741009f0fb03e\",\"filename\":\"spotdl/providers/lyrics/genius.py\",\"status\":\"added\",\"additions\":130,\"deletions\":0,\"changes\":130,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fgenius.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fgenius.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fgenius.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,130 @@\\n+\\\"\\\"\\\"\\n+Genius Lyrics module.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import Dict, List, Optional\\n+\\n+import requests\\n+from bs4 import
        BeautifulSoup\\n+\\n+from spotdl.providers.lyrics.base import LyricsProvider\\n+from
        spotdl.utils.config import GlobalConfig\\n+\\n+__all__ = [\\\"Genius\\\"]\\n+\\n+\\n+class
        Genius(LyricsProvider):\\n+    \\\"\\\"\\\"\\n+    Genius lyrics provider
        class.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(self):\\n+        \\\"\\\"\\\"\\n+
        \       Init the lyrics provider search and set headers.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       super().__init__()\\n+\\n+        self.headers.update(\\n+            {\\n+
        \               \\\"Authorization\\\": \\\"Bearer \\\"\\n+                \\\"alXXDbPZtK1m2RrZ8I4k2Hn8Ahsd0Gh_o076HYvcdlBvmc0ULL1H8Z8xRlew5qaG\\\",\\n+
        \           }\\n+        )\\n+\\n+    def get_results(self, name: str, artists:
        List[str], **_) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+        Returns
        the results for the given song.\\n+\\n+        ### Arguments\\n+        -
        name: The name of the song.\\n+        - artists: The artists of the song.\\n+
        \       - kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+        -
        A dictionary with the results. (The key is the title and the value is the
        url.)\\n+        \\\"\\\"\\\"\\n+\\n+        artists_str = \\\", \\\".join(artists)\\n+
        \       title = f\\\"{name} - {artists_str}\\\"\\n+\\n+        search_response
        = requests.get(\\n+            \\\"https://api.genius.com/search\\\",\\n+
        \           params={\\\"q\\\": title},\\n+            headers=self.headers,\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       )\\n+\\n+        results: Dict[str, str] = {}\\n+        for hit in
        search_response.json()[\\\"response\\\"][\\\"hits\\\"]:\\n+            results[hit[\\\"result\\\"][\\\"full_title\\\"]]
        = hit[\\\"result\\\"][\\\"id\\\"]\\n+\\n+        return results\\n+\\n+    def
        extract_lyrics(self, url: str, **_) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+
        \       Extracts the lyrics from the given url.\\n+\\n+        ### Arguments\\n+
        \       - url: The url to extract the lyrics from.\\n+        - kwargs: Additional
        arguments.\\n+\\n+        ### Returns\\n+        - The lyrics of the song
        or None if no lyrics were found.\\n+        \\\"\\\"\\\"\\n+\\n+        url
        = f\\\"https://api.genius.com/songs/{url}\\\"\\n+        song_response = requests.get(\\n+
        \           url,\\n+            headers=self.headers,\\n+            timeout=10,\\n+
        \           proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+        )\\n+
        \       url = song_response.json()[\\\"response\\\"][\\\"song\\\"][\\\"url\\\"]\\n+\\n+
        \       soup = None\\n+        counter = 0\\n+        while counter < 4:\\n+
        \           genius_page_response = requests.get(\\n+                url,\\n+
        \               headers=self.headers,\\n+                timeout=10,\\n+                proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \           )\\n+\\n+            if not genius_page_response.ok:\\n+                counter
        += 1\\n+                continue\\n+\\n+            soup = BeautifulSoup(\\n+
        \               genius_page_response.text.replace(\\\"<br/>\\\", \\\"\\\\n\\\"),
        \\\"html.parser\\\"\\n+            )\\n+\\n+            break\\n+\\n+        if
        soup is None:\\n+            return None\\n+\\n+        lyrics_div = soup.select_one(\\\"div.lyrics\\\")\\n+
        \       lyrics_containers = soup.select(\\\"div[class^=Lyrics__Container]\\\")\\n+\\n+
        \       # Get lyrics\\n+        if lyrics_div:\\n+            lyrics = lyrics_div.get_text()\\n+
        \       elif lyrics_containers:\\n+            lyrics = \\\"\\\\n\\\".join(con.get_text()
        for con in lyrics_containers)\\n+        else:\\n+            return None\\n+\\n+
        \       if not lyrics:\\n+            return None\\n+\\n+        # Clean lyrics\\n+
        \       lyrics = lyrics.strip()\\n+\\n+        # Remove desc at the beginning
        if it exists\\n+        for to_remove in [\\\"desc\\\", \\\"Desc\\\"]:\\n+
        \           lyrics.replace(to_remove, \\\"\\\", 1)\\n+\\n+        return lyrics\"},{\"sha\":\"3ae3c344e44120b44e21138cd334f1a6ade45119\",\"filename\":\"spotdl/providers/lyrics/musixmatch.py\",\"status\":\"added\",\"additions\":100,\"deletions\":0,\"changes\":100,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fmusixmatch.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fmusixmatch.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fmusixmatch.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,100 @@\\n+\\\"\\\"\\\"\\n+MusixMatch lyrics provider.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import Dict, List, Optional\\n+from urllib.parse import quote\\n+\\n+import
        requests\\n+from bs4 import BeautifulSoup\\n+\\n+from spotdl.providers.lyrics.base
        import LyricsProvider\\n+from spotdl.utils.config import GlobalConfig\\n+\\n+__all__
        = [\\\"MusixMatch\\\"]\\n+\\n+\\n+class MusixMatch(LyricsProvider):\\n+    \\\"\\\"\\\"\\n+
        \   MusixMatch lyrics provider class.\\n+    \\\"\\\"\\\"\\n+\\n+    def extract_lyrics(self,
        url: str, **_) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Extracts
        the lyrics from the given url.\\n+\\n+        ### Arguments\\n+        - url:
        The url to extract the lyrics from.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+\\n+        lyrics_resp = requests.get(\\n+
        \           url,\\n+            headers=self.headers,\\n+            timeout=10,\\n+
        \           proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+        )\\n+\\n+
        \       lyrics_soup = BeautifulSoup(lyrics_resp.text, \\\"html.parser\\\")\\n+
        \       lyrics_paragraphs = lyrics_soup.select(\\\"p.mxm-lyrics__content\\\")\\n+
        \       lyrics = \\\"\\\\n\\\".join(i.get_text() for i in lyrics_paragraphs)\\n+\\n+
        \       return lyrics\\n+\\n+    def get_results(self, name: str, artists:
        List[str], **kwargs) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+        Returns
        the results for the given song.\\n+\\n+        ### Arguments\\n+        -
        name: The name of the song.\\n+        - artists: The artists of the song.\\n+
        \       - kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+        -
        A dictionary with the results. (The key is the title and the value is the
        url.)\\n+        \\\"\\\"\\\"\\n+\\n+        track_search = kwargs.get(\\\"track_search\\\",
        False)\\n+        artists_str = \\\", \\\".join(\\n+            artist for
        artist in artists if artist.lower() not in name.lower()\\n+        )\\n+\\n+
        \       # quote the query so that it's safe to use in a url\\n+        # e.g
        \\\"Au/Ra\\\" -> \\\"Au%2FRa\\\"\\n+        query = quote(f\\\"{name} - {artists_str}\\\",
        safe=\\\"\\\")\\n+\\n+        # search the `tracks page` if track_search is
        True\\n+        if track_search:\\n+            query += \\\"/tracks\\\"\\n+\\n+
        \       search_url = f\\\"https://www.musixmatch.com/search/{query}\\\"\\n+
        \       search_resp = requests.get(\\n+            search_url,\\n+            headers=self.headers,\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       )\\n+        search_soup = BeautifulSoup(search_resp.text, \\\"html.parser\\\")\\n+
        \       song_url_tag = search_soup.select(\\\"a[href^='/lyrics/']\\\")\\n+\\n+
        \       if not song_url_tag:\\n+            # song_url_tag being None means
        no results were found on the\\n+            # All Results page, therefore,
        we use `track_search` to\\n+            # search the tracks page.\\n+\\n+
        \           # track_serach being True means we are already searching the tracks
        page.\\n+            if track_search:\\n+                return {}\\n+\\n+
        \           return self.get_results(name, artists, track_search=True)\\n+\\n+
        \       results: Dict[str, str] = {}\\n+        for tag in song_url_tag:\\n+
        \           results[tag.get_text()] = \\\"https://www.musixmatch.com\\\" +
        str(\\n+                tag.get(\\\"href\\\", \\\"\\\")\\n+            )\\n+\\n+
        \       return results\"},{\"sha\":\"200fd6a4e28a26f5372bde57663d3b91fc7763cd\",\"filename\":\"spotdl/providers/lyrics/synced.py\",\"status\":\"added\",\"additions\":64,\"deletions\":0,\"changes\":64,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fsynced.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Fproviders%2Flyrics%2Fsynced.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fsynced.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,64 @@\\n+\\\"\\\"\\\"\\n+Synced lyrics provider using the syncedlyrics
        library\\n+\\\"\\\"\\\"\\n+\\n+from typing import Dict, List, Optional\\n+\\n+import
        syncedlyrics\\n+\\n+from spotdl.providers.lyrics.base import LyricsProvider\\n+\\n+__all__
        = [\\\"Synced\\\"]\\n+\\n+\\n+class Synced(LyricsProvider):\\n+    \\\"\\\"\\\"\\n+
        \   Lyrics provider for synced lyrics using the syncedlyrics library\\n+    Currently
        supported websites: Deezer, NetEase\\n+    \\\"\\\"\\\"\\n+\\n+    def get_results(self,
        name: str, artists: List[str], **kwargs) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+
        \       Returns the results for the given song.\\n+\\n+        ### Arguments\\n+
        \       - name: The name of the song.\\n+        - artists: The artists of
        the song.\\n+        - kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+
        \       - A dictionary with the results. (The key is the title and the value
        is the url.)\\n+        \\\"\\\"\\\"\\n+\\n+        raise NotImplementedError\\n+\\n+
        \   def extract_lyrics(self, url: str, **kwargs) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+
        \       Extracts the lyrics from the given url.\\n+\\n+        ### Arguments\\n+
        \       - url: The url to extract the lyrics from.\\n+        - kwargs: Additional
        arguments.\\n+\\n+        ### Returns\\n+        - The lyrics of the song
        or None if no lyrics were found.\\n+        \\\"\\\"\\\"\\n+\\n+        raise
        NotImplementedError\\n+\\n+    def get_lyrics(self, name: str, artists: List[str],
        **_) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Try to get lyrics
        using syncedlyrics\\n+\\n+        ### Arguments\\n+        - name: The name
        of the song.\\n+        - artists: The artists of the song.\\n+        - kwargs:
        Additional arguments.\\n+\\n+        ### Returns\\n+        - The lyrics of
        the song or None if no lyrics were found.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       lyrics = syncedlyrics.search(f\\\"{name} - {artists[0]}\\\", allow_plain_format=True)\\n+\\n+
        \       return lyrics\"},{\"sha\":\"91a4ad1dc532bd2a041fd46d6491dd2e23ba7338\",\"filename\":\"spotdl/providers/lyrics_providers.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":115,\"changes\":115,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Flyrics_providers.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Flyrics_providers.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics_providers.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,115 +0,0 @@\\n-from requests import get\\n-from bs4 import BeautifulSoup\\n-from
        typing import List\\n-from urllib.parse import quote\\n-\\n-user_agent = {\\n-
        \   \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
        \\\\\\n-(KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36\\\"\\n-}\\n-\\n-\\n-def
        get_lyrics_genius(song_name: str, song_artists: List[str]) -> str:\\n-    \\\"\\\"\\\"\\n-
        \   `str` `song_name` : name of song\\n-    `list<str>` `song_artists` : list
        containing name of contributing artists\\n-    RETURNS `str`: Lyrics of the
        song.\\n-    Gets the lyrics of the song.\\n-    \\\"\\\"\\\"\\n-    headers
        = {\\n-        \\\"Authorization\\\": \\\"Bearer alXXDbPZtK1m2RrZ8I4k2Hn8Ahsd0Gh_o076HYvcdlBvmc0ULL1H8Z8xRlew5qaG\\\",\\n-
        \   }\\n-    headers.update(user_agent)\\n-\\n-    api_search_url = \\\"https://api.genius.com/search\\\"\\n-
        \   artist_str = \\\", \\\".join(\\n-        artist for artist in song_artists
        if artist.lower() not in song_name.lower()\\n-    )\\n-    search_query =
        f\\\"{song_name} {artist_str}\\\"\\n-\\n-    api_response = get(api_search_url,
        params={\\\"q\\\": search_query}, headers=headers)\\n-    if not api_response.ok:\\n-
        \       return \\\"\\\"\\n-    api_json = api_response.json()\\n-\\n-    try:\\n-
        \       song_id = api_json[\\\"response\\\"][\\\"hits\\\"][0][\\\"result\\\"][\\\"id\\\"]\\n-
        \   except (IndexError, KeyError):\\n-        return \\\"\\\"\\n-\\n-    song_api_url
        = f\\\"https://api.genius.com/songs/{song_id}\\\"\\n-    api_response = get(song_api_url,
        headers=headers)\\n-    if not api_response.ok:\\n-        return \\\"\\\"\\n-
        \   api_json = api_response.json()\\n-\\n-    song_url = api_json[\\\"response\\\"][\\\"song\\\"][\\\"url\\\"]\\n-
        \   genius_page = get(song_url, headers=user_agent)\\n-    if not genius_page.ok:\\n-
        \       return \\\"\\\"\\n-\\n-    soup = BeautifulSoup(genius_page.text.replace(\\\"<br/>\\\",
        \\\"\\\\n\\\"), \\\"html.parser\\\")\\n-    lyrics_div = soup.select_one(\\\"div.lyrics\\\")\\n-\\n-
        \   if lyrics_div is not None:\\n-        return lyrics_div.get_text().strip()\\n-\\n-
        \   lyrics_containers = soup.select(\\\"div[class^=Lyrics__Container]\\\")\\n-
        \   lyrics = \\\"\\\\n\\\".join(con.get_text() for con in lyrics_containers)\\n-
        \   return lyrics.strip()\\n-\\n-\\n-def get_lyrics_musixmatch(\\n-    song_name:
        str, song_artists: List[str], track_search=False\\n-) -> str:\\n-    \\\"\\\"\\\"\\n-
        \   `str` `song_name` : Name of song\\n-    `list<str>` `song_artists` : list
        containing name of contributing artists\\n-    `bool` `track_search` : if
        `True`, search the musixmatch tracks page.\\n-    RETURNS `str`: Lyrics of
        the song.\\n-    Gets the lyrics of the song.\\n-    \\\"\\\"\\\"\\n-    #
        remove artist names that are already in the song_name\\n-    # we do not use
        SongObject.create_file_name beacause it\\n-    # removes '/' etc from the
        artist and song names.\\n-    artists_str = \\\", \\\".join(\\n-        artist
        for artist in song_artists if artist.lower() not in song_name.lower()\\n-
        \   )\\n-\\n-    # quote the query so that it's safe to use in a url\\n-    #
        e.g \\\"Au/Ra\\\" -> \\\"Au%2FRa\\\"\\n-    query = quote(f\\\"{song_name}
        - {artists_str}\\\", safe=\\\"\\\")\\n-\\n-    # search the `tracks page`
        if track_search is True\\n-    if track_search:\\n-        query += \\\"/tracks\\\"\\n-\\n-
        \   search_url = f\\\"https://www.musixmatch.com/search/{query}\\\"\\n-    search_resp
        = get(search_url, headers=user_agent)\\n-    if not search_resp.ok:\\n-        return
        \\\"\\\"\\n-\\n-    search_soup = BeautifulSoup(search_resp.text, \\\"html.parser\\\")\\n-
        \   song_url_tag = search_soup.select_one(\\\"a[href^='/lyrics/']\\\")\\n-\\n-
        \   # song_url_tag being None means no results were found on the\\n-    #
        All Results page, therefore, we use `track_search` to\\n-    # search the
        tracks page.\\n-    if song_url_tag is None:\\n-        # track_serach being
        True means we are already searching the tracks page.\\n-        if track_search:\\n-
        \           return \\\"\\\"\\n-\\n-        lyrics = get_lyrics_musixmatch(song_name,
        song_artists, track_search=True)\\n-        return lyrics\\n-\\n-    song_url
        = \\\"https://www.musixmatch.com\\\" + str(song_url_tag.get(\\\"href\\\",
        \\\"\\\"))\\n-    lyrics_resp = get(song_url, headers=user_agent)\\n-    if
        not lyrics_resp.ok:\\n-        return \\\"\\\"\\n-\\n-    lyrics_soup = BeautifulSoup(lyrics_resp.text,
        \\\"html.parser\\\")\\n-    lyrics_paragraphs = lyrics_soup.select(\\\"p.mxm-lyrics__content\\\")\\n-
        \   lyrics = \\\"\\\\n\\\".join(i.get_text() for i in lyrics_paragraphs)\\n-\\n-
        \   return lyrics\"},{\"sha\":\"6fc3acc8aa69facec5343a7b23df629ba07d4663\",\"filename\":\"spotdl/providers/metadata_provider.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":24,\"changes\":24,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fmetadata_provider.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fmetadata_provider.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fmetadata_provider.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,24 +0,0 @@\\n-from spotdl.search import SpotifyClient\\n-\\n-\\n-def from_url(spotify_url:
        str):\\n-    if \\\"open.spotify.com\\\" not in spotify_url or \\\"track\\\"
        not in spotify_url:\\n-        raise Exception(f\\\"passed URL is not that
        of a track: {spotify_url}\\\")\\n-\\n-    # query spotify for song, artist,
        album details\\n-    spotify_client = SpotifyClient()\\n-\\n-    raw_track_meta
        = spotify_client.track(spotify_url)\\n-\\n-    if raw_track_meta is None:\\n-
        \       raise Exception(\\n-            \\\"Couldn't get metadata, check if
        you have passed correct track id\\\"\\n-        )\\n-\\n-    primary_artist_id
        = raw_track_meta[\\\"artists\\\"][0][\\\"id\\\"]\\n-    raw_artist_meta =
        spotify_client.artist(primary_artist_id)\\n-\\n-    albumId = raw_track_meta[\\\"album\\\"][\\\"id\\\"]\\n-
        \   raw_album_meta = spotify_client.album(albumId)\\n-\\n-    return raw_track_meta,
        raw_artist_meta, raw_album_meta\"},{\"sha\":\"f29ebf7f298a4e85976d664a839c87a2c568152b\",\"filename\":\"spotdl/providers/provider_utils.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":162,\"changes\":162,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fprovider_utils.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fprovider_utils.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fprovider_utils.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,162 +0,0 @@\\n-import re\\n-\\n-from pathlib import Path\\n-from typing
        import List\\n-\\n-from rapidfuzz import fuzz\\n-\\n-from spotdl.utils.song_name_utils
        import format_name\\n-\\n-\\n-def _match_percentage(str1: str, str2: str,
        score_cutoff: float = 0) -> float:\\n-    \\\"\\\"\\\"\\n-    A wrapper around
        `rapidfuzz.fuzz.partial_ratio` to handle UTF-8 encoded\\n-    emojis that
        usually cause errors\\n-\\n-    `str` `str1` : a random sentence\\n-    `str`
        `str2` : another random sentence\\n-    `float` `score_cutoff` : minimum score
        required to consider it a match\\n-        returns 0 when similarity < score_cutoff\\n-\\n-
        \   RETURNS `float`\\n-    \\\"\\\"\\\"\\n-\\n-    # ! this will throw an
        error if either string contains a UTF-8 encoded emoji\\n-    try:\\n-        return
        fuzz.partial_ratio(str1, str2, processor=None, score_cutoff=score_cutoff)\\n-\\n-
        \   # ! we build new strings that contain only alphanumerical characters and
        spaces\\n-    # ! and return the partial_ratio of that\\n-    except:  # noqa:E722\\n-
        \       new_str1 = \\\"\\\".join(\\n-            each_letter\\n-            for
        each_letter in str1\\n-            if each_letter.isalnum() or each_letter.isspace()\\n-
        \       )\\n-\\n-        new_str2 = \\\"\\\".join(\\n-            each_letter\\n-
        \           for each_letter in str2\\n-            if each_letter.isalnum()
        or each_letter.isspace()\\n-        )\\n-\\n-        return fuzz.partial_ratio(\\n-
        \           new_str1, new_str2, processor=None, score_cutoff=score_cutoff\\n-
        \       )\\n-\\n-\\n-def _parse_duration(duration: str) -> float:\\n-    \\\"\\\"\\\"\\n-
        \   Convert string value of time (duration: \\\"25:36:59\\\") to a float value
        of seconds (92219.0)\\n-    \\\"\\\"\\\"\\n-    try:\\n-        # {(1, \\\"s\\\"),
        (60, \\\"m\\\"), (3600, \\\"h\\\")}\\n-        mapped_increments = zip([1,
        60, 3600], reversed(duration.split(\\\":\\\")))\\n-        seconds = sum(multiplier
        * int(time) for multiplier, time in mapped_increments)\\n-        return float(seconds)\\n-\\n-
        \   # ! This usually occurs when the wrong string is mistaken for the duration\\n-
        \   except (ValueError, TypeError, AttributeError):\\n-        return 0.0\\n-\\n-\\n-def
        _create_song_title(song_name: str, song_artists: List[str]) -> str:\\n-    joined_artists
        = \\\", \\\".join(song_artists)\\n-    return _sanitize_filename(f\\\"{joined_artists}
        - {song_name}\\\")\\n-\\n-\\n-def _sanitize_filename(input_str: str) -> str:\\n-
        \   return format_name(input_str)\\n-\\n-\\n-def _get_smaller_file_path(input_song,
        output_format: str) -> Path:\\n-    # Only use the first artist if the song
        path turns out to be too long\\n-    smaller_name = f\\\"{input_song.contributing_artists[0]}
        - {input_song.song_name}\\\"\\n-\\n-    smaller_name = _sanitize_filename(smaller_name)\\n-\\n-
        \   try:\\n-        return Path(f\\\"{smaller_name}.{output_format}\\\").resolve()\\n-
        \   except OSError:\\n-        # Expected to happen in the rare case when
        the saved path is too long,\\n-        # even with the short filename\\n-
        \       raise OSError(\\\"Cannot save song due to path issues.\\\")\\n-\\n-\\n-def
        _get_converted_file_path(song_obj, output_format: str = None) -> Path:\\n-\\n-
        \   # ! we eliminate contributing artist names that are also in the song name,
        else we\\n-    # ! would end up with things like 'Jetta, Mastubs - I'd love
        to change the world\\n-    # ! (Mastubs REMIX).mp3' which is kinda an odd
        file name.\\n-\\n-    # also make sure that main artist is included in artistStr
        even if they\\n-    # are in the song name, for example\\n-    # Lil Baby
        - Never Recover (Lil Baby & Gunna, Drake).mp3\\n-\\n-    artists_filtered
        = []\\n-\\n-    if output_format is None:\\n-        output_format = \\\"mp3\\\"\\n-\\n-
        \   for artist in song_obj.contributing_artists:\\n-        if artist.lower()
        not in song_obj.song_name:\\n-            artists_filtered.append(artist)\\n-
        \       elif artist.lower() is song_obj.contributing_artists[0].lower():\\n-
        \           artists_filtered.append(artist)\\n-\\n-    artist_str = \\\",
        \\\".join(artists_filtered)\\n-\\n-    converted_file_name = _sanitize_filename(\\n-
        \       f\\\"{artist_str} - {song_obj.song_name}.{output_format}\\\"\\n-    )\\n-\\n-
        \   converted_file_path = Path(converted_file_name)\\n-\\n-    # ! Checks
        if a file name is too long (256 max on both linux and windows)\\n-    try:\\n-
        \       if len(str(converted_file_path.resolve().name)) > 256:\\n-            print(\\\"Path
        was too long. Using Small Path.\\\")\\n-            return _get_smaller_file_path(song_obj,
        output_format)\\n-    except OSError:\\n-        return _get_smaller_file_path(song_obj,
        output_format)\\n-\\n-    return converted_file_path\\n-\\n-\\n-def _parse_path_template(path_template,
        song_object, output_format, short=False):\\n-    converted_file_name = path_template\\n-\\n-
        \   converted_file_name = converted_file_name.format(\\n-        artist=_sanitize_filename(song_object.contributing_artists[0]),\\n-
        \       title=_sanitize_filename(song_object.song_name),\\n-        album=_sanitize_filename(song_object.album_name),\\n-
        \       playlist=_sanitize_filename(song_object.playlist_name)\\n-        if
        song_object.playlist_name\\n-        else \\\"\\\",\\n-        artists=_sanitize_filename(\\n-
        \           \\\", \\\".join(song_object.contributing_artists)\\n-            if
        short is False\\n-            else song_object.contributing_artists[0]\\n-
        \       ),\\n-        ext=_sanitize_filename(output_format),\\n-    )\\n-\\n-
        \   if len(converted_file_name) > 250:\\n-        return _parse_path_template(\\n-
        \           path_template, song_object, output_format, short=True\\n-        )\\n-\\n-
        \   converted_file_path = Path(converted_file_name)\\n-\\n-    santitized_parts
        = []\\n-    for part in converted_file_path.parts:\\n-        match = re.search(r\\\"[^\\\\.*](.*)[^\\\\.*$]\\\",
        part)\\n-        if match:\\n-            santitized_parts.append(match.group(0))\\n-
        \       else:\\n-            santitized_parts.append(part)\\n-\\n-    # Join
        the parts of the path\\n-    converted_file_path = Path(*santitized_parts)\\n-\\n-
        \   return converted_file_path\"},{\"sha\":\"497316380076a34c0ecb4f60021ad04a5500ab00\",\"filename\":\"spotdl/providers/yt_provider.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":158,\"changes\":158,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fyt_provider.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fyt_provider.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fyt_provider.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,158 +0,0 @@\\n-# ===============\\n-# === Imports ===\\n-# ===============\\n-\\n-from
        pytube.__main__ import YouTube\\n-from unidecode import unidecode\\n-from
        pytube import Search\\n-\\n-# ! Just for static typing\\n-from typing import
        List, Optional\\n-\\n-from spotdl.providers.provider_utils import (\\n-    _match_percentage,\\n-
        \   _create_song_title,\\n-)\\n-\\n-\\n-def search_and_get_best_match(\\n-
        \   song_name: str,\\n-    song_artists: List[str],\\n-    song_duration:
        int,\\n-    isrc: str,\\n-) -> Optional[str]:\\n-    \\\"\\\"\\\"\\n-    `str`
        `song_name` : name of song\\n-\\n-    `list<str>` `song_artists` : list containing
        name of contributing artists\\n-\\n-    `str` `song_album_name` : name of
        song's album\\n-\\n-    `int` `song_duration` : duration of the song\\n-\\n-
        \   `str` `isrc` :  code for identifying sound recordings and music video
        recordings\\n-\\n-    RETURNS `str` : link of the best match\\n-    \\\"\\\"\\\"\\n-\\n-
        \   # if isrc is not None then we try to find song with it\\n-    if isrc
        is not None:\\n-        isrc_results = Search(isrc).results\\n-\\n-        if
        isrc_results and len(isrc_results) == 1:\\n-            isrc_result = isrc_results[0]\\n-\\n-
        \           if isrc_result is not None and isrc_result.watch_url is not None:\\n-
        \               return isrc_result.watch_url\\n-\\n-    song_title = _create_song_title(song_name,
        song_artists).lower()\\n-\\n-    # Query YTM by songs only first, this way
        if we get correct result on the first try\\n-    # we don't have to make another
        request to ytmusic api that could result in us\\n-    # getting rate limited
        sooner\\n-    results = Search(song_title).results\\n-\\n-    if results is
        None:\\n-        print(\\\"Couldn't find the song on YouTube\\\")\\n-        return
        None\\n-\\n-    # Order results\\n-    results = _order_yt_results(results,
        song_name, song_artists, song_duration)\\n-\\n-    # No matches found\\n-
        \   if len(results) == 0:\\n-        return None\\n-\\n-    result_items =
        list(results.items())\\n-\\n-    # Sort results by highest score\\n-    sorted_results
        = sorted(result_items, key=lambda x: x[1], reverse=True)\\n-\\n-    # ! In
        theory, the first 'TUPLE' in sorted_results should have the highest match\\n-
        \   # ! value, we send back only the link\\n-    return sorted_results[0][0]\\n-\\n-\\n-def
        _order_yt_results(\\n-    results: List[YouTube],\\n-    song_name: str,\\n-
        \   song_artists: List[str],\\n-    song_duration: int,\\n-) -> dict:\\n-\\n-
        \   # Assign an overall avg match value to each result\\n-    links_with_match_value
        = {}\\n-\\n-    for result in results:\\n-        # ! skip results without
        videoId, this happens if you are country restricted or\\n-        # ! video
        is unavailabe\\n-        if result.video_id is None:\\n-            continue\\n-\\n-
        \       lower_song_name = song_name.lower()\\n-        lower_result_name =
        result.title.lower()\\n-\\n-        sentence_words = lower_song_name.replace(\\\"-\\\",
        \\\" \\\").split(\\\" \\\")\\n-\\n-        common_word = False\\n-\\n-        #
        ! check for common word\\n-        for word in sentence_words:\\n-            if
        word != \\\"\\\" and word in lower_result_name:\\n-                common_word
        = True\\n-\\n-        # ! if there are no common words, skip result\\n-        if
        common_word is False:\\n-            continue\\n-\\n-        # Find artist
        match\\n-        # ! match  = (no of artist names in result) / (no. of artist
        names on spotify) * 100\\n-        artist_match_number = 0\\n-\\n-        #
        ! we use fuzzy matching because YouTube spellings might be mucked up\\n-        #
        ! i.e if video\\n-        for artist in song_artists:\\n-            # ! something
        like _match_percentage('rionos', 'aiobahn, rionos Motivation\\n-            #
        ! (remix)' would return 100, so we're absolutely corrent in matching\\n-            #
        ! artists to song name.\\n-            if _match_percentage(\\n-                str(unidecode(artist.lower())),
        str(unidecode(result.title).lower()), 85\\n-            ):\\n-                artist_match_number
        += 1\\n-\\n-        # ! Skip if there are no artists in common, (else, results
        like 'Griffith Swank -\\n-        # ! Madness' will be the top match for 'Ruelle
        - Madness')\\n-        if artist_match_number == 0:\\n-            continue\\n-\\n-
        \       artist_match = (artist_match_number / len(song_artists)) * 100\\n-
        \       song_title = _create_song_title(song_name, song_artists).lower()\\n-
        \       name_match = round(\\n-            _match_percentage(\\n-                str(unidecode(result.title.lower())),
        str(unidecode(song_title)), 60\\n-            ),\\n-            ndigits=3,\\n-
        \       )\\n-\\n-        # skip results with name match of 0, these are obviously
        wrong\\n-        # but can be identified as correct later on due to other
        factors\\n-        # such as time_match or artist_match\\n-        if name_match
        == 0:\\n-            continue\\n-\\n-        # Find duration match\\n-        #
        ! time match = 100 - (delta(duration)**2 / original duration * 100)\\n-        #
        ! difference in song duration (delta) is usually of the magnitude of a few\\n-
        \       # ! seconds, we need to amplify the delta if it is to have any meaningful
        impact\\n-        # ! wen we calculate the avg match value\\n-        delta
        = result.length - song_duration  # ! check this\\n-        non_match_value
        = (delta**2) / song_duration * 100\\n-\\n-        time_match = 100 - non_match_value\\n-\\n-
        \       average_match = (artist_match + name_match + time_match) / 3\\n-\\n-
        \       # the results along with the avg Match\\n-        links_with_match_value[result.watch_url]
        = average_match\\n-\\n-    return links_with_match_value\"},{\"sha\":\"79766e644f9261d8c2e71ae0bebde63a5a5361f6\",\"filename\":\"spotdl/providers/ytm_provider.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":303,\"changes\":303,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fytm_provider.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fytm_provider.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fytm_provider.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,303 +0,0 @@\\n-# ===============\\n-# === Imports ===\\n-# ===============\\n-\\n-#
        ! Just for static typing\\n-from ytmusicapi import YTMusic\\n-from unidecode
        import unidecode\\n-from typing import List, Optional\\n-\\n-from spotdl.providers.provider_utils
        import (\\n-    _match_percentage,\\n-    _parse_duration,\\n-    _create_song_title,\\n-)\\n-\\n-\\n-#
        ! YTMusic api client\\n-ytm_client = YTMusic()\\n-\\n-\\n-def search_and_get_best_match(\\n-
        \   song_name: str,\\n-    song_artists: List[str],\\n-    song_album_name:
        str,\\n-    song_duration: int,\\n-    isrc: str,\\n-) -> Optional[str]:\\n-
        \   \\\"\\\"\\\"\\n-    `str` `song_name` : name of song\\n-\\n-    `list<str>`
        `song_artists` : list containing name of contributing artists\\n-\\n-    `str`
        `song_album_name` : name of song's album\\n-\\n-    `int` `song_duration`
        : duration of the song\\n-\\n-    `str` `isrc` :  code for identifying sound
        recordings and music video recordings\\n-\\n-    RETURNS `str` : link of the
        best match\\n-    \\\"\\\"\\\"\\n-\\n-    # if isrc is not None then we try
        to find song with it\\n-    if isrc is not None:\\n-        isrc_results =
        _query_and_simplify(isrc, \\\"songs\\\")\\n-\\n-        if len(isrc_results)
        == 1:\\n-            isrc_result = isrc_results[0]\\n-\\n-            name_match
        = isrc_result[\\\"name\\\"].lower() == song_name.lower()\\n-\\n-            delta
        = isrc_result[\\\"length\\\"] - song_duration\\n-            non_match_value
        = (delta**2) / song_duration * 100\\n-\\n-            time_match = 100 - non_match_value\\n-\\n-
        \           if (\\n-                isrc_result is not None\\n-                and
        \\\"link\\\" in isrc_result\\n-                and name_match\\n-                and
        time_match > 90\\n-            ):\\n-                return isrc_result[\\\"link\\\"]\\n-\\n-
        \   song_title = _create_song_title(song_name, song_artists).lower()\\n-\\n-
        \   # Query YTM by songs only first, this way if we get correct result on
        the first try\\n-    # we don't have to make another request to ytmusic api
        that could result in us\\n-    # getting rate limited sooner\\n-    song_results
        = _query_and_simplify(song_title, \\\"songs\\\")\\n-\\n-    # Order results\\n-
        \   songs = _order_ytm_results(\\n-        song_results, song_name, song_artists,
        song_album_name, song_duration\\n-    )\\n-\\n-    # song type results are
        always more accurate than video type, so if we get score of 80 or above\\n-
        \   # we are almost 100% sure that this is the correct link\\n-    if len(songs)
        != 0:\\n-        # get the result with highest score\\n-        best_result
        = max(songs, key=lambda k: songs[k])\\n-\\n-        if songs[best_result]
        >= 80:\\n-            return best_result\\n-\\n-    # We didn't find the correct
        song on the first try so now we get video type results\\n-    # add them to
        song_results, and get the result with highest score\\n-    video_results =
        _query_and_simplify(\\n-        _create_song_title(song_name, song_artists).lower(),
        filter=\\\"videos\\\"\\n-    )\\n-\\n-    # Order video results\\n-    videos
        = _order_ytm_results(\\n-        video_results, song_name, song_artists, song_album_name,
        song_duration\\n-    )\\n-\\n-    # Merge songs and video results\\n-    results
        = {**songs, **videos}\\n-\\n-    # No matches found\\n-    if not results:\\n-
        \       return None\\n-\\n-    result_items = list(results.items())\\n-\\n-
        \   # Sort results by highest score\\n-    sorted_results = sorted(result_items,
        key=lambda x: x[1], reverse=True)\\n-\\n-    # ! In theory, the first 'TUPLE'
        in sorted_results should have the highest match\\n-    # ! value, we send
        back only the link\\n-    return sorted_results[0][0]\\n-\\n-\\n-def _order_ytm_results(\\n-
        \   results: List[dict],\\n-    song_name: str,\\n-    song_artists: List[str],\\n-
        \   song_album_name: str,\\n-    song_duration: int,\\n-) -> dict:\\n-\\n-
        \   # Assign an overall avg match value to each result\\n-    links_with_match_value
        = {}\\n-\\n-    for result in results:\\n-        # ! skip results without
        videoId, this happens if you are country restricted or\\n-        # ! video
        is unavailabe\\n-        if result == {}:\\n-            continue\\n-\\n-
        \       # ! If there are no common words b/w the spotify and YouTube Music
        name, the song\\n-        # ! is a wrong match (Like Ruelle - Madness being
        matched to Ruelle - Monster, it\\n-        # ! happens without this conditional)\\n-\\n-
        \       # ! most song results on youtube go by $artist - $song_name, so if
        the spotify name\\n-        # ! has a '-', this function would return True,
        a common '-' is hardly a 'common\\n-        # ! word', so we get rid of it.
        Lower-caseing all the inputs is to get rid of the\\n-        # ! troubles
        that arise from pythons handling of differently cased words, i.e.\\n-        #
        ! 'Rhino' == 'rhino' is false though the word is same... so we lower-case
        both\\n-        # ! sentences and replace any hypens(-)\\n-        lower_song_name
        = song_name.lower()\\n-        lower_result_name = result[\\\"name\\\"].lower()\\n-\\n-
        \       sentence_words = lower_song_name.replace(\\\"-\\\", \\\" \\\").split(\\\"
        \\\")\\n-\\n-        common_word = any(\\n-            # ! check for common
        word\\n-            word != \\\"\\\" and word in lower_result_name\\n-            for
        word in sentence_words\\n-        )\\n-\\n-        # ! if there are no common
        words, skip result\\n-        if not common_word:\\n-            continue\\n-\\n-
        \       # Find artist match\\n-        # ! match  = (no of artist names in
        result) / (no. of artist names on spotify) * 100\\n-        artist_match_number
        = 0.0\\n-\\n-        # ! we use fuzzy matching because YouTube spellings might
        be mucked up\\n-        if result[\\\"type\\\"] == \\\"song\\\":\\n-            for
        artist in song_artists:\\n-                artist_match_number += _match_percentage(\\n-
        \                   str(unidecode(artist.lower())), unidecode(result[\\\"artist\\\"].lower())\\n-
        \               )\\n-        else:\\n-            # ! i.e if video\\n-            for
        artist in song_artists:\\n-                # ! something like _match_percentage('rionos',
        'aiobahn, rionos Motivation\\n-                # ! (remix)' would return 100,
        so we're absolutely corrent in matching\\n-                # ! artists to
        song name.\\n-                artist_match_number += _match_percentage(\\n-
        \                   str(unidecode(artist.lower())), unidecode(result[\\\"name\\\"].lower())\\n-
        \               )\\n-\\n-            # we didn't find artist in the video
        title, so we fallback to\\n-            # detecting song artist in the channel
        name\\n-            # I am not sure if this won't create false positives\\n-
        \           if artist_match_number == 0:\\n-                for artist in
        song_artists:\\n-                    artist_match_number += _match_percentage(\\n-
        \                       str(unidecode(artist.lower())),\\n-                        unidecode(result[\\\"artist\\\"].lower()),\\n-
        \                   )\\n-\\n-        artist_match = artist_match_number /
        len(song_artists)\\n-        if artist_match < 70:\\n-            continue\\n-\\n-
        \       song_title = _create_song_title(song_name, song_artists).lower()\\n-\\n-
        \       # Find name match and drop results below 60%\\n-        # this needs
        more testing\\n-        if result[\\\"type\\\"] == \\\"song\\\":\\n-            name_match
        = round(\\n-                _match_percentage(\\n-                    unidecode(result[\\\"name\\\"]),
        str(unidecode(song_name)), 60\\n-                ),\\n-                ndigits=3,\\n-
        \           )\\n-        else:\\n-            name_match = round(\\n-                _match_percentage(\\n-
        \                   unidecode(result[\\\"name\\\"]), str(unidecode(song_title)),
        60\\n-                ),\\n-                ndigits=3,\\n-            )\\n-\\n-
        \       # skip results with name match of 0, these are obviously wrong\\n-
        \       # but can be identified as correct later on due to other factors\\n-
        \       # such as time_match or artist_match\\n-        if name_match == 0:\\n-
        \           continue\\n-\\n-        # Find album match\\n-        # ! We assign
        an arbitrary value of 0 for album match in case of video results\\n-        #
        ! from YouTube Music\\n-        album_match = 0.0\\n-        album = None\\n-\\n-
        \       if result[\\\"type\\\"] == \\\"song\\\":\\n-            album = result.get(\\\"album\\\")\\n-
        \           if album:\\n-                album_match = _match_percentage(album,
        song_album_name)\\n-\\n-        # Find duration match\\n-        # ! time
        match = 100 - (delta(duration)**2 / original duration * 100)\\n-        #
        ! difference in song duration (delta) is usually of the magnitude of a few\\n-
        \       # ! seconds, we need to amplify the delta if it is to have any meaningful
        impact\\n-        # ! wen we calculate the avg match value\\n-        delta
        = result[\\\"length\\\"] - song_duration\\n-        non_match_value = (delta**2)
        / song_duration * 100\\n-\\n-        time_match = 100 - non_match_value\\n-\\n-
        \       if result[\\\"type\\\"] == \\\"song\\\":\\n-            if album is
        None:\\n-                # Don't add album_match to average_match if song_name
        == result and\\n-                # result album name != song_album_name\\n-
        \               average_match = (artist_match + name_match + time_match) /
        3\\n-            elif (\\n-                _match_percentage(album.lower(),
        result[\\\"name\\\"].lower()) > 95\\n-                and album.lower() !=
        song_album_name.lower()\\n-            ):\\n-                average_match
        = (artist_match + name_match + time_match) / 3\\n-                # Add album
        to average_match if song_name == result album\\n-                # and result
        album name == song_album_name\\n-            else:\\n-                average_match
        = (\\n-                    artist_match + album_match + name_match + time_match\\n-
        \               ) / 4\\n-        else:\\n-            average_match = (artist_match
        + name_match + time_match) / 3\\n-        # Don't add album_match to average_match
        if we don't have information about the album\\n-        # name in the metadata\\n-\\n-
        \       # the results along with the avg Match\\n-        links_with_match_value[result[\\\"link\\\"]]
        = average_match\\n-\\n-    return links_with_match_value\\n-\\n-\\n-def _map_result_to_song_data(result:
        dict) -> dict:\\n-    song_data = {}\\n-    artists = \\\", \\\".join(map(lambda
        a: a[\\\"name\\\"], result[\\\"artists\\\"]))\\n-    video_id = result[\\\"videoId\\\"]\\n-\\n-
        \   # Ignore results without video id\\n-    if video_id is None:\\n-        return
        {}\\n-\\n-    song_data = {\\n-        \\\"name\\\": result[\\\"title\\\"],\\n-
        \       \\\"type\\\": result[\\\"resultType\\\"],\\n-        \\\"artist\\\":
        artists,\\n-        \\\"length\\\": _parse_duration(result.get(\\\"duration\\\",
        None)),\\n-        \\\"link\\\": f\\\"https://www.youtube.com/watch?v={video_id}\\\",\\n-
        \       \\\"position\\\": 0,\\n-    }\\n-\\n-    album = result.get(\\\"album\\\")\\n-
        \   if album:\\n-        song_data[\\\"album\\\"] = album[\\\"name\\\"]\\n-\\n-
        \   return song_data\\n-\\n-\\n-def _query_and_simplify(search_term: str,
        filter: str) -> List[dict]:\\n-    \\\"\\\"\\\"\\n-    `str` `searchTerm`
        : the search term you would type into YTM's search bar\\n-    `str` `filter`
        : Filter for item types\\n-\\n-    RETURNS `list<dict>`\\n-\\n-    For structure
        of dict, see comment at function declaration\\n-    \\\"\\\"\\\"\\n-\\n-    #
        ! For dict structure, see end of this function (~ln 268, ln 283) and chill,
        this\\n-    # ! function ain't soo big, there are plenty of comments and blank
        lines\\n-\\n-    # build and POST a query to YTM\\n-    search_results = ytm_client.search(search_term,
        filter=filter)\\n-\\n-    return list(map(_map_result_to_song_data, search_results))\"},{\"sha\":\"a92a956c4bced4c916e38230980ea48f548ababd\",\"filename\":\"spotdl/search/__init__.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":12,\"changes\":12,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2F__init__.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,12 +0,0 @@\\n-from spotdl.search.song_object import SongObject  # noqa:
        F401\\n-from spotdl.search.spotify_client import SpotifyClient  # noqa: F401\\n-from
        spotdl.search.song_gatherer import (\\n-    from_spotify_url,\\n-    from_search_term,\\n-
        \   from_album,\\n-    from_playlist,\\n-    from_artist,\\n-    from_saved_tracks,\\n-
        \   from_dump,\\n-)  # noqa: F401\\n-from spotdl.utils.song_name_utils import
        format_name  # noqa: F401\"},{\"sha\":\"d3f2d8ab008fe3d37011a46256d3e46031a46df7\",\"filename\":\"spotdl/search/song_gatherer.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":585,\"changes\":585,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_gatherer.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_gatherer.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2Fsong_gatherer.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,585 +0,0 @@\\n-import concurrent.futures\\n-\\n-from pathlib import Path\\n-from
        typing import Dict, List\\n-import platform\\n-\\n-from spotdl.providers import
        (\\n-    metadata_provider,\\n-    yt_provider,\\n-    ytm_provider,\\n-    provider_utils,\\n-
        \   lyrics_providers,\\n-)\\n-from spotdl.search import SongObject, SpotifyClient\\n-from
        spotdl.utils.song_name_utils import format_name\\n-from spotdl.providers.provider_utils
        import (\\n-    _get_converted_file_path,\\n-    _parse_path_template,\\n-)\\n-\\n-\\n-def
        from_spotify_url(\\n-    spotify_url: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-    playlist:
        dict = None,\\n-) -> SongObject:\\n-    \\\"\\\"\\\"\\n-    Creates song object
        using spotfy url\\n-\\n-    `str` `spotify_url` : spotify url used to create
        song object\\n-    `str` `output_format` : output format of the song\\n-\\n-
        \   returns a `SongObject`\\n-    \\\"\\\"\\\"\\n-\\n-    # Set default ouput
        format to mp3\\n-    if output_format is None:\\n-        output_format =
        \\\"mp3\\\"\\n-\\n-    # Get the Song Metadata\\n-    raw_track_meta, raw_artist_meta,
        raw_album_meta = metadata_provider.from_url(\\n-        spotify_url\\n-    )\\n-\\n-
        \   if raw_track_meta is None:\\n-        raise ValueError(\\\"Couldn't get
        metadata from url\\\")\\n-\\n-    song_name = raw_track_meta[\\\"name\\\"]\\n-
        \   album_name = raw_track_meta[\\\"album\\\"][\\\"name\\\"]\\n-    isrc =
        raw_track_meta.get(\\\"external_ids\\\", {}).get(\\\"isrc\\\")\\n-    duration
        = round(raw_track_meta[\\\"duration_ms\\\"] / 1000, ndigits=3)\\n-    contributing_artists
        = [artist[\\\"name\\\"] for artist in raw_track_meta[\\\"artists\\\"]]\\n-
        \   display_name = \\\", \\\".join(contributing_artists) + \\\" - \\\" + song_name\\n-\\n-
        \   # Create file name\\n-    converted_file_name = SongObject.create_file_name(\\n-
        \       song_name, [artist[\\\"name\\\"] for artist in raw_track_meta[\\\"artists\\\"]]\\n-
        \   )\\n-\\n-    # Ensure file name doesnt contain forbidden characters\\n-
        \   filesystem_display_name = display_name  # Create copy of display_name
        for filesystem use\\n-    if platform.system() == 'Windows':\\n-        for
        forbidden_letter in ['<', '>', ':', '\\\"', '/', '\\\\\\\\', '|', '?', '*']:\\n-
        \           converted_file_name = converted_file_name.replace(forbidden_letter,
        '')\\n-            filesystem_display_name = filesystem_display_name.replace(forbidden_letter,
        '')\\n-    else:  # Linux or MacOS\\n-        converted_file_name = converted_file_name.replace('/',
        '')\\n-        filesystem_display_name = filesystem_display_name.replace('/',
        '')\\n-\\n-    # If song name is too long use only first artist\\n-    if
        len(converted_file_name) > 250:\\n-        converted_file_name = SongObject.create_file_name(\\n-
        \           song_name, [raw_track_meta[\\\"artists\\\"][0][\\\"name\\\"]]\\n-
        \       )\\n-\\n-    converted_file_path = Path(\\\".\\\", f\\\"{converted_file_name}.{output_format}\\\")\\n-\\n-
        \   # Alternate file path.\\n-    alternate_file_path = Path(\\\".\\\", f\\\"{filesystem_display_name}.{output_format}\\\")\\n-\\n-
        \   # if a song is already downloaded skip it\\n-    if converted_file_path.is_file()
        or alternate_file_path.is_file():\\n-        print(f'Skipping \\\"{converted_file_name}\\\"
        as it\\\\'s already downloaded')\\n-        raise OSError(f\\\"{converted_file_name}
        already downloaded\\\")\\n-\\n-    # Get the song's downloadable audio link\\n-
        \   if use_youtube:\\n-        print(f'Searching YouTube for \\\"{display_name}\\\"',
        end=\\\"\\\\r\\\")\\n-        youtube_link = yt_provider.search_and_get_best_match(\\n-
        \           song_name, contributing_artists, duration, isrc\\n-        )\\n-
        \   else:\\n-        print(f'Searching YouTube Music for \\\"{display_name}\\\"',
        end=\\\"\\\\r\\\")\\n-        youtube_link = ytm_provider.search_and_get_best_match(\\n-
        \           song_name, contributing_artists, album_name, duration, isrc\\n-
        \       )\\n-\\n-    # Check if we found youtube url\\n-    if youtube_link
        is None:\\n-        print(\\n-            f'Could not match any of the results
        on YouTube for \\\"{display_name}\\\". Skipping'\\n-        )\\n-        raise
        LookupError(\\\"Could not match any of the results on YouTube for\\\")\\n-
        \   else:\\n-        print(\\\" \\\" * (len(display_name) + 25), end=\\\"\\\\r\\\")\\n-
        \       print(f'Found YouTube URL for \\\"{display_name}\\\" : {youtube_link}')\\n-\\n-
        \   # (try to) Get lyrics from musixmatch/genius\\n-    # use musixmatch as
        the default provider\\n-    if lyrics_provider == \\\"genius\\\":\\n-        lyrics
        = lyrics_providers.get_lyrics_genius(song_name, contributing_artists)\\n-
        \   else:\\n-        lyrics = lyrics_providers.get_lyrics_musixmatch(song_name,
        contributing_artists)\\n-\\n-    return SongObject(\\n-        raw_track_meta,
        raw_album_meta, raw_artist_meta, youtube_link, lyrics, playlist\\n-    )\\n-\\n-\\n-def
        from_search_term(\\n-    query: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-) ->
        List[SongObject]:\\n-    \\\"\\\"\\\"\\n-    Queries Spotify for a song and
        returns the best match\\n-\\n-    `str` `query` : what you'd type into Spotify's
        search box\\n-    `str` `output_format` : output format of the song\\n-\\n-
        \   returns a `list<SongObject>` containing Url's of each track in the given
        album\\n-    \\\"\\\"\\\"\\n-\\n-    # get a spotify client\\n-    spotify_client
        = SpotifyClient()\\n-\\n-    # get possible matches from spotify\\n-    result
        = spotify_client.search(query, type=\\\"track\\\")\\n-\\n-    # return first
        result link or if no matches are found, raise Exception\\n-    if result is
        None or len(result.get(\\\"tracks\\\", {}).get(\\\"items\\\", [])) == 0:\\n-
        \       raise Exception(\\\"No song matches found on Spotify\\\")\\n-    song_url
        = \\\"http://open.spotify.com/track/\\\" + result[\\\"tracks\\\"][\\\"items\\\"][0][\\\"id\\\"]\\n-
        \   try:\\n-        song = from_spotify_url(\\n-            song_url, output_format,
        use_youtube, lyrics_provider, None\\n-        )\\n-        return [song] if
        song.youtube_link is not None else []\\n-    except (LookupError, OSError,
        ValueError):\\n-        return []\\n-\\n-\\n-def from_album(\\n-    album_url:
        str,\\n-    output_format: str = None,\\n-    use_youtube: bool = False,\\n-
        \   lyrics_provider: str = None,\\n-    generate_m3u: bool = False,\\n-    threads:
        int = 1,\\n-    path_template: str = None,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-
        \   Create and return list containing SongObject for every song in the album\\n-\\n-
        \   `str` `album_url` : Spotify Url of the album whose tracks are to be retrieved\\n-
        \   `str` `output_format` : output format of the song\\n-\\n-    returns a
        `list<SongObject>` containing Url's of each track in the given album\\n-    \\\"\\\"\\\"\\n-\\n-
        \   spotify_client = SpotifyClient()\\n-    tracks = []\\n-\\n-    album_response
        = spotify_client.album_tracks(album_url)\\n-    if album_response is None:\\n-
        \       raise ValueError(\\\"Wrong album id\\\")\\n-\\n-    album_tracks =
        album_response[\\\"items\\\"]\\n-\\n-    # Get all tracks from album\\n-    while
        album_response[\\\"next\\\"]:\\n-        album_response = spotify_client.next(album_response)\\n-\\n-
        \       # Failed to get response, break the loop\\n-        if album_response
        is None:\\n-            break\\n-\\n-        album_tracks.extend(album_response[\\\"items\\\"])\\n-\\n-
        \   # Remove songs  without id\\n-    album_tracks = [\\n-        track\\n-
        \       for track in album_tracks\\n-        if track is not None and track.get(\\\"id\\\")
        is not None\\n-    ]\\n-\\n-    def get_tracks(track):\\n-        try:\\n-
        \           song = from_spotify_url(\\n-                \\\"https://open.spotify.com/track/\\\"
        + track[\\\"id\\\"],\\n-                output_format,\\n-                use_youtube,\\n-
        \               lyrics_provider,\\n-                None,\\n-            )\\n-\\n-
        \           if generate_m3u:\\n-                if path_template:\\n-                    file_path
        = _parse_path_template(path_template, song, output_format)\\n-                else:\\n-
        \                   file_path = _get_converted_file_path(song, output_format)\\n-\\n-
        \               return song, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return
        song, None\\n-        except (LookupError, ValueError):\\n-            return
        None, None\\n-        except OSError:\\n-            if generate_m3u:\\n-
        \               song_obj = SongObject(track, album_response, {}, None, \\\"\\\",
        None)\\n-                if path_template:\\n-                    file_path
        = _parse_path_template(\\n-                        path_template, song_obj,
        output_format\\n-                    )\\n-                else:\\n-                    file_path
        = _get_converted_file_path(song_obj, output_format)\\n-\\n-                return
        None, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return None, None\\n-\\n-
        \   with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:\\n-
        \       results = executor.map(get_tracks, album_tracks)\\n-\\n-    album_text
        = \\\"\\\"\\n-    for result in results:\\n-        if result[1] is not None:\\n-
        \           album_text += result[1]\\n-\\n-        if result[0] is not None
        and result[0].youtube_link is not None:\\n-            tracks.append(result[0])\\n-\\n-
        \   if album_response and generate_m3u is True:\\n-        album_data = spotify_client.album(album_url)\\n-\\n-
        \       if album_data is not None:\\n-            album_name = album_data[\\\"name\\\"]\\n-
        \       else:\\n-            album_name = album_tracks[0][\\\"name\\\"]\\n-\\n-
        \       album_name = format_name(album_name)\\n-\\n-        album_file = Path(f\\\"{album_name}.m3u\\\")\\n-\\n-
        \       with open(album_file, \\\"w\\\", encoding=\\\"utf-8\\\") as file:\\n-
        \           file.write(album_text)\\n-\\n-    return tracks\\n-\\n-\\n-def
        from_playlist(\\n-    playlist_url: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-    generate_m3u:
        bool = False,\\n-    threads: int = 1,\\n-    path_template: str = None,\\n-)
        -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-    Create and return list containing
        SongObject for every song in the playlist\\n-\\n-    `str` `album_url` : Spotify
        Url of the album whose tracks are to be retrieved\\n-    `str` `output_format`
        : output format of the song\\n-\\n-    returns a `list<SongObject>` containing
        Url's of each track in the given album\\n-    \\\"\\\"\\\"\\n-\\n-    spotify_client
        = SpotifyClient()\\n-    tracks = []\\n-\\n-    playlist_response = spotify_client.playlist_tracks(playlist_url)\\n-
        \   playlist = spotify_client.playlist(playlist_url)\\n-    if playlist_response
        is None:\\n-        raise ValueError(\\\"Wrong playlist id\\\")\\n-\\n-    playlist_tracks
        = [\\n-        track\\n-        for track in playlist_response[\\\"items\\\"]\\n-
        \       # check if track has id\\n-        if track is not None\\n-        and
        track.get(\\\"track\\\") is not None\\n-        and track[\\\"track\\\"].get(\\\"id\\\")
        is not None\\n-    ]\\n-\\n-    # Get all tracks from playlist\\n-    while
        playlist_response[\\\"next\\\"]:\\n-        playlist_response = spotify_client.next(playlist_response)\\n-\\n-
        \       # Failed to get response, break the loop\\n-        if playlist_response
        is None:\\n-            break\\n-\\n-        playlist_tracks.extend(playlist_response[\\\"items\\\"])\\n-\\n-
        \   # Remove songs  without id\\n-    playlist_tracks = [\\n-        track\\n-
        \       for track in playlist_tracks\\n-        if track is not None\\n-        and
        track.get(\\\"track\\\") is not None\\n-        and track[\\\"track\\\"].get(\\\"id\\\")
        is not None\\n-    ]\\n-\\n-    def get_song(track):\\n-        try:\\n-            song
        = from_spotify_url(\\n-                \\\"https://open.spotify.com/track/\\\"
        + track[\\\"track\\\"][\\\"id\\\"],\\n-                output_format,\\n-
        \               use_youtube,\\n-                lyrics_provider,\\n-                playlist,\\n-
        \           )\\n-\\n-            if generate_m3u:\\n-                if path_template:\\n-
        \                   file_path = _parse_path_template(path_template, song,
        output_format)\\n-                else:\\n-                    file_path =
        _get_converted_file_path(song, output_format)\\n-\\n-                return
        song, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return song, None\\n-        except
        (LookupError, ValueError):\\n-            return None, None\\n-        except
        OSError:\\n-            if generate_m3u:\\n-                song_obj = SongObject(\\n-
        \                   track[\\\"track\\\"], {}, {}, None, \\\"\\\", playlist_response\\n-
        \               )\\n-                if path_template:\\n-                    file_path
        = _parse_path_template(\\n-                        path_template, song_obj,
        output_format\\n-                    )\\n-                else:\\n-                    file_path
        = _get_converted_file_path(song_obj, output_format)\\n-\\n-                return
        None, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return None, None\\n-\\n-
        \   with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:\\n-
        \       results = executor.map(get_song, playlist_tracks)\\n-\\n-    playlist_text
        = \\\"\\\"\\n-    for result in results:\\n-        if result[1] is not None:\\n-
        \           playlist_text += result[1]\\n-\\n-        if result[0] is not
        None and result[0].youtube_link is not None:\\n-            tracks.append(result[0])\\n-\\n-
        \   if playlist_response and generate_m3u is True:\\n-        playlist_data
        = spotify_client.playlist(playlist_url)\\n-\\n-        if playlist_data is
        not None:\\n-            playlist_name = playlist_data[\\\"name\\\"]\\n-        else:\\n-
        \           playlist_name = playlist_tracks[0][\\\"track\\\"][\\\"name\\\"]\\n-\\n-
        \       playlist_name = format_name(playlist_name)\\n-\\n-        playlist_file
        = Path(f\\\"{playlist_name}.m3u\\\")\\n-\\n-        with open(playlist_file,
        \\\"w\\\", encoding=\\\"utf-8\\\") as file:\\n-            file.write(playlist_text)\\n-\\n-
        \   return tracks\\n-\\n-\\n-def from_artist(\\n-    artist_url: str,\\n-
        \   output_format: str = None,\\n-    use_youtube: bool = False,\\n-    lyrics_provider:
        str = None,\\n-    threads: int = 1,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-
        \   `str` `artist_url` : Spotify Url of the artist whose tracks are to be\\n-
        \   retrieved\\n-    returns a `list<songObj>` containing Url's of each track
        in the artist profile\\n-    \\\"\\\"\\\"\\n-\\n-    spotify_client = SpotifyClient()\\n-\\n-
        \   artist_tracks = []\\n-\\n-    artist_response = spotify_client.artist_albums(\\n-
        \       artist_url, album_type=\\\"album,single\\\"\\n-    )\\n-    if artist_response
        is None:\\n-        raise ValueError(\\\"Wrong artist id\\\")\\n-\\n-    albums_list
        = artist_response[\\\"items\\\"]\\n-    albums_object: Dict[str, str] = {}\\n-\\n-
        \   # Fetch all artist albums\\n-    while artist_response and artist_response[\\\"next\\\"]:\\n-
        \       response = spotify_client.next(artist_response)\\n-        if response
        is None:\\n-            break\\n-\\n-        artist_response = response\\n-
        \       albums_list.extend(artist_response[\\\"items\\\"])\\n-\\n-    # Remove
        duplicate albums\\n-    for album in albums_list:\\n-        # return an iterable
        containing the string's alphanumeric characters\\n-        alpha_numeric_filter
        = filter(str.isalnum, album[\\\"name\\\"].lower())\\n-\\n-        # join all
        characters into one string\\n-        album_name = \\\"\\\".join(alpha_numeric_filter)\\n-\\n-
        \       if albums_object.get(album_name) is None:\\n-            albums_object[album_name]
        = album[\\\"uri\\\"]\\n-\\n-    tracks_list = []\\n-    tracks_object: Dict[str,
        str] = {}\\n-\\n-    # Fetch all tracks from all albums\\n-    for album_uri
        in albums_object.values():\\n-        response = spotify_client.album_tracks(album_uri)\\n-
        \       if response is None:\\n-            continue\\n-\\n-        album_response
        = response\\n-        album_tracks = album_response[\\\"items\\\"]\\n-\\n-
        \       while album_response[\\\"next\\\"]:\\n-            album_response
        = spotify_client.next(album_response)\\n-            if album_response is
        None:\\n-                break\\n-\\n-            album_tracks.extend(album_response[\\\"items\\\"])\\n-\\n-
        \       tracks_list.extend(album_tracks)\\n-\\n-    # Filter tracks to remove
        duplicates and songs without our artist\\n-    for track in tracks_list:\\n-
        \       # ignore None tracks or tracks without uri\\n-        if track is
        not None and track.get(\\\"uri\\\") is None:\\n-            continue\\n-\\n-
        \       # return an iterable containing the string's alphanumeric characters\\n-
        \       alphaNumericFilter = filter(str.isalnum, track[\\\"name\\\"].lower())\\n-\\n-
        \       # join all characters into one string\\n-        trackName = \\\"\\\".join(alphaNumericFilter)\\n-\\n-
        \       if tracks_object.get(trackName) is None:\\n-            for artist
        in track[\\\"artists\\\"]:\\n-                # get artist id from url\\n-
        \               # https://api.spotify.com/v1/artists/1fZAAHNWdSM5gqbi9o5iEA/albums\\n-
        \               #\\n-                # split string\\n-                #  ['https:',
        '', 'api.spotify.com', 'v1', 'artists',\\n-                #  '1fZAAHNWdSM5gqbi9o5iEA',
        'albums']\\n-                #\\n-                # get second element from
        the end\\n-                # '1fZAAHNWdSM5gqbi9o5iEA'\\n-                artistId
        = artist_response[\\\"href\\\"].split(\\\"/\\\")[-2]\\n-\\n-                #
        ignore tracks that are not from our artist by checking\\n-                #
        the id\\n-                if artist[\\\"id\\\"] == artistId:\\n-                    tracks_object[trackName]
        = track[\\\"uri\\\"]\\n-\\n-    # Create song objects from track ids\\n-    def
        get_song(track_uri):\\n-        try:\\n-            return from_spotify_url(\\n-
        \               f\\\"https://open.spotify.com/track/{track_uri.split(':')[-1]}\\\",\\n-
        \               output_format,\\n-                use_youtube,\\n-                lyrics_provider,\\n-
        \               None,\\n-            )\\n-        except (LookupError, ValueError,
        OSError):\\n-            return None\\n-\\n-    with concurrent.futures.ThreadPoolExecutor(max_workers=threads)
        as executor:\\n-        results = executor.map(get_song, tracks_object.values())\\n-\\n-
        \   for result in results:\\n-        if result is not None and result.youtube_link
        is not None:\\n-            artist_tracks.append(result)\\n-\\n-    return
        artist_tracks\\n-\\n-\\n-def from_saved_tracks(\\n-    output_format: str
        = None,\\n-    use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-
        \   threads: int = 1,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-    Create
        and return list containing SongObject for every song that user has saved\\n-\\n-
        \   `str` `output_format` : output format of the song\\n-\\n-    returns a
        `list<songObj>` containing Url's of each track in the user's saved tracks\\n-
        \   \\\"\\\"\\\"\\n-\\n-    spotify_client = SpotifyClient()\\n-\\n-    saved_tracks_response
        = spotify_client.current_user_saved_tracks()\\n-    if saved_tracks_response
        is None:\\n-        raise Exception(\\\"Couldn't get saved tracks\\\")\\n-\\n-
        \   saved_tracks = saved_tracks_response[\\\"items\\\"]\\n-    tracks = []\\n-\\n-
        \   # Fetch all saved tracks\\n-    while saved_tracks_response and saved_tracks_response[\\\"next\\\"]:\\n-
        \       response = spotify_client.next(saved_tracks_response)\\n-        #
        response is wrong, break\\n-        if response is None:\\n-            break\\n-\\n-
        \       saved_tracks_response = response\\n-        saved_tracks.extend(saved_tracks_response[\\\"items\\\"])\\n-\\n-
        \   # Remove songs  without id\\n-    saved_tracks = [\\n-        track\\n-
        \       for track in saved_tracks\\n-        if track is not None\\n-        and
        track.get(\\\"track\\\") is not None\\n-        and track.get(\\\"track\\\",
        {}).get(\\\"id\\\") is not None\\n-    ]\\n-\\n-    def get_song(track):\\n-
        \       try:\\n-            return from_spotify_url(\\n-                \\\"https://open.spotify.com/track/\\\"
        + track[\\\"track\\\"][\\\"id\\\"],\\n-                output_format,\\n-
        \               use_youtube,\\n-                lyrics_provider,\\n-                None,\\n-
        \           )\\n-        except (LookupError, ValueError, OSError):\\n-            return
        None\\n-\\n-    with concurrent.futures.ThreadPoolExecutor(max_workers=threads)
        as executor:\\n-        results = executor.map(get_song, saved_tracks)\\n-\\n-
        \   for result in results:\\n-        if result is not None and result.youtube_link
        is not None:\\n-            tracks.append(result)\\n-\\n-    return tracks\\n-\\n-\\n-def
        from_dump(data_dump: dict) -> SongObject:\\n-    \\\"\\\"\\\"\\n-    Creates
        song object from data dump\\n-\\n-    `dict` `data_dump` : data dump used
        to create song object\\n-\\n-    returns `SongObject`\\n-    \\\"\\\"\\\"\\n-\\n-
        \   raw_track_meta = data_dump[\\\"raw_track_meta\\\"]\\n-    raw_album_meta
        = data_dump[\\\"raw_album_meta\\\"]\\n-    raw_artist_meta = data_dump[\\\"raw_artist_meta\\\"]\\n-
        \   youtube_link = data_dump[\\\"youtube_link\\\"]\\n-    lyrics = data_dump[\\\"lyrics\\\"]\\n-\\n-
        \   return SongObject(\\n-        raw_track_meta, raw_album_meta, raw_artist_meta,
        youtube_link, lyrics, None\\n-    )\"},{\"sha\":\"c1b371c268093afe8b586145cb93da44314bb821\",\"filename\":\"spotdl/search/song_object.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":209,\"changes\":209,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_object.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_object.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2Fsong_object.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,209 +0,0 @@\\n-from typing import List, Optional\\n-\\n-from spotdl.utils.song_name_utils
        import format_name\\n-\\n-\\n-class SongObject:\\n-\\n-    # Constructor\\n-
        \   def __init__(\\n-        self,\\n-        raw_track_meta,\\n-        raw_album_meta,\\n-
        \       raw_artist_meta,\\n-        youtube_link,\\n-        lyrics,\\n-        playlist,\\n-
        \   ):\\n-        self._raw_track_meta = raw_track_meta\\n-        self._raw_album_meta
        = raw_album_meta\\n-        self._raw_artist_meta = raw_artist_meta\\n-        self._youtube_link
        = youtube_link\\n-        self._lyrics = lyrics\\n-        self._playlist
        = playlist\\n-\\n-    # Equals method\\n-    # for example song_obj1 == song_obj2\\n-
        \   def __eq__(self, compared_song) -> bool:\\n-        return compared_song.data_dump
        == self.data_dump\\n-\\n-    # ================================\\n-    # ===
        Interface Implementation ===\\n-    # ================================\\n-\\n-
        \   @property\\n-    def youtube_link(self) -> str:\\n-        \\\"\\\"\\\"\\n-
        \       returns youtube link\\n-        \\\"\\\"\\\"\\n-        return self._youtube_link\\n-\\n-
        \   @property\\n-    def song_name(self) -> str:\\n-        \\\"\\\"\\\"\\n-
        \       returns songs's name.\\n-        \\\"\\\"\\\"\\n-\\n-        return
        self._raw_track_meta[\\\"name\\\"]\\n-\\n-    @property\\n-    def track_number(self)
        -> int:\\n-        \\\"\\\"\\\"\\n-        returns song's track number from
        album (as in weather its the first\\n-        or second or third or fifth
        track in the album)\\n-        \\\"\\\"\\\"\\n-\\n-        return self._raw_track_meta[\\\"track_number\\\"]\\n-\\n-
        \   @property\\n-    def genres(self) -> List[str]:\\n-        \\\"\\\"\\\"\\n-
        \       returns a list of possible genres for the given song, the first member\\n-
        \       of the list is the most likely genre. returns None if genre data could\\n-
        \       not be found.\\n-        \\\"\\\"\\\"\\n-\\n-        return self._raw_album_meta[\\\"genres\\\"]
        + self._raw_artist_meta[\\\"genres\\\"]\\n-\\n-    @property\\n-    def duration(self)
        -> float:\\n-        \\\"\\\"\\\"\\n-        returns duration of song in seconds.\\n-
        \       \\\"\\\"\\\"\\n-\\n-        return round(self._raw_track_meta[\\\"duration_ms\\\"]
        / 1000, ndigits=3)\\n-\\n-    @property\\n-    def contributing_artists(self)
        -> List[str]:\\n-        \\\"\\\"\\\"\\n-        returns a list of all artists
        who worked on the song.\\n-        The first member of the list is likely
        the main artist.\\n-        \\\"\\\"\\\"\\n-\\n-        # we get rid of artist
        name that are in the song title so\\n-        # naming the song would be as
        easy as\\n-        # $contributingArtists + songName.mp3, we would want to
        end up with\\n-        # 'Jetta, Mastubs - I'd love to change the world (Mastubs
        remix).mp3'\\n-        # as a song name, it's dumb.\\n-        return [artist[\\\"name\\\"]
        for artist in self._raw_track_meta[\\\"artists\\\"]]\\n-\\n-    @property\\n-
        \   def disc_number(self) -> int:\\n-        return self._raw_track_meta[\\\"disc_number\\\"]\\n-\\n-
        \   @property\\n-    def lyrics(self):\\n-        \\\"\\\"\\\"\\n-        returns
        the lyrics of the song if found on musixmatch\\n-        \\\"\\\"\\\"\\n-\\n-
        \       return self._lyrics\\n-\\n-    @property\\n-    def display_name(self)
        -> str:\\n-        \\\"\\\"\\\"\\n-        returns songs's display name.\\n-
        \       \\\"\\\"\\\"\\n-\\n-        return str(\\\", \\\".join(self.contributing_artists)
        + \\\" - \\\" + self.song_name)\\n-\\n-    @property\\n-    def album_name(self)
        -> str:\\n-        \\\"\\\"\\\"\\n-        returns name of the album that
        the song belongs to.\\n-        \\\"\\\"\\\"\\n-\\n-        return self._raw_track_meta[\\\"album\\\"][\\\"name\\\"]\\n-\\n-
        \   @property\\n-    def album_artists(self) -> List[str]:\\n-        \\\"\\\"\\\"\\n-
        \       returns list of all artists who worked on the album that\\n-        the
        song belongs to. The first member of the list is likely the main\\n-        artist.\\n-
        \       \\\"\\\"\\\"\\n-\\n-        return [artist[\\\"name\\\"] for artist
        in self._raw_track_meta[\\\"album\\\"][\\\"artists\\\"]]\\n-\\n-    @property\\n-
        \   def album_release(self) -> str:\\n-        \\\"\\\"\\\"\\n-        returns
        date/year of album release depending on what data is available.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       return self._raw_track_meta[\\\"album\\\"][\\\"release_date\\\"]\\n-\\n-
        \   # ! Utilities for genuine use and also for metadata freaks:\\n-\\n-    @property\\n-
        \   def album_cover_url(self) -> Optional[str]:\\n-        \\\"\\\"\\\"\\n-
        \       returns url of the biggest album art image available.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       images = self._raw_track_meta[\\\"album\\\"][\\\"images\\\"]\\n-\\n-
        \       if len(images) > 0:\\n-            return images[0][\\\"url\\\"]\\n-\\n-
        \       return None\\n-\\n-    @property\\n-    def playlist_name(self) ->
        Optional[str]:\\n-        \\\"\\\"\\\"\\n-        returns name of the playlist
        that the song belongs to.\\n-        \\\"\\\"\\\"\\n-\\n-        if self._playlist
        is None:\\n-            return None\\n-\\n-        return self._playlist[\\\"name\\\"]\\n-\\n-
        \   @property\\n-    def data_dump(self) -> dict:\\n-        \\\"\\\"\\\"\\n-
        \       returns a dictionary containing the spotify-api responses as-is. The\\n-
        \       dictionary keys are as follows:\\n-            - rawTrackMeta      spotify-api
        track details\\n-            - rawAlbumMeta      spotify-api song's album
        details\\n-            - rawArtistMeta     spotify-api song's artist details\\n-\\n-
        \       Avoid using this function, it is implemented here only for those super\\n-
        \       rare occasions where there is a need to look up other details. Why\\n-
        \       have to look it up seperately when it's already been looked up once?\\n-
        \       \\\"\\\"\\\"\\n-\\n-        # ! internally the only reason this exists
        is that it helps in saving to disk\\n-\\n-        return {\\n-            \\\"youtube_link\\\":
        self._youtube_link,\\n-            \\\"raw_track_meta\\\": self._raw_track_meta,\\n-
        \           \\\"raw_album_meta\\\": self._raw_album_meta,\\n-            \\\"raw_artist_meta\\\":
        self._raw_artist_meta,\\n-            \\\"lyrics\\\": self._lyrics,\\n-            \\\"playlist\\\":
        self._playlist,\\n-        }\\n-\\n-    @property\\n-    def file_name(self)
        -> str:\\n-        return self.create_file_name(\\n-            song_name=self._raw_track_meta[\\\"name\\\"],\\n-
        \           song_artists=[artist[\\\"name\\\"] for artist in self._raw_track_meta[\\\"artists\\\"]],\\n-
        \       )\\n-\\n-    @staticmethod\\n-    def create_file_name(song_name:
        str, song_artists: List[str]) -> str:\\n-        # build file name of converted
        file\\n-        # the main artist is always included\\n-        artist_string
        = song_artists[0]\\n-\\n-        # ! we eliminate contributing artist names
        that are also in the song name, else we\\n-        # ! would end up with things
        like 'Jetta, Mastubs - I'd love to change the world\\n-        # ! (Mastubs
        REMIX).mp3' which is kinda an odd file name.\\n-        for artist in song_artists[1:]:\\n-
        \           if artist.lower() not in song_name.lower():\\n-                artist_string
        += \\\", \\\" + artist\\n-\\n-        converted_file_name = artist_string
        + \\\" - \\\" + song_name\\n-\\n-        return format_name(converted_file_name)\"},{\"sha\":\"952d532151f3b945991922d33589f276f39009d6\",\"filename\":\"spotdl/search/spotify_client.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":79,\"changes\":79,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fspotify_client.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fspotify_client.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2Fspotify_client.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,79 +0,0 @@\\n-from spotipy import Spotify\\n-from spotipy.cache_handler
        import CacheFileHandler\\n-from spotipy.oauth2 import SpotifyClientCredentials,
        SpotifyOAuth\\n-\\n-\\n-class Singleton(type):\\n-    \\\"\\\"\\\"\\n-    Singleton
        metaclass for SpotifyClient. Ensures that SpotifyClient is not\\n-    instantiated
        without prior initialization. Every other instantiation of\\n-    SpotifyClient
        will return the same instance.\\n-    \\\"\\\"\\\"\\n-\\n-    _instance =
        None\\n-\\n-    def __call__(cls):\\n-        if cls._instance is None:\\n-
        \           raise Exception(\\n-                \\\"Spotify client not created.
        Call SpotifyClient.init\\\"\\n-                \\\"(client_id, client_secret,
        user_auth) first.\\\"\\n-            )\\n-        return cls._instance\\n-\\n-
        \   def init(cls, client_id: str, client_secret: str, user_auth: bool) ->
        \\\"Singleton\\\":\\n-        \\\"\\\"\\\"\\n-        `str` `client_id` :
        client id from your spotify account\\n-\\n-        `str` `client_secret` :
        client secret for your client id\\n-\\n-        `bool` `user_auth` : Determines
        if the Authorization Code Flow or\\n-                   the Client Credentials
        Flow is used\\n-\\n-        creates and caches a spotify client if a client
        doesn't exist. Can only be called\\n-        once, multiple calls will cause
        an Exception.\\n-        \\\"\\\"\\\"\\n-\\n-        # check if initialization
        has been completed, if yes, raise an Exception\\n-        if isinstance(cls._instance,
        cls):\\n-            raise Exception(\\\"A spotify client has already been
        initialized\\\")\\n-\\n-        credential_manager = None\\n-        cache_handler
        = CacheFileHandler(cache_path=\\\".spotdl-cache\\\")\\n-\\n-        # Use
        SpotifyOAuth as auth manager\\n-        if user_auth:\\n-            credential_manager
        = SpotifyOAuth(\\n-                client_id=client_id,\\n-                client_secret=client_secret,\\n-
        \               redirect_uri=\\\"http://127.0.0.1:8080/\\\",\\n-                scope=\\\"user-library-read\\\",\\n-
        \               cache_handler=cache_handler,\\n-            )\\n-        #
        Use SpotifyClientCredentials as auth manager\\n-        else:\\n-            credential_manager
        = SpotifyClientCredentials(\\n-                client_id=client_id,\\n-                client_secret=client_secret,\\n-
        \               cache_handler=cache_handler,\\n-            )\\n-\\n-        #
        Create instance\\n-        cls._instance = super().__call__(auth_manager=credential_manager)\\n-\\n-
        \       # Return instance\\n-        return cls._instance\\n-\\n-\\n-class
        SpotifyClient(Spotify, metaclass=Singleton):\\n-    \\\"\\\"\\\"\\n-    This
        is the Spotify client meant to be used in the app. Has to be initialized first
        by\\n-    calling `SpotifyClient.init(client_id, client_secret, user_auth)`.\\n-
        \   \\\"\\\"\\\"\\n-\\n-    _initialized = False\\n-\\n-    def __init__(self,
        user_auth=False, *args, **kwargs):\\n-        if user_auth:\\n-            self._user_auth
        = True\\n-        super().__init__(*args, **kwargs)\\n-        self._initialized
        = True\"},{\"sha\":\"ac8e242f850574fd203f0bcd6a5c8f8ab447932b\",\"filename\":\"spotdl/types/__init__.py\",\"status\":\"added\",\"additions\":3,\"deletions\":0,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,3 @@\\n+\\\"\\\"\\\"\\n+Types for the spotdl package.\\n+\\\"\\\"\\\"\"},{\"sha\":\"a07602c65beccff823beba1aba6a2d8e257c00bc\",\"filename\":\"spotdl/types/album.py\",\"status\":\"added\",\"additions\":113,\"deletions\":0,\"changes\":113,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Falbum.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Falbum.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Falbum.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,113 @@\\n+\\\"\\\"\\\"\\n+Artist module for retrieving artist data
        from Spotify.\\n+\\\"\\\"\\\"\\n+\\n+from dataclasses import dataclass\\n+from
        typing import Any, Dict, List, Tuple\\n+\\n+from spotdl.types.song import
        Song, SongList\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Album\\\", \\\"AlbumError\\\"]\\n+\\n+\\n+class AlbumError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to albums.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Album(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Album class for retrieving album data from Spotify.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    artist: Dict[str, Any]\\n+\\n+    @staticmethod\\n+
        \   def get_metadata(url: str) -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+
        \       Get metadata for album.\\n+\\n+        ### Arguments\\n+        -
        url: The URL of the album.\\n+\\n+        ### Returns\\n+        - A dictionary
        with metadata.\\n+        \\\"\\\"\\\"\\n+\\n+        spotify_client = SpotifyClient()\\n+\\n+
        \       album_metadata = spotify_client.album(url)\\n+        if album_metadata
        is None:\\n+            raise AlbumError(\\n+                \\\"Couldn't
        get metadata, check if you have passed correct album id\\\"\\n+            )\\n+\\n+
        \       metadata = {\\n+            \\\"name\\\": album_metadata[\\\"name\\\"],\\n+
        \           \\\"artist\\\": album_metadata[\\\"artists\\\"][0],\\n+            \\\"url\\\":
        url,\\n+        }\\n+\\n+        album_response = spotify_client.album_tracks(url)\\n+
        \       if album_response is None:\\n+            raise AlbumError(\\n+                \\\"Couldn't
        get metadata, check if you have passed correct album id\\\"\\n+            )\\n+\\n+
        \       tracks = album_response[\\\"items\\\"]\\n+\\n+        # Get all tracks
        from album\\n+        while album_response[\\\"next\\\"]:\\n+            album_response
        = spotify_client.next(album_response)\\n+\\n+            # Failed to get response,
        break the loop\\n+            if album_response is None:\\n+                break\\n+\\n+
        \           tracks.extend(album_response[\\\"items\\\"])\\n+\\n+        if
        album_response is None:\\n+            raise AlbumError(f\\\"Failed to get
        album response: {url}\\\")\\n+\\n+        songs = []\\n+        for track
        in tracks:\\n+            if not isinstance(track, dict) or track.get(\\\"is_local\\\"):\\n+
        \               continue\\n+\\n+            release_date = album_metadata[\\\"release_date\\\"]\\n+
        \           artists = artists = [artist[\\\"name\\\"] for artist in track[\\\"artists\\\"]]\\n+\\n+
        \           song = Song.from_missing_data(\\n+                name=track[\\\"name\\\"],\\n+
        \               artists=artists,\\n+                artist=artists[0],\\n+
        \               album_id=album_metadata[\\\"id\\\"],\\n+                album_name=album_metadata[\\\"name\\\"],\\n+
        \               album_artist=album_metadata[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \               disc_number=track[\\\"disc_number\\\"],\\n+                disc_count=int(album_metadata[\\\"tracks\\\"][\\\"items\\\"][-1][\\\"disc_number\\\"]),\\n+
        \               duration=track[\\\"duration_ms\\\"] / 1000,\\n+                year=release_date[:4],\\n+
        \               date=release_date,\\n+                track_number=track[\\\"track_number\\\"],\\n+
        \               tracks_count=album_metadata[\\\"total_tracks\\\"],\\n+                song_id=track[\\\"id\\\"],\\n+
        \               explicit=track[\\\"explicit\\\"],\\n+                publisher=album_metadata[\\\"label\\\"],\\n+
        \               url=track[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+                cover_url=max(\\n+
        \                   album_metadata[\\\"images\\\"], key=lambda i: i[\\\"width\\\"]
        * i[\\\"height\\\"]\\n+                )[\\\"url\\\"]\\n+                if
        album_metadata[\\\"images\\\"]\\n+                else None,\\n+                copyright_text=album_metadata[\\\"copyrights\\\"][0][\\\"text\\\"]\\n+
        \               if album_metadata[\\\"copyrights\\\"]\\n+                else
        None,\\n+            )\\n+\\n+            songs.append(song)\\n+\\n+        return
        metadata, songs\"},{\"sha\":\"5d78aaec38a0f72939f4eaefddb80afe5db965f9\",\"filename\":\"spotdl/types/artist.py\",\"status\":\"added\",\"additions\":107,\"deletions\":0,\"changes\":107,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fartist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fartist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fartist.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,107 @@\\n+\\\"\\\"\\\"\\n+Artist module for retrieving artist data
        from Spotify.\\n+\\\"\\\"\\\"\\n+\\n+from dataclasses import dataclass\\n+from
        typing import Any, Dict, List, Set, Tuple\\n+\\n+from spotdl.types.album import
        Album\\n+from spotdl.types.song import Song, SongList\\n+from spotdl.utils.formatter
        import slugify\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Artist\\\", \\\"ArtistError\\\"]\\n+\\n+\\n+class ArtistError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to artists.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Artist(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Artist class.\\n+    Contains all the information
        about an artist.\\n+    Frozen to prevent accidental modification.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   genres: List[str]\\n+    albums: List[Album]\\n+\\n+    @staticmethod\\n+
        \   def get_metadata(url: str) -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+
        \       Get metadata for artist.\\n+\\n+        ### Arguments\\n+        -
        url: The URL of the artist.\\n+\\n+        ### Returns\\n+        - Dict with
        metadata for artist.\\n+        \\\"\\\"\\\"\\n+\\n+        # query spotify
        for artist details\\n+        spotify_client = SpotifyClient()\\n+\\n+        #
        get artist info\\n+        raw_artist_meta = spotify_client.artist(url)\\n+\\n+
        \       if raw_artist_meta is None:\\n+            raise ArtistError(\\n+
        \               \\\"Couldn't get metadata, check if you have passed correct
        artist id\\\"\\n+            )\\n+\\n+        artist_albums = spotify_client.artist_albums(url,
        album_type=\\\"album,single\\\")\\n+\\n+        # check if there is response\\n+
        \       if not artist_albums:\\n+            raise ArtistError(\\n+                \\\"Couldn't
        get albums, check if you have passed correct artist id\\\"\\n+            )\\n+\\n+
        \       # get artist albums and remove duplicates\\n+        # duplicates
        can occur if the artist has the same album available in\\n+        # different
        countries\\n+        albums: List[str] = []\\n+        known_albums: Set[str]
        = set()\\n+        for album in artist_albums[\\\"items\\\"]:\\n+            albums.append(album[\\\"external_urls\\\"][\\\"spotify\\\"])\\n+
        \           known_albums.add(slugify(album[\\\"name\\\"]))\\n+\\n+        #
        Fetch all artist albums\\n+        while artist_albums and artist_albums[\\\"next\\\"]:\\n+
        \           artist_albums = spotify_client.next(artist_albums)\\n+            if
        artist_albums is None:\\n+                break\\n+\\n+            for album
        in artist_albums[\\\"items\\\"]:\\n+                album_name = slugify(album[\\\"name\\\"])\\n+\\n+
        \               if album_name not in known_albums:\\n+                    albums.append(album[\\\"external_urls\\\"][\\\"spotify\\\"])\\n+
        \                   known_albums.add(album_name)\\n+\\n+        songs = []\\n+
        \       for album in albums:\\n+            album_obj = Album.from_url(album,
        fetch_songs=False)\\n+            songs.extend(album_obj.songs)\\n+\\n+        #
        Very aggressive deduplication\\n+        songs_list = []\\n+        songs_names
        = set()\\n+        for song in songs:\\n+            slug_name = slugify(song.name)\\n+
        \           if song.name not in songs_names:\\n+                songs_list.append(song)\\n+
        \               songs_names.add(slug_name)\\n+\\n+        metadata = {\\n+
        \           \\\"name\\\": raw_artist_meta[\\\"name\\\"],\\n+            \\\"genres\\\":
        raw_artist_meta[\\\"genres\\\"],\\n+            \\\"url\\\": url,\\n+            \\\"albums\\\":
        albums,\\n+        }\\n+\\n+        return metadata, songs_list\"},{\"sha\":\"3377282646322955259c3a974111206b15a11e83\",\"filename\":\"spotdl/types/options.py\",\"status\":\"added\",\"additions\":188,\"deletions\":0,\"changes\":188,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Foptions.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Foptions.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Foptions.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,188 @@\\n+\\\"\\\"\\\"\\n+This file contains types for spotdl/downloader/web
        modules.\\n+Options types have all the fields marked as required.\\n+Settings
        types have all the fields marked as optional.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import List, Optional, Union\\n+\\n+from typing_extensions import TypedDict\\n+\\n+__all__
        = [\\n+    \\\"SpotifyOptions\\\",\\n+    \\\"DownloaderOptions\\\",\\n+    \\\"WebOptions\\\",\\n+
        \   \\\"SpotDLOptions\\\",\\n+    \\\"SpotifyOptionalOptions\\\",\\n+    \\\"DownloaderOptionalOptions\\\",\\n+
        \   \\\"WebOptionalOptions\\\",\\n+    \\\"SpotDLOptionalOptions\\\",\\n+]\\n+\\n+\\n+class
        SpotifyOptions(TypedDict):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing
        the Spotify client.\\n+    \\\"\\\"\\\"\\n+\\n+    client_id: str\\n+    client_secret:
        str\\n+    auth_token: Optional[str]\\n+    user_auth: bool\\n+    headless:
        bool\\n+    cache_path: str\\n+    no_cache: bool\\n+    max_retries: int\\n+
        \   use_cache_file: bool\\n+\\n+\\n+class DownloaderOptions(TypedDict):\\n+
        \   \\\"\\\"\\\"\\n+    Options used for initializing the Downloader.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    audio_providers: List[str]\\n+    lyrics_providers:
        List[str]\\n+    playlist_numbering: bool\\n+    scan_for_songs: bool\\n+
        \   m3u: Optional[str]\\n+    output: str\\n+    overwrite: str\\n+    search_query:
        Optional[str]\\n+    ffmpeg: str\\n+    bitrate: Optional[Union[str, int]]\\n+
        \   ffmpeg_args: Optional[str]\\n+    format: str\\n+    save_file: Optional[str]\\n+
        \   filter_results: bool\\n+    threads: int\\n+    cookie_file: Optional[str]\\n+
        \   restrict: Optional[str]\\n+    print_errors: bool\\n+    sponsor_block:
        bool\\n+    preload: bool\\n+    archive: Optional[str]\\n+    load_config:
        bool\\n+    log_level: str\\n+    simple_tui: bool\\n+    fetch_albums: bool\\n+
        \   id3_separator: str\\n+    ytm_data: bool\\n+    add_unavailable: bool\\n+
        \   generate_lrc: bool\\n+    force_update_metadata: bool\\n+    only_verified_results:
        bool\\n+    sync_without_deleting: bool\\n+    max_filename_length: Optional[int]\\n+
        \   yt_dlp_args: Optional[str]\\n+    detect_formats: Optional[List[str]]\\n+
        \   save_errors: Optional[str]\\n+    ignore_albums: Optional[List[str]]\\n+
        \   proxy: Optional[str]\\n+    skip_explicit: Optional[bool]\\n+    log_format:
        Optional[str]\\n+    redownload: Optional[bool]\\n+\\n+\\n+class WebOptions(TypedDict):\\n+
        \   \\\"\\\"\\\"\\n+    Options used for initializing the Web server.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    web_use_output_dir: bool\\n+    port: int\\n+
        \   host: str\\n+    keep_alive: bool\\n+    allowed_origins: Optional[List[str]]\\n+
        \   keep_sessions: bool\\n+\\n+\\n+class SpotDLOptions(SpotifyOptions, DownloaderOptions,
        WebOptions):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing the
        SpotDL client.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+class SpotifyOptionalOptions(TypedDict,
        total=False):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing the
        Spotify client.\\n+    \\\"\\\"\\\"\\n+\\n+    client_id: str\\n+    client_secret:
        str\\n+    auth_token: Optional[str]\\n+    user_auth: bool\\n+    headless:
        bool\\n+    cache_path: str\\n+    no_cache: bool\\n+    max_retries: int\\n+
        \   use_cache_file: bool\\n+\\n+\\n+class DownloaderOptionalOptions(TypedDict,
        total=False):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing the
        Downloader.\\n+    \\\"\\\"\\\"\\n+\\n+    audio_providers: List[str]\\n+
        \   lyrics_providers: List[str]\\n+    playlist_numbering: bool\\n+    scan_for_songs:
        bool\\n+    m3u: Optional[str]\\n+    output: str\\n+    overwrite: str\\n+
        \   search_query: Optional[str]\\n+    ffmpeg: str\\n+    bitrate: Optional[Union[str,
        int]]\\n+    ffmpeg_args: Optional[str]\\n+    format: str\\n+    save_file:
        Optional[str]\\n+    filter_results: bool\\n+    threads: int\\n+    cookie_file:
        Optional[str]\\n+    restrict: Optional[str]\\n+    print_errors: bool\\n+
        \   sponsor_block: bool\\n+    preload: bool\\n+    archive: Optional[str]\\n+
        \   load_config: bool\\n+    log_level: str\\n+    simple_tui: bool\\n+    fetch_albums:
        bool\\n+    id3_separator: str\\n+    ytm_data: bool\\n+    add_unavailable:
        bool\\n+    generate_lrc: bool\\n+    force_update_metadata: bool\\n+    only_verified_results:
        bool\\n+    sync_without_deleting: bool\\n+    max_filename_length: Optional[int]\\n+
        \   yt_dlp_args: Optional[str]\\n+    detect_formats: Optional[List[str]]\\n+
        \   save_errors: Optional[str]\\n+    proxy: Optional[str]\\n+    skip_explicit:
        Optional[bool]\\n+    log_format: Optional[str]\\n+    redownload: Optional[bool]\\n+\\n+\\n+class
        WebOptionalOptions(TypedDict, total=False):\\n+    \\\"\\\"\\\"\\n+    Options
        used for initializing the Web server.\\n+    \\\"\\\"\\\"\\n+\\n+    web_use_output_dir:
        bool\\n+    port: int\\n+    host: str\\n+    keep_alive: bool\\n+    allowed_origins:
        Optional[str]\\n+    keep_sessions: bool\\n+\\n+\\n+class SpotDLOptionalOptions(\\n+
        \   SpotifyOptionalOptions, DownloaderOptionalOptions, WebOptionalOptions\\n+):\\n+
        \   \\\"\\\"\\\"\\n+    Options used for initializing the SpotDL client.\\n+
        \   This type is modified to not require all the fields.\\n+    \\\"\\\"\\\"\"},{\"sha\":\"d617bdff16a5091355f15a614d5ef252a7c21acd\",\"filename\":\"spotdl/types/playlist.py\",\"status\":\"added\",\"additions\":138,\"deletions\":0,\"changes\":138,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fplaylist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fplaylist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fplaylist.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,138 @@\\n+\\\"\\\"\\\"\\n+Playlist module for retrieving playlist
        data from Spotify.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from dataclasses
        import dataclass\\n+from typing import Any, Dict, List, Tuple\\n+\\n+from
        spotdl.types.song import Song, SongList\\n+from spotdl.utils.spotify import
        SpotifyClient\\n+\\n+__all__ = [\\\"Playlist\\\", \\\"PlaylistError\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class PlaylistError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to playlists.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Playlist(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Playlist class for retrieving playlist data from Spotify.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    description: str\\n+    author_url: str\\n+    author_name:
        str\\n+    cover_url: str\\n+\\n+    @staticmethod\\n+    def get_metadata(url:
        str) -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+        Get
        metadata for a playlist.\\n+\\n+        ### Arguments\\n+        - url: The
        URL of the playlist.\\n+\\n+        ### Returns\\n+        - A dictionary
        with metadata.\\n+        \\\"\\\"\\\"\\n+\\n+        spotify_client = SpotifyClient()\\n+\\n+
        \       playlist = spotify_client.playlist(url)\\n+        if playlist is
        None:\\n+            raise PlaylistError(\\\"Invalid playlist URL.\\\")\\n+\\n+
        \       metadata = {\\n+            \\\"name\\\": playlist[\\\"name\\\"],\\n+
        \           \\\"url\\\": url,\\n+            \\\"description\\\": playlist[\\\"description\\\"],\\n+
        \           \\\"author_url\\\": playlist[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \           \\\"author_name\\\": playlist[\\\"owner\\\"][\\\"display_name\\\"],\\n+
        \           \\\"cover_url\\\": (\\n+                max(\\n+                    playlist[\\\"images\\\"],\\n+
        \                   key=lambda i: 0\\n+                    if i[\\\"width\\\"]
        is None or i[\\\"height\\\"] is None\\n+                    else i[\\\"width\\\"]
        * i[\\\"height\\\"],\\n+                )[\\\"url\\\"]\\n+                if
        (len(playlist[\\\"images\\\"]) > 0)\\n+                else \\\"\\\"\\n+            ),\\n+
        \       }\\n+\\n+        playlist_response = spotify_client.playlist_items(url)\\n+
        \       if playlist_response is None:\\n+            raise PlaylistError(f\\\"Wrong
        playlist id: {url}\\\")\\n+\\n+        # Get all tracks from playlist\\n+
        \       tracks = playlist_response[\\\"items\\\"]\\n+        while playlist_response[\\\"next\\\"]:\\n+
        \           playlist_response = spotify_client.next(playlist_response)\\n+\\n+
        \           # Failed to get response, break the loop\\n+            if playlist_response
        is None:\\n+                break\\n+\\n+            # Add tracks to the list\\n+
        \           tracks.extend(playlist_response[\\\"items\\\"])\\n+\\n+        songs
        = []\\n+        for track in tracks:\\n+            if not isinstance(track,
        dict) or track.get(\\\"track\\\") is None:\\n+                continue\\n+\\n+
        \           track_meta = track[\\\"track\\\"]\\n+\\n+            if track_meta.get(\\\"is_local\\\")
        or track_meta.get(\\\"type\\\") != \\\"track\\\":\\n+                logger.warning(\\n+
        \                   \\\"Skipping track: %s local tracks and %s are not supported\\\",\\n+
        \                   track_meta.get(\\\"id\\\"),\\n+                    track_meta.get(\\\"type\\\"),\\n+
        \               )\\n+\\n+                continue\\n+\\n+            track_id
        = track_meta.get(\\\"id\\\")\\n+            if track_id is None or track_meta.get(\\\"duration_ms\\\")
        == 0:\\n+                continue\\n+\\n+            album_meta = track_meta.get(\\\"album\\\",
        {})\\n+            release_date = album_meta.get(\\\"release_date\\\")\\n+\\n+
        \           artists = [artist[\\\"name\\\"] for artist in track_meta.get(\\\"artists\\\",
        [])]\\n+            song = Song.from_missing_data(\\n+                name=track_meta[\\\"name\\\"],\\n+
        \               artists=artists,\\n+                artist=artists[0],\\n+
        \               album_id=album_meta.get(\\\"id\\\"),\\n+                album_name=album_meta.get(\\\"name\\\"),\\n+
        \               album_artist=album_meta.get(\\\"artists\\\", [])[0][\\\"name\\\"]\\n+
        \               if album_meta.get(\\\"artists\\\")\\n+                else
        None,\\n+                disc_number=track_meta[\\\"disc_number\\\"],\\n+
        \               duration=track_meta[\\\"duration_ms\\\"],\\n+                year=release_date[:4]
        if release_date else None,\\n+                date=release_date,\\n+                track_number=track_meta[\\\"track_number\\\"],\\n+
        \               tracks_count=album_meta.get(\\\"total_tracks\\\"),\\n+                song_id=track_meta[\\\"id\\\"],\\n+
        \               explicit=track_meta[\\\"explicit\\\"],\\n+                url=track_meta[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \               isrc=track_meta.get(\\\"external_ids\\\", {}).get(\\\"isrc\\\"),\\n+
        \               cover_url=max(\\n+                    album_meta[\\\"images\\\"],
        key=lambda i: i[\\\"width\\\"] * i[\\\"height\\\"]\\n+                )[\\\"url\\\"]\\n+
        \               if (len(album_meta.get(\\\"images\\\", [])) > 0)\\n+                else
        None,\\n+            )\\n+\\n+            songs.append(song)\\n+\\n+        return
        metadata, songs\"},{\"sha\":\"4f3e372e48ea4993df94b3c6361a94cfcb8ad9cc\",\"filename\":\"spotdl/types/result.py\",\"status\":\"added\",\"additions\":87,\"deletions\":0,\"changes\":87,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fresult.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fresult.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fresult.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,87 @@\\n+\\\"\\\"\\\"\\n+Result is a class that contains all the information
        about a result from search\\n+performed by audio provider.\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+from dataclasses import asdict, dataclass\\n+from typing import Any,
        Dict, Optional, Tuple\\n+\\n+__all__ = [\\\"Result\\\"]\\n+\\n+\\n+@dataclass(frozen=True,
        eq=True)\\n+class Result:\\n+    \\\"\\\"\\\"\\n+    Result is a class that
        contains all the information about a result from search\\n+    perfoermed
        by audio provider.\\n+    \\\"\\\"\\\"\\n+\\n+    # Required fields\\n+    source:
        str  # Source of the result\\n+    url: str  # URL of the result\\n+    verified:
        bool  # Whether the result is from a verified source or not\\n+    name: str
        \ # Name of the result\\n+    duration: float  # Duration of the result in
        seconds\\n+    author: str  # Author of the result\\n+    result_id: str  #
        ID of the result\\n+\\n+    # Search related fields\\n+    isrc_search: Optional[\\n+
        \       bool\\n+    ] = None  # Whether the result is from an ISRC search
        or not\\n+    search_query: Optional[str] = None  # The search query used
        to find the result\\n+\\n+    # Optional fields\\n+    artists: Optional[Tuple[str,
        ...]] = None\\n+    views: Optional[int] = None\\n+    explicit: Optional[bool]
        = None\\n+    album: Optional[str] = None\\n+    year: Optional[int] = None\\n+
        \   track_number: Optional[int] = None\\n+    genre: Optional[str] = None\\n+
        \   lyrics: Optional[str] = None\\n+\\n+    @classmethod\\n+    def from_data_dump(cls,
        data: str) -> \\\"Result\\\":\\n+        \\\"\\\"\\\"\\n+        Create a
        Result object from a data dump.\\n+\\n+        ### Arguments\\n+        -
        data: The data dump.\\n+\\n+        ### Returns\\n+        - The Song object.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # Create dict from json string\\n+        data_dict
        = json.loads(data)\\n+\\n+        # Return product object\\n+        return
        cls(**data_dict)\\n+\\n+    @classmethod\\n+    def from_dict(cls, data: Dict[str,
        Any]) -> \\\"Result\\\":\\n+        \\\"\\\"\\\"\\n+        Create a Song
        object from a dictionary.\\n+\\n+        ### Arguments\\n+        - data:
        The dictionary.\\n+\\n+        ### Returns\\n+        - The Song object.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # Return product object\\n+        return
        cls(**data)\\n+\\n+    @property\\n+    def json(self) -> Dict[str, Any]:\\n+
        \       \\\"\\\"\\\"\\n+        Returns a dictionary of the song's data.\\n+\\n+
        \       ### Returns\\n+        - The dictionary.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return asdict(self)\"},{\"sha\":\"1425a0e191331f368220e89bd72a1ebe9d91526e\",\"filename\":\"spotdl/types/saved.py\",\"status\":\"added\",\"additions\":97,\"deletions\":0,\"changes\":97,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fsaved.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fsaved.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fsaved.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,97 @@\\n+\\\"\\\"\\\"\\n+Saved module for handing the saved tracks
        from user library\\n+\\\"\\\"\\\"\\n+\\n+from dataclasses import dataclass\\n+from
        typing import Any, Dict, List, Tuple\\n+\\n+from spotdl.types.song import
        Song, SongList\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Saved\\\", \\\"SavedError\\\"]\\n+\\n+\\n+class SavedError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to saved tracks.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Saved(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Saved class for handling the saved tracks from user
        library.\\n+    \\\"\\\"\\\"\\n+\\n+    @staticmethod\\n+    def get_metadata(url:
        str = \\\"saved\\\") -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+
        \       Returns metadata for a saved list.\\n+\\n+        ### Arguments\\n+
        \       - url: Not required, but used to match the signature of the other
        get_metadata methods.\\n+\\n+        ### Returns\\n+        - metadata: A
        dictionary containing the metadata for the saved list.\\n+        - songs:
        A list of Song objects.\\n+        \\\"\\\"\\\"\\n+\\n+        metadata =
        {\\\"name\\\": \\\"Saved tracks\\\", \\\"url\\\": url}\\n+\\n+        spotify_client
        = SpotifyClient()\\n+        if spotify_client.user_auth is False:  # type:
        ignore\\n+            raise SavedError(\\\"You must be logged in to use this
        function\\\")\\n+\\n+        saved_tracks_response = spotify_client.current_user_saved_tracks()\\n+
        \       if saved_tracks_response is None:\\n+            raise SavedError(\\\"Couldn't
        get saved tracks\\\")\\n+\\n+        saved_tracks = saved_tracks_response[\\\"items\\\"]\\n+\\n+
        \       # Fetch all saved tracks\\n+        while saved_tracks_response and
        saved_tracks_response[\\\"next\\\"]:\\n+            response = spotify_client.next(saved_tracks_response)\\n+
        \           if response is None:\\n+                break\\n+\\n+            saved_tracks_response
        = response\\n+            saved_tracks.extend(saved_tracks_response[\\\"items\\\"])\\n+\\n+
        \       songs = []\\n+        for track in saved_tracks:\\n+            if
        not isinstance(track, dict) or track.get(\\\"track\\\", {}).get(\\\"is_local\\\"):\\n+
        \               continue\\n+\\n+            track_meta = track[\\\"track\\\"]\\n+
        \           album_meta = track_meta[\\\"album\\\"]\\n+\\n+            release_date
        = album_meta[\\\"release_date\\\"]\\n+            artists = artists = [artist[\\\"name\\\"]
        for artist in track_meta[\\\"artists\\\"]]\\n+\\n+            song = Song.from_missing_data(\\n+
        \               name=track_meta[\\\"name\\\"],\\n+                artists=artists,\\n+
        \               artist=artists[0],\\n+                album_id=album_meta[\\\"id\\\"],\\n+
        \               album_name=album_meta[\\\"name\\\"],\\n+                album_artist=album_meta[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \               disc_number=track_meta[\\\"disc_number\\\"],\\n+                duration=track_meta[\\\"duration_ms\\\"],\\n+
        \               year=release_date[:4],\\n+                date=release_date,\\n+
        \               track_number=track_meta[\\\"track_number\\\"],\\n+                tracks_count=album_meta[\\\"total_tracks\\\"],\\n+
        \               song_id=track_meta[\\\"id\\\"],\\n+                explicit=track_meta[\\\"explicit\\\"],\\n+
        \               url=track_meta[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \               isrc=track_meta.get(\\\"external_ids\\\", {}).get(\\\"isrc\\\"),\\n+
        \               cover_url=max(\\n+                    album_meta[\\\"images\\\"],
        key=lambda i: i[\\\"width\\\"] * i[\\\"height\\\"]\\n+                )[\\\"url\\\"]\\n+
        \               if album_meta[\\\"images\\\"]\\n+                else None,\\n+
        \           )\\n+\\n+            songs.append(song)\\n+\\n+        return
        metadata, songs\"},{\"sha\":\"13b1aab1b47ec6ee9603b158439ffd87cad59afc\",\"filename\":\"spotdl/types/song.py\",\"status\":\"added\",\"additions\":376,\"deletions\":0,\"changes\":376,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fsong.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Ftypes%2Fsong.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fsong.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,376 @@\\n+\\\"\\\"\\\"\\n+Song module that hold the Song and SongList
        classes.\\n+\\\"\\\"\\\"\\n+\\n+import json\\n+from dataclasses import asdict,
        dataclass\\n+from typing import Any, Dict, List, Optional, Tuple\\n+\\n+from
        rapidfuzz import fuzz\\n+\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Song\\\", \\\"SongList\\\", \\\"SongError\\\"]\\n+\\n+\\n+class SongError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to songs.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class SongListError(Exception):\\n+    \\\"\\\"\\\"\\n+
        \   Base class for all exceptions related to song lists.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+@dataclass\\n+class
        Song:\\n+    \\\"\\\"\\\"\\n+    Song class. Contains all the information
        about a song.\\n+    \\\"\\\"\\\"\\n+\\n+    name: str\\n+    artists: List[str]\\n+
        \   artist: str\\n+    genres: List[str]\\n+    disc_number: int\\n+    disc_count:
        int\\n+    album_name: str\\n+    album_artist: str\\n+    duration: int\\n+
        \   year: int\\n+    date: str\\n+    track_number: int\\n+    tracks_count:
        int\\n+    song_id: str\\n+    explicit: bool\\n+    publisher: str\\n+    url:
        str\\n+    isrc: Optional[str]\\n+    cover_url: Optional[str]\\n+    copyright_text:
        Optional[str]\\n+    download_url: Optional[str] = None\\n+    lyrics: Optional[str]
        = None\\n+    popularity: Optional[int] = None\\n+    album_id: Optional[str]
        = None\\n+    list_name: Optional[str] = None\\n+    list_url: Optional[str]
        = None\\n+    list_position: Optional[int] = None\\n+    list_length: Optional[int]
        = None\\n+\\n+    @classmethod\\n+    def from_url(cls, url: str) -> \\\"Song\\\":\\n+
        \       \\\"\\\"\\\"\\n+        Creates a Song object from a URL.\\n+\\n+
        \       ### Arguments\\n+        - url: The URL of the song.\\n+\\n+        ###
        Returns\\n+        - The Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        if
        \\\"open.spotify.com\\\" not in url or \\\"track\\\" not in url:\\n+            raise
        SongError(f\\\"Invalid URL: {url}\\\")\\n+\\n+        # query spotify for
        song, artist, album details\\n+        spotify_client = SpotifyClient()\\n+\\n+
        \       # get track info\\n+        raw_track_meta = spotify_client.track(url)\\n+\\n+
        \       if raw_track_meta is None:\\n+            raise SongError(\\n+                \\\"Couldn't
        get metadata, check if you have passed correct track id\\\"\\n+            )\\n+\\n+
        \       if raw_track_meta[\\\"duration_ms\\\"] == 0 or raw_track_meta[\\\"name\\\"].strip()
        == \\\"\\\":\\n+            raise SongError(f\\\"Track no longer exists: {url}\\\")\\n+\\n+
        \       # get artist info\\n+        primary_artist_id = raw_track_meta[\\\"artists\\\"][0][\\\"id\\\"]\\n+
        \       raw_artist_meta: Dict[str, Any] = spotify_client.artist(primary_artist_id)
        \ # type: ignore\\n+\\n+        # get album info\\n+        album_id = raw_track_meta[\\\"album\\\"][\\\"id\\\"]\\n+
        \       raw_album_meta: Dict[str, Any] = spotify_client.album(album_id)  #
        type: ignore\\n+\\n+        # create song object\\n+        return cls(\\n+
        \           name=raw_track_meta[\\\"name\\\"],\\n+            artists=[artist[\\\"name\\\"]
        for artist in raw_track_meta[\\\"artists\\\"]],\\n+            artist=raw_track_meta[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \           album_id=album_id,\\n+            album_name=raw_album_meta[\\\"name\\\"],\\n+
        \           album_artist=raw_album_meta[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \           copyright_text=raw_album_meta[\\\"copyrights\\\"][0][\\\"text\\\"]\\n+
        \           if raw_album_meta[\\\"copyrights\\\"]\\n+            else None,\\n+
        \           genres=raw_album_meta[\\\"genres\\\"] + raw_artist_meta[\\\"genres\\\"],\\n+
        \           disc_number=raw_track_meta[\\\"disc_number\\\"],\\n+            disc_count=int(raw_album_meta[\\\"tracks\\\"][\\\"items\\\"][-1][\\\"disc_number\\\"]),\\n+
        \           duration=raw_track_meta[\\\"duration_ms\\\"] / 1000,\\n+            year=int(raw_album_meta[\\\"release_date\\\"][:4]),\\n+
        \           date=raw_album_meta[\\\"release_date\\\"],\\n+            track_number=raw_track_meta[\\\"track_number\\\"],\\n+
        \           tracks_count=raw_album_meta[\\\"total_tracks\\\"],\\n+            isrc=raw_track_meta.get(\\\"external_ids\\\",
        {}).get(\\\"isrc\\\"),\\n+            song_id=raw_track_meta[\\\"id\\\"],\\n+
        \           explicit=raw_track_meta[\\\"explicit\\\"],\\n+            publisher=raw_album_meta[\\\"label\\\"],\\n+
        \           url=raw_track_meta[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \           popularity=raw_track_meta[\\\"popularity\\\"],\\n+            cover_url=max(\\n+
        \               raw_album_meta[\\\"images\\\"], key=lambda i: i[\\\"width\\\"]
        * i[\\\"height\\\"]\\n+            )[\\\"url\\\"]\\n+            if raw_album_meta[\\\"images\\\"]\\n+
        \           else None,\\n+        )\\n+\\n+    @staticmethod\\n+    def search(search_term:
        str):\\n+        \\\"\\\"\\\"\\n+        Searches for Songs from a search
        term.\\n+\\n+        ### Arguments\\n+        - search_term: The search term
        to use.\\n+\\n+        ### Returns\\n+        - The raw search results\\n+
        \       \\\"\\\"\\\"\\n+        spotify_client = SpotifyClient()\\n+        raw_search_results
        = spotify_client.search(search_term)\\n+\\n+        if raw_search_results
        is None:\\n+            raise SongError(f\\\"Spotipy error, no response: {search_term}\\\")\\n+\\n+
        \       return raw_search_results\\n+\\n+    @classmethod\\n+    def from_search_term(cls,
        search_term: str) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+        Creates
        a list of Song objects from a search term.\\n+\\n+        ### Arguments\\n+
        \       - search_term: The search term to use.\\n+\\n+        ### Returns\\n+
        \       - The Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        raw_search_results
        = Song.search(search_term)\\n+\\n+        if len(raw_search_results[\\\"tracks\\\"][\\\"items\\\"])
        == 0:\\n+            raise SongError(f\\\"No results found for: {search_term}\\\")\\n+\\n+
        \       return Song.from_url(\\n+            \\\"http://open.spotify.com/track/\\\"\\n+
        \           + raw_search_results[\\\"tracks\\\"][\\\"items\\\"][0][\\\"id\\\"]\\n+
        \       )\\n+\\n+    @classmethod\\n+    def list_from_search_term(cls, search_term:
        str) -> \\\"List[Song]\\\":\\n+        \\\"\\\"\\\"\\n+        Creates a list
        of Song objects from a search term.\\n+\\n+        ### Arguments\\n+        -
        search_term: The search term to use.\\n+\\n+        ### Returns\\n+        -
        The list of Song objects.\\n+        \\\"\\\"\\\"\\n+\\n+        raw_search_results
        = Song.search(search_term)\\n+\\n+        songs = []\\n+        for idx, _
        in enumerate(raw_search_results.get(\\\"tracks\\\", []).get(\\\"items\\\",
        [])):\\n+            songs.append(\\n+                Song.from_url(\\n+                    \\\"http://open.spotify.com/track/\\\"\\n+
        \                   + raw_search_results[\\\"tracks\\\"][\\\"items\\\"][idx][\\\"id\\\"]\\n+
        \               )\\n+            )\\n+\\n+        return songs\\n+\\n+    @classmethod\\n+
        \   def from_data_dump(cls, data: str) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+
        \       Create a Song object from a data dump.\\n+\\n+        ### Arguments\\n+
        \       - data: The data dump.\\n+\\n+        ### Returns\\n+        - The
        Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        # Create dict from json
        string\\n+        data_dict = json.loads(data)\\n+\\n+        # Return product
        object\\n+        return cls(**data_dict)\\n+\\n+    @classmethod\\n+    def
        from_dict(cls, data: Dict[str, Any]) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+
        \       Create a Song object from a dictionary.\\n+\\n+        ### Arguments\\n+
        \       - data: The dictionary.\\n+\\n+        ### Returns\\n+        - The
        Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        # Return product object\\n+
        \       return cls(**data)\\n+\\n+    @classmethod\\n+    def from_missing_data(cls,
        **kwargs) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+        Create a Song
        object from a dictionary with missing data.\\n+        For example, data dict
        doesn't contain all the required\\n+        attributes for the Song class.\\n+\\n+
        \       ### Arguments\\n+        - data: The dictionary.\\n+\\n+        ###
        Returns\\n+        - The Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        song_data:
        Dict[str, Any] = {}\\n+        for key in cls.__dataclass_fields__:  # pylint:
        disable=E1101\\n+            song_data.setdefault(key, kwargs.get(key))\\n+\\n+
        \       return cls(**song_data)\\n+\\n+    @property\\n+    def display_name(self)
        -> str:\\n+        \\\"\\\"\\\"\\n+        Returns a display name for the
        song.\\n+\\n+        ### Returns\\n+        - The display name.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return f\\\"{self.artist} - {self.name}\\\"\\n+\\n+    @property\\n+
        \   def json(self) -> Dict[str, Any]:\\n+        \\\"\\\"\\\"\\n+        Returns
        a dictionary of the song's data.\\n+\\n+        ### Returns\\n+        - The
        dictionary.\\n+        \\\"\\\"\\\"\\n+\\n+        return asdict(self)\\n+\\n+\\n+@dataclass(frozen=True)\\n+class
        SongList:\\n+    \\\"\\\"\\\"\\n+    SongList class. Base class for all other
        song lists subclasses.\\n+    \\\"\\\"\\\"\\n+\\n+    name: str\\n+    url:
        str\\n+    urls: List[str]\\n+    songs: List[Song]\\n+\\n+    @classmethod\\n+
        \   def from_url(cls, url: str, fetch_songs: bool = True):\\n+        \\\"\\\"\\\"\\n+
        \       Create a SongList object from a url.\\n+\\n+        ### Arguments\\n+
        \       - url: The url of the list.\\n+        - fetch_songs: Whether to fetch
        missing metadata for songs.\\n+\\n+        ### Returns\\n+        - The SongList
        object.\\n+        \\\"\\\"\\\"\\n+\\n+        metadata, songs = cls.get_metadata(url)\\n+
        \       urls = [song.url for song in songs]\\n+\\n+        if fetch_songs:\\n+
        \           songs = [Song.from_url(song.url) for song in songs]\\n+\\n+        return
        cls(**metadata, urls=urls, songs=songs)\\n+\\n+    @classmethod\\n+    def
        from_search_term(cls, search_term: str, fetch_songs: bool = True):\\n+        \\\"\\\"\\\"\\n+
        \       Creates a SongList object from a search term.\\n+\\n+        ### Arguments\\n+
        \       - search_term: The search term to use.\\n+\\n+        ### Returns\\n+
        \       - The SongList object.\\n+        \\\"\\\"\\\"\\n+\\n+        list_type
        = cls.__name__.lower()\\n+        spotify_client = SpotifyClient()\\n+        raw_search_results
        = spotify_client.search(search_term, type=list_type)\\n+\\n+        if (\\n+
        \           raw_search_results is None\\n+            or len(raw_search_results.get(f\\\"{list_type}s\\\",
        {}).get(\\\"items\\\", [])) == 0\\n+        ):\\n+            raise SongListError(\\n+
        \               f\\\"No {list_type} matches found on spotify for '{search_term}'\\\"\\n+
        \           )\\n+\\n+        matches = {}\\n+        for result in raw_search_results[f\\\"{list_type}s\\\"][\\\"items\\\"]:\\n+
        \           score = fuzz.ratio(search_term.split(\\\":\\\", 1)[1].strip(),
        result[\\\"name\\\"])\\n+            matches[result[\\\"id\\\"]] = score\\n+\\n+
        \       best_match = max(matches, key=matches.get)  # type: ignore\\n+\\n+
        \       return cls.from_url(\\n+            f\\\"http://open.spotify.com/{list_type}/{best_match}\\\",\\n+
        \           fetch_songs,\\n+        )\\n+\\n+    @property\\n+    def length(self)
        -> int:\\n+        \\\"\\\"\\\"\\n+        Get list length (number of songs).\\n+\\n+
        \       ### Returns\\n+        - The list length.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return max(len(self.urls), len(self.songs))\\n+\\n+    @property\\n+
        \   def json(self) -> Dict[str, Any]:\\n+        \\\"\\\"\\\"\\n+        Returns
        a dictionary of the song list's data.\\n+\\n+        ### Returns\\n+        -
        The dictionary.\\n+        \\\"\\\"\\\"\\n+\\n+        return asdict(self)\\n+\\n+
        \   @staticmethod\\n+    def get_metadata(url: str) -> Tuple[Dict[str, Any],
        List[Song]]:\\n+        \\\"\\\"\\\"\\n+        Get metadata for a song list.\\n+\\n+
        \       ### Arguments\\n+        - url: The url of the song list.\\n+\\n+
        \       ### Returns\\n+        - The metadata.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise NotImplementedError\"},{\"sha\":\"1daf17c9a7714008e28d412763da982bf80e626e\",\"filename\":\"spotdl/utils/__init__.py\",\"status\":\"modified\",\"additions\":4,\"deletions\":0,\"changes\":4,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2F__init__.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,4 @@\\n+\\\"\\\"\\\"\\n+Utility functions for spotdl. These functions
        are used in every stage of the\\n+download process.\\n+\\\"\\\"\\\"\"},{\"sha\":\"66e79f96913d62902bcd3e1f37677080e135bfbc\",\"filename\":\"spotdl/utils/archive.py\",\"status\":\"added\",\"additions\":49,\"deletions\":0,\"changes\":49,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Farchive.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Farchive.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Farchive.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,49 @@\\n+\\\"\\\"\\\"\\n+Module for archiving sets of data\\n+\\\"\\\"\\\"\\n+\\n+from
        pathlib import Path\\n+from typing import Set\\n+\\n+__all__ = [\\\"Archive\\\"]\\n+\\n+\\n+class
        Archive(Set):\\n+    \\\"\\\"\\\"\\n+    Archive class.\\n+    A file-persistable
        set.\\n+    \\\"\\\"\\\"\\n+\\n+    def load(self, file: str) -> bool:\\n+
        \       \\\"\\\"\\\"\\n+        Imports the archive from the file.\\n+\\n+
        \       ### Arguments\\n+        - file: the file name of the archive\\n+\\n+
        \       ### Returns\\n+        - if the file exists\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if not Path(file).exists():\\n+            return False\\n+\\n+        with
        open(file, \\\"r\\\", encoding=\\\"utf-8\\\") as archive:\\n+            self.clear()\\n+
        \           self.update([line.strip() for line in archive])\\n+\\n+        return
        True\\n+\\n+    def save(self, file: str) -> bool:\\n+        \\\"\\\"\\\"\\n+
        \       Exports the current archive to the file.\\n+\\n+        ### Arguments\\n+
        \       - file: the file name of the archive\\n+        \\\"\\\"\\\"\\n+\\n+
        \       with open(file, \\\"w\\\", encoding=\\\"utf-8\\\") as archive:\\n+
        \           for element in sorted(self):\\n+                archive.write(f\\\"{element}\\\\n\\\")\\n+\\n+
        \       return True\"},{\"sha\":\"fb6c1ffa14958a9b846aa3b735cab433020b9d0c\",\"filename\":\"spotdl/utils/arguments.py\",\"status\":\"added\",\"additions\":767,\"deletions\":0,\"changes\":767,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Farguments.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Farguments.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Farguments.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,767 @@\\n+\\\"\\\"\\\"\\n+Module that handles the command line arguments.\\n+\\\"\\\"\\\"\\n+\\n+import
        argparse\\n+import sys\\n+import textwrap\\n+from argparse import ArgumentParser,
        Namespace, _ArgumentGroup\\n+from typing import List\\n+\\n+from spotdl import
        _version\\n+from spotdl.download.downloader import AUDIO_PROVIDERS, LYRICS_PROVIDERS\\n+from
        spotdl.utils.ffmpeg import FFMPEG_FORMATS\\n+from spotdl.utils.formatter import
        VARS\\n+from spotdl.utils.logging import NAME_TO_LEVEL\\n+\\n+__all__ = [\\\"OPERATIONS\\\",
        \\\"SmartFormatter\\\", \\\"parse_arguments\\\"]\\n+\\n+OPERATIONS = [\\\"download\\\",
        \\\"save\\\", \\\"web\\\", \\\"sync\\\", \\\"meta\\\", \\\"url\\\"]\\n+\\n+\\n+class
        SmartFormatter(argparse.HelpFormatter):\\n+    \\\"\\\"\\\"\\n+    Class that
        overrides the default help formatter.\\n+    \\\"\\\"\\\"\\n+\\n+    def _split_lines(self,
        text: str, width: int) -> List[str]:\\n+        \\\"\\\"\\\"\\n+        Split
        the text in multiple lines if a line starts\\n+        with a N|\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if text.startswith(\\\"N|\\\"):\\n+            return text[2:].splitlines()\\n+\\n+
        \       text = self._whitespace_matcher.sub(\\\" \\\", text).strip()\\n+\\n+
        \       return textwrap.wrap(text, width)\\n+\\n+\\n+def parse_main_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse main options from the command
        line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser to add
        the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add operation argument\\n+
        \   operation = parser.add_argument(\\n+        \\\"operation\\\",\\n+        choices=OPERATIONS,\\n+
        \       default=\\\"download\\\",\\n+        const=\\\"download\\\",\\n+        nargs=\\\"?\\\",\\n+
        \       help=(\\n+            \\\"N|The operation to perform.\\\\n\\\"\\n+
        \           \\\"download: Download the songs to the disk and embed metadata.\\\\n\\\"\\n+
        \           \\\"save: Saves the songs metadata to a file for further use.\\\\n\\\"\\n+
        \           \\\"web: Starts a web interface to simplify the download process.\\\\n\\\"\\n+
        \           \\\"sync: Removes songs that are no longer present, downloads
        new ones\\\\n\\\"\\n+            \\\"meta: Update your audio files with metadata\\\\n\\\"\\n+
        \           \\\"url: Get the download URL for songs\\\\n\\\\n\\\"\\n+        ),\\n+
        \   )\\n+\\n+    # Add query argument\\n+    query = parser.add_argument(\\n+
        \       \\\"query\\\",\\n+        nargs=\\\"+\\\",\\n+        type=str,\\n+
        \       help=(\\n+            \\\"N|Spotify/YouTube URL for a song/playlist/album/artist/etc.
        to download.\\\\n\\\\n\\\"\\n+            \\\"For album/playlist/artist searching,
        include 'album:', 'playlist:', 'artist:' \\\\n\\\"\\n+            \\\"(ie.
        'album:the album name' you can mix these options to get more accurate results)\\\"\\n+
        \           \\\".\\\\n\\\\n\\\"\\n+            \\\"To download liked songs
        use 'saved' as the query, to download all user playlists\\\\n\\\"\\n+            \\\"use
        'all-user-playlists, to download all songs from all followed artists \\\"\\n+
        \           \\\"use 'all-user-followed-artists', to download all user saved
        albums \\\"\\n+            \\\"use 'all-user-saved-albums' \\\\n\\\\n\\\"\\n+
        \           \\\"For manual audio matching, you can use the format 'YouTubeURL|SpotifyURL'\\\\n\\\"\\n+
        \           \\\"You can only use album/playlist/tracks urls when \\\"\\n+
        \           \\\"downloading/matching youtube urls.\\\\n\\\"\\n+            \\\"When
        using youtube url without spotify url, \\\"\\n+            \\\"you won't be
        able to use `--fetch-albums` option.\\\\n\\\\n\\\"\\n+        ),\\n+    )\\n+\\n+
        \   try:\\n+        is_web = sys.argv[1] == \\\"web\\\"\\n+    except IndexError:\\n+
        \       is_web = False\\n+\\n+    is_frozen = getattr(sys, \\\"frozen\\\",
        False)\\n+\\n+    # If the program is frozen, we and user didn't pass any
        arguments,\\n+    # or if the user is using the web interface, we don't need
        to parse\\n+    # the query\\n+    if (is_frozen and len(sys.argv) < 2) or
        (len(sys.argv) > 1 and is_web):\\n+        # If we are running the web interface\\n+
        \       # or we are in the frozen env and not running web interface\\n+        #
        don't remove the operation from the arg parser\\n+        if not is_web or
        (is_frozen and not is_web):\\n+            parser._remove_action(operation)
        \ # pylint: disable=protected-access\\n+\\n+        parser._remove_action(query)
        \ # pylint: disable=protected-access\\n+\\n+    # Audio provider argument\\n+
        \   parser.add_argument(\\n+        \\\"--audio\\\",\\n+        dest=\\\"audio_providers\\\",\\n+
        \       nargs=\\\"*\\\",\\n+        choices=AUDIO_PROVIDERS,\\n+        help=\\\"The
        audio provider to use. You can provide more than one for fallback.\\\",\\n+
        \   )\\n+\\n+    # Lyrics provider argument\\n+    parser.add_argument(\\n+
        \       \\\"--lyrics\\\",\\n+        dest=\\\"lyrics_providers\\\",\\n+        nargs=\\\"*\\\",\\n+
        \       choices=LYRICS_PROVIDERS.keys(),\\n+        help=(\\n+            \\\"The
        lyrics provider to use. You can provide more than one for fallback. \\\"\\n+
        \           \\\"Synced lyrics might not work correctly with some music players.
        \\\"\\n+            \\\"For such cases it's better to use `--generate-lrc`
        option.\\\"\\n+        ),\\n+    )\\n+\\n+    # Add config argument\\n+    parser.add_argument(\\n+
        \       \\\"--config\\\",\\n+        action=\\\"store_true\\\",\\n+        help=(\\n+
        \           \\\"Use the config file to download songs. \\\"\\n+            \\\"It's
        located under C:\\\\\\\\Users\\\\\\\\user\\\\\\\\.spotdl\\\\\\\\config.json
        \\\"\\n+            \\\"or ~/.spotdl/config.json under linux\\\"\\n+        ),\\n+
        \   )\\n+\\n+    # Add search query argument\\n+    parser.add_argument(\\n+
        \       \\\"--search-query\\\",\\n+        help=f\\\"The search query to use,
        available variables: {', '.join(VARS)}\\\",\\n+        type=str,\\n+    )\\n+\\n+
        \   # Add don't filter results argument\\n+    parser.add_argument(\\n+        \\\"--dont-filter-results\\\",\\n+
        \       dest=\\\"filter_results\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=False,\\n+        help=\\\"Disable filtering results.\\\",\\n+
        \   )\\n+\\n+    # Add use only verified results argument\\n+    parser.add_argument(\\n+
        \       \\\"--only-verified-results\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Use only verified results. (Not all
        providers support this)\\\",\\n+    )\\n+\\n+\\n+def parse_spotify_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse spotify options from the
        command line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser
        to add the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add login argument\\n+
        \   parser.add_argument(\\n+        \\\"--user-auth\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Login to Spotify using OAuth.\\\",\\n+
        \   )\\n+\\n+    # Add client id argument\\n+    parser.add_argument(\\n+
        \       \\\"--client-id\\\",\\n+        help=\\\"The client id to use when
        logging in to Spotify.\\\",\\n+        type=str,\\n+    )\\n+\\n+    # Add
        client secret argument\\n+    parser.add_argument(\\n+        \\\"--client-secret\\\",\\n+
        \       help=\\\"The client secret to use when logging in to Spotify.\\\",\\n+
        \       type=str,\\n+    )\\n+\\n+    # Add auth token argument\\n+    parser.add_argument(\\n+
        \       \\\"--auth-token\\\",\\n+        help=\\\"The authorization token
        to use directly to log in to Spotify.\\\",\\n+        type=str,\\n+    )\\n+\\n+
        \   # Add cache path argument\\n+    parser.add_argument(\\n+        \\\"--cache-path\\\",\\n+
        \       type=str,\\n+        help=\\\"The path where spotipy cache file will
        be stored.\\\",\\n+    )\\n+\\n+    # Add no cache argument\\n+    parser.add_argument(\\n+
        \       \\\"--no-cache\\\",\\n+        action=\\\"store_const\\\",\\n+        const=True,\\n+
        \       help=\\\"Disable caching (both requests and token).\\\",\\n+    )\\n+\\n+
        \   # Add max retries argument\\n+    parser.add_argument(\\n+        \\\"--max-retries\\\",\\n+
        \       type=int,\\n+        help=\\\"The maximum number of retries to perform
        when getting metadata.\\\",\\n+    )\\n+\\n+    # Add headless argument\\n+
        \   parser.add_argument(\\n+        \\\"--headless\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Run in headless mode.\\\",\\n+    )\\n+\\n+
        \   # Add use cache file argument\\n+    parser.add_argument(\\n+        \\\"--use-cache-file\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=(\\n+
        \           \\\"Use the cache file to get metadata. \\\"\\n+            \\\"It's
        located under C:\\\\\\\\Users\\\\\\\\user\\\\\\\\.spotdl\\\\\\\\.spotify_cache
        \\\"\\n+            \\\"or ~/.spotdl/.spotify_cache under linux. \\\"\\n+
        \           \\\"It only caches tracks and \\\"\\n+            \\\"gets updated
        whenever spotDL gets metadata from Spotify. \\\"\\n+            \\\"(It may
        provide outdated metadata use with caution)\\\"\\n+        ),\\n+    )\\n+\\n+\\n+def
        parse_ffmpeg_options(parser: _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse
        ffmpeg options from the command line.\\n+\\n+    ### Arguments\\n+    - parser:
        The argument parser to add the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    #
        Add ffmpeg executable argument\\n+    parser.add_argument(\\n+        \\\"--ffmpeg\\\",\\n+
        \       help=\\\"The ffmpeg executable to use.\\\",\\n+        type=str,\\n+
        \   )\\n+\\n+    # Add search threads argument\\n+    parser.add_argument(\\n+
        \       \\\"--threads\\\",\\n+        type=int,\\n+        help=\\\"The number
        of threads to use when downloading songs.\\\",\\n+    )\\n+\\n+    # Add constant
        bit rate argument\\n+    parser.add_argument(\\n+        \\\"--bitrate\\\",\\n+
        \       choices=[\\n+            \\\"auto\\\",\\n+            \\\"disable\\\",\\n+
        \           \\\"8k\\\",\\n+            \\\"16k\\\",\\n+            \\\"24k\\\",\\n+
        \           \\\"32k\\\",\\n+            \\\"40k\\\",\\n+            \\\"48k\\\",\\n+
        \           \\\"64k\\\",\\n+            \\\"80k\\\",\\n+            \\\"96k\\\",\\n+
        \           \\\"112k\\\",\\n+            \\\"128k\\\",\\n+            \\\"160k\\\",\\n+
        \           \\\"192k\\\",\\n+            \\\"224k\\\",\\n+            \\\"256k\\\",\\n+
        \           \\\"320k\\\",\\n+        ]\\n+        + list(map(str, range(0,
        10))),\\n+        type=str.lower,\\n+        help=(\\n+            \\\"The
        constant/variable bitrate to use for the output file. \\\"\\n+            \\\"Values
        from 0 to 9 are variable bitrates. \\\"\\n+            \\\"Auto will use the
        bitrate of the original file. \\\"\\n+            \\\"Disable will disable
        the bitrate option. \\\"\\n+            \\\"(In case of m4a and opus files,
        auto and disable will skip the conversion)\\\"\\n+        ),\\n+    )\\n+\\n+
        \   # Additional ffmpeg arguments\\n+    parser.add_argument(\\n+        \\\"--ffmpeg-args\\\",\\n+
        \       type=str,\\n+        help=\\\"Additional ffmpeg arguments passed as
        a string.\\\",\\n+    )\\n+\\n+\\n+def parse_output_options(parser: _ArgumentGroup):\\n+
        \   \\\"\\\"\\\"\\n+    Parse output options from the command line.\\n+\\n+
        \   ### Arguments\\n+    - parser: The argument parser to add the options
        to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add output format argument\\n+    parser.add_argument(\\n+
        \       \\\"--format\\\",\\n+        choices=FFMPEG_FORMATS.keys(),\\n+        help=\\\"The
        format to download the song in.\\\",\\n+        type=str,\\n+    )\\n+\\n+
        \   # Add save file argument\\n+    parser.add_argument(\\n+        \\\"--save-file\\\",\\n+
        \       type=str,\\n+        help=(\\n+            \\\"The file to save/load
        the songs data from/to. \\\"\\n+            \\\"It has to end with .spotdl.
        \\\"\\n+            \\\"If combined with the download operation, it will save
        the songs data to the file. \\\"\\n+            \\\"Required for save/sync
        (use - to print to stdout when using save). \\\"\\n+        ),\\n+        required=len(sys.argv)
        > 1 and sys.argv[1] in [\\\"save\\\"],\\n+    )\\n+\\n+    # Add preload argument\\n+
        \   parser.add_argument(\\n+        \\\"--preload\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Preload the download url to speed
        up the download process.\\\",\\n+    )\\n+\\n+    # Add name format argument\\n+
        \   parser.add_argument(\\n+        \\\"--output\\\",\\n+        type=str,\\n+
        \       help=f\\\"Specify the downloaded file name format, available variables:
        {', '.join(VARS)}\\\",\\n+    )\\n+\\n+    # Add m3u argument\\n+    parser.add_argument(\\n+
        \       \\\"--m3u\\\",\\n+        type=str,\\n+        nargs=\\\"?\\\",\\n+
        \       help=(\\n+            \\\"Name of the m3u file to save the songs to.
        \\\"\\n+            \\\"Defaults to {list[0]}.m3u8 \\\"\\n+            \\\"If
        you want to generate a m3u for each list in the query use {list}, \\\"\\n+
        \           \\\"If you want to generate a m3u file based on the first list
        in the query use {list[0]}\\\"\\n+            \\\", (0 is the first list in
        the query, 1 is the second, etc. \\\"\\n+            \\\"songs don't count
        towards the list number) \\\"\\n+        ),\\n+        const=\\\"{list[0]}.m3u8\\\",\\n+
        \   )\\n+\\n+    # Add cookie file argument\\n+    parser.add_argument(\\n+
        \       \\\"--cookie-file\\\",\\n+        help=\\\"Path to cookies file.\\\",\\n+
        \       type=str,\\n+    )\\n+\\n+    # Add overwrite argument\\n+    parser.add_argument(\\n+
        \       \\\"--overwrite\\\",\\n+        choices={\\\"force\\\", \\\"skip\\\",
        \\\"metadata\\\"},\\n+        help=(\\n+            \\\"How to handle existing/duplicate
        files. \\\"\\n+            \\\"(When combined with --scan-for-songs force
        will remove \\\"\\n+            \\\"all duplicates, and metadata will only
        apply metadata to the \\\"\\n+            \\\"latest song and will remove
        the rest. )\\\"\\n+        ),\\n+        type=str,\\n+    )\\n+\\n+    # Option
        to increase compatibility of filenames and easier handling in the shell\\n+
        \   parser.add_argument(\\n+        \\\"--restrict\\\",\\n+        choices={\\\"strict\\\",
        \\\"ascii\\\", \\\"none\\\"},\\n+        const=\\\"strict\\\",\\n+        nargs=\\\"?\\\",\\n+
        \       help=\\\"Restrict filenames to a sanitized set of characters for better
        compatibility\\\",\\n+        type=str,\\n+    )\\n+\\n+    # Option to print
        errors on exit, useful for long playlist\\n+    parser.add_argument(\\n+        \\\"--print-errors\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Print
        errors (wrong songs, failed downloads etc) on exit, useful for long playlist\\\",\\n+
        \   )\\n+\\n+    # Option to save errors to a file\\n+    parser.add_argument(\\n+
        \       \\\"--save-errors\\\",\\n+        type=str,\\n+        help=\\\"Save
        errors (wrong songs, failed downloads etc) to a file\\\",\\n+    )\\n+\\n+
        \   # Option to use sponsor block\\n+    parser.add_argument(\\n+        \\\"--sponsor-block\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Use
        the sponsor block to download songs from yt/ytm.\\\",\\n+    )\\n+\\n+    #
        Add archive_file argument\\n+    parser.add_argument(\\n+        \\\"--archive\\\",\\n+
        \       type=str,\\n+        help=\\\"Specify the file name for an archive
        of already downloaded songs\\\",\\n+    )\\n+\\n+    # Option to set the track
        number & album of tracks in a playlist to their index in the playlist\\n+
        \   # & the name of playlist respectively.\\n+    parser.add_argument(\\n+
        \       \\\"--playlist-numbering\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       dest=\\\"playlist_numbering\\\",\\n+        const=True,\\n+        help=\\\"Sets
        each track in a playlist to have the playlist's name as its album,\\\\\\n+
        \           and album art as the playlist's icon\\\",\\n+    )\\n+\\n+    #
        Option to scan the output directory for existing files\\n+    parser.add_argument(\\n+
        \       \\\"--scan-for-songs\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=(\\n+            \\\"Scan the output directory
        for existing files. \\\"\\n+            \\\"This option should be combined
        with the --overwrite option \\\"\\n+            \\\"to control how existing
        files are handled. (Output directory is the last directory \\\"\\n+            \\\"that
        is not a template variable in the output template)\\\"\\n+        ),\\n+    )\\n+\\n+
        \   # Option to fetch all albums from songs in query\\n+    parser.add_argument(\\n+
        \       \\\"--fetch-albums\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Fetch all albums from songs in query\\\",\\n+
        \   )\\n+\\n+    # Option to change the id3 separator\\n+    parser.add_argument(\\n+
        \       \\\"--id3-separator\\\",\\n+        type=str,\\n+        help=\\\"Change
        the separator used in the id3 tags. Only supported for mp3 files.\\\",\\n+
        \   )\\n+\\n+    # Option to use ytm data instead of spotify data\\n+    #
        when downloading using ytm link\\n+    parser.add_argument(\\n+        \\\"--ytm-data\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Use
        ytm data instead of spotify data when downloading using ytm link.\\\",\\n+
        \   )\\n+\\n+    # Option whether to add unavailable songs to the m3u file\\n+
        \   parser.add_argument(\\n+        \\\"--add-unavailable\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Add unavailable songs to the m3u/archive
        files when downloading\\\",\\n+    )\\n+\\n+    # Generate lrc files\\n+    parser.add_argument(\\n+
        \       \\\"--generate-lrc\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=(\\n+            \\\"Generate lrc files
        for downloaded songs. \\\"\\n+            \\\"Requires `synced` provider to
        be present in the lyrics providers list.\\\"\\n+        ),\\n+    )\\n+\\n+
        \   # Force update metadata\\n+    parser.add_argument(\\n+        \\\"--force-update-metadata\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Force
        update metadata for songs that already have metadata.\\\",\\n+    )\\n+\\n+
        \   # Sync without deleting\\n+    parser.add_argument(\\n+        \\\"--sync-without-deleting\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Sync
        without deleting songs that are not in the query.\\\",\\n+    )\\n+\\n+    #
        Max file name length\\n+    parser.add_argument(\\n+        \\\"--max-filename-length\\\",\\n+
        \       type=int,\\n+        help=(\\n+            \\\"Max file name length.
        \\\"\\n+            \\\"(This won't override the max file name length enforced
        by the OS)\\\"\\n+        ),\\n+    )\\n+\\n+    # YT-DlP options\\n+    parser.add_argument(\\n+
        \       \\\"--yt-dlp-args\\\",\\n+        type=str,\\n+        help=\\\"Arguments
        to pass to yt-dlp\\\",\\n+    )\\n+\\n+    # Detect formats option\\n+    parser.add_argument(\\n+
        \       \\\"--detect-formats\\\",\\n+        type=str,\\n+        nargs=\\\"*\\\",\\n+
        \       help=(\\n+            \\\"Detect already downloaded songs with file
        format different from the --format option \\\"\\n+            \\\"(When combined
        with --m3u option, \\\"\\n+            \\\"only first detected format will
        be added to m3u file)\\\"\\n+        ),\\n+        choices=FFMPEG_FORMATS.keys(),\\n+
        \   )\\n+\\n+    # download song in meta operation\\n+    parser.add_argument(\\n+
        \       \\\"--redownload\\\",\\n+        action=\\\"store_const\\\",\\n+        const=True,\\n+
        \       help=\\\"to redownload the local song in diffrent format using --format
        for meta operation\\\",\\n+    )\\n+\\n+    # Ignore songs from a paticular
        album\\n+    parser.add_argument(\\n+        \\\"--ignore-albums\\\",\\n+
        \       type=str,\\n+        nargs=\\\"*\\\",\\n+        help=\\\"ignores
        the song of the given albums\\\",\\n+    )\\n+\\n+    # Skip explicit songs
        options\\n+    parser.add_argument(\\n+        \\\"--skip-explicit\\\", action=\\\"store_const\\\",
        const=True, help=\\\"Skip explicit songs\\\"\\n+    )\\n+\\n+    parser.add_argument(\\n+
        \       \\\"--proxy\\\",\\n+        help=\\\"Http(s) proxy server for download
        song. Example: http://host:port\\\",\\n+    )\\n+\\n+\\n+def parse_web_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse web options from the command
        line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser to add
        the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add host argument\\n+    parser.add_argument(\\n+
        \       \\\"--host\\\",\\n+        type=str,\\n+        help=\\\"The host
        to use for the web server.\\\",\\n+    )\\n+\\n+    # Add port argument\\n+
        \   parser.add_argument(\\n+        \\\"--port\\\",\\n+        type=int,\\n+
        \       help=\\\"The port to run the web server on.\\\",\\n+    )\\n+\\n+
        \   # Add keep alive argument\\n+    parser.add_argument(\\n+        \\\"--keep-alive\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Keep
        the web server alive even when no clients are connected.\\\",\\n+    )\\n+\\n+
        \   # Add allowed origins argument\\n+    parser.add_argument(\\n+        \\\"--allowed-origins\\\",\\n+
        \       nargs=\\\"*\\\",\\n+        help=\\\"The allowed origins for the web
        server.\\\",\\n+    )\\n+\\n+    # Add use output directory argument\\n+    parser.add_argument(\\n+
        \       \\\"--web-use-output-dir\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=(\\n+            \\\"Use the output directory
        instead of the session directory for downloads. (\\\"\\n+            \\\"This
        might cause issues if you have multiple users using the web-ui at the same
        time)\\\"\\n+        ),\\n+    )\\n+\\n+    # Add keep sessions argument\\n+
        \   parser.add_argument(\\n+        \\\"--keep-sessions\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Keep the session directory after the
        web server is closed.\\\",\\n+    )\\n+\\n+\\n+def parse_misc_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse misc options from the command
        line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser to add
        the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add verbose argument\\n+
        \   parser.add_argument(\\n+        \\\"--log-level\\\",\\n+        choices=NAME_TO_LEVEL.keys(),\\n+
        \       help=\\\"Select log level.\\\",\\n+    )\\n+\\n+    # Add simple tui
        argument\\n+    parser.add_argument(\\n+        \\\"--simple-tui\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Use
        a simple tui.\\\",\\n+    )\\n+\\n+    # Add log format argument\\n+    parser.add_argument(\\n+
        \       \\\"--log-format\\\",\\n+        help=(\\n+            \\\"Custom
        logging format to use. More info: \\\"\\n+            \\\"https://docs.python.org/3/library/logging.html#logrecord-attributes\\\"\\n+
        \       ),\\n+    )\\n+\\n+\\n+def parse_other_options(parser: _ArgumentGroup):\\n+
        \   \\\"\\\"\\\"\\n+    Parse other options from the command line.\\n+\\n+
        \   ### Arguments\\n+    - parser: The argument parser to add the options
        to.\\n+    \\\"\\\"\\\"\\n+\\n+    parser.add_argument(\\n+        \\\"--download-ffmpeg\\\",\\n+
        \       action=\\\"store_true\\\",\\n+        help=\\\"Download ffmpeg to
        spotdl directory.\\\",\\n+    )\\n+\\n+    parser.add_argument(\\n+        \\\"--generate-config\\\",\\n+
        \       action=\\\"store_true\\\",\\n+        help=\\\"Generate a config file.
        This will overwrite current config if present.\\\",\\n+    )\\n+\\n+    parser.add_argument(\\n+
        \       \\\"--check-for-updates\\\", action=\\\"store_true\\\", help=\\\"Check
        for new version.\\\"\\n+    )\\n+\\n+    parser.add_argument(\\n+        \\\"--profile\\\",\\n+
        \       action=\\\"store_true\\\",\\n+        help=\\\"Run in profile mode.
        Useful for debugging.\\\",\\n+    )\\n+\\n+    parser.add_argument(\\n+        \\\"--version\\\",\\n+
        \       \\\"-v\\\",\\n+        action=\\\"version\\\",\\n+        help=\\\"Show
        the version number and exit.\\\",\\n+        version=_version.__version__,\\n+
        \   )\\n+\\n+\\n+def create_parser() -> ArgumentParser:\\n+    \\\"\\\"\\\"\\n+
        \   Parse arguments from the command line.\\n+\\n+    ### Returns\\n+    -
        A Namespace object containing the parsed arguments.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Initialize argument parser\\n+    parser = ArgumentParser(\\n+        prog=\\\"spotdl\\\",\\n+
        \       description=\\\"Download your Spotify playlists and songs along with
        album art and metadata\\\",\\n+        formatter_class=SmartFormatter,\\n+
        \       epilog=(\\n+            \\\"For more information, visit http://spotdl.rtfd.io/
        \\\"\\n+            \\\"or join our Discord server: https://discord.com/invite/xCa23pwJWY\\\"\\n+
        \       ),\\n+    )\\n+\\n+    # Parse main options\\n+    main_options =
        parser.add_argument_group(\\\"Main options\\\")\\n+    parse_main_options(main_options)\\n+\\n+
        \   # Parse spotify options\\n+    spotify_options = parser.add_argument_group(\\\"Spotify
        options\\\")\\n+    parse_spotify_options(spotify_options)\\n+\\n+    # Parse
        ffmpeg options\\n+    ffmpeg_options = parser.add_argument_group(\\\"FFmpeg
        options\\\")\\n+    parse_ffmpeg_options(ffmpeg_options)\\n+\\n+    # Parse
        output options\\n+    output_options = parser.add_argument_group(\\\"Output
        options\\\")\\n+    parse_output_options(output_options)\\n+\\n+    # Parse
        web options\\n+    web_options = parser.add_argument_group(\\\"Web options\\\")\\n+
        \   parse_web_options(web_options)\\n+\\n+    # Parse misc options\\n+    misc_options
        = parser.add_argument_group(\\\"Misc options\\\")\\n+    parse_misc_options(misc_options)\\n+\\n+
        \   # Parse other options\\n+    other_options = parser.add_argument_group(\\\"Other
        options\\\")\\n+    parse_other_options(other_options)\\n+\\n+    return parser\\n+\\n+\\n+def
        parse_arguments() -> Namespace:\\n+    \\\"\\\"\\\"\\n+    Parse arguments
        from the command line.\\n+\\n+    ### Arguments\\n+    - parser: The argument
        parser to parse the arguments from.\\n+\\n+    ### Returns\\n+    - A Namespace
        object containing the parsed arguments.\\n+    \\\"\\\"\\\"\\n+\\n+    # Create
        parser\\n+    parser = create_parser()\\n+\\n+    # Parse arguments\\n+    return
        parser.parse_args()\"},{\"sha\":\"5e2a064fb299b23d089ad10d8d319bde7df93c90\",\"filename\":\"spotdl/utils/config.py\",\"status\":\"added\",\"additions\":345,\"deletions\":0,\"changes\":345,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fconfig.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fconfig.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fconfig.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,345 @@\\n+\\\"\\\"\\\"\\n+Module related to managing reading and writing
        to the config file.\\n+\\n+Default config - spotdl.utils.config.DEFAULT_CONFIG\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import logging\\n+import os\\n+import platform\\n+from argparse import
        Namespace\\n+from pathlib import Path\\n+from typing import Any, Dict, Tuple,
        Union\\n+\\n+import platformdirs\\n+\\n+from spotdl.types.options import (\\n+
        \   DownloaderOptions,\\n+    SpotDLOptions,\\n+    SpotifyOptions,\\n+    WebOptions,\\n+)\\n+\\n+__all__
        = [\\n+    \\\"ConfigError\\\",\\n+    \\\"get_spotdl_path\\\",\\n+    \\\"get_config_file\\\",\\n+
        \   \\\"get_cache_path\\\",\\n+    \\\"get_temp_path\\\",\\n+    \\\"get_errors_path\\\",\\n+
        \   \\\"get_config\\\",\\n+    \\\"create_settings_type\\\",\\n+    \\\"create_settings\\\",\\n+
        \   \\\"SPOTIFY_OPTIONS\\\",\\n+    \\\"DOWNLOADER_OPTIONS\\\",\\n+    \\\"WEB_OPTIONS\\\",\\n+
        \   \\\"DEFAULT_CONFIG\\\",\\n+]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        ConfigError(Exception):\\n+    \\\"\\\"\\\"\\n+    Base class for all exceptions
        related to config.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+def get_spotdl_path() ->
        Path:\\n+    \\\"\\\"\\\"\\n+    Get the path to the spotdl folder.\\n+\\n+
        \   ### Returns\\n+    - The path to the spotdl folder.\\n+\\n+    ### Notes\\n+
        \   - If the spotdl directory does not exist, it will be created.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if os is linux\\n+    if platform.system() == \\\"Linux\\\":\\n+
        \       # if platform is linux, and XDG DATA HOME spotdl folder exists, use
        it\\n+        user_data_dir = Path(platformdirs.user_data_dir(\\\"spotdl\\\",
        \\\"spotDL\\\"))\\n+        if user_data_dir.exists():\\n+            return
        user_data_dir\\n+\\n+    spotdl_path = Path(os.path.expanduser(\\\"~\\\"),
        \\\".spotdl\\\")\\n+    if not spotdl_path.exists():\\n+        os.mkdir(spotdl_path)\\n+\\n+
        \   return spotdl_path\\n+\\n+\\n+def get_config_file() -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Get config file path\\n+\\n+    ### Returns\\n+    - The path to the config
        file.\\n+    \\\"\\\"\\\"\\n+\\n+    return get_spotdl_path() / \\\"config.json\\\"\\n+\\n+\\n+def
        get_cache_path() -> Path:\\n+    \\\"\\\"\\\"\\n+    Get the path to the cache
        folder.\\n+\\n+    ### Returns\\n+    - The path to the spotipy cache file.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    return get_spotdl_path() / \\\".spotipy\\\"\\n+\\n+\\n+def
        get_spotify_cache_path() -> Path:\\n+    \\\"\\\"\\\"\\n+    Get the path
        to the spotify cache folder.\\n+\\n+    ### Returns\\n+    - The path to the
        spotipy cache file.\\n+    \\\"\\\"\\\"\\n+\\n+    return get_spotdl_path()
        / \\\".spotify_cache\\\"\\n+\\n+\\n+def get_temp_path() -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Get the path to the temp folder.\\n+\\n+    ### Returns\\n+    - The path
        to the temp folder.\\n+    \\\"\\\"\\\"\\n+\\n+    temp_path = get_spotdl_path()
        / \\\"temp\\\"\\n+    if not temp_path.exists():\\n+        os.mkdir(temp_path)\\n+\\n+
        \   return temp_path\\n+\\n+\\n+def get_errors_path() -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Get the path to the errors folder.\\n+\\n+    ### Returns\\n+    - The
        path to the errors folder.\\n+\\n+    ### Notes\\n+    - If the errors directory
        does not exist, it will be created.\\n+    \\\"\\\"\\\"\\n+\\n+    errors_path
        = get_spotdl_path() / \\\"errors\\\"\\n+\\n+    if not errors_path.exists():\\n+
        \       os.mkdir(errors_path)\\n+\\n+    return errors_path\\n+\\n+\\n+def
        get_config() -> Dict[str, Any]:\\n+    \\\"\\\"\\\"\\n+    Get the config.\\n+\\n+
        \   ### Returns\\n+    - The dictionary with the config.\\n+\\n+    ### Errors\\n+
        \   - ConfigError: If the config file does not exist.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   config_path = get_config_file()\\n+\\n+    if not config_path.exists():\\n+
        \       raise ConfigError(\\n+            \\\"Config file not found.\\\"\\n+
        \           \\\"Please run `spotdl --generate-config` to create a config file.\\\"\\n+
        \       )\\n+\\n+    with open(config_path, \\\"r\\\", encoding=\\\"utf-8\\\")
        as config_file:\\n+        return json.load(config_file)\\n+\\n+\\n+def create_settings_type(\\n+
        \   arguments: Namespace,\\n+    config: Dict[str, Any],\\n+    default: Union[SpotifyOptions,
        DownloaderOptions, WebOptions],\\n+) -> Dict[str, Any]:\\n+    \\\"\\\"\\\"\\n+
        \   Create settings dict\\n+    Argument value has always the priority, then
        the config file\\n+    value, and if neither are set, use default value\\n+\\n+
        \   ### Arguments\\n+    - arguments: Namespace from argparse\\n+    - default:
        dict\\n+\\n+    ### Returns\\n+    - settings: dict\\n+    \\\"\\\"\\\"\\n+\\n+
        \   settings = {}\\n+    for key, default_value in default.items():\\n+        argument_val
        = arguments.__dict__.get(key)\\n+        config_val = config.get(key)\\n+\\n+
        \       if argument_val is not None:\\n+            settings[key] = argument_val\\n+
        \       elif config_val is not None:\\n+            settings[key] = config_val\\n+
        \       else:\\n+            settings[key] = default_value\\n+\\n+    return
        settings\\n+\\n+\\n+def create_settings(\\n+    arguments: Namespace,\\n+)
        -> Tuple[SpotifyOptions, DownloaderOptions, WebOptions]:\\n+    \\\"\\\"\\\"\\n+
        \   Create settings dicts for Spotify, Downloader and Web\\n+    based on
        the arguments and config file (if enabled)\\n+\\n+    ### Arguments\\n+    -
        arguments: Namespace from argparse\\n+\\n+    ### Returns\\n+    - spotify_options:
        SpotifyOptions\\n+    - downloader_options: DownloaderOptions\\n+    - web_options:
        WebOptions\\n+    \\\"\\\"\\\"\\n+\\n+    # Get the config file\\n+    # It
        will automatically load if the `load_config` is set to True\\n+    # in the
        config file\\n+    config = {}\\n+    if arguments.config or (\\n+        get_config_file().exists()
        and get_config().get(\\\"load_config\\\")\\n+    ):\\n+        config = get_config()\\n+\\n+
        \   # Type: ignore because of the issues below\\n+    # https://github.com/python/mypy/issues/8890\\n+
        \   # https://github.com/python/mypy/issues/5382\\n+    spotify_options =
        SpotifyOptions(\\n+        **create_settings_type(arguments, config, SPOTIFY_OPTIONS)
        \ # type: ignore\\n+    )\\n+    downloader_options = DownloaderOptions(\\n+
        \       **create_settings_type(arguments, config, DOWNLOADER_OPTIONS)  # type:
        ignore\\n+    )\\n+    web_options = WebOptions(**create_settings_type(arguments,
        config, WEB_OPTIONS))  # type: ignore\\n+\\n+    return spotify_options, downloader_options,
        web_options\\n+\\n+\\n+def modernize_settings(options: DownloaderOptions):\\n+
        \   \\\"\\\"\\\"Handle deprecated values in config file.\\n+\\n+    ### Arguments\\n+
        \   - options: DownloaderOptions to modernize\\n+    \\\"\\\"\\\"\\n+\\n+
        \   warning_msg = \\\"Deprecated '%s' value found for '%s' setting in config
        file. Using '%s' instead.\\\"\\n+\\n+    # Respect backward compatibility
        with old boolean --restrict flag\\n+    if options[\\\"restrict\\\"] is True:\\n+
        \       logger.warning(warning_msg, True, \\\"restrict\\\", \\\"strict\\\")\\n+
        \       options[\\\"restrict\\\"] = \\\"strict\\\"\\n+\\n+\\n+class GlobalConfig:\\n+
        \   \\\"\\\"\\\"\\n+    Class to store global configuration\\n+    \\\"\\\"\\\"\\n+\\n+
        \   parameters: Dict[str, Any] = {}\\n+\\n+    @classmethod\\n+    def set_parameter(cls,
        key, value):\\n+        \\\"\\\"\\\"\\n+        Set a parameter for the download
        config\\n+        \\\"\\\"\\\"\\n+\\n+        cls.parameters[key] = value\\n+\\n+
        \   @classmethod\\n+    def get_parameter(cls, key):\\n+        \\\"\\\"\\\"\\n+
        \       Get a parameter from the download config\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return cls.parameters.get(key, None)\\n+\\n+\\n+SPOTIFY_OPTIONS: SpotifyOptions
        = {\\n+    \\\"client_id\\\": \\\"5f573c9620494bae87890c0f08a60293\\\",\\n+
        \   \\\"client_secret\\\": \\\"212476d9b0f3472eaa762d90b19b0ba8\\\",\\n+    \\\"auth_token\\\":
        None,\\n+    \\\"user_auth\\\": False,\\n+    \\\"headless\\\": False,\\n+
        \   \\\"cache_path\\\": str(get_cache_path()),\\n+    \\\"no_cache\\\": False,\\n+
        \   \\\"max_retries\\\": 3,\\n+    \\\"use_cache_file\\\": False,\\n+}\\n+\\n+DOWNLOADER_OPTIONS:
        DownloaderOptions = {\\n+    \\\"audio_providers\\\": [\\\"youtube-music\\\"],\\n+
        \   \\\"lyrics_providers\\\": [\\\"genius\\\", \\\"azlyrics\\\", \\\"musixmatch\\\"],\\n+
        \   \\\"playlist_numbering\\\": False,\\n+    \\\"scan_for_songs\\\": False,\\n+
        \   \\\"m3u\\\": None,\\n+    \\\"output\\\": \\\"{artists} - {title}.{output-ext}\\\",\\n+
        \   \\\"overwrite\\\": \\\"skip\\\",\\n+    \\\"search_query\\\": None,\\n+
        \   \\\"ffmpeg\\\": \\\"ffmpeg\\\",\\n+    \\\"bitrate\\\": None,\\n+    \\\"ffmpeg_args\\\":
        None,\\n+    \\\"format\\\": \\\"mp3\\\",\\n+    \\\"save_file\\\": None,\\n+
        \   \\\"filter_results\\\": True,\\n+    \\\"threads\\\": 4,\\n+    \\\"cookie_file\\\":
        None,\\n+    \\\"restrict\\\": None,\\n+    \\\"print_errors\\\": False,\\n+
        \   \\\"sponsor_block\\\": False,\\n+    \\\"preload\\\": False,\\n+    \\\"archive\\\":
        None,\\n+    \\\"load_config\\\": True,\\n+    \\\"log_level\\\": \\\"INFO\\\",\\n+
        \   \\\"simple_tui\\\": False,\\n+    \\\"fetch_albums\\\": False,\\n+    \\\"id3_separator\\\":
        \\\"/\\\",\\n+    \\\"ytm_data\\\": False,\\n+    \\\"add_unavailable\\\":
        False,\\n+    \\\"generate_lrc\\\": False,\\n+    \\\"force_update_metadata\\\":
        False,\\n+    \\\"only_verified_results\\\": False,\\n+    \\\"sync_without_deleting\\\":
        False,\\n+    \\\"max_filename_length\\\": None,\\n+    \\\"yt_dlp_args\\\":
        None,\\n+    \\\"detect_formats\\\": None,\\n+    \\\"save_errors\\\": None,\\n+
        \   \\\"ignore_albums\\\": None,\\n+    \\\"proxy\\\": None,\\n+    \\\"skip_explicit\\\":
        False,\\n+    \\\"log_format\\\": None,\\n+    \\\"redownload\\\": False,\\n+}\\n+\\n+WEB_OPTIONS:
        WebOptions = {\\n+    \\\"web_use_output_dir\\\": False,\\n+    \\\"port\\\":
        8800,\\n+    \\\"host\\\": \\\"localhost\\\",\\n+    \\\"keep_alive\\\": False,\\n+
        \   \\\"allowed_origins\\\": None,\\n+    \\\"keep_sessions\\\": False,\\n+}\\n+\\n+#
        Type: ignore because of the issues above\\n+DEFAULT_CONFIG: SpotDLOptions
        = {\\n+    **SPOTIFY_OPTIONS,  # type: ignore\\n+    **DOWNLOADER_OPTIONS,
        \ # type: ignore\\n+    **WEB_OPTIONS,  # type: ignore\\n+}\"},{\"sha\":\"f53339ff95496566dfd9b7fc8ee114f44c8ffe20\",\"filename\":\"spotdl/utils/console.py\",\"status\":\"added\",\"additions\":122,\"deletions\":0,\"changes\":122,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fconsole.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fconsole.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fconsole.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,122 @@\\n+\\\"\\\"\\\"\\n+Module for holding console related actions.\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import sys\\n+\\n+from spotdl.utils.config import DEFAULT_CONFIG,
        get_config_file\\n+from spotdl.utils.ffmpeg import download_ffmpeg as ffmpeg_download\\n+from
        spotdl.utils.ffmpeg import get_local_ffmpeg, is_ffmpeg_installed\\n+from spotdl.utils.github
        import check_for_updates as get_update_status\\n+\\n+__all__ = [\\n+    \\\"is_frozen\\\",\\n+
        \   \\\"is_executable\\\",\\n+    \\\"generate_initial_config\\\",\\n+    \\\"generate_config\\\",\\n+
        \   \\\"check_for_updates\\\",\\n+    \\\"download_ffmpeg\\\",\\n+    \\\"ACTIONS\\\",\\n+]\\n+\\n+\\n+def
        is_frozen():\\n+    \\\"\\\"\\\"\\n+    Check if the application is frozen.\\n+\\n+
        \   ### Returns\\n+    - `True` if the application is frozen, `False` otherwise.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    return getattr(sys, \\\"frozen\\\", False)\\n+\\n+\\n+def
        is_executable():\\n+    \\\"\\\"\\\"\\n+    Check if the application is an
        prebuilt executable.\\n+    And has been launched with double click.\\n+\\n+
        \   ### Returns\\n+    - `True` if the application is an prebuilt executable,
        `False` otherwise.\\n+    \\\"\\\"\\\"\\n+\\n+    return is_frozen() and len(sys.argv)
        == 1\\n+\\n+\\n+def generate_initial_config():\\n+    \\\"\\\"\\\"\\n+    Generate
        the initial config file if it doesn't exist.\\n+    \\\"\\\"\\\"\\n+\\n+    if
        get_config_file().is_file() is False:\\n+        config_path = get_config_file()\\n+
        \       with open(config_path, \\\"w\\\", encoding=\\\"utf-8\\\") as config_file:\\n+
        \           json.dump(DEFAULT_CONFIG, config_file, indent=4)\\n+\\n+\\n+def
        generate_config():\\n+    \\\"\\\"\\\"\\n+    Generate the config file if
        it doesn't exist\\n+    This is done before the argument parser so it doesn't
        requires `operation`\\n+    and `query` to be passed.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   config_path = get_config_file()\\n+    if config_path.exists():\\n+        overwrite_config
        = input(\\\"Config file already exists. Overwrite? (y/N): \\\")\\n+\\n+        if
        overwrite_config.lower() != \\\"y\\\":\\n+            print(\\\"Exiting...\\\")\\n+
        \           return None\\n+\\n+    with open(config_path, \\\"w\\\", encoding=\\\"utf-8\\\")
        as config_file:\\n+        json.dump(DEFAULT_CONFIG, config_file, indent=4)\\n+\\n+
        \   print(f\\\"Config file generated at {config_path}\\\")\\n+\\n+    return
        None\\n+\\n+\\n+def check_for_updates():\\n+    \\\"\\\"\\\"\\n+    Check
        for updates to the current version.\\n+    \\\"\\\"\\\"\\n+\\n+    version_message
        = get_update_status()\\n+\\n+    print(version_message)\\n+\\n+\\n+def download_ffmpeg():\\n+
        \   \\\"\\\"\\\"\\n+    Handle ffmpeg download process and print the result.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    if get_local_ffmpeg() is not None or is_ffmpeg_installed():\\n+
        \       overwrite_ffmpeg = input(\\n+            \\\"FFmpeg is already installed.
        Do you want to overwrite it? (y/N): \\\"\\n+        )\\n+\\n+        if overwrite_ffmpeg.lower()
        == \\\"y\\\":\\n+            local_ffmpeg = ffmpeg_download()\\n+\\n+            if
        local_ffmpeg.is_file():\\n+                print(f\\\"FFmpeg successfully
        downloaded to {local_ffmpeg.absolute()}\\\")\\n+            else:\\n+                print(\\\"FFmpeg
        download failed\\\")\\n+    else:\\n+        print(\\\"Downloading FFmpeg...\\\")\\n+
        \       download_path = ffmpeg_download()\\n+\\n+        if download_path.is_file():\\n+
        \           print(f\\\"FFmpeg successfully downloaded to {download_path.absolute()}\\\")\\n+
        \       else:\\n+            print(\\\"FFmpeg download failed\\\")\\n+\\n+\\n+ACTIONS
        = {\\n+    \\\"--generate-config\\\": generate_config,\\n+    \\\"--check-for-updates\\\":
        check_for_updates,\\n+    \\\"--download-ffmpeg\\\": download_ffmpeg,\\n+}\"},{\"sha\":\"356842534ed75ad54b2e37933df5c466b74c5b89\",\"filename\":\"spotdl/utils/downloader.py\",\"status\":\"added\",\"additions\":25,\"deletions\":0,\"changes\":25,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fdownloader.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fdownloader.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fdownloader.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,25 @@\\n+\\\"\\\"\\\"\\n+Module for functions related to downloading
        songs.\\n+\\\"\\\"\\\"\\n+\\n+from spotdl.providers.audio import YouTubeMusic\\n+\\n+__all__
        = [\\\"check_ytmusic_connection\\\"]\\n+\\n+\\n+def check_ytmusic_connection()
        -> bool:\\n+    \\\"\\\"\\\"\\n+    Check if we can connect to YouTube Music
        API\\n+\\n+    ### Returns\\n+    - `True` if we can connect to YouTube Music
        API\\n+    - `False` if we can't connect to YouTube Music API\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if we are getting results from YouTube Music\\n+    ytm = YouTubeMusic()\\n+
        \   test_results = ytm.get_results(\\\"a\\\")\\n+    if len(test_results)
        == 0:\\n+        return False\\n+\\n+    return True\"},{\"sha\":\"1ec0d71787d20911bb2ea15e836adfca3a3de2a2\",\"filename\":\"spotdl/utils/ffmpeg.py\",\"status\":\"added\",\"additions\":400,\"deletions\":0,\"changes\":400,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fffmpeg.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,400 @@\\n+\\\"\\\"\\\"\\n+Module for converting audio files to different
        formats\\n+and checking for ffmpeg binary, and downloading it if not found.\\n+\\\"\\\"\\\"\\n+\\n+import
        os\\n+import platform\\n+import re\\n+import shlex\\n+import shutil\\n+import
        stat\\n+import subprocess\\n+from pathlib import Path\\n+from typing import
        Any, Callable, Dict, List, Optional, Tuple, Union\\n+\\n+import requests\\n+\\n+from
        spotdl.utils.config import get_spotdl_path\\n+from spotdl.utils.formatter
        import to_ms\\n+\\n+__all__ = [\\n+    \\\"FFMPEG_URLS\\\",\\n+    \\\"FFMPEG_FORMATS\\\",\\n+
        \   \\\"DUR_REGEX\\\",\\n+    \\\"TIME_REGEX\\\",\\n+    \\\"VERSION_REGEX\\\",\\n+
        \   \\\"YEAR_REGEX\\\",\\n+    \\\"FFmpegError\\\",\\n+    \\\"is_ffmpeg_installed\\\",\\n+
        \   \\\"get_ffmpeg_path\\\",\\n+    \\\"get_ffmpeg_version\\\",\\n+    \\\"get_local_ffmpeg\\\",\\n+
        \   \\\"download_ffmpeg\\\",\\n+    \\\"convert\\\",\\n+]\\n+\\n+FFMPEG_URLS
        = {\\n+    \\\"windows\\\": {\\n+        \\\"amd64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/win32-x64\\\",\\n+
        \       \\\"i686\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/win32-ia32\\\",\\n+
        \   },\\n+    \\\"linux\\\": {\\n+        \\\"x86_64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-x64\\\",\\n+
        \       \\\"x86\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-ia32\\\",\\n+
        \       \\\"arm32\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-arm\\\",\\n+
        \       \\\"aarch64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-arm64\\\",\\n+
        \   },\\n+    \\\"darwin\\\": {\\n+        \\\"x86_64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/darwin-x64\\\",\\n+
        \       \\\"arm\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/darwin-arm64\\\",\\n+
        \   },\\n+}\\n+\\n+FFMPEG_FORMATS = {\\n+    \\\"mp3\\\": [\\\"-codec:a\\\",
        \\\"libmp3lame\\\"],\\n+    \\\"flac\\\": [\\\"-codec:a\\\", \\\"flac\\\",
        \\\"-sample_fmt\\\", \\\"s16\\\"],\\n+    \\\"ogg\\\": [\\\"-codec:a\\\",
        \\\"libvorbis\\\"],\\n+    \\\"opus\\\": [\\\"-codec:a\\\", \\\"libopus\\\"],\\n+
        \   \\\"m4a\\\": [\\\"-codec:a\\\", \\\"aac\\\"],\\n+    \\\"wav\\\": [\\\"-codec:a\\\",
        \\\"pcm_s16le\\\"],\\n+}\\n+\\n+DUR_REGEX = re.compile(\\n+    r\\\"Duration:
        (?P<hour>\\\\d{2}):(?P<min>\\\\d{2}):(?P<sec>\\\\d{2})\\\\.(?P<ms>\\\\d{2})\\\"\\n+)\\n+TIME_REGEX
        = re.compile(\\n+    r\\\"out_time=(?P<hour>\\\\d{2}):(?P<min>\\\\d{2}):(?P<sec>\\\\d{2})\\\\.(?P<ms>\\\\d{2})\\\"\\n+)\\n+VERSION_REGEX
        = re.compile(r\\\"ffmpeg version \\\\w?(\\\\d+\\\\.)?(\\\\d+)\\\")\\n+YEAR_REGEX
        = re.compile(r\\\"Copyright \\\\(c\\\\) \\\\d\\\\d\\\\d\\\\d\\\\-\\\\d\\\\d\\\\d\\\\d\\\")\\n+\\n+\\n+class
        FFmpegError(Exception):\\n+    \\\"\\\"\\\"\\n+    Base class for all exceptions
        related to FFmpeg.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+def is_ffmpeg_installed(ffmpeg:
        str = \\\"ffmpeg\\\") -> bool:\\n+    \\\"\\\"\\\"\\n+    Check if ffmpeg
        is installed.\\n+\\n+    ### Arguments\\n+    - ffmpeg: ffmpeg executable
        to check\\n+\\n+    ### Returns\\n+    - True if ffmpeg is installed, False
        otherwise.\\n+    \\\"\\\"\\\"\\n+\\n+    if ffmpeg == \\\"ffmpeg\\\":\\n+
        \       global_ffmpeg = shutil.which(\\\"ffmpeg\\\")\\n+        if global_ffmpeg
        is None:\\n+            ffmpeg_path = get_ffmpeg_path()\\n+        else:\\n+
        \           ffmpeg_path = Path(global_ffmpeg)\\n+    else:\\n+        ffmpeg_path
        = Path(ffmpeg)\\n+\\n+    if ffmpeg_path is None:\\n+        return False\\n+\\n+
        \   # else check if path to ffmpeg is valid\\n+    # and if ffmpeg has the
        correct access rights\\n+    return ffmpeg_path.exists() and os.access(ffmpeg_path,
        os.X_OK)\\n+\\n+\\n+def get_ffmpeg_path() -> Optional[Path]:\\n+    \\\"\\\"\\\"\\n+
        \   Get path to global ffmpeg binary or a local ffmpeg binary.\\n+\\n+    ###
        Returns\\n+    - Path to ffmpeg binary or None if not found.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if ffmpeg is installed\\n+    global_ffmpeg = shutil.which(\\\"ffmpeg\\\")\\n+
        \   if global_ffmpeg:\\n+        return Path(global_ffmpeg)\\n+\\n+    # Get
        local ffmpeg path\\n+    return get_local_ffmpeg()\\n+\\n+\\n+def get_ffmpeg_version(ffmpeg:
        str = \\\"ffmpeg\\\") -> Tuple[Optional[float], Optional[int]]:\\n+    \\\"\\\"\\\"\\n+
        \   Get ffmpeg version.\\n+\\n+    ### Arguments\\n+    - ffmpeg: ffmpeg executable
        to check\\n+\\n+    ### Returns\\n+    - Tuple of optional version and optional
        year.\\n+\\n+    ### Errors\\n+    - FFmpegError if ffmpeg is not installed.\\n+
        \   - FFmpegError if ffmpeg version is not found.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if ffmpeg is installed\\n+    if not is_ffmpeg_installed(ffmpeg):\\n+
        \       if ffmpeg == \\\"ffmpeg\\\":\\n+            raise FFmpegError(\\\"ffmpeg
        is not installed.\\\")\\n+\\n+        raise FFmpegError(f\\\"{ffmpeg} is not
        a valid ffmpeg executable.\\\")\\n+\\n+    with subprocess.Popen(\\n+        [ffmpeg,
        \\\"-version\\\"],\\n+        stdout=subprocess.PIPE,\\n+        stderr=subprocess.PIPE,\\n+
        \       encoding=\\\"utf-8\\\",\\n+    ) as process:\\n+        output = \\\"\\\".join(process.communicate())\\n+\\n+
        \   # Search for version and build year in output\\n+    version_result =
        VERSION_REGEX.search(output)\\n+    year_result = YEAR_REGEX.search(output)\\n+\\n+
        \   build_year = None\\n+    version = None\\n+\\n+    if version_result is
        not None:\\n+        # remove all non numeric characters from string example:
        n4.3\\n+        version_str = re.sub(r\\\"[a-zA-Z]\\\", \\\"\\\", version_result.group(0))\\n+\\n+
        \       # parse version string to float\\n+        version = float(version_str)
        if version_str else None\\n+\\n+    if year_result is not None:\\n+        #
        get build years from string example: Copyright (c) 2019-2020\\n+        build_years
        = [\\n+            int(\\n+                re.sub(r\\\"[^0-9]\\\", \\\"\\\",
        year)\\n+            )  # remove all non numeric characters from string\\n+
        \           for year in year_result.group(0).split(\\n+                \\\"-\\\"\\n+
        \           )  # split string into list of years\\n+        ]\\n+\\n+        #
        get the highest build year\\n+        build_year = max(build_years)\\n+\\n+
        \   return (version, build_year)\\n+\\n+\\n+def get_local_ffmpeg() -> Optional[Path]:\\n+
        \   \\\"\\\"\\\"\\n+    Get local ffmpeg binary path.\\n+\\n+    ### Returns\\n+
        \   - Path to ffmpeg binary or None if not found.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   ffmpeg_path = Path(get_spotdl_path()) / (\\n+        \\\"ffmpeg\\\" +
        (\\\".exe\\\" if platform.system() == \\\"Windows\\\" else \\\"\\\")\\n+    )\\n+\\n+
        \   if ffmpeg_path.is_file():\\n+        return ffmpeg_path\\n+\\n+    return
        None\\n+\\n+\\n+def download_ffmpeg() -> Path:\\n+    \\\"\\\"\\\"\\n+    Download
        ffmpeg binary to spotdl directory.\\n+\\n+    ### Returns\\n+    - Path to
        ffmpeg binary.\\n+\\n+    ### Notes\\n+    - ffmpeg is downloaded from github
        releases\\n+        for current platform and architecture.\\n+    - executable
        permission is set for ffmpeg binary.\\n+    \\\"\\\"\\\"\\n+\\n+    os_name
        = platform.system().lower()\\n+    os_arch = platform.machine().lower()\\n+\\n+
        \   ffmpeg_url = FFMPEG_URLS.get(os_name, {}).get(os_arch)\\n+    ffmpeg_path
        = Path(\\n+        os.path.join(\\n+            get_spotdl_path(), \\\"ffmpeg\\\"
        + (\\\".exe\\\" if os_name == \\\"windows\\\" else \\\"\\\")\\n+        )\\n+
        \   )\\n+\\n+    if ffmpeg_url is None:\\n+        raise FFmpegError(\\\"FFmpeg
        binary is not available for your system.\\\")\\n+\\n+    # Download binary
        and save it to a file in spotdl directory\\n+    ffmpeg_binary = requests.get(ffmpeg_url,
        allow_redirects=True, timeout=10).content\\n+    with open(ffmpeg_path, \\\"wb\\\")
        as ffmpeg_file:\\n+        ffmpeg_file.write(ffmpeg_binary)\\n+\\n+    # Set
        executable permission on linux and mac\\n+    if os_name in [\\\"linux\\\",
        \\\"darwin\\\"]:\\n+        ffmpeg_path.chmod(ffmpeg_path.stat().st_mode |
        stat.S_IEXEC)\\n+\\n+    return ffmpeg_path\\n+\\n+\\n+def convert(\\n+    input_file:
        Union[Path, Tuple[str, str]],\\n+    output_file: Path,\\n+    ffmpeg: str
        = \\\"ffmpeg\\\",\\n+    output_format: str = \\\"mp3\\\",\\n+    bitrate:
        Optional[str] = None,\\n+    ffmpeg_args: Optional[str] = None,\\n+    progress_handler:
        Optional[Callable[[int], None]] = None,\\n+) -> Tuple[bool, Optional[Dict[str,
        Any]]]:\\n+    \\\"\\\"\\\"\\n+    Convert the input file to the output file
        synchronously with progress handler.\\n+\\n+    ### Arguments\\n+    - input_file:
        Path to input file or tuple of (url, file_format).\\n+    - output_file: Path
        to output file.\\n+    - ffmpeg: ffmpeg executable to use.\\n+    - output_format:
        output format.\\n+    - bitrate: constant/variable bitrate.\\n+    - ffmpeg_args:
        ffmpeg arguments.\\n+    - progress_handler: progress handler, has to accept
        an integer as argument.\\n+\\n+    ### Returns\\n+    - Tuple of conversion
        status and error dictionary.\\n+\\n+    ### Notes\\n+    - Make sure to check
        if ffmpeg is installed before calling this function.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Initialize ffmpeg command\\n+    # -i is the input file\\n+    arguments:
        List[str] = [\\n+        \\\"-nostdin\\\",\\n+        \\\"-y\\\",\\n+        \\\"-i\\\",\\n+
        \       str(input_file.resolve()) if isinstance(input_file, Path) else input_file[0],\\n+
        \       \\\"-movflags\\\",\\n+        \\\"+faststart\\\",\\n+        \\\"-v\\\",\\n+
        \       \\\"debug\\\",\\n+        \\\"-progress\\\",\\n+        \\\"-\\\",\\n+
        \       \\\"-nostats\\\",\\n+    ]\\n+\\n+    file_format = (\\n+        str(input_file.suffix).split(\\\".\\\")[1]\\n+
        \       if isinstance(input_file, Path)\\n+        else input_file[1]\\n+
        \   )\\n+\\n+    # Add output format to command\\n+    # -c:a is used if the
        file is not an matroska container\\n+    # and we want to convert to opus\\n+
        \   # otherwise we use arguments from FFMPEG_FORMATS\\n+    if output_format
        == \\\"opus\\\" and file_format != \\\"webm\\\":\\n+        arguments.extend([\\\"-c:a\\\",
        \\\"libopus\\\"])\\n+    else:\\n+        if (\\n+            (output_format
        == \\\"opus\\\" and file_format == \\\"webm\\\")\\n+            or (output_format
        == \\\"m4a\\\" and file_format == \\\"m4a\\\")\\n+            and not (bitrate
        or ffmpeg_args)\\n+        ):\\n+            # Copy the audio stream to the
        output file\\n+            arguments.extend([\\\"-vn\\\", \\\"-c:a\\\", \\\"copy\\\"])\\n+
        \       else:\\n+            arguments.extend(FFMPEG_FORMATS[output_format])\\n+\\n+
        \   # Add bitrate if specified\\n+    if bitrate:\\n+        # Check if bitrate
        is an integer\\n+        # if it is then use it as variable bitrate\\n+        if
        bitrate.isdigit():\\n+            arguments.extend([\\\"-q:a\\\", bitrate])\\n+
        \       else:\\n+            arguments.extend([\\\"-b:a\\\", bitrate])\\n+\\n+
        \   # Add other ffmpeg arguments if specified\\n+    if ffmpeg_args:\\n+        arguments.extend(shlex.split(ffmpeg_args))\\n+\\n+
        \   # Add output file at the end\\n+    arguments.append(str(output_file.resolve()))\\n+\\n+
        \   # Run ffmpeg\\n+    with subprocess.Popen(\\n+        [ffmpeg, *arguments],\\n+
        \       stdin=subprocess.PIPE,\\n+        stdout=subprocess.PIPE,\\n+        stderr=subprocess.STDOUT,\\n+
        \       universal_newlines=False,\\n+    ) as process:\\n+        if not progress_handler:\\n+
        \           # Wait for process to finish\\n+            proc_out = process.communicate()\\n+\\n+
        \           if process.returncode != 0:\\n+                # get version and
        build year\\n+                version = get_ffmpeg_version(ffmpeg)\\n+\\n+
        \               # join stdout and stderr and decode to utf-8\\n+                message
        = b\\\"\\\".join([out for out in proc_out if out]).decode(\\\"utf-8\\\")\\n+\\n+
        \               # return error dictionary\\n+                return False,
        {\\n+                    \\\"return_code\\\": process.returncode,\\n+                    \\\"arguments\\\":
        arguments,\\n+                    \\\"ffmpeg\\\": ffmpeg,\\n+                    \\\"version\\\":
        version[0],\\n+                    \\\"build_year\\\": version[1],\\n+                    \\\"error\\\":
        message,\\n+                }\\n+\\n+            return True, None\\n+\\n+
        \       progress_handler(0)\\n+\\n+        out_buffer = []\\n+        total_dur
        = None\\n+        out: str = \\\"\\\"\\n+        while True:\\n+            if
        process.stdout is None:\\n+                continue\\n+\\n+            out_line
        = (\\n+                process.stdout.readline().decode(\\\"utf-8\\\", errors=\\\"replace\\\").strip()\\n+
        \           )\\n+\\n+            if out_line == \\\"\\\" and process.poll()
        is not None:\\n+                break\\n+\\n+            out_buffer.append(out_line.strip())\\n+\\n+
        \           out = \\\"\\\\n\\\".join(out_buffer)\\n+\\n+            total_dur_match
        = DUR_REGEX.search(out_line)\\n+            if total_dur is None and total_dur_match:\\n+
        \               total_dur = to_ms(**total_dur_match.groupdict())  # type:
        ignore\\n+                continue\\n+            if total_dur:\\n+                progress_time
        = TIME_REGEX.search(out_line)\\n+                if progress_time:\\n+                    elapsed_time
        = to_ms(**progress_time.groupdict())  # type: ignore\\n+                    progress_handler(int(elapsed_time
        / total_dur * 100))  # type: ignore\\n+\\n+        if process.returncode !=
        0:\\n+            # get version and build year\\n+            version = get_ffmpeg_version(ffmpeg)\\n+\\n+
        \           return False, {\\n+                \\\"return_code\\\": process.returncode,\\n+
        \               \\\"arguments\\\": arguments,\\n+                \\\"ffmpeg\\\":
        ffmpeg,\\n+                \\\"version\\\": version[0],\\n+                \\\"build_year\\\":
        version[1],\\n+                \\\"error\\\": out,\\n+            }\\n+\\n+
        \       progress_handler(100)\\n+\\n+        return True, None\"},{\"sha\":\"1f76d05d800562aecd5e1877c2af903781e9486c\",\"filename\":\"spotdl/utils/formatter.py\",\"status\":\"added\",\"additions\":644,\"deletions\":0,\"changes\":644,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fformatter.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fformatter.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fformatter.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,644 @@\\n+\\\"\\\"\\\"\\n+Module for formatting songs into strings.\\n+Contains
        functions to create search queries and song titles\\n+and file names.\\n+\\\"\\\"\\\"\\n+\\n+import
        copy\\n+import logging\\n+import re\\n+from functools import lru_cache\\n+from
        pathlib import Path\\n+from typing import Any, Dict, List, Optional\\n+from
        unicodedata import normalize\\n+\\n+import pykakasi\\n+from rapidfuzz import
        fuzz\\n+from slugify import slugify as py_slugify\\n+from yt_dlp.options import
        create_parser\\n+from yt_dlp.utils import sanitize_filename\\n+\\n+from spotdl.types.song
        import Song\\n+\\n+__all__ = [\\n+    \\\"VARS\\\",\\n+    \\\"JAP_REGEX\\\",\\n+
        \   \\\"DISALLOWED_REGEX\\\",\\n+    \\\"create_song_title\\\",\\n+    \\\"sanitize_string\\\",\\n+
        \   \\\"slugify\\\",\\n+    \\\"format_query\\\",\\n+    \\\"create_search_query\\\",\\n+
        \   \\\"create_file_name\\\",\\n+    \\\"parse_duration\\\",\\n+    \\\"to_ms\\\",\\n+
        \   \\\"restrict_filename\\\",\\n+    \\\"ratio\\\",\\n+    \\\"smart_split\\\",\\n+
        \   \\\"create_path_object\\\",\\n+    \\\"args_to_ytdlp_options\\\",\\n+]\\n+\\n+VARS
        = [\\n+    \\\"{title}\\\",\\n+    \\\"{artists}\\\",\\n+    \\\"{artist}\\\",\\n+
        \   \\\"{album}\\\",\\n+    \\\"{album-artist}\\\",\\n+    \\\"{genre}\\\",\\n+
        \   \\\"{disc-number}\\\",\\n+    \\\"{disc-count}\\\",\\n+    \\\"{duration}\\\",\\n+
        \   \\\"{year}\\\",\\n+    \\\"{original-date}\\\",\\n+    \\\"{track-number}\\\",\\n+
        \   \\\"{tracks-count}\\\",\\n+    \\\"{isrc}\\\",\\n+    \\\"{track-id}\\\",\\n+
        \   \\\"{publisher}\\\",\\n+    \\\"{list-length}\\\",\\n+    \\\"{list-position}\\\",\\n+
        \   \\\"{list-name}\\\",\\n+    \\\"{output-ext}\\\",\\n+]\\n+\\n+KKS = pykakasi.kakasi()\\n+\\n+JAP_REGEX
        = re.compile(\\n+    \\\"[\\\\u3000-\\\\u303f\\\\u3040-\\\\u309f\\\\u30a0-\\\\u30ff\\\\uff00-\\\\uff9f\\\\u4e00-\\\\u9faf\\\\u3400-\\\\u4dbf]\\\"\\n+)\\n+\\n+DISALLOWED_REGEX
        = re.compile(r\\\"[^-a-zA-Z0-9\\\\!\\\\@\\\\$]+\\\")\\n+YT_DLP_PARSER = create_parser()\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def create_song_title(song_name:
        str, song_artists: List[str]) -> str:\\n+    \\\"\\\"\\\"\\n+    Create the
        song title.\\n+\\n+    ### Arguments\\n+    - song_name: the name of the song\\n+
        \   - song_artists: the list of artists of the song\\n+\\n+    ### Returns\\n+
        \   - the song title\\n+\\n+    ### Notes\\n+    - Example: \\\"Artist1, Artist2
        - Song Name\\\"\\n+\\n+    \\\"\\\"\\\"\\n+\\n+    joined_artists = \\\",
        \\\".join(song_artists)\\n+    if len(song_artists) >= 1:\\n+        return
        f\\\"{joined_artists} - {song_name}\\\"\\n+\\n+    return song_name\\n+\\n+\\n+def
        sanitize_string(string: str) -> str:\\n+    \\\"\\\"\\\"\\n+    Sanitize the
        filename to be used in the file system.\\n+\\n+    ### Arguments\\n+    -
        string: the string to sanitize\\n+\\n+    ### Returns\\n+    - the sanitized
        string\\n+    \\\"\\\"\\\"\\n+\\n+    output = string\\n+\\n+    # this is
        windows specific (disallowed chars)\\n+    output = \\\"\\\".join(char for
        char in output if char not in \\\"/?\\\\\\\\*|<>\\\")\\n+\\n+    # double
        quotes (\\\") and semi-colons (:) are also disallowed characters but we would\\n+
        \   # like to retain their equivalents, so they aren't removed in the prior
        loop\\n+    output = output.replace('\\\"', \\\"'\\\").replace(\\\":\\\",
        \\\"-\\\")\\n+\\n+    return output\\n+\\n+\\n+@lru_cache()\\n+def slugify(string:
        str) -> str:\\n+    \\\"\\\"\\\"\\n+    Slugify the string.\\n+\\n+    ###
        Arguments\\n+    - string: the string to slugify\\n+\\n+    ### Returns\\n+
        \   - the slugified string\\n+    \\\"\\\"\\\"\\n+\\n+    # Replace ambiguous
        characters\\n+    if not JAP_REGEX.search(string):\\n+        # If string
        doesn't have japanese characters\\n+        # return early\\n+        return
        py_slugify(string, regex_pattern=DISALLOWED_REGEX.pattern)\\n+\\n+    # Workaround
        for japanese characters\\n+    # because slugify incorrectly converts them\\n+
        \   # to latin characters\\n+    normal_slug = py_slugify(\\n+        string,\\n+
        \       regex_pattern=JAP_REGEX.pattern,\\n+    )\\n+\\n+    results = KKS.convert(normal_slug)\\n+\\n+
        \   result = \\\"\\\"\\n+    for index, item in enumerate(results):\\n+        result
        += item[\\\"hepburn\\\"]\\n+        if not (\\n+            item[\\\"kana\\\"]
        == item[\\\"hepburn\\\"]\\n+            or item[\\\"kana\\\"] == item[\\\"hepburn\\\"]\\n+
        \           or (\\n+                item == results[-1]\\n+                or
        results[index + 1][\\\"kana\\\"] == results[index + 1][\\\"hepburn\\\"]\\n+
        \           )\\n+        ):\\n+            result += \\\"-\\\"\\n+\\n+    return
        py_slugify(result, regex_pattern=DISALLOWED_REGEX.pattern)\\n+\\n+\\n+def
        format_query(\\n+    song: Song,\\n+    template: str,\\n+    santitize: bool,\\n+
        \   file_extension: Optional[str] = None,\\n+    short: bool = False,\\n+)
        -> str:\\n+    \\\"\\\"\\\"\\n+    Replace template variables with the actual
        values.\\n+\\n+    ### Arguments\\n+    - song: the song object\\n+    - template:
        the template string\\n+    - santitize: whether to sanitize the string\\n+
        \   - file_extension: the file extension to use\\n+    - short: whether to
        use the short version of the template\\n+\\n+    ### Returns\\n+    - the
        formatted string\\n+    \\\"\\\"\\\"\\n+\\n+    if \\\"{output-ext}\\\" in
        template and file_extension is None:\\n+        raise ValueError(\\\"file_extension
        is None, but template contains {output-ext}\\\")\\n+\\n+    for key, val in
        [\\n+        (\\\"{list-length}\\\", song.list_length),\\n+        (\\\"{list-position}\\\",
        song.list_position),\\n+        (\\\"{list-name}\\\", song.list_name),\\n+
        \   ]:\\n+        if not (key in template and val is None):\\n+            continue\\n+\\n+
        \       logger.warning(\\n+            \\\"Template contains %s, but it's
        value is None. Replacing with empty string.\\\",\\n+            key,\\n+        )\\n+\\n+
        \       template = template.replace(key, \\\"\\\")\\n+        template = template.replace(r\\\"//\\\",
        r\\\"/\\\")\\n+\\n+    # If template has only {output-ext}, fix it\\n+    if
        template in [\\\"/.{output-ext}\\\", \\\".{output-ext}\\\"]:\\n+        template
        = \\\"{artists} - {title}.{output-ext}\\\"\\n+\\n+    # Remove artists from
        the list that are already in the title\\n+    artists = [\\n+        artist
        for artist in song.artists if slugify(artist) not in slugify(song.name)\\n+
        \   ]\\n+\\n+    # Add the main artist again to the list\\n+    if len(artists)
        == 0 or artists[0] != song.artists[0]:\\n+        artists.insert(0, song.artists[0])\\n+\\n+
        \   artists_str = \\\", \\\".join(artists)\\n+\\n+    # the code below is
        valid, song_list is actually checked for None\\n+    formats = {\\n+        \\\"{title}\\\":
        song.name,\\n+        \\\"{artists}\\\": song.artists[0] if short is True
        else artists_str,\\n+        \\\"{artist}\\\": song.artists[0],\\n+        \\\"{album}\\\":
        song.album_name,\\n+        \\\"{album-artist}\\\": song.album_artist,\\n+
        \       \\\"{genre}\\\": song.genres[0] if song.genres else \\\"\\\",\\n+
        \       \\\"{disc-number}\\\": song.disc_number,\\n+        \\\"{disc-count}\\\":
        song.disc_count,\\n+        \\\"{duration}\\\": song.duration,\\n+        \\\"{year}\\\":
        song.year,\\n+        \\\"{original-date}\\\": song.date,\\n+        \\\"{track-number}\\\":
        f\\\"{song.track_number:02d}\\\" if song.track_number else \\\"\\\",\\n+        \\\"{tracks-count}\\\":
        song.tracks_count,\\n+        \\\"{isrc}\\\": song.isrc,\\n+        \\\"{track-id}\\\":
        song.song_id,\\n+        \\\"{publisher}\\\": song.publisher,\\n+        \\\"{output-ext}\\\":
        file_extension,\\n+        \\\"{list-name}\\\": song.list_name,\\n+        \\\"{list-position}\\\":
        str(song.list_position).zfill(len(str(song.list_length))),\\n+        \\\"{list-length}\\\":
        song.list_length,\\n+    }\\n+\\n+    if santitize:\\n+        # sanitize
        the values in formats dict\\n+        for key, value in formats.items():\\n+
        \           if value is None:\\n+                continue\\n+\\n+            formats[key]
        = sanitize_string(str(value))\\n+\\n+    # Replace all the keys with the values\\n+
        \   for key, value in formats.items():\\n+        template = template.replace(key,
        str(value))\\n+\\n+    return template\\n+\\n+\\n+def create_search_query(\\n+
        \   song: Song,\\n+    template: str,\\n+    santitize: bool,\\n+    file_extension:
        Optional[str] = None,\\n+    short: bool = False,\\n+) -> str:\\n+    \\\"\\\"\\\"\\n+
        \   Create the search query for the song.\\n+\\n+    ### Arguments\\n+    -
        song: the song object\\n+    - template: the template string\\n+    - santitize:
        whether to sanitize the string\\n+    - file_extension: the file extension
        to use\\n+    - short: whether to use the short version of the template\\n+\\n+
        \   ### Returns\\n+    - the formatted string\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # If template does not contain any of the keys,\\n+    # append {artist}
        - {title} at the beginning of the template\\n+    if not any(key in template
        for key in VARS):\\n+        template = \\\"{artist} - {title}\\\" + template\\n+\\n+
        \   return format_query(song, template, santitize, file_extension, short=short)\\n+\\n+\\n+def
        create_file_name(\\n+    song: Song,\\n+    template: str,\\n+    file_extension:
        str,\\n+    restrict: Optional[str] = None,\\n+    short: bool = False,\\n+
        \   file_name_length: Optional[int] = None,\\n+) -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Create the file name for the song, by replacing template variables with
        the actual values.\\n+\\n+    ### Arguments\\n+    - song: the song object\\n+
        \   - template: the template string\\n+    - file_extension: the file extension
        to use\\n+    - restrict: sanitization to apply to the filename\\n+    - short:
        whether to use the short version of the template\\n+    - file_name_length:
        the maximum length of the file name\\n+\\n+    ### Returns\\n+    - the formatted
        string as a Path object\\n+    \\\"\\\"\\\"\\n+\\n+    temp_song = copy.deepcopy(song)\\n+\\n+
        \   # If template does not contain any of the keys,\\n+    # append {artists}
        - {title}.{output-ext} to it\\n+    if not any(key in template for key in
        VARS) and template != \\\"\\\":\\n+        template += \\\"/{artists} - {title}.{output-ext}\\\"\\n+\\n+
        \   if template == \\\"\\\":\\n+        template = \\\"{artists} - {title}.{output-ext}\\\"\\n+\\n+
        \   # If template ends with a slash. Does not have a file name with extension\\n+
        \   # at the end of the template, append {artists} - {title}.{output-ext}
        to it\\n+    if template.endswith(\\\"/\\\") or template.endswith(r\\\"\\\\\\\\\\\")
        or template.endswith(\\\"\\\\\\\\\\\\\\\\\\\"):\\n+        template += \\\"/{artists}
        - {title}.{output-ext}\\\"\\n+\\n+    # If template does not end with {output-ext},
        append it to the end of the template\\n+    if not template.endswith(\\\".{output-ext}\\\"):\\n+
        \       template += \\\".{output-ext}\\\"\\n+\\n+    formatted_string = format_query(\\n+
        \       song=song,\\n+        template=template,\\n+        santitize=True,\\n+
        \       file_extension=file_extension,\\n+        short=short,\\n+    )\\n+\\n+
        \   file = create_path_object(formatted_string)\\n+\\n+    length_limit =
        file_name_length or 255\\n+\\n+    # Check if the file name length is greater
        than the limit\\n+    if len(file.name) < length_limit:\\n+        # Restrict
        the filename if needed\\n+        if restrict and restrict != \\\"none\\\":\\n+
        \           return restrict_filename(file, restrict == \\\"strict\\\")\\n+\\n+
        \       return file\\n+\\n+    if short is False:\\n+        return create_file_name(\\n+
        \           song,\\n+            template,\\n+            file_extension,\\n+
        \           restrict=restrict,\\n+            short=True,\\n+            file_name_length=length_limit,\\n+
        \       )\\n+\\n+    non_template_chars = re.findall(r\\\"(?<!{)[^{}]+(?![^{}]*})\\\",
        template)\\n+    half_length = int((length_limit * 0.50) - (len(\\\"\\\".join(non_template_chars))
        / 2))\\n+\\n+    # Path template is already short, but we still can't create
        a file\\n+    # so we reduce it even further\\n+    is_long_artist = len(temp_song.artist)
        > half_length\\n+    is_long_title = len(temp_song.name) > half_length\\n+\\n+
        \   path_separator = \\\"/\\\" if \\\"/\\\" in template else \\\"\\\\\\\\\\\"\\n+
        \   name_template_parts = template.rsplit(path_separator, 1)\\n+    name_template
        = (\\n+        name_template_parts[1]\\n+        if len(name_template_parts)
        > 1\\n+        else name_template_parts[0]\\n+    )\\n+\\n+    if is_long_artist:\\n+
        \       logger.warning(\\n+            \\\"%s: Song artist is too long. Using
        only part of song artist.\\\",\\n+            temp_song.display_name,\\n+
        \       )\\n+\\n+        temp_song.artist = smart_split(temp_song.artist,
        half_length, None)\\n+        temp_song.artists = [temp_song.artist]\\n+\\n+
        \   if is_long_title:\\n+        logger.warning(\\n+            \\\"%s: File
        name is too long. Using only part of the song title.\\\",\\n+            temp_song.display_name,\\n+
        \       )\\n+\\n+        temp_song.name = smart_split(temp_song.name, half_length,
        None)\\n+\\n+    new_file = create_path_object(\\n+        format_query(\\n+
        \           song=temp_song,\\n+            template=name_template,\\n+            santitize=True,\\n+
        \           file_extension=file_extension,\\n+            short=short,\\n+
        \       )\\n+    )\\n+\\n+    if len(new_file.name) > length_limit:\\n+        logger.warning(\\n+
        \           \\\"File name is still too long. \\\"\\n+            \\\"Using
        default file name with shortened artist and title.\\\"\\n+        )\\n+\\n+
        \       if template == \\\"{artist} - {title}.{output-ext}\\\":\\n+            raise
        ValueError(\\n+                \\\"File name is still too long, \\\"\\n+                \\\"but
        the template is already short. \\\"\\n+                \\\"Please try other
        template, \\\"\\n+                \\\"increase the file name length limit.\\\"\\n+
        \           )\\n+\\n+        return create_file_name(\\n+            temp_song,\\n+
        \           \\\"{artist} - {title}.{output-ext}\\\",\\n+            file_extension,\\n+
        \           restrict=restrict,\\n+            short=True,\\n+            file_name_length=length_limit,\\n+
        \       )\\n+\\n+    return new_file\\n+\\n+\\n+def parse_duration(duration:
        Optional[str]) -> float:\\n+    \\\"\\\"\\\"\\n+    Convert string value of
        time (duration: \\\"25:36:59\\\") to a float value of seconds (92219.0)\\n+\\n+
        \   ### Arguments\\n+    - duration: the string value of time\\n+\\n+    ###
        Returns\\n+    - the float value of seconds\\n+    \\\"\\\"\\\"\\n+\\n+    if
        duration is None:\\n+        return 0.0\\n+\\n+    try:\\n+        # {(1,
        \\\"s\\\"), (60, \\\"m\\\"), (3600, \\\"h\\\")}\\n+        mapped_increments
        = zip([1, 60, 3600], reversed(duration.split(\\\":\\\")))\\n+        seconds
        = sum(multiplier * int(time) for multiplier, time in mapped_increments)\\n+
        \       return float(seconds)\\n+\\n+    # This usually occurs when the wrong
        string is mistaken for the duration\\n+    except (ValueError, TypeError,
        AttributeError):\\n+        return 0.0\\n+\\n+\\n+def to_ms(\\n+    string:
        Optional[str] = None, precision: Optional[int] = None, **kwargs\\n+) -> float:\\n+
        \   \\\"\\\"\\\"\\n+    Convert a string to milliseconds.\\n+\\n+    ### Arguments\\n+
        \   - string: the string to convert\\n+    - precision: the number of decimals
        to round to\\n+    - kwargs: the keyword args to convert\\n+\\n+    ### Returns\\n+
        \   - the milliseconds\\n+\\n+    ### Notes\\n+    - You can either pass a
        string,\\n+    - or a set of keyword args (\\\"hour\\\", \\\"min\\\", \\\"sec\\\",
        \\\"ms\\\") to convert.\\n+    - If \\\"precision\\\" is set, the result is
        rounded to the number of decimals given.\\n+    - From: https://gist.github.com/Hellowlol/5f8545e999259b4371c91ac223409209\\n+
        \   \\\"\\\"\\\"\\n+\\n+    if string:\\n+        hour = int(string[0:2])\\n+
        \       minute = int(string[3:5])\\n+        sec = int(string[6:8])\\n+        milliseconds
        = int(string[10:11])\\n+    else:\\n+        hour = int(kwargs.get(\\\"hour\\\",
        0))\\n+        minute = int(kwargs.get(\\\"min\\\", 0))\\n+        sec = int(kwargs.get(\\\"sec\\\",
        0))\\n+        milliseconds = int(kwargs.get(\\\"ms\\\", 0))\\n+\\n+    result
        = (\\n+        (hour * 60 * 60 * 1000) + (minute * 60 * 1000) + (sec * 1000)
        + milliseconds\\n+    )\\n+\\n+    if precision and isinstance(precision,
        int):\\n+        return round(result, precision)\\n+\\n+    return result\\n+\\n+\\n+def
        restrict_filename(pathobj: Path, strict: bool = True) -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Sanitizes the filename part of a Path object. Returns modified object.\\n+\\n+
        \   ### Arguments\\n+    - pathobj: the Path object to sanitize\\n+    - strict:
        whether sanitization should be strict\\n+\\n+    ### Returns\\n+    - the
        modified Path object\\n+\\n+    ### Notes\\n+    - Based on the `sanitize_filename`
        function from yt-dlp\\n+    \\\"\\\"\\\"\\n+    if strict:\\n+        result
        = sanitize_filename(pathobj.name, True, False)  # type: ignore\\n+        result
        = result.replace(\\\"_-_\\\", \\\"-\\\")\\n+    else:\\n+        result =
        (\\n+            normalize(\\\"NFKD\\\", pathobj.name).encode(\\\"ascii\\\",
        \\\"ignore\\\").decode(\\\"utf-8\\\")\\n+        )\\n+\\n+    if not result:\\n+
        \       result = \\\"_\\\"\\n+\\n+    return pathobj.with_name(result)\\n+\\n+\\n+@lru_cache()\\n+def
        ratio(string1: str, string2: str) -> float:\\n+    \\\"\\\"\\\"\\n+    Wrapper
        for fuzz.ratio\\n+    with lru_cache\\n+\\n+    ### Arguments\\n+    - string1:
        the first string\\n+    - string2: the second string\\n+\\n+    ### Returns\\n+
        \   - the ratio\\n+    \\\"\\\"\\\"\\n+\\n+    return fuzz.ratio(string1,
        string2)\\n+\\n+\\n+def smart_split(\\n+    string: str, max_length: int,
        separators: Optional[List[str]] = None\\n+) -> str:\\n+    \\\"\\\"\\\"\\n+
        \   Split a string into a list of strings\\n+    with a maximum length of
        max_length.\\n+    Stops at the first separator that produces a string\\n+
        \   with a length less than max_length.\\n+\\n+    ### Arguments\\n+    -
        string: the string to split\\n+    - max_length: the maximum length of string\\n+
        \   - separators: the separators to split the string with\\n+\\n+    ### Returns\\n+
        \   - the new string\\n+    \\\"\\\"\\\"\\n+\\n+    if separators is None:\\n+
        \       separators = [\\\"-\\\", \\\",\\\", \\\" \\\", \\\"\\\"]\\n+\\n+    for
        separator in separators:\\n+        parts = string.split(separator if separator
        != \\\"\\\" else None)\\n+        new_string = separator.join(parts[:1])\\n+
        \       for part in parts[1:]:\\n+            if len(new_string) + len(separator)
        + len(part) > max_length:\\n+                break\\n+            new_string
        += separator + part\\n+\\n+        if len(new_string) <= max_length:\\n+            return
        new_string\\n+\\n+    return string[:max_length]\\n+\\n+\\n+def create_path_object(string:
        str) -> Path:\\n+    \\\"\\\"\\\"\\n+    Create a Path object from a string.\\n+
        \   Sanitizes the filename part of the Path object.\\n+\\n+    ### Arguments\\n+
        \   - string: the string to convert\\n+\\n+    ### Returns\\n+    - the Path
        object\\n+    \\\"\\\"\\\"\\n+\\n+    # Parse template as Path object\\n+
        \   file = Path(string)\\n+\\n+    santitized_parts = []\\n+    for part in
        file.parts:\\n+        match = re.search(r\\\"[^\\\\.*](.*)[^\\\\.*$]\\\",
        part)\\n+        if match and part != \\\".spotdl\\\":\\n+            santitized_parts.append(match.group(0))\\n+
        \       else:\\n+            santitized_parts.append(part)\\n+\\n+    # Join
        the parts of the path\\n+    return Path(*santitized_parts)\\n+\\n+\\n+def
        args_to_ytdlp_options(argument_list: List[str]) -> Dict[str, Any]:\\n+    \\\"\\\"\\\"\\n+
        \   Convert a list of arguments to a dictionary of options.\\n+\\n+    ###
        Arguments\\n+    - argument_list: the list of arguments\\n+\\n+    ### Returns\\n+
        \   - the dictionary of options\\n+    \\\"\\\"\\\"\\n+\\n+    options_dict:
        Dict[str, Any] = {}\\n+    for option_group in YT_DLP_PARSER.option_groups:\\n+
        \       for option in option_group.option_list:\\n+            for opts in
        option._long_opts:  # pylint: disable=protected-access\\n+                try:\\n+
        \                   index = argument_list.index(opts)\\n+                except
        ValueError:\\n+                    continue\\n+\\n+                if option.action
        == \\\"store_true\\\" and option.dest:\\n+                    options_dict[option.dest]
        = True\\n+                    continue\\n+\\n+                if option.action
        == \\\"store_false\\\" and option.dest:\\n+                    options_dict[option.dest]
        = False\\n+                    continue\\n+\\n+                if option.action
        == \\\"store\\\" and option.dest:\\n+                    values = []\\n+                    val_index
        = index\\n+                    while val_index + 1 < len(argument_list) and
        not argument_list[\\n+                        val_index + 1\\n+                    ].startswith(\\\"--\\\"):\\n+
        \                       values.append(argument_list[val_index + 1])\\n+                        val_index
        += 1\\n+\\n+                    options_dict[option.dest] = values\\n+\\n+
        \   return options_dict\"},{\"sha\":\"b16185fa63dbd93b344ad27fc51483dfa9be4b33\",\"filename\":\"spotdl/utils/github.py\",\"status\":\"added\",\"additions\":249,\"deletions\":0,\"changes\":249,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fgithub.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fgithub.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fgithub.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,249 @@\\n+\\\"\\\"\\\"\\n+Module for getting information about the
        current version of spotdl\\n+from GitHub, downloading the latest version,
        and checking for updates.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+import
        os\\n+import re\\n+from typing import Tuple\\n+\\n+import requests\\n+\\n+from
        spotdl import _version\\n+\\n+__all__ = [\\n+    \\\"REPO\\\",\\n+    \\\"WEB_APP_URL\\\",\\n+
        \   \\\"get_status\\\",\\n+    \\\"check_for_updates\\\",\\n+    \\\"get_latest_version\\\",\\n+
        \   \\\"create_github_url\\\",\\n+    \\\"download_github_dir\\\",\\n+]\\n+\\n+REPO
        = \\\"spotdl/spotify-downloader\\\"\\n+WEB_APP_URL = \\\"https://github.com/spotdl/web-ui/tree/master/dist\\\"\\n+\\n+\\n+class
        RateLimitError(Exception):\\n+    \\\"\\\"\\\"\\n+    Raised when the GitHub
        API rate limit is exceeded.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+def get_status(start:
        str, end: str, repo: str = REPO) -> Tuple[str, int, int]:\\n+    \\\"\\\"\\\"\\n+
        \   Get the status of a commit range.\\n+\\n+    ### Arguments\\n+    - start:
        the starting commit/branch/tag\\n+    - end: the ending commit/branch/tag\\n+
        \   - repo: the repo to check (defaults to spotdl/spotify-downloader)\\n+\\n+
        \   ### Returns\\n+    - tuple of (status, ahead_by, behind_by)\\n+    \\\"\\\"\\\"\\n+\\n+
        \   url = f\\\"https://api.github.com/repos/{repo}/compare/{start}...{end}\\\"\\n+\\n+
        \   response = requests.get(url, timeout=10)\\n+\\n+    if response.status_code
        != 200:\\n+        if response.status_code == 403:\\n+            raise RateLimitError(\\\"GitHub
        API rate limit exceeded.\\\")\\n+\\n+        raise RuntimeError(\\n+            f\\\"Failed
        to get commit count. Status code: {response.status_code}\\\"\\n+        )\\n+\\n+
        \   data = response.json()\\n+\\n+    return (\\n+        data[\\\"status\\\"],\\n+
        \       data[\\\"ahead_by\\\"],\\n+        data[\\\"behind_by\\\"],\\n+    )\\n+\\n+\\n+def
        get_latest_version(repo: str = REPO) -> str:\\n+    \\\"\\\"\\\"\\n+    Get
        the latest version of spotdl.\\n+\\n+    ### Arguments\\n+    - repo: the
        repo to check (defaults to spotdl/spotify-downloader)\\n+\\n+    ### Returns\\n+
        \   - the latest version\\n+    \\\"\\\"\\\"\\n+\\n+    url = f\\\"https://api.github.com/repos/{repo}/releases/latest\\\"\\n+\\n+
        \   response = requests.get(url, timeout=10)\\n+\\n+    if response.status_code
        != 200:\\n+        if response.status_code == 403:\\n+            raise RateLimitError(\\\"GitHub
        API rate limit exceeded.\\\")\\n+\\n+        raise RuntimeError(\\n+            f\\\"Failed
        to get commit count. Status code: {response.status_code}\\\"\\n+        )\\n+\\n+
        \   data = response.json()\\n+\\n+    return data[\\\"name\\\"]  # returns
        \\\"vx.x.x\\\"\\n+\\n+\\n+def check_for_updates(repo: str = REPO) -> str:\\n+
        \   \\\"\\\"\\\"\\n+    Check for updates to the current version.\\n+\\n+
        \   ### Arguments\\n+    - repo: the repo to check (defaults to spotdl/spotify-downloader)\\n+\\n+
        \   ### Returns\\n+    - the latest version\\n+    \\\"\\\"\\\"\\n+\\n+    message
        = \\\"\\\"\\n+\\n+    latest_version = get_latest_version(repo)\\n+    current_version
        = f\\\"v{_version.__version__}\\\"  # returns \\\"vx.x.x\\\"\\n+\\n+    if
        latest_version != current_version:\\n+        message = f\\\"New version available:
        {latest_version}.\\\\n\\\\n\\\"\\n+    else:\\n+        message = \\\"No updates
        available.\\\\n\\\\n\\\"\\n+    try:\\n+        master = get_status(current_version,
        \\\"master\\\")\\n+        dev = get_status(current_version, \\\"dev\\\")\\n+
        \   except RuntimeError:\\n+        message = \\\"Couldn't check for updates.
        You might be running a dev version.\\\\n\\\"\\n+        message += \\\"Current
        version: \\\" + current_version + \\\"\\\\n\\\"\\n+        message += \\\"Latest
        version: \\\" + latest_version\\n+        return message\\n+    except RateLimitError:\\n+
        \       message = \\\"GitHub API rate limit exceeded. Couldn't check for updates.\\\\n\\\"\\n+
        \       message += \\\"Current version: \\\" + current_version + \\\"\\\\n\\\"\\n+
        \       message += \\\"Latest version: \\\" + latest_version + \\\"\\\\n\\\"\\n+
        \       message += \\\"Please try again later.\\\"\\n+        return message\\n+\\n+
        \   for branch in [\\\"master\\\", \\\"dev\\\"]:\\n+        name = branch.capitalize()\\n+
        \       if branch == \\\"master\\\":\\n+            status, ahead_by, behind_by
        = master\\n+        else:\\n+            status, ahead_by, behind_by = dev\\n+\\n+
        \       if status == \\\"behind\\\":\\n+            message += f\\\"{name}
        is {status} by {behind_by} commits.\\\\n\\\"\\n+        elif status == \\\"ahead\\\":\\n+
        \           message += f\\\"{name} is {status} by {ahead_by} commits.\\\\n\\\"\\n+
        \       else:\\n+            message += f\\\"{name} is up to date.\\\\n\\\"\\n+\\n+
        \   return message\\n+\\n+\\n+def create_github_url(url: str = WEB_APP_URL):\\n+
        \   \\\"\\\"\\\"\\n+    From the given url, produce a URL that is compatible
        with Github's REST API.\\n+\\n+    ### Arguments\\n+    - url: the url to
        convert\\n+\\n+    ### Notes\\n+    - Can handle blob or tree paths.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   repo_only_url = re.compile(\\n+        r\\\"https:\\\\/\\\\/github\\\\.com\\\\/[a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38}\\\\/[a-zA-Z0-9]+$\\\"\\n+
        \   )\\n+    re_branch = re.compile(\\\"/(tree|blob)/(.+?)/\\\")\\n+\\n+    #
        Check if the given url is a url to a GitHub repo. If it is, tell the\\n+    #
        user to use 'git clone' to download it\\n+    if re.match(repo_only_url, url):\\n+
        \       raise ValueError(\\n+            \\\"The given URL is a GitHub repo.
        Please use 'git clone' to download it.\\\"\\n+        )\\n+\\n+    # extract
        the branch name from the given url (e.g master)\\n+    branch = re_branch.search(url)\\n+
        \   if branch:\\n+        download_dirs = url[branch.end() :]\\n+        api_url
        = (\\n+            url[: branch.start()].replace(\\\"github.com\\\", \\\"api.github.com/repos\\\",
        1)\\n+            + \\\"/contents/\\\"\\n+            + download_dirs\\n+
        \           + \\\"?ref=\\\"\\n+            + branch.group(2)\\n+        )\\n+
        \       return api_url\\n+\\n+    raise ValueError(\\\"The given url is not
        a valid GitHub url\\\")\\n+\\n+\\n+def download_github_dir(\\n+    repo_url:
        str = WEB_APP_URL, flatten: bool = False, output_dir: str = \\\"./\\\"\\n+):\\n+
        \   \\\"\\\"\\\"\\n+    Downloads the files and directories in repo_url.\\n+\\n+
        \   ### Arguments\\n+    - repo_url: the url to the repo to download\\n+    -
        flatten: whether to flatten the directory structure\\n+    - output_dir: the
        directory to download the files to\\n+\\n+    ### Notes\\n+    - Modification
        of https://github.com/sdushantha/gitdir/blob/master/gitdir/gitdir.py\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # generate the url which returns the JSON data\\n+    api_url = create_github_url(repo_url)\\n+\\n+
        \   dir_out = output_dir\\n+\\n+    response = requests.get(api_url, timeout=10).json()\\n+\\n+
        \   if (\\n+        isinstance(response, dict)\\n+        and \\\"message\\\"
        in response.keys()\\n+        and \\\"rate limit\\\" in response[\\\"message\\\"]\\n+
        \   ):\\n+        logging.error(\\n+            \\\"You have been rate limited
        by Github API attempting to update web client.\\\"\\n+            \\\"Proceeding
        with cached web client. Please try again later.\\\"\\n+            \\\"See
        https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\\\"\\n+
        \       )\\n+        return None\\n+\\n+    if not flatten:\\n+        # make
        a directory with the name which is taken from\\n+        # the actual repo\\n+
        \       os.makedirs(dir_out, exist_ok=True)\\n+\\n+    if isinstance(response,
        dict) and response[\\\"type\\\"] == \\\"file\\\":\\n+        response = [response]\\n+\\n+
        \   for file in response:\\n+        file_url = file[\\\"download_url\\\"]\\n+\\n+
        \       if flatten:\\n+            path = os.path.join(dir_out, os.path.basename(file[\\\"path\\\"]))\\n+
        \       else:\\n+            path = os.path.join(dir_out, file[\\\"path\\\"])\\n+\\n+
        \       dirname = os.path.dirname(path)\\n+\\n+        if dirname != \\\"\\\":\\n+
        \           os.makedirs(dirname, exist_ok=True)\\n+\\n+        if file_url
        is not None:\\n+            with open(path, \\\"wb\\\") as new_file:\\n+                new_file.write(requests.get(file_url,
        timeout=10).content)\\n+        else:\\n+            download_github_dir(file[\\\"html_url\\\"],
        flatten, output_dir)\\n+\\n+    return None\"},{\"sha\":\"1af6bb9c23d8ac8b879064b7459cee2f45beacea\",\"filename\":\"spotdl/utils/logging.py\",\"status\":\"added\",\"additions\":219,\"deletions\":0,\"changes\":219,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Flogging.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Flogging.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Flogging.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,219 @@\\n+\\\"\\\"\\\"\\n+Module for logging\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+from typing import Optional\\n+\\n+from rich import get_console\\n+from
        rich.console import ConsoleRenderable\\n+from rich.logging import RichHandler\\n+from
        rich.markup import escape\\n+from rich.text import Text\\n+from rich.theme
        import Theme\\n+from rich.traceback import install\\n+\\n+__all__ = [\\n+
        \   \\\"CRITICAL\\\",\\n+    \\\"FATAL\\\",\\n+    \\\"ERROR\\\",\\n+    \\\"WARNING\\\",\\n+
        \   \\\"WARN\\\",\\n+    \\\"INFO\\\",\\n+    \\\"DEBUG\\\",\\n+    \\\"MATCH\\\",\\n+
        \   \\\"NOTSET\\\",\\n+    \\\"init_logging\\\",\\n+    \\\"SpotdlFormatter\\\",\\n+
        \   \\\"LEVEL_TO_NAME\\\",\\n+    \\\"NAME_TO_LEVEL\\\",\\n+]\\n+\\n+# https://github.com/python/cpython/blob/3.10/Lib/logging/__init__.py\\n+CRITICAL
        = 50\\n+FATAL = CRITICAL\\n+ERROR = 40\\n+WARNING = 30\\n+WARN = WARNING\\n+INFO
        = 20\\n+DEBUG = 10\\n+MATCH = 5\\n+NOTSET = 0\\n+\\n+LEVEL_TO_NAME = {\\n+
        \   CRITICAL: \\\"CRITICAL\\\",\\n+    ERROR: \\\"ERROR\\\",\\n+    WARNING:
        \\\"WARNING\\\",\\n+    INFO: \\\"INFO\\\",\\n+    MATCH: \\\"MATCH\\\",\\n+
        \   DEBUG: \\\"DEBUG\\\",\\n+    NOTSET: \\\"NOTSET\\\",\\n+}\\n+\\n+NAME_TO_LEVEL
        = {\\n+    \\\"CRITICAL\\\": CRITICAL,\\n+    \\\"FATAL\\\": FATAL,\\n+    \\\"ERROR\\\":
        ERROR,\\n+    \\\"WARN\\\": WARNING,\\n+    \\\"WARNING\\\": WARNING,\\n+
        \   \\\"INFO\\\": INFO,\\n+    \\\"MATCH\\\": MATCH,\\n+    \\\"DEBUG\\\":
        DEBUG,\\n+    \\\"NOTSET\\\": NOTSET,\\n+}\\n+\\n+THEME = Theme(\\n+    {\\n+
        \       \\\"bar.back\\\": \\\"grey23\\\",\\n+        \\\"bar.complete\\\":
        \\\"rgb(165,66,129)\\\",\\n+        \\\"bar.finished\\\": \\\"rgb(114,156,31)\\\",\\n+
        \       \\\"bar.pulse\\\": \\\"rgb(165,66,129)\\\",\\n+        \\\"general\\\":
        \\\"green\\\",\\n+        \\\"nonimportant\\\": \\\"rgb(40,100,40)\\\",\\n+
        \       \\\"progress.data.speed\\\": \\\"red\\\",\\n+        \\\"progress.description\\\":
        \\\"none\\\",\\n+        \\\"progress.download\\\": \\\"green\\\",\\n+        \\\"progress.filesize\\\":
        \\\"green\\\",\\n+        \\\"progress.filesize.total\\\": \\\"green\\\",\\n+
        \       \\\"progress.percentage\\\": \\\"green\\\",\\n+        \\\"progress.remaining\\\":
        \\\"rgb(40,100,40)\\\",\\n+        \\\"logging.level.debug\\\": \\\"blue\\\",\\n+
        \       \\\"logging.level.info\\\": \\\"green\\\",\\n+        \\\"logging.level.warning\\\":
        \\\"yellow\\\",\\n+        \\\"logging.level.error\\\": \\\"red\\\",\\n+        \\\"logging.level.critical\\\":
        \\\"bold red\\\",\\n+    }\\n+)\\n+\\n+\\n+class SpotdlFormatter(logging.Formatter):\\n+
        \   \\\"\\\"\\\"\\n+    A custom logger for spotdl.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   def format(self, record: logging.LogRecord) -> str:\\n+        \\\"\\\"\\\"\\n+
        \       Format a log record.\\n+        \\\"\\\"\\\"\\n+\\n+        result
        = escape(super().format(record))\\n+\\n+        msg = result\\n+        if
        record.levelno == DEBUG:\\n+            msg = f\\\"[blue]{result}\\\"\\n+\\n+
        \       if record.levelno == MATCH:\\n+            msg = f\\\"[magenta]{result}\\\"\\n+\\n+
        \       if record.levelno == INFO:\\n+            msg = f\\\"[green]{result}\\\"\\n+\\n+
        \       if record.levelno == WARNING:\\n+            msg = f\\\"[yellow]{result}\\\"\\n+\\n+
        \       if record.levelno == ERROR:\\n+            msg = f\\\"[red]{result}\\\"\\n+\\n+
        \       if record.levelno == CRITICAL:\\n+            msg = f\\\"[bold red]{result}\\\"\\n+\\n+
        \       return msg\\n+\\n+\\n+class SpotdlHandler(RichHandler):\\n+    \\\"\\\"\\\"\\n+
        \   A custom logging handler for spotdl.\\n+    In this case, it's just a
        wrapper around the rich handler.\\n+    To not highlight keywords in info
        messages\\n+    \\\"\\\"\\\"\\n+\\n+    def render_message(\\n+        self,
        record: logging.LogRecord, message: str\\n+    ) -> \\\"ConsoleRenderable\\\":\\n+
        \       \\\"\\\"\\\"Render message text in to Text.\\n+\\n+        ### Arguments\\n+
        \       - record: logging Record.\\n+        - message: String containing
        log message.\\n+\\n+        ### Returns\\n+        - ConsoleRenderable: Renderable
        to display log message.\\n+        \\\"\\\"\\\"\\n+\\n+        use_markup
        = getattr(record, \\\"markup\\\", self.markup)\\n+        message_text = Text.from_markup(message)
        if use_markup else Text(message)\\n+\\n+        highlighter = getattr(record,
        \\\"highlighter\\\", self.highlighter)\\n+\\n+        # Don't highlight info
        messages\\n+        if highlighter and record.levelno != INFO:\\n+            message_text
        = highlighter(message_text)\\n+\\n+        if self.keywords is None:\\n+            self.keywords
        = self.KEYWORDS\\n+\\n+        # Don't highlight keywords in info messages\\n+
        \       if self.keywords and record.levelno != INFO:\\n+            message_text.highlight_words(self.keywords,
        \\\"logging.keyword\\\")\\n+\\n+        return message_text\\n+\\n+\\n+def
        init_logging(log_level: str, log_format: Optional[str] = None):\\n+    \\\"\\\"\\\"\\n+
        \   Initialize logging for spotdl.\\n+\\n+    ### Arguments\\n+    - `console`:
        The console to use.\\n+    - `log_level`: The log level to use.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Don't log too much\\n+    logging.getLogger(\\\"requests\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"urllib3\\\").setLevel(logging.WARNING)\\n+    logging.getLogger(\\\"spotipy\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"asyncio\\\").setLevel(logging.WARNING)\\n+    logging.getLogger(\\\"syncedlyrics\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"bandcamp_api\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"beautifulsoup4\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"pytube\\\").setLevel(logging.ERROR)\\n+\\n+    #
        Create console\\n+    console = get_console()\\n+    console.push_theme(THEME)\\n+\\n+
        \   # Add matching level loggers\\n+    logging.addLevelName(MATCH, \\\"MATCH\\\")\\n+\\n+
        \   # Create a rich handler\\n+    rich_handler = SpotdlHandler(\\n+        show_time=log_level
        == \\\"DEBUG\\\",\\n+        log_time_format=\\\"[%X]\\\",\\n+        omit_repeated_times=False,\\n+
        \       console=console,\\n+        level=log_level,\\n+        markup=True,\\n+
        \       show_path=log_level == \\\"DEBUG\\\",\\n+        show_level=log_level
        == \\\"DEBUG\\\",\\n+        rich_tracebacks=True,\\n+    )\\n+\\n+    msg_format
        = \\\"%(message)s\\\"\\n+    if log_format is None:\\n+        if log_level
        == \\\"DEBUG\\\":\\n+            msg_format = \\\"%(threadName)s - %(message)s\\\"\\n+
        \   else:\\n+        msg_format = log_format\\n+\\n+    # Add rich handler
        to spotdl logger\\n+    rich_handler.setFormatter(SpotdlFormatter(msg_format))\\n+\\n+
        \   # Create spotdl logger\\n+    spotdl_logger = logging.getLogger(\\\"spotdl\\\")\\n+\\n+
        \   # Setup spotdl logger\\n+    spotdl_logger.setLevel(log_level)\\n+    spotdl_logger.addHandler(rich_handler)\\n+\\n+
        \   # Install rich traceback handler\\n+    install(show_locals=False, extra_lines=1,
        console=console)\"},{\"sha\":\"d493f5bc05bd4ff4f24ba74c8b8cf03d2740770e\",\"filename\":\"spotdl/utils/lrc.py\",\"status\":\"added\",\"additions\":39,\"deletions\":0,\"changes\":39,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Flrc.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Flrc.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Flrc.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,39 @@\\n+\\\"\\\"\\\"\\n+LRC related functions\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+from pathlib import Path\\n+\\n+from syncedlyrics import search
        as syncedlyrics_search\\n+from syncedlyrics.utils import is_lrc_valid, save_lrc_file\\n+\\n+from
        spotdl.types.song import Song\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+__all__
        = [\\\"generate_lrc\\\"]\\n+\\n+\\n+def generate_lrc(song: Song, output_file:
        Path):\\n+    \\\"\\\"\\\"\\n+    Generates an LRC file for the current song\\n+\\n+
        \   ### Arguments\\n+    - song: Song object\\n+    - output_file: Path to
        the output file\\n+    \\\"\\\"\\\"\\n+\\n+    if song.lyrics and is_lrc_valid(song.lyrics):\\n+
        \       lrc_data = song.lyrics\\n+    else:\\n+        try:\\n+            lrc_data
        = syncedlyrics_search(song.display_name)\\n+        except Exception:\\n+
        \           lrc_data = None\\n+\\n+    if lrc_data:\\n+        save_lrc_file(str(output_file.with_suffix(\\\".lrc\\\")),
        lrc_data)\\n+        logger.debug(\\\"Saved lrc file for %s\\\", song.display_name)\\n+
        \   else:\\n+        logger.debug(\\\"No lrc file found for %s\\\", song.display_name)\"},{\"sha\":\"4e18ad5596de1d5e22a7cc53277dbb3601ac3dd0\",\"filename\":\"spotdl/utils/m3u.py\",\"status\":\"added\",\"additions\":188,\"deletions\":0,\"changes\":188,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fm3u.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fm3u.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fm3u.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,188 @@\\n+\\\"\\\"\\\"\\n+Module for creating m3u content and writing
        it to a file.\\n+\\\"\\\"\\\"\\n+\\n+from typing import Dict, List, Optional\\n+\\n+from
        spotdl.types.song import Song\\n+from spotdl.utils.formatter import create_file_name\\n+\\n+__all__
        = [\\n+    \\\"create_m3u_content\\\",\\n+    \\\"gen_m3u_files\\\",\\n+    \\\"create_m3u_file\\\",\\n+]\\n+\\n+\\n+def
        create_m3u_content(\\n+    song_list: List[Song],\\n+    template: str,\\n+
        \   file_extension: str,\\n+    restrict: Optional[str] = None,\\n+    short:
        bool = False,\\n+    detect_formats: Optional[List[str]] = None,\\n+) -> str:\\n+
        \   \\\"\\\"\\\"\\n+    Create m3u content and return it as a string.\\n+\\n+
        \   ### Arguments\\n+    - song_list: the list of songs\\n+    - template:
        the template to use\\n+    - file_extension: the file extension to use\\n+
        \   - restrict: sanitization to apply to the filename\\n+    - short: whether
        to use the short version of the template\\n+\\n+    ### Returns\\n+    - the
        m3u content as a string\\n+    \\\"\\\"\\\"\\n+\\n+    text = \\\"\\\"\\n+
        \   for song in song_list:\\n+        if not detect_formats:\\n+            file_name
        = create_file_name(\\n+                song, template, file_extension, restrict,
        short\\n+            )\\n+\\n+            text += str(file_name) + \\\"\\\\n\\\"\\n+
        \       else:\\n+            for file_ext in detect_formats:\\n+                file_name
        = create_file_name(song, template, file_ext, restrict, short)\\n+                if
        file_name.exists():\\n+                    text += str(file_name) + \\\"\\\\n\\\"\\n+
        \                   break\\n+            else:\\n+                file_name
        = create_file_name(\\n+                    song, template, file_extension,
        restrict, short\\n+                )\\n+\\n+                text += str(file_name)
        + \\\"\\\\n\\\"\\n+\\n+    return text\\n+\\n+\\n+def gen_m3u_files(\\n+    songs:
        List[Song],\\n+    file_name: Optional[str],\\n+    template: str,\\n+    file_extension:
        str,\\n+    restrict: Optional[str] = None,\\n+    short: bool = False,\\n+
        \   detect_formats: Optional[List[str]] = None,\\n+):\\n+    \\\"\\\"\\\"\\n+
        \   Create an m3u8 filename from the query.\\n+\\n+    ### Arguments\\n+    -
        query: the query\\n+    - file_name: the file name to use\\n+    - song_list:
        the list of songs\\n+    - template: the output file template to use\\n+    -
        file_extension: the file extension to use\\n+    - restrict: sanitization
        to apply to the filename\\n+    - short: whether to use the short version
        of the template\\n+    - detect_formats: the formats to detect\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # If no file name is provided, use the first list's name\\n+    if not
        file_name:\\n+        file_name = \\\"{list[0]}.m3u8\\\"\\n+\\n+    # If file_name
        ends with a slash. Does not have a m3u8 name with extension\\n+    # at the
        end of the template, append `{list[0]}`` to it\\n+    if (\\n+        file_name.endswith(\\\"/\\\")\\n+
        \       or file_name.endswith(r\\\"\\\\\\\\\\\")\\n+        or file_name.endswith(\\\"\\\\\\\\\\\\\\\\\\\")\\n+
        \   ):\\n+        file_name += \\\"/{list[0]}.m3u8\\\"\\n+\\n+    # Check
        if the file name ends with .m3u or .m3u8\\n+    if not file_name.endswith(\\\".m3u\\\")
        and not file_name.endswith(\\\".m3u8\\\"):\\n+        file_name += \\\".m3u8\\\"\\n+\\n+
        \   lists_object: Dict[str, List[Song]] = {}\\n+    for song in songs:\\n+
        \       if song.list_name is None:\\n+            continue\\n+\\n+        if
        song.list_name not in lists_object:\\n+            lists_object[song.list_name]
        = []\\n+\\n+        lists_object[song.list_name].append(song)\\n+\\n+    if
        \\\"{list}\\\" in file_name:\\n+        # Create multiple m3u files if there
        are multiple lists\\n+        for list_name, song_list in lists_object.items():\\n+
        \           create_m3u_file(\\n+                file_name.format(\\n+                    list=list_name,\\n+
        \               ),\\n+                song_list,\\n+                template,\\n+
        \               file_extension,\\n+                restrict,\\n+                short,\\n+
        \               detect_formats,\\n+            )\\n+    elif \\\"{list[\\\"
        in file_name and \\\"]}\\\" in file_name:\\n+        # Create a single m3u
        file for specified song list name\\n+        create_m3u_file(\\n+            file_name.format(list=list(lists_object.keys())),\\n+
        \           songs,\\n+            template,\\n+            file_extension,\\n+
        \           restrict,\\n+            short,\\n+            detect_formats,\\n+
        \       )\\n+    else:\\n+        # Use the provided file name\\n+        create_m3u_file(\\n+
        \           file_name,\\n+            songs,\\n+            template,\\n+
        \           file_extension,\\n+            restrict,\\n+            short,\\n+
        \           detect_formats,\\n+        )\\n+\\n+\\n+def create_m3u_file(\\n+
        \   file_name: str,\\n+    song_list: List[Song],\\n+    template: str,\\n+
        \   file_extension: str,\\n+    restrict: Optional[str] = None,\\n+    short:
        bool = False,\\n+    detect_formats: Optional[List[str]] = None,\\n+) -> str:\\n+
        \   \\\"\\\"\\\"\\n+    Create the m3u file.\\n+\\n+    ### Arguments\\n+
        \   - file_name: the file name to use\\n+    - song_list: the list of songs\\n+
        \   - template: the template to use\\n+    - file_extension: the file extension
        to use\\n+    - restrict: sanitization to apply to the filename\\n+    - short:
        whether to use the short version of the template\\n+    - detect_formats:
        the formats to detect\\n+\\n+    ### Returns\\n+    - the m3u content as a
        string\\n+    \\\"\\\"\\\"\\n+\\n+    m3u_content = create_m3u_content(\\n+
        \       song_list,\\n+        template,\\n+        file_extension,\\n+        restrict,\\n+
        \       short,\\n+        detect_formats,\\n+    )\\n+\\n+    with open(file_name,
        \\\"w\\\", encoding=\\\"utf-8\\\") as m3u_file:\\n+        m3u_file.write(m3u_content)\\n+\\n+
        \   return m3u_content\"},{\"sha\":\"f12b08894922b2b72dd479bde12c95f0e3b88093\",\"filename\":\"spotdl/utils/matching.py\",\"status\":\"added\",\"additions\":809,\"deletions\":0,\"changes\":809,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fmatching.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fmatching.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fmatching.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,809 @@\\n+\\\"\\\"\\\"\\n+Module for all things matching related\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+from itertools import product, zip_longest\\n+from typing import
        Dict, List, Optional, Tuple\\n+\\n+from spotdl.types.result import Result\\n+from
        spotdl.types.song import Song\\n+from spotdl.utils.formatter import (\\n+
        \   create_search_query,\\n+    create_song_title,\\n+    ratio,\\n+    slugify,\\n+)\\n+from
        spotdl.utils.logging import MATCH\\n+\\n+__all__ = [\\n+    \\\"FORBIDDEN_WORDS\\\",\\n+
        \   \\\"fill_string\\\",\\n+    \\\"create_clean_string\\\",\\n+    \\\"sort_string\\\",\\n+
        \   \\\"based_sort\\\",\\n+    \\\"check_common_word\\\",\\n+    \\\"check_forbidden_words\\\",\\n+
        \   \\\"create_match_strings\\\",\\n+    \\\"get_best_matches\\\",\\n+    \\\"calc_main_artist_match\\\",\\n+
        \   \\\"calc_artists_match\\\",\\n+    \\\"artists_match_fixup1\\\",\\n+    \\\"artists_match_fixup2\\\",\\n+
        \   \\\"artists_match_fixup3\\\",\\n+    \\\"calc_name_match\\\",\\n+    \\\"calc_time_match\\\",\\n+
        \   \\\"calc_album_match\\\",\\n+]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+FORBIDDEN_WORDS
        = [\\n+    \\\"bassboosted\\\",\\n+    \\\"remix\\\",\\n+    \\\"remastered\\\",\\n+
        \   \\\"remaster\\\",\\n+    \\\"reverb\\\",\\n+    \\\"bassboost\\\",\\n+
        \   \\\"live\\\",\\n+    \\\"acoustic\\\",\\n+    \\\"8daudio\\\",\\n+    \\\"concert\\\",\\n+
        \   \\\"live\\\",\\n+    \\\"acapella\\\",\\n+    \\\"slowed\\\",\\n+    \\\"instrumental\\\",\\n+
        \   \\\"remix\\\",\\n+    \\\"cover\\\",\\n+    \\\"reverb\\\",\\n+]\\n+\\n+\\n+def
        debug(song_id: str, result_id: str, message: str) -> None:\\n+    \\\"\\\"\\\"\\n+
        \   Log a message with MATCH level\\n+\\n+    ### Arguments\\n+    - message:
        message to log\\n+    \\\"\\\"\\\"\\n+\\n+    logger.log(MATCH, \\\"[%s|%s]
        %s\\\", song_id, result_id, message)\\n+\\n+\\n+def fill_string(strings: List[str],
        main_string: str, string_to_check: str) -> str:\\n+    \\\"\\\"\\\"\\n+    Create
        a string with strings from `strings` list\\n+    if they are not yet present
        in main_string\\n+    but are present in string_to_check\\n+\\n+    ### Arguments\\n+
        \   - strings: strings to check\\n+    - main_string: string to add strings
        to\\n+    - string_to_check: string to check if strings are present in\\n+\\n+
        \   ### Returns\\n+    - string with strings from `strings` list\\n+    \\\"\\\"\\\"\\n+\\n+
        \   final_str = main_string\\n+    test_str = final_str.replace(\\\"-\\\",
        \\\"\\\")\\n+    simple_test_str = string_to_check.replace(\\\"-\\\", \\\"\\\")\\n+
        \   for string in strings:\\n+        slug_str = slugify(string).replace(\\\"-\\\",
        \\\"\\\")\\n+\\n+        if slug_str in simple_test_str and slug_str not in
        test_str:\\n+            final_str += f\\\"-{slug_str}\\\"\\n+            test_str
        += slug_str\\n+\\n+    return final_str\\n+\\n+\\n+def create_clean_string(\\n+
        \   words: List[str], string: str, sort: bool = False, join_str: str = \\\"-\\\"\\n+)
        -> str:\\n+    \\\"\\\"\\\"\\n+    Create a string with strings from `words`
        list\\n+    if they are not yet present in `string`\\n+\\n+    ### Arguments\\n+
        \   - words: strings to check\\n+    - string: string to check if strings
        are present in\\n+    - sort: sort strings in list\\n+    - join_str: string
        to join strings with\\n+\\n+    ### Returns\\n+    - string with strings from
        `words` list\\n+    \\\"\\\"\\\"\\n+\\n+    string = slugify(string).replace(\\\"-\\\",
        \\\"\\\")\\n+\\n+    final = []\\n+    for word in words:\\n+        word
        = slugify(word).replace(\\\"-\\\", \\\"\\\")\\n+\\n+        if word in string:\\n+
        \           continue\\n+\\n+        final.append(word)\\n+\\n+    if sort:\\n+
        \       return sort_string(final, join_str)\\n+\\n+    return f\\\"{join_str}\\\".join(final)\\n+\\n+\\n+def
        sort_string(strings: List[str], join_str: str) -> str:\\n+    \\\"\\\"\\\"\\n+
        \   Sort strings in list and join them with `join` string\\n+\\n+    ### Arguments\\n+
        \   - strings: strings to sort\\n+    - join: string to join strings with\\n+\\n+
        \   ### Returns\\n+    - joined sorted string\\n+    \\\"\\\"\\\"\\n+\\n+
        \   final_str = strings\\n+    final_str.sort()\\n+\\n+    return f\\\"{join_str}\\\".join(final_str)\\n+\\n+\\n+def
        based_sort(strings: List[str], based_on: List[str]) -> Tuple[List[str], List[str]]:\\n+
        \   \\\"\\\"\\\"\\n+    Sort strings in list based on the order of strings
        in `based_on` list\\n+\\n+    ### Arguments\\n+    - strings: strings to sort\\n+
        \   - based_on: strings to sort `strings` list based on\\n+\\n+    ### Returns\\n+
        \   - sorted list of strings\\n+    \\\"\\\"\\\"\\n+\\n+    strings.sort()\\n+
        \   based_on.sort()\\n+\\n+    list_map = {value: index for index, value in
        enumerate(based_on)}\\n+\\n+    strings = sorted(\\n+        strings,\\n+
        \       key=lambda x: list_map.get(x, -1),\\n+        reverse=True,\\n+    )\\n+\\n+
        \   based_on.reverse()\\n+\\n+    return strings, based_on\\n+\\n+\\n+def
        check_common_word(song: Song, result: Result) -> bool:\\n+    \\\"\\\"\\\"\\n+
        \   Check if a word is present in a sentence\\n+\\n+    ### Arguments\\n+
        \   - song: song to match\\n+    - result: result to match\\n+\\n+    ###
        Returns\\n+    - True if word is present in sentence, False otherwise\\n+
        \   \\\"\\\"\\\"\\n+\\n+    sentence_words = slugify(song.name).split(\\\"-\\\")\\n+
        \   to_check = slugify(result.name).replace(\\\"-\\\", \\\"\\\")\\n+\\n+    for
        word in sentence_words:\\n+        if word != \\\"\\\" and word in to_check:\\n+
        \           return True\\n+\\n+    return False\\n+\\n+\\n+def check_forbidden_words(song:
        Song, result: Result) -> Tuple[bool, List[str]]:\\n+    \\\"\\\"\\\"\\n+    Check
        if a forbidden word is present in the result name\\n+\\n+    ### Arguments\\n+
        \   - song: song to match\\n+    - result: result to match\\n+\\n+    ###
        Returns\\n+    - True if forbidden word is present in result name, False otherwise\\n+
        \   \\\"\\\"\\\"\\n+\\n+    song_name = slugify(song.name).replace(\\\"-\\\",
        \\\"\\\")\\n+    to_check = slugify(result.name).replace(\\\"-\\\", \\\"\\\")\\n+\\n+
        \   words = []\\n+    for word in FORBIDDEN_WORDS:\\n+        if word in to_check
        and word not in song_name:\\n+            words.append(word)\\n+\\n+    return
        len(words) > 0, words\\n+\\n+\\n+def create_match_strings(\\n+    song: Song,
        result: Result, search_query: Optional[str] = None\\n+) -> Tuple[str, str]:\\n+
        \   \\\"\\\"\\\"\\n+    Create strings based on song and result to match\\n+
        \   fill strings with missing artists\\n+\\n+    ### Arguments\\n+    - song:
        song to match\\n+    - result: result to match\\n+\\n+    ### Returns\\n+
        \   - tuple of strings to match\\n+    \\\"\\\"\\\"\\n+\\n+    slug_song_name
        = slugify(song.name)\\n+    slug_song_title = slugify(\\n+        create_song_title(song.name,
        song.artists)\\n+        if not search_query\\n+        else create_search_query(song,
        search_query, False, None, True)\\n+    )\\n+\\n+    test_str1 = slugify(result.name)\\n+
        \   test_str2 = slug_song_name if result.verified else slug_song_title\\n+\\n+
        \   # Fill strings with missing artists\\n+    test_str1 = fill_string(song.artists,
        test_str1, test_str2)\\n+    test_str2 = fill_string(song.artists, test_str2,
        test_str1)\\n+\\n+    # Sort both strings and then join them\\n+    test_list1,
        test_list2 = based_sort(test_str1.split(\\\"-\\\"), test_str2.split(\\\"-\\\"))\\n+
        \   test_str1, test_str2 = \\\"-\\\".join(test_list1), \\\"-\\\".join(test_list2)\\n+\\n+
        \   return test_str1, test_str2\\n+\\n+\\n+def get_best_matches(\\n+    results:
        Dict[Result, float], score_threshold: float\\n+) -> List[Tuple[Result, float]]:\\n+
        \   \\\"\\\"\\\"\\n+    Get best matches from a list of results\\n+\\n+    ###
        Arguments\\n+    - results: list of results to match\\n+    - score_threshold:
        threshold to match results\\n+\\n+    ### Returns\\n+    - list of best matches\\n+
        \   \\\"\\\"\\\"\\n+\\n+    result_items = list(results.items())\\n+\\n+    #
        Sort results by highest score\\n+    sorted_results = sorted(result_items,
        key=lambda x: x[1], reverse=True)\\n+\\n+    best_score = sorted_results[0][1]\\n+\\n+
        \   return [\\n+        result\\n+        for result in sorted_results\\n+
        \       if (best_score - result[1]) <= score_threshold\\n+    ]\\n+\\n+\\n+def
        calc_main_artist_match(song: Song, result: Result) -> float:\\n+    \\\"\\\"\\\"\\n+
        \   Check if main artist is present in list of artists\\n+\\n+    ### Arguments\\n+
        \   - main_artist: main artist to check\\n+    - artists: list of artists
        to check\\n+\\n+    ### Returns\\n+    - True if main artist is present in
        list of artists, False otherwise\\n+    \\\"\\\"\\\"\\n+\\n+    main_artist_match
        = 0.0\\n+\\n+    # Result has no artists, return 0.0\\n+    if not result.artists:\\n+
        \       return main_artist_match\\n+\\n+    song_artists, result_artists =
        list(map(slugify, song.artists)), list(\\n+        map(slugify, result.artists)\\n+
        \   )\\n+    sorted_song_artists, sorted_result_artists = based_sort(\\n+
        \       song_artists, result_artists\\n+    )\\n+\\n+    debug(song.song_id,
        result.result_id, f\\\"Song artists: {sorted_song_artists}\\\")\\n+    debug(song.song_id,
        result.result_id, f\\\"Result artists: {sorted_result_artists}\\\")\\n+\\n+
        \   slug_song_main_artist = slugify(song.artists[0])\\n+    slug_result_main_artist
        = sorted_result_artists[0]\\n+\\n+    # Result has only one artist, but song
        has multiple artists\\n+    # we can assume that other artists are in the
        main artist name\\n+    if len(song.artists) > 1 and len(result.artists) ==
        1:\\n+        for artist in map(slugify, song.artists[1:]):\\n+            artist
        = sort_string(slugify(artist).split(\\\"-\\\"), \\\"-\\\")\\n+\\n+            res_main_artist
        = sort_string(slug_result_main_artist.split(\\\"-\\\"), \\\"-\\\")\\n+\\n+
        \           if artist in res_main_artist:\\n+                main_artist_match
        += 100 / len(song.artists)\\n+\\n+        return main_artist_match\\n+\\n+
        \   # Match main result artist with main song artist\\n+    main_artist_match
        = ratio(slug_song_main_artist, slug_result_main_artist)\\n+\\n+    debug(\\n+
        \       song.song_id, result.result_id, f\\\"First main artist match: {main_artist_match}\\\"\\n+
        \   )\\n+\\n+    # Use second artist from the sorted list to\\n+    # calculate
        the match if the first artist match is too low\\n+    if main_artist_match
        < 50 and len(song_artists) > 1:\\n+        for song_artist, result_artist
        in product(\\n+            song_artists[:2], sorted_result_artists[:2]\\n+
        \       ):\\n+            new_artist_match = ratio(song_artist, result_artist)\\n+
        \           debug(\\n+                song.song_id,\\n+                result.result_id,\\n+
        \               f\\\"Matched {song_artist} with {result_artist}: {new_artist_match}\\\",\\n+
        \           )\\n+\\n+            if new_artist_match > main_artist_match:\\n+
        \               main_artist_match = new_artist_match\\n+\\n+    return main_artist_match\\n+\\n+\\n+def
        calc_artists_match(song: Song, result: Result) -> float:\\n+    \\\"\\\"\\\"\\n+
        \   Check if all artists are present in list of artists\\n+\\n+    ### Arguments\\n+
        \   - song: song to match\\n+    - result: result to match\\n+\\n+    ###
        Returns\\n+    - artists match percentage\\n+    \\\"\\\"\\\"\\n+\\n+    artist_match_number
        = 0.0\\n+\\n+    # Result has only one artist, return 0.0\\n+    if len(song.artists)
        == 1 or not result.artists:\\n+        return artist_match_number\\n+\\n+
        \   artist1_list, artist2_list = based_sort(\\n+        list(map(slugify,
        song.artists)), list(map(slugify, result.artists))\\n+    )\\n+\\n+    # Remove
        main artist from the lists\\n+    artist1_list, artist2_list = artist1_list[1:],
        artist2_list[1:]\\n+\\n+    artists_match = 0.0\\n+    for artist1, artist2
        in zip_longest(artist1_list, artist2_list):\\n+        artist12_match = ratio(artist1,
        artist2)\\n+        artists_match += artist12_match\\n+\\n+    artist_match_number
        = artists_match / len(artist1_list)\\n+\\n+    return artist_match_number\\n+\\n+\\n+def
        artists_match_fixup1(song: Song, result: Result, score: float) -> float:\\n+
        \   \\\"\\\"\\\"\\n+    Multiple fixes to the artists score for\\n+    not
        verified results to improve the accuracy\\n+\\n+    ### Arguments\\n+    -
        song: song to match\\n+    - result: result to match\\n+    - score: current
        score\\n+\\n+    ### Returns\\n+    - new score\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # If we have a verified result, we don't have to fix anything\\n+    if
        result.verified or score > 50:\\n+        return score\\n+\\n+    # If we
        didn't find any artist match,\\n+    # we fallback to channel name match\\n+
        \   channel_name_match = ratio(\\n+        slugify(song.artist),\\n+        slugify(\\\",
        \\\".join(result.artists)) if result.artists else \\\"\\\",\\n+    )\\n+\\n+
        \   if channel_name_match > score:\\n+        score = channel_name_match\\n+\\n+
        \   # If artist match is still too low,\\n+    # we fallback to matching all
        song artist names\\n+    # with the result's title\\n+    if score <= 70:\\n+
        \       artist_title_match = 0.0\\n+        result_name = slugify(result.name).replace(\\\"-\\\",
        \\\"\\\")\\n+        for artist in song.artists:\\n+            slug_artist
        = slugify(artist).replace(\\\"-\\\", \\\"\\\")\\n+\\n+            if slug_artist
        in result_name:\\n+                artist_title_match += 1.0\\n+\\n+        artist_title_match
        = (artist_title_match / len(song.artists)) * 100\\n+\\n+        if artist_title_match
        > score:\\n+            score = artist_title_match\\n+\\n+    return score\\n+\\n+\\n+def
        artists_match_fixup2(\\n+    song: Song, result: Result, score: float, search_query:
        Optional[str] = None\\n+) -> float:\\n+    \\\"\\\"\\\"\\n+    Multiple fixes
        to the artists score for\\n+    verified results to improve the accuracy\\n+\\n+
        \   ### Arguments\\n+    - song: song to match\\n+    - result: result to
        match\\n+    - score: current score\\n+\\n+    ### Returns\\n+    - new score\\n+
        \   \\\"\\\"\\\"\\n+\\n+    if score > 70 or not result.verified:\\n+        #
        Don't fixup the score\\n+        # if the artist match is already high\\n+
        \       # or if the result is not verified\\n+        return score\\n+\\n+
        \   # Slugify some variables\\n+    slug_song_name = slugify(song.name)\\n+
        \   slug_result_name = slugify(result.name)\\n+\\n+    # # Check if the main
        artist is simlar\\n+    has_main_artist = (score / (2 if len(song.artists)
        > 1 else 1)) > 50\\n+\\n+    _, match_str2 = create_match_strings(song, result,
        search_query)\\n+\\n+    # Check if other song artists are in the result name\\n+
        \   # if they are, we increase the artist match\\n+    # (main artist is already
        checked, so we skip it)\\n+    artists_to_check = song.artists[int(has_main_artist)
        :]\\n+    for artist in artists_to_check:\\n+        artist = slugify(artist).replace(\\\"-\\\",
        \\\"\\\")\\n+        if artist in match_str2.replace(\\\"-\\\", \\\"\\\"):\\n+
        \           score += 5\\n+\\n+    # if the artist match is still too low,\\n+
        \   # we fallback to matching all song artist names\\n+    # with the result's
        artists\\n+    if score <= 70:\\n+        # Artists from song/result name
        without the song/result name words\\n+        artist_list1 = create_clean_string(song.artists,
        slug_song_name, True)\\n+        artist_list2 = create_clean_string(\\n+            list(result.artists)
        if result.artists else [result.author],\\n+            slug_result_name,\\n+
        \           True,\\n+        )\\n+\\n+        artist_title_match = ratio(artist_list1,
        artist_list2)\\n+\\n+        if artist_title_match > score:\\n+            score
        = artist_title_match\\n+\\n+    return score\\n+\\n+\\n+def artists_match_fixup3(song:
        Song, result: Result, score: float) -> float:\\n+    \\\"\\\"\\\"\\n+    Calculate
        match percentage based result's name\\n+    and song's title if the result
        has exactly one artist\\n+    and the song has more than one artist\\n+\\n+
        \   ### Arguments\\n+    - song: song to match\\n+    - result: result to
        match\\n+    - score: current score\\n+\\n+    ### Returns\\n+    - new score\\n+
        \   \\\"\\\"\\\"\\n+\\n+    if (\\n+        score > 70\\n+        or not result.artists\\n+
        \       or len(result.artists) > 1\\n+        or len(song.artists) == 1\\n+
        \   ):\\n+        # Don't fixup the score\\n+        # if the score is already
        high\\n+        # or if the result has more than one artist\\n+        # or
        if the song has only one artist\\n+        return score\\n+\\n+    artists_score_fixup
        = ratio(\\n+        slugify(result.name),\\n+        slugify(create_song_title(song.name,
        [song.artist])),\\n+    )\\n+\\n+    if artists_score_fixup >= 80:\\n+        score
        = (score + artists_score_fixup) / 2\\n+\\n+    # Make sure that the score
        is not higher than 100\\n+    score = min(score, 100)\\n+\\n+    return score\\n+\\n+\\n+def
        calc_name_match(\\n+    song: Song, result: Result, search_query: Optional[str]
        = None\\n+) -> float:\\n+    \\\"\\\"\\\"\\n+    Calculate name match percentage\\n+\\n+
        \   ### Arguments\\n+    - song: song to match\\n+    - result: result to
        match\\n+\\n+    ### Returns\\n+    - name match percentage\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Create match strings that will be used\\n+    # to calculate name match
        value\\n+    match_str1, match_str2 = create_match_strings(song, result, search_query)\\n+
        \   result_name, song_name = slugify(result.name), slugify(song.name)\\n+\\n+
        \   res_list, song_list = based_sort(result_name.split(\\\"-\\\"), song_name.split(\\\"-\\\"))\\n+
        \   result_name, song_name = \\\"-\\\".join(res_list), \\\"-\\\".join(song_list)\\n+\\n+
        \   # Calculate initial name match\\n+    name_match = ratio(result_name,
        song_name)\\n+\\n+    debug(song.song_id, result.result_id, f\\\"MATCH STRINGS:
        {match_str1} - {match_str2}\\\")\\n+    debug(\\n+        song.song_id,\\n+
        \       result.result_id,\\n+        f\\\"SLUG MATCH STRINGS: {song_name}
        - {result_name}\\\",\\n+    )\\n+    debug(song.song_id, result.result_id,
        f\\\"First name match: {name_match}\\\")\\n+\\n+    # If name match is lower
        than 60%,\\n+    # we try to match using the test strings\\n+    if name_match
        <= 75:\\n+        second_name_match = ratio(\\n+            match_str1,\\n+
        \           match_str2,\\n+        )\\n+\\n+        debug(\\n+            song.song_id,\\n+
        \           result.result_id,\\n+            f\\\"Second name match: {second_name_match}\\\",\\n+
        \       )\\n+\\n+        if second_name_match > name_match:\\n+            name_match
        = second_name_match\\n+\\n+    return name_match\\n+\\n+\\n+def calc_time_match(song:
        Song, result: Result) -> float:\\n+    \\\"\\\"\\\"\\n+    Calculate time
        difference between song and result\\n+\\n+    ### Arguments\\n+    - song:
        song to match\\n+    - result: result to match\\n+\\n+    ### Returns\\n+
        \   - time difference between song and result\\n+    \\\"\\\"\\\"\\n+\\n+
        \   if result.duration > song.duration:\\n+        return 100 - (result.duration
        - song.duration)\\n+\\n+    return 100 - (song.duration - result.duration)\\n+\\n+\\n+def
        calc_album_match(song: Song, result: Result) -> float:\\n+    \\\"\\\"\\\"\\n+
        \   Calculate album match percentage\\n+\\n+    ### Arguments\\n+    - song:
        song to match\\n+    - result: result to match\\n+\\n+    ### Returns\\n+
        \   - album match percentage\\n+    \\\"\\\"\\\"\\n+\\n+    if not result.album:\\n+
        \       return 0.0\\n+\\n+    return ratio(slugify(song.album_name), slugify(result.album))\\n+\\n+\\n+def
        order_results(\\n+    results: List[Result],\\n+    song: Song,\\n+    search_query:
        Optional[str] = None,\\n+) -> Dict[Result, float]:\\n+    \\\"\\\"\\\"\\n+
        \   Order results.\\n+\\n+    ### Arguments\\n+    - results: The results
        to order.\\n+    - song: The song to order for.\\n+    - search_query: The
        search query.\\n+\\n+    ### Returns\\n+    - The ordered results.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Assign an overall avg match value to each result\\n+    links_with_match_value
        = {}\\n+\\n+    # Iterate over all results\\n+    for result in results:\\n+
        \       debug(\\n+            song.song_id,\\n+            result.result_id,\\n+
        \           f\\\"Calculating match value for {result.url} - {result.json}\\\",\\n+
        \       )\\n+\\n+        # skip results that have no common words in their
        name\\n+        if not check_common_word(song, result):\\n+            debug(\\n+
        \               song.song_id, result.result_id, \\\"Skipping result due to
        no common words\\\"\\n+            )\\n+\\n+            continue\\n+\\n+        #
        Calculate match value for main artist\\n+        artists_match = calc_main_artist_match(song,
        result)\\n+        debug(song.song_id, result.result_id, f\\\"Main artist
        match: {artists_match}\\\")\\n+\\n+        # Calculate match value for all
        artists\\n+        other_artists_match = calc_artists_match(song, result)\\n+
        \       debug(\\n+            song.song_id,\\n+            result.result_id,\\n+
        \           f\\\"Other artists match: {other_artists_match}\\\",\\n+        )\\n+\\n+
        \       artists_match += other_artists_match\\n+\\n+        # Calculate initial
        artist match value\\n+        debug(song.song_id, result.result_id, f\\\"Initial
        artists match: {artists_match}\\\")\\n+        artists_match = artists_match
        / (2 if len(song.artists) > 1 else 1)\\n+        debug(song.song_id, result.result_id,
        f\\\"First artists match: {artists_match}\\\")\\n+\\n+        # # First attempt
        to fix artist match\\n+        artists_match = artists_match_fixup1(song,
        result, artists_match)\\n+        debug(\\n+            song.song_id,\\n+
        \           result.result_id,\\n+            f\\\"Artists match after fixup1:
        {artists_match}\\\",\\n+        )\\n+\\n+        # Second attempt to fix artist
        match\\n+        artists_match = artists_match_fixup2(song, result, artists_match)\\n+
        \       debug(\\n+            song.song_id,\\n+            result.result_id,\\n+
        \           f\\\"Artists match after fixup2: {artists_match}\\\",\\n+        )\\n+\\n+
        \       # Third attempt to fix artist match\\n+        artists_match = artists_match_fixup3(song,
        result, artists_match)\\n+        debug(\\n+            song.song_id,\\n+
        \           result.result_id,\\n+            f\\\"Artists match after fixup3:
        {artists_match}\\\",\\n+        )\\n+\\n+        debug(song.song_id, result.result_id,
        f\\\"Final artists match: {artists_match}\\\")\\n+\\n+        # Calculate
        name match\\n+        name_match = calc_name_match(song, result, search_query)\\n+
        \       debug(song.song_id, result.result_id, f\\\"Initial name match: {name_match}\\\")\\n+\\n+
        \       # Check if result contains forbidden words\\n+        contains_fwords,
        found_fwords = check_forbidden_words(song, result)\\n+        if contains_fwords:\\n+
        \           for _ in found_fwords:\\n+                name_match -= 15\\n+\\n+
        \       debug(\\n+            song.song_id,\\n+            result.result_id,\\n+
        \           f\\\"Contains forbidden words: {contains_fwords}, {found_fwords}\\\",\\n+
        \       )\\n+        debug(song.song_id, result.result_id, f\\\"Final name
        match: {name_match}\\\")\\n+\\n+        # Calculate album match\\n+        album_match
        = calc_album_match(song, result)\\n+        debug(song.song_id, result.result_id,
        f\\\"Final album match: {album_match}\\\")\\n+\\n+        # Calculate time
        match\\n+        time_match = calc_time_match(song, result)\\n+        debug(song.song_id,
        result.result_id, f\\\"Final time match: {time_match}\\\")\\n+\\n+        #
        Ignore results with name match lower than 60%\\n+        if name_match <=
        60:\\n+            debug(\\n+                song.song_id,\\n+                result.result_id,\\n+
        \               \\\"Skipping result due to name match lower than 60%\\\",\\n+
        \           )\\n+            continue\\n+\\n+        # Ignore results with
        artists match lower than 70%\\n+        if artists_match < 70 and result.source
        != \\\"slider.kz\\\":\\n+            debug(\\n+                song.song_id,\\n+
        \               result.result_id,\\n+                \\\"Skipping result due
        to artists match lower than 70%\\\",\\n+            )\\n+            continue\\n+\\n+
        \       # Calculate total match\\n+        average_match = (artists_match
        + name_match) / 2\\n+        debug(song.song_id, result.result_id, f\\\"Average
        match: {average_match}\\\")\\n+\\n+        if (\\n+            result.verified\\n+
        \           and not result.isrc_search\\n+            and result.album\\n+
        \           and album_match <= 80\\n+        ):\\n+            # we are almost
        certain that this is the correct result\\n+            # so we add the album
        match to the average match\\n+            average_match = (average_match +
        album_match) / 2\\n+            debug(\\n+                song.song_id,\\n+
        \               result.result_id,\\n+                f\\\"Average match /w
        album match: {average_match}\\\",\\n+            )\\n+\\n+        # If the
        time match is lower than 50%\\n+        # and the average match is lower than
        75%\\n+        # we skip the result\\n+        if time_match < 50 and average_match
        < 75:\\n+            debug(\\n+                song.song_id,\\n+                result.result_id,\\n+
        \               \\\"Skipping result due to time match < 50% and average match
        < 75%\\\",\\n+            )\\n+            continue\\n+\\n+        if (\\n+
        \           (not result.isrc_search and average_match <= 85)\\n+            or
        result.source == \\\"slider.kz\\\"\\n+            or time_match < 0\\n+        ):\\n+
        \           # Don't add time to avg match if average match is not the best\\n+
        \           # (lower than 85%), always include time match if result is from\\n+
        \           # slider.kz or if time match is lower than 0\\n+            average_match
        = (average_match + time_match) / 2\\n+\\n+            debug(\\n+                song.song_id,\\n+
        \               result.result_id,\\n+                f\\\"Average match /w
        time match: {average_match}\\\",\\n+            )\\n+\\n+        average_match
        = min(average_match, 100)\\n+        debug(song.song_id, result.result_id,
        f\\\"Final average match: {average_match}\\\")\\n+\\n+        # the results
        along with the avg Match\\n+        links_with_match_value[result] = average_match\\n+\\n+
        \   return links_with_match_value\"},{\"sha\":\"43c9fd42ac7671989afe4493863ffbf1042643ef\",\"filename\":\"spotdl/utils/metadata.py\",\"status\":\"added\",\"additions\":628,\"deletions\":0,\"changes\":628,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fmetadata.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fmetadata.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fmetadata.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,628 @@\\n+\\\"\\\"\\\"\\n+Module for embedding metadata into audio
        files using Mutagen.\\n+\\n+```python\\n+embed_metadata(\\n+    output_file=Path(\\\"test.mp3\\\"),\\n+
        \   song=song_object,\\n+    file_format=\\\"mp3\\\",\\n+)\\n+```\\n+\\\"\\\"\\\"\\n+\\n+import
        base64\\n+import logging\\n+import re\\n+from pathlib import Path\\n+from
        typing import Any, Dict, Optional\\n+\\n+import requests\\n+from mutagen._file
        import File\\n+from mutagen.flac import Picture\\n+from mutagen.id3 import
        ID3\\n+from mutagen.id3._frames import (\\n+    APIC,\\n+    COMM,\\n+    POPM,\\n+
        \   SYLT,\\n+    TALB,\\n+    TCOM,\\n+    TCON,\\n+    TCOP,\\n+    TDRC,\\n+
        \   TIT2,\\n+    TPE1,\\n+    TRCK,\\n+    USLT,\\n+    WOAS,\\n+)\\n+from
        mutagen.id3._specs import Encoding\\n+from mutagen.mp4 import MP4Cover\\n+from
        mutagen.wave import WAVE\\n+\\n+from spotdl.types.song import Song\\n+from
        spotdl.utils.config import GlobalConfig\\n+from spotdl.utils.formatter import
        to_ms\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+__all__ = [\\n+    \\\"MetadataError\\\",\\n+
        \   \\\"M4A_TAG_PRESET\\\",\\n+    \\\"MP3_TAG_PRESET\\\",\\n+    \\\"TAG_PRESET\\\",\\n+
        \   \\\"TAG_TO_SONG\\\",\\n+    \\\"M4A_TO_SONG\\\",\\n+    \\\"MP3_TO_SONG\\\",\\n+
        \   \\\"LRC_REGEX\\\",\\n+    \\\"embed_metadata\\\",\\n+    \\\"embed_cover\\\",\\n+
        \   \\\"embed_lyrics\\\",\\n+    \\\"get_file_metadata\\\",\\n+]\\n+\\n+\\n+class
        MetadataError(Exception):\\n+    \\\"\\\"\\\"\\n+    Base class for all exceptions
        related to metadata and id3 embedding.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+# Apple
        has specific tags - see mutagen docs -\\n+# http://mutagen.readthedocs.io/en/latest/api/mp4.html\\n+M4A_TAG_PRESET
        = {\\n+    \\\"album\\\": \\\"\\\\xa9alb\\\",\\n+    \\\"artist\\\": \\\"\\\\xa9ART\\\",\\n+
        \   \\\"date\\\": \\\"\\\\xa9day\\\",\\n+    \\\"title\\\": \\\"\\\\xa9nam\\\",\\n+
        \   \\\"year\\\": \\\"\\\\xa9day\\\",\\n+    \\\"comment\\\": \\\"\\\\xa9cmt\\\",\\n+
        \   \\\"group\\\": \\\"\\\\xa9grp\\\",\\n+    \\\"writer\\\": \\\"\\\\xa9wrt\\\",\\n+
        \   \\\"genre\\\": \\\"\\\\xa9gen\\\",\\n+    \\\"tracknumber\\\": \\\"trkn\\\",\\n+
        \   \\\"albumartist\\\": \\\"aART\\\",\\n+    \\\"discnumber\\\": \\\"disk\\\",\\n+
        \   \\\"cpil\\\": \\\"cpil\\\",\\n+    \\\"albumart\\\": \\\"covr\\\",\\n+
        \   \\\"encodedby\\\": \\\"\\\\xa9too\\\",\\n+    \\\"copyright\\\": \\\"cprt\\\",\\n+
        \   \\\"tempo\\\": \\\"tmpo\\\",\\n+    \\\"lyrics\\\": \\\"\\\\xa9lyr\\\",\\n+
        \   \\\"explicit\\\": \\\"rtng\\\",\\n+    \\\"woas\\\": \\\"----:spotdl:WOAS\\\",\\n+
        \   \\\"isrc\\\": \\\"----:spotdl:ISRC\\\",\\n+}\\n+\\n+MP3_TAG_PRESET = {\\n+
        \   \\\"album\\\": \\\"TALB\\\",\\n+    \\\"artist\\\": \\\"TPE1\\\",\\n+
        \   \\\"date\\\": \\\"TDRC\\\",\\n+    \\\"title\\\": \\\"TIT2\\\",\\n+    \\\"year\\\":
        \\\"TDRC\\\",\\n+    \\\"comment\\\": \\\"COMM::XXX\\\",\\n+    \\\"group\\\":
        \\\"TIT1\\\",\\n+    \\\"writer\\\": \\\"TEXT\\\",\\n+    \\\"genre\\\": \\\"TCON\\\",\\n+
        \   \\\"tracknumber\\\": \\\"TRCK\\\",\\n+    \\\"albumartist\\\": \\\"TPE2\\\",\\n+
        \   \\\"discnumber\\\": \\\"TPOS\\\",\\n+    \\\"cpil\\\": \\\"TCMP\\\",\\n+
        \   \\\"albumart\\\": \\\"APIC\\\",\\n+    \\\"encodedby\\\": \\\"TENC\\\",\\n+
        \   \\\"copyright\\\": \\\"TCOP\\\",\\n+    \\\"tempo\\\": \\\"TBPM\\\",\\n+
        \   \\\"lyrics\\\": \\\"USLT::XXX\\\",\\n+    \\\"woas\\\": \\\"WOAS\\\",\\n+
        \   \\\"isrc\\\": \\\"ISRC\\\",\\n+    \\\"explicit\\\": \\\"NULL\\\",\\n+}\\n+\\n+TAG_PRESET
        = {key: key for key in M4A_TAG_PRESET}\\n+\\n+TAG_TO_SONG = {\\n+    \\\"title\\\":
        \\\"name\\\",\\n+    \\\"artist\\\": \\\"artists\\\",\\n+    \\\"album\\\":
        \\\"album_name\\\",\\n+    \\\"albumartist\\\": \\\"album_artist\\\",\\n+
        \   \\\"genre\\\": \\\"genres\\\",\\n+    \\\"discnumber\\\": \\\"disc_number\\\",\\n+
        \   \\\"year\\\": \\\"year\\\",\\n+    \\\"date\\\": \\\"date\\\",\\n+    \\\"tracknumber\\\":
        \\\"track_number\\\",\\n+    \\\"encodedby\\\": \\\"publisher\\\",\\n+    \\\"woas\\\":
        \\\"url\\\",\\n+    \\\"comment\\\": \\\"download_url\\\",\\n+    \\\"isrc\\\":
        \\\"isrc\\\",\\n+    \\\"copyright\\\": \\\"copyright_text\\\",\\n+    \\\"lyrics\\\":
        \\\"lyrics\\\",\\n+    \\\"albumart\\\": \\\"album_art\\\",\\n+}\\n+\\n+M4A_TO_SONG
        = {\\n+    value: TAG_TO_SONG.get(key)\\n+    for key, value in M4A_TAG_PRESET.items()\\n+
        \   if TAG_TO_SONG.get(key)\\n+}\\n+MP3_TO_SONG = {\\n+    value: TAG_TO_SONG.get(key)\\n+
        \   for key, value in MP3_TAG_PRESET.items()\\n+    if TAG_TO_SONG.get(key)\\n+}\\n+\\n+LRC_REGEX
        = re.compile(r\\\"(\\\\[\\\\d{2}:\\\\d{2}.\\\\d{2,3}\\\\])\\\")\\n+\\n+\\n+def
        embed_metadata(output_file: Path, song: Song, id3_separator: str = \\\"/\\\"):\\n+
        \   \\\"\\\"\\\"\\n+    Set ID3 tags for generic files (FLAC, OPUS, OGG)\\n+\\n+
        \   ### Arguments\\n+    - output_file: Path to the output file.\\n+    -
        song: Song object.\\n+    \\\"\\\"\\\"\\n+\\n+    # Get the file extension
        for the output file\\n+    encoding = output_file.suffix[1:]\\n+\\n+    if
        encoding == \\\"wav\\\":\\n+        embed_wav_file(output_file, song)\\n+
        \       return\\n+\\n+    # Get the tag preset for the file extension\\n+
        \   tag_preset = TAG_PRESET if encoding != \\\"m4a\\\" else M4A_TAG_PRESET\\n+\\n+
        \   try:\\n+        audio_file = File(str(output_file.resolve()), easy=encoding
        == \\\"mp3\\\")\\n+\\n+        if audio_file is None:\\n+            raise
        MetadataError(\\n+                f\\\"Unrecognized file format for {output_file}
        from {song.url}\\\"\\n+            )\\n+    except Exception as exc:\\n+        raise
        MetadataError(\\\"Unable to load file.\\\") from exc\\n+\\n+    # Embed basic
        metadata\\n+    audio_file[tag_preset[\\\"artist\\\"]] = song.artists\\n+
        \   audio_file[tag_preset[\\\"albumartist\\\"]] = (\\n+        song.album_artist
        if song.album_artist else song.artist\\n+    )\\n+    audio_file[tag_preset[\\\"title\\\"]]
        = song.name\\n+    audio_file[tag_preset[\\\"date\\\"]] = song.date\\n+    audio_file[tag_preset[\\\"encodedby\\\"]]
        = song.publisher\\n+\\n+    # Embed metadata that isn't always present\\n+
        \   album_name = song.album_name\\n+    if album_name:\\n+        audio_file[tag_preset[\\\"album\\\"]]
        = album_name\\n+\\n+    if song.genres:\\n+        audio_file[tag_preset[\\\"genre\\\"]]
        = song.genres[0].title()\\n+\\n+    if song.copyright_text:\\n+        audio_file[tag_preset[\\\"copyright\\\"]]
        = song.copyright_text\\n+\\n+    if song.download_url and encoding != \\\"mp3\\\":\\n+
        \       audio_file[tag_preset[\\\"comment\\\"]] = song.download_url\\n+\\n+
        \   # Embed some metadata in format specific ways\\n+    if encoding in [\\\"flac\\\",
        \\\"ogg\\\", \\\"opus\\\"]:\\n+        # Zero fill the disc and track numbers\\n+
        \       zfilled_disc_number = str(song.disc_number).zfill(len(str(song.disc_count)))\\n+
        \       zfilled_track_number = str(song.track_number).zfill(len(str(song.tracks_count)))\\n+\\n+
        \       audio_file[tag_preset[\\\"discnumber\\\"]] = zfilled_disc_number\\n+
        \       audio_file[tag_preset[\\\"tracknumber\\\"]] = zfilled_track_number\\n+
        \       audio_file[tag_preset[\\\"woas\\\"]] = song.url\\n+        audio_file[tag_preset[\\\"isrc\\\"]]
        = song.isrc\\n+    elif encoding == \\\"m4a\\\":\\n+        audio_file[tag_preset[\\\"discnumber\\\"]]
        = [(song.disc_number, song.disc_count)]\\n+        audio_file[tag_preset[\\\"tracknumber\\\"]]
        = [(song.track_number, song.tracks_count)]\\n+        audio_file[tag_preset[\\\"explicit\\\"]]
        = (4 if song.explicit is True else 2,)\\n+        audio_file[tag_preset[\\\"woas\\\"]]
        = song.url.encode(\\\"utf-8\\\")\\n+    elif encoding == \\\"mp3\\\":\\n+
        \       audio_file[\\\"tracknumber\\\"] = f\\\"{str(song.track_number)}/{str(song.tracks_count)}\\\"\\n+
        \       audio_file[\\\"discnumber\\\"] = f\\\"{str(song.disc_number)}/{str(song.disc_count)}\\\"\\n+\\n+
        \   # Mp3 specific encoding\\n+    if encoding == \\\"mp3\\\":\\n+        if
        id3_separator != \\\"/\\\":\\n+            audio_file.save(v23_sep=id3_separator,
        v2_version=3)\\n+        else:\\n+            audio_file.save(v2_version=3)\\n+\\n+
        \       audio_file = ID3(str(output_file.resolve()))\\n+\\n+        audio_file.add(WOAS(encoding=3,
        url=song.url))\\n+\\n+        if song.download_url:\\n+            audio_file.add(COMM(encoding=3,
        text=song.download_url))\\n+\\n+        if song.popularity:\\n+            audio_file.add(\\n+
        \               POPM(\\n+                    rating=int(song.popularity *
        255 / 100),\\n+                )\\n+            )\\n+\\n+    # Embed album
        art\\n+    audio_file = embed_cover(audio_file, song, encoding)\\n+\\n+    #
        Embed lyrics\\n+    audio_file = embed_lyrics(audio_file, song, encoding)\\n+\\n+
        \   # Mp3 specific encoding\\n+    if encoding == \\\"mp3\\\":\\n+        audio_file.save(v23_sep=id3_separator,
        v2_version=3)\\n+    else:\\n+        audio_file.save()\\n+\\n+\\n+def embed_cover(audio_file,
        song: Song, encoding: str):\\n+    \\\"\\\"\\\"\\n+    Embed the album art
        in the audio file.\\n+\\n+    ### Arguments\\n+    - audio_file: Audio file
        object.\\n+    - song: Song object.\\n+    \\\"\\\"\\\"\\n+\\n+    if not
        song.cover_url:\\n+        return audio_file\\n+\\n+    # Try to download
        the cover art\\n+    try:\\n+        cover_data = requests.get(\\n+            song.cover_url,\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       ).content\\n+    except Exception:\\n+        return audio_file\\n+\\n+
        \   # Create the image object for the file type\\n+    if encoding in [\\\"flac\\\",
        \\\"ogg\\\", \\\"opus\\\"]:\\n+        picture = Picture()\\n+        picture.type
        = 3\\n+        picture.desc = \\\"Cover\\\"\\n+        picture.mime = \\\"image/jpeg\\\"\\n+
        \       picture.data = cover_data\\n+\\n+        if encoding in [\\\"ogg\\\",
        \\\"opus\\\"]:\\n+            image_data = picture.write()\\n+            encoded_data
        = base64.b64encode(image_data)\\n+            vcomment_value = encoded_data.decode(\\\"ascii\\\")\\n+
        \           audio_file[\\\"metadata_block_picture\\\"] = [vcomment_value]\\n+
        \       elif encoding == \\\"flac\\\":\\n+            audio_file.add_picture(picture)\\n+
        \   elif encoding == \\\"m4a\\\":\\n+        audio_file[M4A_TAG_PRESET[\\\"albumart\\\"]]
        = [\\n+            MP4Cover(\\n+                cover_data,\\n+                imageformat=MP4Cover.FORMAT_JPEG,\\n+
        \           )\\n+        ]\\n+    elif encoding == \\\"mp3\\\":\\n+        audio_file[\\\"APIC\\\"]
        = APIC(\\n+            encoding=3,\\n+            mime=\\\"image/jpeg\\\",\\n+
        \           type=3,\\n+            desc=\\\"Cover\\\",\\n+            data=cover_data,\\n+
        \       )\\n+\\n+    return audio_file\\n+\\n+\\n+def embed_lyrics(audio_file,
        song: Song, encoding: str):\\n+    \\\"\\\"\\\"\\n+    Detect lyrics type
        (lrc or txt) and embed them in the audio file.\\n+\\n+    ### Arguments\\n+
        \   - audio_file: Audio file object.\\n+    - song: Song object.\\n+    -
        encoding: Encoding type.\\n+    \\\"\\\"\\\"\\n+\\n+    lyrics = song.lyrics\\n+
        \   if not lyrics:\\n+        return audio_file\\n+\\n+    tag_preset = TAG_PRESET
        if encoding != \\\"m4a\\\" else M4A_TAG_PRESET\\n+\\n+    # Check if the lyrics
        are in lrc format\\n+    # using regex on the first 5 lines\\n+    lrc_lines
        = lyrics.splitlines()[:5]\\n+    lrc_lines = [line for line in lrc_lines if
        line and LRC_REGEX.match(line)]\\n+\\n+    if len(lrc_lines) == 0:\\n+        #
        Lyrics are not in lrc format\\n+        # Embed them normally\\n+        if
        encoding == \\\"mp3\\\":\\n+            audio_file.add(USLT(encoding=Encoding.UTF8,
        text=song.lyrics))\\n+        else:\\n+            audio_file[tag_preset[\\\"lyrics\\\"]]
        = song.lyrics\\n+    else:\\n+        # Lyrics are in lrc format\\n+        #
        Embed them as SYLT id3 tag\\n+        if encoding == \\\"mp3\\\":\\n+            lrc_data
        = []\\n+            for line in lyrics.splitlines():\\n+                time_tag
        = line.split(\\\"]\\\", 1)[0] + \\\"]\\\"\\n+                text = line.replace(time_tag,
        \\\"\\\")\\n+\\n+                time_tag = time_tag.replace(\\\"[\\\", \\\"\\\")\\n+
        \               time_tag = time_tag.replace(\\\"]\\\", \\\"\\\")\\n+                time_tag
        = time_tag.replace(\\\".\\\", \\\":\\\")\\n+                time_tag_vals
        = time_tag.split(\\\":\\\")\\n+                if len(time_tag_vals) != 3
        or any(\\n+                    not isinstance(tag, int) for tag in time_tag_vals\\n+
        \               ):\\n+                    continue\\n+\\n+                minute,
        sec, millisecond = time_tag_vals\\n+                time = to_ms(min=minute,
        sec=sec, ms=millisecond)\\n+                lrc_data.append((text, time))\\n+\\n+
        \           audio_file.add(USLT(encoding=3, text=song.lyrics))\\n+            audio_file.add(SYLT(encoding=3,
        text=lrc_data, format=2, type=1))\\n+        else:\\n+            audio_file[tag_preset[\\\"lyrics\\\"]]
        = song.lyrics\\n+\\n+    return audio_file\\n+\\n+\\n+def get_file_metadata(path:
        Path, id3_separator: str = \\\"/\\\") -> Optional[Dict[str, Any]]:\\n+    \\\"\\\"\\\"\\n+
        \   Get song metadata.\\n+\\n+    ### Arguments\\n+    - path: Path to the
        song.\\n+\\n+    ### Returns\\n+    - Dict of song metadata.\\n+\\n+    ###
        Raises\\n+    - OSError: If the file is not found.\\n+    - MetadataError:
        If the file is not a valid audio file.\\n+    \\\"\\\"\\\"\\n+\\n+    if path.exists()
        is False:\\n+        raise OSError(f\\\"File not found: {path}\\\")\\n+\\n+
        \   audio_file = File(str(path.resolve()))\\n+\\n+    if audio_file is None
        or audio_file == {}:\\n+        return None\\n+\\n+    song_meta: Dict[str,
        Any] = {}\\n+    for key in TAG_PRESET:\\n+        if path.suffix == \\\".m4a\\\":\\n+
        \           val = audio_file.get(M4A_TAG_PRESET[key])\\n+        elif path.suffix
        == \\\".mp3\\\":\\n+            val = audio_file.get(MP3_TAG_PRESET[key])\\n+
        \       else:\\n+            val = audio_file.get(key)\\n+\\n+        # Cover
        art is a special case and\\n+        # has to be handled before checking the
        val\\n+        # M4A is handled in the m4a section since it\\n+        # has
        data in the val variable\\n+        if key == \\\"albumart\\\":\\n+            if
        path.suffix == \\\".mp3\\\":\\n+                cover = audio_file.get(\\\"APIC:Cover\\\")\\n+
        \               if cover:\\n+                    song_meta[\\\"album_art\\\"]
        = cover.data\\n+                else:\\n+                    song_meta[\\\"album_art\\\"]
        = None\\n+\\n+                continue\\n+\\n+            if path.suffix ==
        \\\".flac\\\":\\n+                song_meta[\\\"album_art\\\"] = audio_file.pictures[0].data\\n+
        \               continue\\n+\\n+            if path.suffix in [\\\".ogg\\\",
        \\\".opus\\\"]:\\n+                pictures = audio_file.get(\\\"metadata_block_picture\\\")\\n+
        \               if pictures and pictures[0]:\\n+                    song_meta[\\\"album_art\\\"]
        = pictures[0]\\n+                else:\\n+                    song_meta[\\\"album_art\\\"]
        = None\\n+\\n+                continue\\n+\\n+        # If the tag is empty,
        skip it\\n+        if val is None:\\n+            # If the tag is empty but
        it's key is in the\\n+            # song object, set it to None\\n+            empty_key
        = TAG_TO_SONG.get(key)\\n+            if empty_key:\\n+                song_meta[empty_key]
        = None\\n+\\n+            continue\\n+\\n+        # MP3 specific decoding\\n+
        \       if path.suffix == \\\".mp3\\\":\\n+            if key == \\\"woas\\\":\\n+
        \               song_meta[\\\"url\\\"] = val.url\\n+            elif key ==
        \\\"comment\\\":\\n+                song_meta[\\\"download_url\\\"] = val.text[0]\\n+
        \           elif key == \\\"year\\\":\\n+                song_meta[\\\"year\\\"]
        = int(str(val.text[0])[:4])\\n+            elif key == \\\"date\\\":\\n+                song_meta[\\\"date\\\"]
        = str(val.text[0])\\n+            elif key == \\\"tracknumber\\\":\\n+                count
        = val.text[0].split(id3_separator)\\n+                if len(count) == 2:\\n+
        \                   song_meta[\\\"track_number\\\"] = int(count[0])\\n+                    song_meta[\\\"tracks_count\\\"]
        = int(count[1])\\n+                else:\\n+                    song_meta[\\\"track_number\\\"]
        = val.text[0]\\n+            elif key == \\\"discnumber\\\":\\n+                count
        = val.text[0].split(id3_separator)\\n+                if len(count) == 2:\\n+
        \                   song_meta[\\\"disc_number\\\"] = int(count[0])\\n+                    song_meta[\\\"disc_count\\\"]
        = int(count[1])\\n+                else:\\n+                    song_meta[\\\"disc_number\\\"]
        = val.text[0]\\n+            elif key == \\\"artist\\\":\\n+                artists_val:
        str = (\\n+                    val.text[0] if isinstance(val.text, list) else
        val.text\\n+                )\\n+                song_meta[\\\"artists\\\"]
        = artists_val.split(id3_separator)\\n+            else:\\n+                meta_key
        = TAG_TO_SONG.get(key)\\n+                if meta_key:\\n+                    song_meta[meta_key]
        = (\\n+                        val.text[0]\\n+                        if isinstance(val.text,
        list) and len(val.text) == 1\\n+                        else val.text\\n+
        \                   )\\n+\\n+        # M4A specific decoding\\n+        elif
        path.suffix == \\\".m4a\\\":\\n+            if key == \\\"artist\\\":\\n+
        \               song_meta[\\\"artists\\\"] = val\\n+            elif key ==
        \\\"woas\\\":\\n+                song_meta[\\\"url\\\"] = val[0].decode(\\\"utf-8\\\")\\n+
        \           elif key == \\\"explicit\\\":\\n+                song_meta[\\\"explicit\\\"]
        = val == [4] if val else None\\n+            elif key == \\\"year\\\":\\n+
        \               song_meta[\\\"year\\\"] = int(str(val[0])[:4])\\n+            elif
        key == \\\"discnumber\\\":\\n+                song_meta[\\\"disc_number\\\"]
        = val[0][0]\\n+                song_meta[\\\"disc_count\\\"] = val[0][1]\\n+
        \           elif key == \\\"tracknumber\\\":\\n+                song_meta[\\\"track_number\\\"]
        = val[0][0]\\n+                song_meta[\\\"tracks_count\\\"] = val[0][1]\\n+
        \           else:\\n+                meta_key = TAG_TO_SONG.get(key)\\n+                if
        meta_key:\\n+                    song_meta[meta_key] = (\\n+                        val[0]
        if isinstance(val, list) and len(val) == 1 else val\\n+                    )\\n+\\n+
        \       # FLAC, OGG, OPUS specific decoding\\n+        else:\\n+            if
        key == \\\"artist\\\":\\n+                song_meta[\\\"artists\\\"] = val\\n+
        \           elif key == \\\"tracknumber\\\":\\n+                song_meta[\\\"track_number\\\"]
        = int(val[0])\\n+            elif key == \\\"discnumber\\\":\\n+                song_meta[\\\"disc_count\\\"]
        = int(val[0])\\n+                song_meta[\\\"disc_number\\\"] = int(val[0])\\n+
        \           else:\\n+                meta_key = TAG_TO_SONG.get(key)\\n+                if
        meta_key:\\n+                    song_meta[meta_key] = (\\n+                        val[0]
        if isinstance(val, list) and len(val) == 1 else val\\n+                    )\\n+\\n+
        \   # Make sure that artists is a list\\n+    if isinstance(song_meta[\\\"artists\\\"],
        str):\\n+        song_meta[\\\"artists\\\"] = [song_meta[\\\"artists\\\"]]\\n+
        \   elif song_meta[\\\"artists\\\"] is not None:\\n+        song_meta[\\\"artists\\\"]
        = list(song_meta[\\\"artists\\\"])\\n+    else:\\n+        song_meta[\\\"artists\\\"]
        = []\\n+\\n+    # Make sure that genres is a list\\n+    if isinstance(song_meta[\\\"genres\\\"],
        str):\\n+        song_meta[\\\"genres\\\"] = [song_meta[\\\"genres\\\"]]\\n+\\n+
        \   # Add main artist to the song meta object\\n+    if song_meta[\\\"artists\\\"]:\\n+
        \       song_meta[\\\"artist\\\"] = song_meta[\\\"artists\\\"][0]\\n+    else:\\n+
        \       song_meta[\\\"artist\\\"] = None\\n+\\n+    return song_meta\\n+\\n+\\n+def
        embed_wav_file(output_file: Path, song: Song):\\n+    \\\"\\\"\\\"\\n+    Embeds
        the song metadata into the wav file\\n+\\n+    ### Arguments\\n+    - output_file:
        The output file path\\n+    - song: The song object\\n+    - id3_separator:
        The separator used for the id3 tags\\n+    \\\"\\\"\\\"\\n+    audio = WAVE(output_file)\\n+
        \   if audio is None:\\n+        raise ValueError(\\\"Invalid audio file\\\")\\n+\\n+
        \   if audio.tags:\\n+        audio.tags.clear()\\n+\\n+    audio.add_tags()\\n+\\n+
        \   audio.tags.add(TIT2(encoding=3, text=song.name))  # type: ignore\\n+    audio.tags.add(TPE1(encoding=3,
        text=song.artists))  # type: ignore\\n+    audio.tags.add(TALB(encoding=3,
        text=song.album_name))  # type: ignore\\n+    audio.tags.add(TCOM(encoding=3,
        text=song.publisher))  # type: ignore\\n+    audio.tags.add(TCON(encoding=3,
        text=song.genres))  # type: ignore\\n+    audio.tags.add(TDRC(encoding=3,
        text=song.date))  # type: ignore\\n+    audio.tags.add(  # type: ignore\\n+
        \       TRCK(encoding=3, text=f\\\"{song.track_number}/{song.tracks_count}\\\")
        \ # type: ignore\\n+    )\\n+    audio.tags.add(TDRC(encoding=3, text=song.date))
        \ # type: ignore\\n+    audio.tags.add(WOAS(encoding=3, text=song.url))  #
        type: ignore\\n+\\n+    if song.download_url:\\n+        audio.tags.add(COMM(encoding=3,
        text=song.download_url))  # type: ignore\\n+\\n+    if song.copyright_text:\\n+
        \       audio.tags.add(TCOP(encoding=3, text=song.copyright_text))  # type:
        ignore\\n+\\n+    if song.popularity:\\n+        audio.tags.add(  # type:
        ignore\\n+            COMM(\\n+                encoding=3,\\n+                lang=\\\"eng\\\",\\n+
        \               text=\\\"Spotify Popularity: \\\" + str(song.popularity),\\n+
        \           )\\n+        )\\n+\\n+    if song.cover_url:\\n+        try:\\n+
        \           cover_data = requests.get(song.cover_url, timeout=10).content\\n+
        \           audio.tags.add(  # type: ignore\\n+                APIC(\\n+                    encoding=3,
        mime=\\\"image/jpeg\\\", type=3, desc=\\\"Cover\\\", data=cover_data\\n+                )\\n+
        \           )\\n+        except Exception:\\n+            pass\\n+\\n+    if
        song.lyrics:\\n+        # Check if the lyrics are in lrc format\\n+        #
        using regex on the first 5 lines\\n+        lrc_lines = song.lyrics.splitlines()[:5]\\n+
        \       lrc_lines = [line for line in lrc_lines if line and LRC_REGEX.match(line)]\\n+\\n+
        \       if len(lrc_lines) == 0:\\n+            audio.tags.add(USLT(encoding=Encoding.UTF8,
        text=song.lyrics))  # type: ignore\\n+        else:\\n+            lrc_data
        = []\\n+            for line in song.lyrics.splitlines():\\n+                time_tag
        = line.split(\\\"]\\\", 1)[0] + \\\"]\\\"\\n+                text = line.replace(time_tag,
        \\\"\\\")\\n+\\n+                time_tag = time_tag.replace(\\\"[\\\", \\\"\\\")\\n+
        \               time_tag = time_tag.replace(\\\"]\\\", \\\"\\\")\\n+                time_tag
        = time_tag.replace(\\\".\\\", \\\":\\\")\\n+                time_tag_vals
        = time_tag.split(\\\":\\\")\\n+                if len(time_tag_vals) != 3
        or any(\\n+                    not isinstance(tag, int) for tag in time_tag_vals\\n+
        \               ):\\n+                    continue\\n+\\n+                minute,
        sec, millisecond = time_tag_vals\\n+                time = to_ms(min=minute,
        sec=sec, ms=millisecond)\\n+                lrc_data.append((text, time))\\n+\\n+
        \           audio.tags.add(USLT(encoding=3, text=song.lyrics))  # type: ignore\\n+
        \           audio.tags.add(SYLT(encoding=3, text=lrc_data, format=2, type=1))
        \ # type: ignore\\n+\\n+    audio.save()\"},{\"sha\":\"6497cd6be7b181ac61f510e9a88dad15a0f74cdd\",\"filename\":\"spotdl/utils/search.py\",\"status\":\"added\",\"additions\":664,\"deletions\":0,\"changes\":664,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fsearch.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fsearch.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fsearch.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,664 @@\\n+\\\"\\\"\\\"\\n+Module for creating Song objects by interacting
        with Spotify API\\n+or by parsing a query.\\n+\\n+To use this module you must
        first initialize the SpotifyClient.\\n+\\\"\\\"\\\"\\n+\\n+import concurrent.futures\\n+import
        json\\n+import logging\\n+import re\\n+from pathlib import Path\\n+from typing
        import Dict, List, Optional\\n+\\n+import requests\\n+from ytmusicapi import
        YTMusic\\n+\\n+from spotdl.types.album import Album\\n+from spotdl.types.artist
        import Artist\\n+from spotdl.types.playlist import Playlist\\n+from spotdl.types.saved
        import Saved\\n+from spotdl.types.song import Song, SongList\\n+from spotdl.utils.metadata
        import get_file_metadata\\n+from spotdl.utils.spotify import SpotifyClient,
        SpotifyError\\n+\\n+__all__ = [\\n+    \\\"QueryError\\\",\\n+    \\\"get_search_results\\\",\\n+
        \   \\\"parse_query\\\",\\n+    \\\"get_simple_songs\\\",\\n+    \\\"reinit_song\\\",\\n+
        \   \\\"get_song_from_file_metadata\\\",\\n+    \\\"gather_known_songs\\\",\\n+
        \   \\\"create_ytm_album\\\",\\n+    \\\"create_ytm_playlist\\\",\\n+    \\\"get_all_user_playlists\\\",\\n+
        \   \\\"get_user_saved_albums\\\",\\n+]\\n+\\n+logger = logging.getLogger(__name__)\\n+client
        = None  # pylint: disable=invalid-name\\n+\\n+\\n+def get_ytm_client() ->
        YTMusic:\\n+    \\\"\\\"\\\"\\n+    Lazily initialize the YTMusic client.\\n+\\n+
        \   ### Returns\\n+    - the YTMusic client\\n+    \\\"\\\"\\\"\\n+\\n+    global
        client  # pylint: disable=global-statement\\n+    if client is None:\\n+        client
        = YTMusic()\\n+\\n+    return client\\n+\\n+\\n+class QueryError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to query.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+def get_search_results(search_term: str) -> List[Song]:\\n+
        \   \\\"\\\"\\\"\\n+    Creates a list of Song objects from a search term.\\n+\\n+
        \   ### Arguments\\n+    - search_term: the search term to use\\n+\\n+    ###
        Returns\\n+    - a list of Song objects\\n+    \\\"\\\"\\\"\\n+\\n+    return
        Song.list_from_search_term(search_term)\\n+\\n+\\n+def parse_query(\\n+    query:
        List[str],\\n+    threads: int = 1,\\n+    use_ytm_data: bool = False,\\n+
        \   playlist_numbering: bool = False,\\n+) -> List[Song]:\\n+    \\\"\\\"\\\"\\n+
        \   Parse query and return list containing song object\\n+\\n+    ### Arguments\\n+
        \   - query: List of strings containing query\\n+    - threads: Number of
        threads to use\\n+\\n+    ### Returns\\n+    - List of song objects\\n+    \\\"\\\"\\\"\\n+\\n+
        \   songs: List[Song] = get_simple_songs(\\n+        query, use_ytm_data=use_ytm_data,
        playlist_numbering=playlist_numbering\\n+    )\\n+\\n+    results = []\\n+
        \   with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:\\n+
        \       future_to_song = {executor.submit(reinit_song, song): song for song
        in songs}\\n+        for future in concurrent.futures.as_completed(future_to_song):\\n+
        \           song = future_to_song[future]\\n+            try:\\n+                results.append(future.result())\\n+
        \           except Exception as exc:\\n+                logger.error(\\\"%s
        generated an exception: %s\\\", song.display_name, exc)\\n+\\n+    return
        results\\n+\\n+\\n+def get_simple_songs(\\n+    query: List[str],\\n+    use_ytm_data:
        bool = False,\\n+    playlist_numbering: bool = False,\\n+    albums_to_ignore=None,\\n+)
        -> List[Song]:\\n+    \\\"\\\"\\\"\\n+    Parse query and return list containing
        simple song objects\\n+\\n+    ### Arguments\\n+    - query: List of strings
        containing query\\n+\\n+    ### Returns\\n+    - List of simple song objects\\n+
        \   \\\"\\\"\\\"\\n+\\n+    songs: List[Song] = []\\n+    lists: List[SongList]
        = []\\n+    for request in query:\\n+        logger.info(\\\"Processing query:
        %s\\\", request)\\n+\\n+        # Remove /intl-xxx/ from Spotify URLs with
        regex\\n+        request = re.sub(r\\\"\\\\/intl-\\\\w+\\\\/\\\", \\\"/\\\",
        request)\\n+\\n+        if (\\n+            (  # pylint: disable=too-many-boolean-expressions\\n+
        \               \\\"watch?v=\\\" in request\\n+                or \\\"youtu.be/\\\"
        in request\\n+                or \\\"soundcloud.com/\\\" in request\\n+                or
        \\\"bandcamp.com/\\\" in request\\n+            )\\n+            and \\\"open.spotify.com\\\"
        in request\\n+            and \\\"track\\\" in request\\n+            and
        \\\"|\\\" in request\\n+        ):\\n+            split_urls = request.split(\\\"|\\\")\\n+
        \           if (\\n+                len(split_urls) <= 1\\n+                or
        not (\\n+                    \\\"watch?v=\\\" in split_urls[0]\\n+                    or
        \\\"youtu.be\\\" in split_urls[0]\\n+                    or \\\"soundcloud.com/\\\"
        in split_urls[0]\\n+                    or \\\"bandcamp.com/\\\" in split_urls[0]\\n+
        \               )\\n+                or \\\"spotify\\\" not in split_urls[1]\\n+
        \           ):\\n+                raise QueryError(\\n+                    'Incorrect
        format used, please use \\\"YouTubeURL|SpotifyURL\\\"'\\n+                )\\n+\\n+
        \           songs.append(\\n+                Song.from_missing_data(url=split_urls[1],
        download_url=split_urls[0])\\n+            )\\n+        elif \\\"music.youtube.com/watch?v\\\"
        in request:\\n+            track_data = get_ytm_client().get_song(request.split(\\\"?v=\\\",
        1)[1])\\n+\\n+            yt_song = Song.from_search_term(\\n+                f\\\"{track_data['videoDetails']['author']}
        - {track_data['videoDetails']['title']}\\\"\\n+            )\\n+\\n+            if
        use_ytm_data:\\n+                yt_song.name = track_data[\\\"title\\\"]\\n+
        \               yt_song.artist = track_data[\\\"author\\\"]\\n+                yt_song.artists
        = [track_data[\\\"author\\\"]]\\n+                yt_song.duration = track_data[\\\"lengthSeconds\\\"]\\n+\\n+
        \           yt_song.download_url = request\\n+            songs.append(yt_song)\\n+
        \       elif (\\n+            \\\"youtube.com/playlist?list=\\\" in request\\n+
        \           or \\\"youtube.com/browse/VLPL\\\" in request\\n+        ):\\n+
        \           request = request.replace(\\n+                \\\"https://www.youtube.com/\\\",
        \\\"https://music.youtube.com/\\\"\\n+            )\\n+            request
        = request.replace(\\n+                \\\"https://youtube.com/\\\", \\\"https://music.youtube.com/\\\"\\n+
        \           )\\n+\\n+            split_urls = request.split(\\\"|\\\")\\n+
        \           if len(split_urls) == 1:\\n+                if \\\"?list=OLAK5uy_\\\"
        in request:\\n+                    lists.append(create_ytm_album(request,
        fetch_songs=False))\\n+                elif \\\"?list=PL\\\" in request or
        \\\"browse/VLPL\\\" in request:\\n+                    lists.append(create_ytm_playlist(request,
        fetch_songs=False))\\n+            else:\\n+                if (\\\"spotify\\\"
        not in split_urls[1]) or not any(\\n+                    x in split_urls[0]\\n+
        \                   for x in [\\\"?list=PL\\\", \\\"?list=OLAK5uy_\\\", \\\"browse/VLPL\\\"]\\n+
        \               ):\\n+                    raise QueryError(\\n+                        'Incorrect
        format used, please use \\\"YouTubeMusicURL|SpotifyURL\\\". '\\n+                        \\\"Currently
        only supports YouTube Music playlists and albums.\\\"\\n+                    )\\n+\\n+
        \               if (\\\"open.spotify.com\\\" in request and \\\"album\\\"
        in request) and (\\n+                    \\\"?list=OLAK5uy_\\\" in request\\n+
        \               ):\\n+                    ytm_list: SongList = create_ytm_album(\\n+
        \                       split_urls[0], fetch_songs=False\\n+                    )\\n+
        \                   spot_list = Album.from_url(split_urls[1], fetch_songs=False)\\n+
        \               elif (\\\"open.spotify.com\\\" in request and \\\"playlist\\\"
        in request) and (\\n+                    \\\"?list=PL\\\" in request or \\\"browse/VLPL\\\"
        in request\\n+                ):\\n+                    ytm_list = create_ytm_playlist(split_urls[0],
        fetch_songs=False)\\n+                    spot_list = Playlist.from_url(split_urls[1],
        fetch_songs=False)\\n+                else:\\n+                    raise QueryError(\\n+
        \                       f\\\"URLs are not of the same type, {split_urls[0]}
        is not \\\"\\n+                        f\\\"the same type as {split_urls[1]}.\\\"\\n+
        \                   )\\n+\\n+                if ytm_list.length != spot_list.length:\\n+
        \                   raise QueryError(\\n+                        f\\\"The
        YouTube Music ({ytm_list.length}) \\\"\\n+                        f\\\"and
        Spotify ({spot_list.length}) lists have different lengths. \\\"\\n+                    )\\n+\\n+
        \               if use_ytm_data:\\n+                    for index, song in
        enumerate(ytm_list.songs):\\n+                        song.url = spot_list.songs[index].url\\n+\\n+
        \                   lists.append(ytm_list)\\n+                else:\\n+                    for
        index, song in enumerate(spot_list.songs):\\n+                        song.download_url
        = ytm_list.songs[index].download_url\\n+\\n+                    lists.append(spot_list)\\n+
        \       elif \\\"open.spotify.com\\\" in request and \\\"track\\\" in request:\\n+
        \           songs.append(Song.from_url(url=request))\\n+        elif \\\"https://spotify.link/\\\"
        in request:\\n+            resp = requests.head(request, allow_redirects=True,
        timeout=10)\\n+            full_url = resp.url\\n+            full_lists =
        get_simple_songs(\\n+                [full_url],\\n+                use_ytm_data=use_ytm_data,\\n+
        \               playlist_numbering=playlist_numbering,\\n+            )\\n+
        \           songs.extend(full_lists)\\n+        elif \\\"open.spotify.com\\\"
        in request and \\\"playlist\\\" in request:\\n+            lists.append(Playlist.from_url(request,
        fetch_songs=False))\\n+        elif \\\"open.spotify.com\\\" in request and
        \\\"album\\\" in request:\\n+            lists.append(Album.from_url(request,
        fetch_songs=False))\\n+        elif \\\"open.spotify.com\\\" in request and
        \\\"artist\\\" in request:\\n+            lists.append(Artist.from_url(request,
        fetch_songs=False))\\n+        elif \\\"open.spotify.com\\\" in request and
        \\\"user\\\" in request:\\n+            lists.extend(get_all_user_playlists(request))\\n+
        \       elif \\\"album:\\\" in request:\\n+            lists.append(Album.from_search_term(request,
        fetch_songs=False))\\n+        elif \\\"playlist:\\\" in request:\\n+            lists.append(Playlist.from_search_term(request,
        fetch_songs=False))\\n+        elif \\\"artist:\\\" in request:\\n+            lists.append(Artist.from_search_term(request,
        fetch_songs=False))\\n+        elif request == \\\"saved\\\":\\n+            lists.append(Saved.from_url(request,
        fetch_songs=False))\\n+        elif request == \\\"all-user-playlists\\\":\\n+
        \           lists.extend(get_all_user_playlists())\\n+        elif request
        == \\\"all-user-followed-artists\\\":\\n+            lists.extend(get_user_followed_artists())\\n+
        \       elif request == \\\"all-user-saved-albums\\\":\\n+            lists.extend(get_user_saved_albums())\\n+
        \       elif request.endswith(\\\".spotdl\\\"):\\n+            with open(request,
        \\\"r\\\", encoding=\\\"utf-8\\\") as save_file:\\n+                for track
        in json.load(save_file):\\n+                    # Append to songs\\n+                    songs.append(Song.from_dict(track))\\n+
        \       else:\\n+            songs.append(Song.from_search_term(request))\\n+\\n+
        \   for song_list in lists:\\n+        logger.info(\\n+            \\\"Found
        %s songs in %s (%s)\\\",\\n+            len(song_list.urls),\\n+            song_list.name,\\n+
        \           song_list.__class__.__name__,\\n+        )\\n+\\n+        for
        index, song in enumerate(song_list.songs):\\n+            song_data = song.json\\n+
        \           song_data[\\\"list_name\\\"] = song_list.name\\n+            song_data[\\\"list_url\\\"]
        = song_list.url\\n+            song_data[\\\"list_position\\\"] = index +
        1\\n+            song_data[\\\"list_length\\\"] = song_list.length\\n+\\n+
        \           if playlist_numbering:\\n+                song_data[\\\"track_number\\\"]
        = song_data[\\\"list_position\\\"]\\n+                song_data[\\\"tracks_count\\\"]
        = song_data[\\\"list_length\\\"]\\n+                song_data[\\\"album_name\\\"]
        = song_data[\\\"list_name\\\"]\\n+                song_data[\\\"disc_number\\\"]
        = 1\\n+                song_data[\\\"disc_count\\\"] = 1\\n+                if
        isinstance(song_list, Playlist):\\n+                    song_data[\\\"album_artist\\\"]
        = song_list.author_name\\n+                    song_data[\\\"cover_url\\\"]
        = song_list.cover_url\\n+\\n+            songs.append(Song.from_dict(song_data))\\n+\\n+
        \   # removing songs for --ignore-albums\\n+    original_length = len(songs)\\n+
        \   if albums_to_ignore:\\n+        songs = [\\n+            song\\n+            for
        song in songs\\n+            for keyword in albums_to_ignore\\n+            if
        keyword not in song.album_name.lower()\\n+        ]\\n+        new_length
        = len(songs)\\n+        logger.info(\\\"Skipped %s songs (Ignored albums)\\\",
        (original_length - new_length))\\n+\\n+    logger.debug(\\\"Found %s songs
        in %s lists\\\", len(songs), len(lists))\\n+    return songs\\n+\\n+\\n+def
        songs_from_albums(albums: List[str]):\\n+    \\\"\\\"\\\"\\n+    Get all songs
        from albums ids/urls/etc.\\n+\\n+    ### Arguments\\n+    - albums: List of
        albums ids\\n+\\n+    ### Returns\\n+    - List of songs\\n+    \\\"\\\"\\\"\\n+\\n+
        \   songs: List[Song] = []\\n+    for album_id in albums:\\n+        album
        = Album.from_url(album_id, fetch_songs=False)\\n+\\n+        songs.extend([Song.from_missing_data(**song.json)
        for song in album.songs])\\n+\\n+    return songs\\n+\\n+\\n+def get_all_user_playlists(user_url:
        str = \\\"\\\") -> List[Playlist]:\\n+    \\\"\\\"\\\"\\n+    Get all user
        playlists.\\n+\\n+    ### Args (optional)\\n+    - user_url: Spotify user
        profile url.\\n+        If a url is mentioned, get all public playlists of
        that specific user.\\n+\\n+    ### Returns\\n+    - List of all user playlists\\n+
        \   \\\"\\\"\\\"\\n+\\n+    spotify_client = SpotifyClient()\\n+    if spotify_client.user_auth
        is False:  # type: ignore\\n+        raise SpotifyError(\\\"You must be logged
        in to use this function\\\")\\n+\\n+    if user_url and not user_url.startswith(\\\"https://open.spotify.com/user/\\\"):\\n+
        \       raise ValueError(f\\\"Invalid user profile url: {user_url}\\\")\\n+\\n+
        \   user_id = user_url.split(\\\"https://open.spotify.com/user/\\\")[-1].replace(\\\"/\\\",
        \\\"\\\")\\n+\\n+    if user_id:\\n+        user_playlists_response = spotify_client.user_playlists(user_id)\\n+
        \   else:\\n+        user_playlists_response = spotify_client.current_user_playlists()\\n+\\n+
        \   if user_playlists_response is None:\\n+        raise SpotifyError(\\\"Couldn't
        get user playlists\\\")\\n+\\n+    user_playlists = user_playlists_response[\\\"items\\\"]\\n+\\n+
        \   # Fetch all saved tracks\\n+    while user_playlists_response and user_playlists_response[\\\"next\\\"]:\\n+
        \       response = spotify_client.next(user_playlists_response)\\n+        if
        response is None:\\n+            break\\n+\\n+        user_playlists_response
        = response\\n+        user_playlists.extend(user_playlists_response[\\\"items\\\"])\\n+\\n+
        \   return [\\n+        Playlist.from_url(playlist[\\\"external_urls\\\"][\\\"spotify\\\"],
        fetch_songs=False)\\n+        for playlist in user_playlists\\n+    ]\\n+\\n+\\n+def
        get_user_saved_albums() -> List[Album]:\\n+    \\\"\\\"\\\"\\n+    Get all
        user saved albums\\n+\\n+    ### Returns\\n+    - List of all user saved albums\\n+
        \   \\\"\\\"\\\"\\n+\\n+    spotify_client = SpotifyClient()\\n+    if spotify_client.user_auth
        is False:  # type: ignore\\n+        raise SpotifyError(\\\"You must be logged
        in to use this function\\\")\\n+\\n+    user_saved_albums_response = spotify_client.current_user_saved_albums()\\n+
        \   if user_saved_albums_response is None:\\n+        raise SpotifyError(\\\"Couldn't
        get user saved albums\\\")\\n+\\n+    user_saved_albums = user_saved_albums_response[\\\"items\\\"]\\n+\\n+
        \   # Fetch all saved tracks\\n+    while user_saved_albums_response and user_saved_albums_response[\\\"next\\\"]:\\n+
        \       response = spotify_client.next(user_saved_albums_response)\\n+        if
        response is None:\\n+            break\\n+\\n+        user_saved_albums_response
        = response\\n+        user_saved_albums.extend(user_saved_albums_response[\\\"items\\\"])\\n+\\n+
        \   return [\\n+        Album.from_url(item[\\\"album\\\"][\\\"external_urls\\\"][\\\"spotify\\\"],
        fetch_songs=False)\\n+        for item in user_saved_albums\\n+    ]\\n+\\n+\\n+def
        get_user_followed_artists() -> List[Artist]:\\n+    \\\"\\\"\\\"\\n+    Get
        all user playlists\\n+\\n+    ### Returns\\n+    - List of all user playlists\\n+
        \   \\\"\\\"\\\"\\n+\\n+    spotify_client = SpotifyClient()\\n+    if spotify_client.user_auth
        is False:  # type: ignore\\n+        raise SpotifyError(\\\"You must be logged
        in to use this function\\\")\\n+\\n+    user_followed_response = spotify_client.current_user_followed_artists()\\n+
        \   if user_followed_response is None:\\n+        raise SpotifyError(\\\"Couldn't
        get user followed artists\\\")\\n+\\n+    user_followed_response = user_followed_response[\\\"artists\\\"]\\n+
        \   user_followed = user_followed_response[\\\"items\\\"]\\n+\\n+    # Fetch
        all artists\\n+    while user_followed_response and user_followed_response[\\\"next\\\"]:\\n+
        \       response = spotify_client.next(user_followed_response)\\n+        if
        response is None:\\n+            break\\n+\\n+        user_followed_response
        = response[\\\"artists\\\"]\\n+        user_followed.extend(user_followed_response[\\\"items\\\"])\\n+\\n+
        \   return [\\n+        Artist.from_url(followed_artist[\\\"external_urls\\\"][\\\"spotify\\\"],
        fetch_songs=False)\\n+        for followed_artist in user_followed\\n+    ]\\n+\\n+\\n+def
        reinit_song(song: Song) -> Song:\\n+    \\\"\\\"\\\"\\n+    Update song object
        with new data\\n+    from Spotify\\n+\\n+    ### Arguments\\n+    - song:
        Song object\\n+\\n+    ### Returns\\n+    - Updated song object\\n+    \\\"\\\"\\\"\\n+\\n+
        \   data = song.json\\n+    if data.get(\\\"url\\\"):\\n+        new_data
        = Song.from_url(data[\\\"url\\\"]).json\\n+    elif data.get(\\\"song_id\\\"):\\n+
        \       new_data = Song.from_url(\\n+            \\\"https://open.spotify.com/track/\\\"
        + data[\\\"song_id\\\"]\\n+        ).json\\n+    elif data.get(\\\"name\\\")
        and data.get(\\\"artist\\\"):\\n+        new_data = Song.from_search_term(f\\\"{data['artist']}
        - {data['name']}\\\").json\\n+    else:\\n+        raise QueryError(\\\"Song
        object is missing required data to be reinitialized\\\")\\n+\\n+    for key
        in Song.__dataclass_fields__:  # type: ignore # pylint: disable=E1101\\n+
        \       val = data.get(key)\\n+        new_val = new_data.get(key)\\n+        if
        new_val is not None and val is None:\\n+            data[key] = new_val\\n+
        \       elif new_val is not None and val is not None:\\n+            data[key]
        = val\\n+\\n+    # return reinitialized song object\\n+    return Song(**data)\\n+\\n+\\n+def
        get_song_from_file_metadata(file: Path, id3_separator: str = \\\"/\\\") ->
        Optional[Song]:\\n+    \\\"\\\"\\\"\\n+    Get song based on the file metadata
        or file name\\n+\\n+    ### Arguments\\n+    - file: Path to file\\n+\\n+
        \   ### Returns\\n+    - Song object\\n+    \\\"\\\"\\\"\\n+\\n+    file_metadata
        = get_file_metadata(file, id3_separator)\\n+\\n+    if file_metadata is None:\\n+
        \       return None\\n+\\n+    return Song.from_missing_data(**file_metadata)\\n+\\n+\\n+def
        gather_known_songs(output: str, output_format: str) -> Dict[str, List[Path]]:\\n+
        \   \\\"\\\"\\\"\\n+    Gather all known songs from the output directory\\n+\\n+
        \   ### Arguments\\n+    - output: Output path template\\n+    - output_format:
        Output format\\n+\\n+    ### Returns\\n+    - Dictionary containing all known
        songs and their paths\\n+    \\\"\\\"\\\"\\n+\\n+    # Get the base directory
        from the path template\\n+    # Path(\\\"/Music/test/{artist}/{artists} -
        {title}.{output-ext}\\\") -> \\\"/Music/test\\\"\\n+    base_dir = output.split(\\\"{\\\",
        1)[0]\\n+    paths = Path(base_dir).glob(f\\\"**/*.{output_format}\\\")\\n+\\n+
        \   known_songs: Dict[str, List[Path]] = {}\\n+    for path in paths:\\n+
        \       # Try to get the song from the metadata\\n+        song = get_song_from_file_metadata(path)\\n+\\n+
        \       # If the songs doesn't have metadata, try to get it from the filename\\n+
        \       if song is None or song.url is None:\\n+            search_results
        = get_search_results(path.stem)\\n+            if len(search_results) == 0:\\n+
        \               continue\\n+\\n+            song = search_results[0]\\n+\\n+
        \       known_paths = known_songs.get(song.url)\\n+        if known_paths
        is None:\\n+            known_songs[song.url] = [path]\\n+        else:\\n+
        \           known_songs[song.url].append(path)\\n+\\n+    return known_songs\\n+\\n+\\n+def
        create_ytm_album(url: str, fetch_songs: bool = True) -> Album:\\n+    \\\"\\\"\\\"\\n+
        \   Creates a list of Song objects from an album query.\\n+\\n+    ### Arguments\\n+
        \   - album_query: the url of the album\\n+\\n+    ### Returns\\n+    - a
        list of Song objects\\n+    \\\"\\\"\\\"\\n+\\n+    if \\\"?list=\\\" not
        in url or not url.startswith(\\\"https://music.youtube.com/\\\"):\\n+        raise
        ValueError(f\\\"Invalid album url: {url}\\\")\\n+\\n+    browse_id = get_ytm_client().get_album_browse_id(\\n+
        \       url.split(\\\"?list=\\\")[1].split(\\\"&\\\")[0]\\n+    )\\n+    if
        browse_id is None:\\n+        raise ValueError(f\\\"Invalid album url: {url}\\\")\\n+\\n+
        \   album = get_ytm_client().get_album(browse_id)\\n+\\n+    if album is None:\\n+
        \       raise ValueError(f\\\"Couldn't fetch album: {url}\\\")\\n+\\n+    metadata
        = {\\n+        \\\"artist\\\": album[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \       \\\"name\\\": album[\\\"title\\\"],\\n+        \\\"url\\\": url,\\n+
        \   }\\n+\\n+    songs = []\\n+    for track in album[\\\"tracks\\\"]:\\n+
        \       artists = [artist[\\\"name\\\"] for artist in track[\\\"artists\\\"]]\\n+\\n+
        \       song = Song.from_missing_data(\\n+            name=track[\\\"title\\\"],\\n+
        \           artists=artists,\\n+            artist=artists[0],\\n+            album_name=metadata[\\\"name\\\"],\\n+
        \           album_artist=metadata[\\\"artist\\\"],\\n+            duration=track[\\\"duration_seconds\\\"],\\n+
        \           download_url=f\\\"https://music.youtube.com/watch?v={track['videoId']}\\\",\\n+
        \       )\\n+\\n+        if fetch_songs:\\n+            song = Song.from_search_term(f\\\"{song.artist}
        - {song.name}\\\")\\n+\\n+        songs.append(song)\\n+\\n+    return Album(**metadata,
        songs=songs, urls=[song.url for song in songs])\\n+\\n+\\n+def create_ytm_playlist(url:
        str, fetch_songs: bool = True) -> Playlist:\\n+    \\\"\\\"\\\"\\n+    Returns
        a playlist object from a youtube playlist url\\n+\\n+    ### Arguments\\n+
        \   - url: the url of the playlist\\n+\\n+    ### Returns\\n+    - a Playlist
        object\\n+    \\\"\\\"\\\"\\n+\\n+    if not (\\\"?list=\\\" in url or \\\"/browse/VLPL\\\"
        in url) or not url.startswith(\\n+        \\\"https://music.youtube.com/\\\"\\n+
        \   ):\\n+        raise ValueError(f\\\"Invalid playlist url: {url}\\\")\\n+\\n+
        \   if \\\"/browse/VLPL\\\" in url:\\n+        playlist_id = url.split(\\\"/browse/\\\")[1]\\n+
        \   else:\\n+        playlist_id = url.split(\\\"?list=\\\")[1]\\n+    playlist
        = get_ytm_client().get_playlist(playlist_id, None)  # type: ignore\\n+\\n+
        \   if playlist is None:\\n+        raise ValueError(f\\\"Couldn't fetch playlist:
        {url}\\\")\\n+\\n+    metadata = {\\n+        \\\"description\\\": playlist[\\\"description\\\"]\\n+
        \       if playlist[\\\"description\\\"] is not None\\n+        else \\\"\\\",\\n+
        \       \\\"author_url\\\": f\\\"https://music.youtube.com/channel/{playlist['author']['id']}\\\",\\n+
        \       \\\"author_name\\\": playlist[\\\"author\\\"][\\\"name\\\"],\\n+        \\\"cover_url\\\":
        playlist[\\\"thumbnails\\\"][0][\\\"url\\\"],\\n+        \\\"name\\\": playlist[\\\"title\\\"],\\n+
        \       \\\"url\\\": url,\\n+    }\\n+\\n+    songs = []\\n+    for track
        in playlist[\\\"tracks\\\"]:\\n+        if track[\\\"videoId\\\"] is None
        or track[\\\"isAvailable\\\"] is False:\\n+            continue\\n+\\n+        song
        = Song.from_missing_data(\\n+            name=track[\\\"title\\\"],\\n+            artists=[artist[\\\"name\\\"]
        for artist in track[\\\"artists\\\"]],\\n+            artist=track[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \           album_name=track.get(\\\"album\\\", {}).get(\\\"name\\\")\\n+
        \           if track.get(\\\"album\\\") is not None\\n+            else None,\\n+
        \           duration=track.get(\\\"duration_seconds\\\"),\\n+            explicit=track.get(\\\"isExplicit\\\"),\\n+
        \           download_url=f\\\"https://music.youtube.com/watch?v={track['videoId']}\\\",\\n+
        \       )\\n+\\n+        if fetch_songs:\\n+            song = reinit_song(song)\\n+\\n+
        \       songs.append(song)\\n+\\n+    return Playlist(**metadata, songs=songs,
        urls=[song.url for song in songs])\"},{\"sha\":\"f69c941f1873b94356e3da146f45c8c99f87e54a\",\"filename\":\"spotdl/utils/song_name_utils.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":11,\"changes\":11,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Futils%2Fsong_name_utils.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Futils%2Fsong_name_utils.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fsong_name_utils.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,11 +0,0 @@\\n-def format_name(input_str: str) -> str:\\n-    output = input_str\\n-\\n-
        \   # ! this is windows specific (disallowed chars)\\n-    output = \\\"\\\".join(char
        for char in output if char not in \\\"/?\\\\\\\\*|<>#\\\")\\n-\\n-    # !
        double quotes (\\\") and semi-colons (:) are also disallowed characters but
        we would\\n-    # ! like to retain their equivalents, so they aren't removed
        in the prior loop\\n-    output = output.replace('\\\"', \\\"'\\\").replace(\\\":\\\",
        \\\" - \\\")\\n-\\n-    return output\"},{\"sha\":\"895cf09525a8823b0fc683d071683b0f0d90b455\",\"filename\":\"spotdl/utils/spotify.py\",\"status\":\"added\",\"additions\":227,\"deletions\":0,\"changes\":227,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fspotify.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fspotify.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fspotify.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,227 @@\\n+\\\"\\\"\\\"\\n+Module for interacting with Spotify API.\\n+To
        use this module, you must have a Spotify API key and Spotify API secret.\\n+\\n+```python\\n+import
        spotdl.utils.spotify\\n+spotify.Spotify.init(client_id, client_secret)\\n+```\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import logging\\n+from typing import Dict, Optional\\n+\\n+import
        requests\\n+from spotipy import Spotify\\n+from spotipy.cache_handler import
        CacheFileHandler, MemoryCacheHandler\\n+from spotipy.oauth2 import SpotifyClientCredentials,
        SpotifyOAuth\\n+\\n+from spotdl.utils.config import get_cache_path, get_spotify_cache_path\\n+\\n+__all__
        = [\\n+    \\\"SpotifyError\\\",\\n+    \\\"SpotifyClient\\\",\\n+    \\\"save_spotify_cache\\\",\\n+]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class SpotifyError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to SpotifyClient.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class Singleton(type):\\n+    \\\"\\\"\\\"\\n+
        \   Singleton metaclass for SpotifyClient. Ensures that SpotifyClient is not\\n+
        \   instantiated without prior initialization. Every other instantiation of\\n+
        \   SpotifyClient will return the same instance.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   _instance = None\\n+\\n+    def __call__(self):  # pylint: disable=bad-mcs-method-argument\\n+
        \       \\\"\\\"\\\"\\n+        Call method for Singleton metaclass.\\n+\\n+
        \       ### Returns\\n+        - The instance of the SpotifyClient.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if self._instance is None:\\n+            raise SpotifyError(\\n+
        \               \\\"Spotify client not created. Call SpotifyClient.init\\\"\\n+
        \               \\\"(client_id, client_secret, user_auth, cache_path, no_cache,
        open_browser) first.\\\"\\n+            )\\n+        return self._instance\\n+\\n+
        \   def init(  # pylint: disable=bad-mcs-method-argument\\n+        self,\\n+
        \       client_id: str,\\n+        client_secret: str,\\n+        user_auth:
        bool = False,\\n+        no_cache: bool = False,\\n+        headless: bool
        = False,\\n+        max_retries: int = 3,\\n+        use_cache_file: bool
        = False,\\n+        auth_token: Optional[str] = None,\\n+        cache_path:
        Optional[str] = None,\\n+    ) -> \\\"Singleton\\\":\\n+        \\\"\\\"\\\"\\n+
        \       Initializes the SpotifyClient.\\n+\\n+        ### Arguments\\n+        -
        client_id: The client ID of the application.\\n+        - client_secret: The
        client secret of the application.\\n+        - auth_token: The access token
        to use.\\n+        - user_auth: Whether or not to use user authentication.\\n+
        \       - cache_path: The path to the cache file.\\n+        - no_cache: Whether
        or not to use the cache.\\n+        - open_browser: Whether or not to open
        the browser.\\n+\\n+        ### Returns\\n+        - The instance of the SpotifyClient.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # check if initialization has been completed,
        if yes, raise an Exception\\n+        if isinstance(self._instance, self):\\n+
        \           raise SpotifyError(\\\"A spotify client has already been initialized\\\")\\n+\\n+
        \       credential_manager = None\\n+\\n+        cache_handler = (\\n+            CacheFileHandler(cache_path
        or get_cache_path())\\n+            if not no_cache\\n+            else MemoryCacheHandler()\\n+
        \       )\\n+        # Use SpotifyOAuth as auth manager\\n+        if user_auth:\\n+
        \           credential_manager = SpotifyOAuth(\\n+                client_id=client_id,\\n+
        \               client_secret=client_secret,\\n+                redirect_uri=\\\"http://127.0.0.1:9900/\\\",\\n+
        \               scope=\\\"user-library-read,user-follow-read\\\",\\n+                cache_handler=cache_handler,\\n+
        \               open_browser=not headless,\\n+            )\\n+        # Use
        SpotifyClientCredentials as auth manager\\n+        else:\\n+            credential_manager
        = SpotifyClientCredentials(\\n+                client_id=client_id,\\n+                client_secret=client_secret,\\n+
        \               cache_handler=cache_handler,\\n+            )\\n+        if
        auth_token is not None:\\n+            credential_manager = None\\n+\\n+        self.user_auth
        = user_auth\\n+        self.no_cache = no_cache\\n+        self.max_retries
        = max_retries\\n+        self.use_cache_file = use_cache_file\\n+\\n+        #
        Create instance\\n+        self._instance = super().__call__(\\n+            auth=auth_token,\\n+
        \           auth_manager=credential_manager,\\n+            status_forcelist=(429,
        500, 502, 503, 504, 404),\\n+        )\\n+\\n+        # Return instance\\n+
        \       return self._instance\\n+\\n+\\n+class SpotifyClient(Spotify, metaclass=Singleton):\\n+
        \   \\\"\\\"\\\"\\n+    This is the Spotify client meant to be used in the
        app.\\n+    Has to be initialized first by calling\\n+    `SpotifyClient.init(client_id,
        client_secret, user_auth, cache_path, no_cache, open_browser)`.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   _initialized = False\\n+    cache: Dict[str, Optional[Dict]] = {}\\n+\\n+
        \   def __init__(self, *args, **kwargs):\\n+        \\\"\\\"\\\"\\n+        Initializes
        the SpotifyClient.\\n+\\n+        ### Arguments\\n+        - auth: The access
        token to use.\\n+        - auth_manager: The auth manager to use.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       super().__init__(*args, **kwargs)\\n+        self._initialized = True\\n+\\n+
        \       use_cache_file: bool = self.use_cache_file  # type: ignore # pylint:
        disable=E1101\\n+        cache_file_loc = get_spotify_cache_path()\\n+\\n+
        \       if use_cache_file and cache_file_loc.exists():\\n+            with
        open(cache_file_loc, \\\"r\\\", encoding=\\\"utf-8\\\") as cache_file:\\n+
        \               self.cache = json.load(cache_file)\\n+        elif use_cache_file:\\n+
        \           with open(cache_file_loc, \\\"w\\\", encoding=\\\"utf-8\\\") as
        cache_file:\\n+                json.dump(self.cache, cache_file)\\n+\\n+    def
        _get(self, url, args=None, payload=None, **kwargs):\\n+        \\\"\\\"\\\"\\n+
        \       Overrides the get method of the SpotifyClient.\\n+        Allows us
        to cache requests\\n+        \\\"\\\"\\\"\\n+\\n+        use_cache = not self.no_cache
        \ # type: ignore # pylint: disable=E1101\\n+\\n+        if args:\\n+            kwargs.update(args)\\n+\\n+
        \       cache_key = None\\n+        if use_cache:\\n+            key_obj =
        dict(kwargs)\\n+            key_obj[\\\"url\\\"] = url\\n+            key_obj[\\\"data\\\"]
        = json.dumps(payload)\\n+            cache_key = json.dumps(key_obj)\\n+            if
        cache_key is None:\\n+                cache_key = url\\n+            if self.cache.get(cache_key)
        is not None:\\n+                return self.cache[cache_key]\\n+\\n+        #
        Wrap in a try-except and retry up to `retries` times.\\n+        response
        = None\\n+        retries = self.max_retries  # type: ignore # pylint: disable=E1101\\n+
        \       while response is None:\\n+            try:\\n+                response
        = self._internal_call(\\\"GET\\\", url, payload, kwargs)\\n+            except
        (requests.exceptions.Timeout, requests.ConnectionError) as exc:\\n+                retries
        -= 1\\n+                if retries <= 0:\\n+                    raise exc\\n+\\n+
        \       if use_cache and cache_key is not None:\\n+            self.cache[cache_key]
        = response\\n+\\n+        return response\\n+\\n+\\n+def save_spotify_cache(cache:
        Dict[str, Optional[Dict]]):\\n+    \\\"\\\"\\\"\\n+    Saves the Spotify cache
        to a file.\\n+\\n+    ### Arguments\\n+    - cache: The cache to save.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    cache_file_loc = get_spotify_cache_path()\\n+\\n+
        \   logger.debug(\\\"Saving Spotify cache to %s\\\", cache_file_loc)\\n+\\n+
        \   # Only cache tracks\\n+    cache = {\\n+        key: value\\n+        for
        key, value in cache.items()\\n+        if value is not None and \\\"tracks/\\\"
        in key\\n+    }\\n+\\n+    with open(cache_file_loc, \\\"w\\\", encoding=\\\"utf-8\\\")
        as cache_file:\\n+        json.dump(cache, cache_file)\"},{\"sha\":\"261f2bc0612f93b000c53315e3268ef010cbbd25\",\"filename\":\"spotdl/utils/static.py\",\"status\":\"added\",\"additions\":1599,\"deletions\":0,\"changes\":1599,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fstatic.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fstatic.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fstatic.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"patch\":\"@@
        -0,0 +1,1599 @@\\n+\\\"\\\"\\\"\\n+Module for holding static variables that
        are used throughout the project.\\n+And are for the most part, not likely
        to change.\\n+(Also holds really large variables, so pylint is disabled here)\\n+\\\"\\\"\\\"\\n+\\n+#
        pylint: skip-file\\n+\\n+__all__ = [\\n+    \\\"AMBIGUOUS_CHARACTERS\\\",\\n+
        \   \\\"BAD_CHARS\\\",\\n+]\\n+\\n+BAD_CHARS = [12441, 12442] + list(range(769,
        880))\\n+\\n+# Source: https://github.com/hediet/vscode-unicode-data/blob/main/out/ambiguous.json\\n+AMBIGUOUS_CHARACTERS
        = {\\n+    \\\"8232\\\": 32,\\n+    \\\"8233\\\": 32,\\n+    \\\"5760\\\":
        32,\\n+    \\\"8192\\\": 32,\\n+    \\\"8193\\\": 32,\\n+    \\\"8194\\\":
        32,\\n+    \\\"8195\\\": 32,\\n+    \\\"8196\\\": 32,\\n+    \\\"8197\\\":
        32,\\n+    \\\"8198\\\": 32,\\n+    \\\"8200\\\": 32,\\n+    \\\"8201\\\":
        32,\\n+    \\\"8202\\\": 32,\\n+    \\\"8287\\\": 32,\\n+    \\\"8199\\\":
        32,\\n+    \\\"8239\\\": 32,\\n+    \\\"2042\\\": 95,\\n+    \\\"65101\\\":
        95,\\n+    \\\"65102\\\": 95,\\n+    \\\"65103\\\": 95,\\n+    \\\"8208\\\":
        45,\\n+    \\\"8209\\\": 45,\\n+    \\\"8210\\\": 45,\\n+    \\\"65112\\\":
        45,\\n+    \\\"1748\\\": 45,\\n+    \\\"8259\\\": 45,\\n+    \\\"727\\\":
        45,\\n+    \\\"8722\\\": 45,\\n+    \\\"10134\\\": 45,\\n+    \\\"11450\\\":
        45,\\n+    \\\"1549\\\": 44,\\n+    \\\"1643\\\": 44,\\n+    \\\"8218\\\":
        44,\\n+    \\\"184\\\": 44,\\n+    \\\"42233\\\": 44,\\n+    \\\"894\\\":
        59,\\n+    \\\"2307\\\": 58,\\n+    \\\"2691\\\": 58,\\n+    \\\"1417\\\":
        58,\\n+    \\\"1795\\\": 58,\\n+    \\\"1796\\\": 58,\\n+    \\\"5868\\\":
        58,\\n+    \\\"65072\\\": 58,\\n+    \\\"6147\\\": 58,\\n+    \\\"6153\\\":
        58,\\n+    \\\"8282\\\": 58,\\n+    \\\"1475\\\": 58,\\n+    \\\"760\\\":
        58,\\n+    \\\"42889\\\": 58,\\n+    \\\"8758\\\": 58,\\n+    \\\"720\\\":
        58,\\n+    \\\"42237\\\": 58,\\n+    \\\"451\\\": 33,\\n+    \\\"11601\\\":
        33,\\n+    \\\"660\\\": 63,\\n+    \\\"577\\\": 63,\\n+    \\\"2429\\\": 63,\\n+
        \   \\\"5038\\\": 63,\\n+    \\\"42731\\\": 63,\\n+    \\\"119149\\\": 46,\\n+
        \   \\\"8228\\\": 46,\\n+    \\\"1793\\\": 46,\\n+    \\\"1794\\\": 46,\\n+
        \   \\\"42510\\\": 46,\\n+    \\\"68176\\\": 46,\\n+    \\\"1632\\\": 46,\\n+
        \   \\\"1776\\\": 46,\\n+    \\\"42232\\\": 46,\\n+    \\\"1373\\\": 96,\\n+
        \   \\\"65287\\\": 96,\\n+    \\\"8219\\\": 96,\\n+    \\\"8242\\\": 96,\\n+
        \   \\\"1370\\\": 96,\\n+    \\\"1523\\\": 96,\\n+    \\\"8175\\\": 96,\\n+
        \   \\\"65344\\\": 96,\\n+    \\\"900\\\": 96,\\n+    \\\"8189\\\": 96,\\n+
        \   \\\"8125\\\": 96,\\n+    \\\"8127\\\": 96,\\n+    \\\"8190\\\": 96,\\n+
        \   \\\"697\\\": 96,\\n+    \\\"884\\\": 96,\\n+    \\\"712\\\": 96,\\n+    \\\"714\\\":
        96,\\n+    \\\"715\\\": 96,\\n+    \\\"756\\\": 96,\\n+    \\\"699\\\": 96,\\n+
        \   \\\"701\\\": 96,\\n+    \\\"700\\\": 96,\\n+    \\\"702\\\": 96,\\n+    \\\"42892\\\":
        96,\\n+    \\\"1497\\\": 96,\\n+    \\\"2036\\\": 96,\\n+    \\\"2037\\\":
        96,\\n+    \\\"5194\\\": 96,\\n+    \\\"5836\\\": 96,\\n+    \\\"94033\\\":
        96,\\n+    \\\"94034\\\": 96,\\n+    \\\"65339\\\": 91,\\n+    \\\"10088\\\":
        40,\\n+    \\\"10098\\\": 40,\\n+    \\\"12308\\\": 40,\\n+    \\\"64830\\\":
        40,\\n+    \\\"65341\\\": 93,\\n+    \\\"10089\\\": 41,\\n+    \\\"10099\\\":
        41,\\n+    \\\"12309\\\": 41,\\n+    \\\"64831\\\": 41,\\n+    \\\"10100\\\":
        123,\\n+    \\\"119060\\\": 123,\\n+    \\\"10101\\\": 125,\\n+    \\\"65342\\\":
        94,\\n+    \\\"8270\\\": 42,\\n+    \\\"1645\\\": 42,\\n+    \\\"8727\\\":
        42,\\n+    \\\"66335\\\": 42,\\n+    \\\"5941\\\": 47,\\n+    \\\"8257\\\":
        47,\\n+    \\\"8725\\\": 47,\\n+    \\\"8260\\\": 47,\\n+    \\\"9585\\\":
        47,\\n+    \\\"10187\\\": 47,\\n+    \\\"10744\\\": 47,\\n+    \\\"119354\\\":
        47,\\n+    \\\"12755\\\": 47,\\n+    \\\"12339\\\": 47,\\n+    \\\"11462\\\":
        47,\\n+    \\\"20031\\\": 47,\\n+    \\\"12035\\\": 47,\\n+    \\\"65340\\\":
        92,\\n+    \\\"65128\\\": 92,\\n+    \\\"8726\\\": 92,\\n+    \\\"10189\\\":
        92,\\n+    \\\"10741\\\": 92,\\n+    \\\"10745\\\": 92,\\n+    \\\"119311\\\":
        92,\\n+    \\\"119355\\\": 92,\\n+    \\\"12756\\\": 92,\\n+    \\\"20022\\\":
        92,\\n+    \\\"12034\\\": 92,\\n+    \\\"42872\\\": 38,\\n+    \\\"708\\\":
        94,\\n+    \\\"710\\\": 94,\\n+    \\\"5869\\\": 43,\\n+    \\\"10133\\\":
        43,\\n+    \\\"66203\\\": 43,\\n+    \\\"8249\\\": 60,\\n+    \\\"10094\\\":
        60,\\n+    \\\"706\\\": 60,\\n+    \\\"119350\\\": 60,\\n+    \\\"5176\\\":
        60,\\n+    \\\"5810\\\": 60,\\n+    \\\"5120\\\": 61,\\n+    \\\"11840\\\":
        61,\\n+    \\\"12448\\\": 61,\\n+    \\\"42239\\\": 61,\\n+    \\\"8250\\\":
        62,\\n+    \\\"10095\\\": 62,\\n+    \\\"707\\\": 62,\\n+    \\\"119351\\\":
        62,\\n+    \\\"5171\\\": 62,\\n+    \\\"94015\\\": 62,\\n+    \\\"8275\\\":
        126,\\n+    \\\"732\\\": 126,\\n+    \\\"8128\\\": 126,\\n+    \\\"8764\\\":
        126,\\n+    \\\"65372\\\": 124,\\n+    \\\"65293\\\": 45,\\n+    \\\"120784\\\":
        50,\\n+    \\\"120794\\\": 50,\\n+    \\\"120804\\\": 50,\\n+    \\\"120814\\\":
        50,\\n+    \\\"120824\\\": 50,\\n+    \\\"130034\\\": 50,\\n+    \\\"42842\\\":
        50,\\n+    \\\"423\\\": 50,\\n+    \\\"1000\\\": 50,\\n+    \\\"42564\\\":
        50,\\n+    \\\"5311\\\": 50,\\n+    \\\"42735\\\": 50,\\n+    \\\"119302\\\":
        51,\\n+    \\\"120785\\\": 51,\\n+    \\\"120795\\\": 51,\\n+    \\\"120805\\\":
        51,\\n+    \\\"120815\\\": 51,\\n+    \\\"120825\\\": 51,\\n+    \\\"130035\\\":
        51,\\n+    \\\"42923\\\": 51,\\n+    \\\"540\\\": 51,\\n+    \\\"439\\\":
        51,\\n+    \\\"42858\\\": 51,\\n+    \\\"11468\\\": 51,\\n+    \\\"1248\\\":
        51,\\n+    \\\"94011\\\": 51,\\n+    \\\"71882\\\": 51,\\n+    \\\"120786\\\":
        52,\\n+    \\\"120796\\\": 52,\\n+    \\\"120806\\\": 52,\\n+    \\\"120816\\\":
        52,\\n+    \\\"120826\\\": 52,\\n+    \\\"130036\\\": 52,\\n+    \\\"5070\\\":
        52,\\n+    \\\"71855\\\": 52,\\n+    \\\"120787\\\": 53,\\n+    \\\"120797\\\":
        53,\\n+    \\\"120807\\\": 53,\\n+    \\\"120817\\\": 53,\\n+    \\\"120827\\\":
        53,\\n+    \\\"130037\\\": 53,\\n+    \\\"444\\\": 53,\\n+    \\\"71867\\\":
        53,\\n+    \\\"120788\\\": 54,\\n+    \\\"120798\\\": 54,\\n+    \\\"120808\\\":
        54,\\n+    \\\"120818\\\": 54,\\n+    \\\"120828\\\": 54,\\n+    \\\"130038\\\":
        54,\\n+    \\\"11474\\\": 54,\\n+    \\\"5102\\\": 54,\\n+    \\\"71893\\\":
        54,\\n+    \\\"119314\\\": 55,\\n+    \\\"120789\\\": 55,\\n+    \\\"120799\\\":
        55,\\n+    \\\"120809\\\": 55,\\n+    \\\"120819\\\": 55,\\n+    \\\"120829\\\":
        55,\\n+    \\\"130039\\\": 55,\\n+    \\\"66770\\\": 55,\\n+    \\\"71878\\\":
        55,\\n+    \\\"2819\\\": 56,\\n+    \\\"2538\\\": 56,\\n+    \\\"2666\\\":
        56,\\n+    \\\"125131\\\": 56,\\n+    \\\"120790\\\": 56,\\n+    \\\"120800\\\":
        56,\\n+    \\\"120810\\\": 56,\\n+    \\\"120820\\\": 56,\\n+    \\\"120830\\\":
        56,\\n+    \\\"130040\\\": 56,\\n+    \\\"547\\\": 56,\\n+    \\\"546\\\":
        56,\\n+    \\\"66330\\\": 56,\\n+    \\\"2663\\\": 57,\\n+    \\\"2920\\\":
        57,\\n+    \\\"2541\\\": 57,\\n+    \\\"3437\\\": 57,\\n+    \\\"120791\\\":
        57,\\n+    \\\"120801\\\": 57,\\n+    \\\"120811\\\": 57,\\n+    \\\"120821\\\":
        57,\\n+    \\\"120831\\\": 57,\\n+    \\\"130041\\\": 57,\\n+    \\\"42862\\\":
        57,\\n+    \\\"11466\\\": 57,\\n+    \\\"71884\\\": 57,\\n+    \\\"71852\\\":
        57,\\n+    \\\"71894\\\": 57,\\n+    \\\"9082\\\": 97,\\n+    \\\"65345\\\":
        97,\\n+    \\\"119834\\\": 97,\\n+    \\\"119886\\\": 97,\\n+    \\\"119938\\\":
        97,\\n+    \\\"119990\\\": 97,\\n+    \\\"120042\\\": 97,\\n+    \\\"120094\\\":
        97,\\n+    \\\"120146\\\": 97,\\n+    \\\"120198\\\": 97,\\n+    \\\"120250\\\":
        97,\\n+    \\\"120302\\\": 97,\\n+    \\\"120354\\\": 97,\\n+    \\\"120406\\\":
        97,\\n+    \\\"120458\\\": 97,\\n+    \\\"593\\\": 97,\\n+    \\\"945\\\":
        97,\\n+    \\\"120514\\\": 97,\\n+    \\\"120572\\\": 97,\\n+    \\\"120630\\\":
        97,\\n+    \\\"120688\\\": 97,\\n+    \\\"120746\\\": 97,\\n+    \\\"65313\\\":
        65,\\n+    \\\"119808\\\": 65,\\n+    \\\"119860\\\": 65,\\n+    \\\"119912\\\":
        65,\\n+    \\\"119964\\\": 65,\\n+    \\\"120016\\\": 65,\\n+    \\\"120068\\\":
        65,\\n+    \\\"120120\\\": 65,\\n+    \\\"120172\\\": 65,\\n+    \\\"120224\\\":
        65,\\n+    \\\"120276\\\": 65,\\n+    \\\"120328\\\": 65,\\n+    \\\"120380\\\":
        65,\\n+    \\\"120432\\\": 65,\\n+    \\\"913\\\": 65,\\n+    \\\"120488\\\":
        65,\\n+    \\\"120546\\\": 65,\\n+    \\\"120604\\\": 65,\\n+    \\\"120662\\\":
        65,\\n+    \\\"120720\\\": 65,\\n+    \\\"5034\\\": 65,\\n+    \\\"5573\\\":
        65,\\n+    \\\"42222\\\": 65,\\n+    \\\"94016\\\": 65,\\n+    \\\"66208\\\":
        65,\\n+    \\\"119835\\\": 98,\\n+    \\\"119887\\\": 98,\\n+    \\\"119939\\\":
        98,\\n+    \\\"119991\\\": 98,\\n+    \\\"120043\\\": 98,\\n+    \\\"120095\\\":
        98,\\n+    \\\"120147\\\": 98,\\n+    \\\"120199\\\": 98,\\n+    \\\"120251\\\":
        98,\\n+    \\\"120303\\\": 98,\\n+    \\\"120355\\\": 98,\\n+    \\\"120407\\\":
        98,\\n+    \\\"120459\\\": 98,\\n+    \\\"388\\\": 98,\\n+    \\\"5071\\\":
        98,\\n+    \\\"5234\\\": 98,\\n+    \\\"5551\\\": 98,\\n+    \\\"65314\\\":
        66,\\n+    \\\"8492\\\": 66,\\n+    \\\"119809\\\": 66,\\n+    \\\"119861\\\":
        66,\\n+    \\\"119913\\\": 66,\\n+    \\\"120017\\\": 66,\\n+    \\\"120069\\\":
        66,\\n+    \\\"120121\\\": 66,\\n+    \\\"120173\\\": 66,\\n+    \\\"120225\\\":
        66,\\n+    \\\"120277\\\": 66,\\n+    \\\"120329\\\": 66,\\n+    \\\"120381\\\":
        66,\\n+    \\\"120433\\\": 66,\\n+    \\\"42932\\\": 66,\\n+    \\\"914\\\":
        66,\\n+    \\\"120489\\\": 66,\\n+    \\\"120547\\\": 66,\\n+    \\\"120605\\\":
        66,\\n+    \\\"120663\\\": 66,\\n+    \\\"120721\\\": 66,\\n+    \\\"5108\\\":
        66,\\n+    \\\"5623\\\": 66,\\n+    \\\"42192\\\": 66,\\n+    \\\"66178\\\":
        66,\\n+    \\\"66209\\\": 66,\\n+    \\\"66305\\\": 66,\\n+    \\\"65347\\\":
        99,\\n+    \\\"8573\\\": 99,\\n+    \\\"119836\\\": 99,\\n+    \\\"119888\\\":
        99,\\n+    \\\"119940\\\": 99,\\n+    \\\"119992\\\": 99,\\n+    \\\"120044\\\":
        99,\\n+    \\\"120096\\\": 99,\\n+    \\\"120148\\\": 99,\\n+    \\\"120200\\\":
        99,\\n+    \\\"120252\\\": 99,\\n+    \\\"120304\\\": 99,\\n+    \\\"120356\\\":
        99,\\n+    \\\"120408\\\": 99,\\n+    \\\"120460\\\": 99,\\n+    \\\"7428\\\":
        99,\\n+    \\\"1010\\\": 99,\\n+    \\\"11429\\\": 99,\\n+    \\\"43951\\\":
        99,\\n+    \\\"66621\\\": 99,\\n+    \\\"128844\\\": 67,\\n+    \\\"71922\\\":
        67,\\n+    \\\"71913\\\": 67,\\n+    \\\"65315\\\": 67,\\n+    \\\"8557\\\":
        67,\\n+    \\\"8450\\\": 67,\\n+    \\\"8493\\\": 67,\\n+    \\\"119810\\\":
        67,\\n+    \\\"119862\\\": 67,\\n+    \\\"119914\\\": 67,\\n+    \\\"119966\\\":
        67,\\n+    \\\"120018\\\": 67,\\n+    \\\"120174\\\": 67,\\n+    \\\"120226\\\":
        67,\\n+    \\\"120278\\\": 67,\\n+    \\\"120330\\\": 67,\\n+    \\\"120382\\\":
        67,\\n+    \\\"120434\\\": 67,\\n+    \\\"1017\\\": 67,\\n+    \\\"11428\\\":
        67,\\n+    \\\"5087\\\": 67,\\n+    \\\"42202\\\": 67,\\n+    \\\"66210\\\":
        67,\\n+    \\\"66306\\\": 67,\\n+    \\\"66581\\\": 67,\\n+    \\\"66844\\\":
        67,\\n+    \\\"8574\\\": 100,\\n+    \\\"8518\\\": 100,\\n+    \\\"119837\\\":
        100,\\n+    \\\"119889\\\": 100,\\n+    \\\"119941\\\": 100,\\n+    \\\"119993\\\":
        100,\\n+    \\\"120045\\\": 100,\\n+    \\\"120097\\\": 100,\\n+    \\\"120149\\\":
        100,\\n+    \\\"120201\\\": 100,\\n+    \\\"120253\\\": 100,\\n+    \\\"120305\\\":
        100,\\n+    \\\"120357\\\": 100,\\n+    \\\"120409\\\": 100,\\n+    \\\"120461\\\":
        100,\\n+    \\\"1281\\\": 100,\\n+    \\\"5095\\\": 100,\\n+    \\\"5231\\\":
        100,\\n+    \\\"42194\\\": 100,\\n+    \\\"8558\\\": 68,\\n+    \\\"8517\\\":
        68,\\n+    \\\"119811\\\": 68,\\n+    \\\"119863\\\": 68,\\n+    \\\"119915\\\":
        68,\\n+    \\\"119967\\\": 68,\\n+    \\\"120019\\\": 68,\\n+    \\\"120071\\\":
        68,\\n+    \\\"120123\\\": 68,\\n+    \\\"120175\\\": 68,\\n+    \\\"120227\\\":
        68,\\n+    \\\"120279\\\": 68,\\n+    \\\"120331\\\": 68,\\n+    \\\"120383\\\":
        68,\\n+    \\\"120435\\\": 68,\\n+    \\\"5024\\\": 68,\\n+    \\\"5598\\\":
        68,\\n+    \\\"5610\\\": 68,\\n+    \\\"42195\\\": 68,\\n+    \\\"8494\\\":
        101,\\n+    \\\"65349\\\": 101,\\n+    \\\"8495\\\": 101,\\n+    \\\"8519\\\":
        101,\\n+    \\\"119838\\\": 101,\\n+    \\\"119890\\\": 101,\\n+    \\\"119942\\\":
        101,\\n+    \\\"120046\\\": 101,\\n+    \\\"120098\\\": 101,\\n+    \\\"120150\\\":
        101,\\n+    \\\"120202\\\": 101,\\n+    \\\"120254\\\": 101,\\n+    \\\"120306\\\":
        101,\\n+    \\\"120358\\\": 101,\\n+    \\\"120410\\\": 101,\\n+    \\\"120462\\\":
        101,\\n+    \\\"43826\\\": 101,\\n+    \\\"1213\\\": 101,\\n+    \\\"8959\\\":
        69,\\n+    \\\"65317\\\": 69,\\n+    \\\"8496\\\": 69,\\n+    \\\"119812\\\":
        69,\\n+    \\\"119864\\\": 69,\\n+    \\\"119916\\\": 69,\\n+    \\\"120020\\\":
        69,\\n+    \\\"120072\\\": 69,\\n+    \\\"120124\\\": 69,\\n+    \\\"120176\\\":
        69,\\n+    \\\"120228\\\": 69,\\n+    \\\"120280\\\": 69,\\n+    \\\"120332\\\":
        69,\\n+    \\\"120384\\\": 69,\\n+    \\\"120436\\\": 69,\\n+    \\\"917\\\":
        69,\\n+    \\\"120492\\\": 69,\\n+    \\\"120550\\\": 69,\\n+    \\\"120608\\\":
        69,\\n+    \\\"120666\\\": 69,\\n+    \\\"120724\\\": 69,\\n+    \\\"11577\\\":
        69,\\n+    \\\"5036\\\": 69,\\n+    \\\"42224\\\": 69,\\n+    \\\"71846\\\":
        69,\\n+    \\\"71854\\\": 69,\\n+    \\\"66182\\\": 69,\\n+    \\\"119839\\\":
        102,\\n+    \\\"119891\\\": 102,\\n+    \\\"119943\\\": 102,\\n+    \\\"119995\\\":
        102,\\n+    \\\"120047\\\": 102,\\n+    \\\"120099\\\": 102,\\n+    \\\"120151\\\":
        102,\\n+    \\\"120203\\\": 102,\\n+    \\\"120255\\\": 102,\\n+    \\\"120307\\\":
        102,\\n+    \\\"120359\\\": 102,\\n+    \\\"120411\\\": 102,\\n+    \\\"120463\\\":
        102,\\n+    \\\"43829\\\": 102,\\n+    \\\"42905\\\": 102,\\n+    \\\"383\\\":
        102,\\n+    \\\"7837\\\": 102,\\n+    \\\"1412\\\": 102,\\n+    \\\"119315\\\":
        70,\\n+    \\\"8497\\\": 70,\\n+    \\\"119813\\\": 70,\\n+    \\\"119865\\\":
        70,\\n+    \\\"119917\\\": 70,\\n+    \\\"120021\\\": 70,\\n+    \\\"120073\\\":
        70,\\n+    \\\"120125\\\": 70,\\n+    \\\"120177\\\": 70,\\n+    \\\"120229\\\":
        70,\\n+    \\\"120281\\\": 70,\\n+    \\\"120333\\\": 70,\\n+    \\\"120385\\\":
        70,\\n+    \\\"120437\\\": 70,\\n+    \\\"42904\\\": 70,\\n+    \\\"988\\\":
        70,\\n+    \\\"120778\\\": 70,\\n+    \\\"5556\\\": 70,\\n+    \\\"42205\\\":
        70,\\n+    \\\"71874\\\": 70,\\n+    \\\"71842\\\": 70,\\n+    \\\"66183\\\":
        70,\\n+    \\\"66213\\\": 70,\\n+    \\\"66853\\\": 70,\\n+    \\\"65351\\\":
        103,\\n+    \\\"8458\\\": 103,\\n+    \\\"119840\\\": 103,\\n+    \\\"119892\\\":
        103,\\n+    \\\"119944\\\": 103,\\n+    \\\"120048\\\": 103,\\n+    \\\"120100\\\":
        103,\\n+    \\\"120152\\\": 103,\\n+    \\\"120204\\\": 103,\\n+    \\\"120256\\\":
        103,\\n+    \\\"120308\\\": 103,\\n+    \\\"120360\\\": 103,\\n+    \\\"120412\\\":
        103,\\n+    \\\"120464\\\": 103,\\n+    \\\"609\\\": 103,\\n+    \\\"7555\\\":
        103,\\n+    \\\"397\\\": 103,\\n+    \\\"1409\\\": 103,\\n+    \\\"119814\\\":
        71,\\n+    \\\"119866\\\": 71,\\n+    \\\"119918\\\": 71,\\n+    \\\"119970\\\":
        71,\\n+    \\\"120022\\\": 71,\\n+    \\\"120074\\\": 71,\\n+    \\\"120126\\\":
        71,\\n+    \\\"120178\\\": 71,\\n+    \\\"120230\\\": 71,\\n+    \\\"120282\\\":
        71,\\n+    \\\"120334\\\": 71,\\n+    \\\"120386\\\": 71,\\n+    \\\"120438\\\":
        71,\\n+    \\\"1292\\\": 71,\\n+    \\\"5056\\\": 71,\\n+    \\\"5107\\\":
        71,\\n+    \\\"42198\\\": 71,\\n+    \\\"65352\\\": 104,\\n+    \\\"8462\\\":
        104,\\n+    \\\"119841\\\": 104,\\n+    \\\"119945\\\": 104,\\n+    \\\"119997\\\":
        104,\\n+    \\\"120049\\\": 104,\\n+    \\\"120101\\\": 104,\\n+    \\\"120153\\\":
        104,\\n+    \\\"120205\\\": 104,\\n+    \\\"120257\\\": 104,\\n+    \\\"120309\\\":
        104,\\n+    \\\"120361\\\": 104,\\n+    \\\"120413\\\": 104,\\n+    \\\"120465\\\":
        104,\\n+    \\\"1211\\\": 104,\\n+    \\\"1392\\\": 104,\\n+    \\\"5058\\\":
        104,\\n+    \\\"65320\\\": 72,\\n+    \\\"8459\\\": 72,\\n+    \\\"8460\\\":
        72,\\n+    \\\"8461\\\": 72,\\n+    \\\"119815\\\": 72,\\n+    \\\"119867\\\":
        72,\\n+    \\\"119919\\\": 72,\\n+    \\\"120023\\\": 72,\\n+    \\\"120179\\\":
        72,\\n+    \\\"120231\\\": 72,\\n+    \\\"120283\\\": 72,\\n+    \\\"120335\\\":
        72,\\n+    \\\"120387\\\": 72,\\n+    \\\"120439\\\": 72,\\n+    \\\"919\\\":
        72,\\n+    \\\"120494\\\": 72,\\n+    \\\"120552\\\": 72,\\n+    \\\"120610\\\":
        72,\\n+    \\\"120668\\\": 72,\\n+    \\\"120726\\\": 72,\\n+    \\\"11406\\\":
        72,\\n+    \\\"5051\\\": 72,\\n+    \\\"5500\\\": 72,\\n+    \\\"42215\\\":
        72,\\n+    \\\"66255\\\": 72,\\n+    \\\"731\\\": 105,\\n+    \\\"9075\\\":
        105,\\n+    \\\"65353\\\": 105,\\n+    \\\"8560\\\": 105,\\n+    \\\"8505\\\":
        105,\\n+    \\\"8520\\\": 105,\\n+    \\\"119842\\\": 105,\\n+    \\\"119894\\\":
        105,\\n+    \\\"119946\\\": 105,\\n+    \\\"119998\\\": 105,\\n+    \\\"120050\\\":
        105,\\n+    \\\"120102\\\": 105,\\n+    \\\"120154\\\": 105,\\n+    \\\"120206\\\":
        105,\\n+    \\\"120258\\\": 105,\\n+    \\\"120310\\\": 105,\\n+    \\\"120362\\\":
        105,\\n+    \\\"120414\\\": 105,\\n+    \\\"120466\\\": 105,\\n+    \\\"120484\\\":
        105,\\n+    \\\"618\\\": 105,\\n+    \\\"617\\\": 105,\\n+    \\\"953\\\":
        105,\\n+    \\\"8126\\\": 105,\\n+    \\\"890\\\": 105,\\n+    \\\"120522\\\":
        105,\\n+    \\\"120580\\\": 105,\\n+    \\\"120638\\\": 105,\\n+    \\\"120696\\\":
        105,\\n+    \\\"120754\\\": 105,\\n+    \\\"1110\\\": 105,\\n+    \\\"42567\\\":
        105,\\n+    \\\"1231\\\": 105,\\n+    \\\"43893\\\": 105,\\n+    \\\"5029\\\":
        105,\\n+    \\\"71875\\\": 105,\\n+    \\\"65354\\\": 106,\\n+    \\\"8521\\\":
        106,\\n+    \\\"119843\\\": 106,\\n+    \\\"119895\\\": 106,\\n+    \\\"119947\\\":
        106,\\n+    \\\"119999\\\": 106,\\n+    \\\"120051\\\": 106,\\n+    \\\"120103\\\":
        106,\\n+    \\\"120155\\\": 106,\\n+    \\\"120207\\\": 106,\\n+    \\\"120259\\\":
        106,\\n+    \\\"120311\\\": 106,\\n+    \\\"120363\\\": 106,\\n+    \\\"120415\\\":
        106,\\n+    \\\"120467\\\": 106,\\n+    \\\"1011\\\": 106,\\n+    \\\"1112\\\":
        106,\\n+    \\\"65322\\\": 74,\\n+    \\\"119817\\\": 74,\\n+    \\\"119869\\\":
        74,\\n+    \\\"119921\\\": 74,\\n+    \\\"119973\\\": 74,\\n+    \\\"120025\\\":
        74,\\n+    \\\"120077\\\": 74,\\n+    \\\"120129\\\": 74,\\n+    \\\"120181\\\":
        74,\\n+    \\\"120233\\\": 74,\\n+    \\\"120285\\\": 74,\\n+    \\\"120337\\\":
        74,\\n+    \\\"120389\\\": 74,\\n+    \\\"120441\\\": 74,\\n+    \\\"42930\\\":
        74,\\n+    \\\"895\\\": 74,\\n+    \\\"1032\\\": 74,\\n+    \\\"5035\\\":
        74,\\n+    \\\"5261\\\": 74,\\n+    \\\"42201\\\": 74,\\n+    \\\"119844\\\":
        107,\\n+    \\\"119896\\\": 107,\\n+    \\\"119948\\\": 107,\\n+    \\\"120000\\\":
        107,\\n+    \\\"120052\\\": 107,\\n+    \\\"120104\\\": 107,\\n+    \\\"120156\\\":
        107,\\n+    \\\"120208\\\": 107,\\n+    \\\"120260\\\": 107,\\n+    \\\"120312\\\":
        107,\\n+    \\\"120364\\\": 107,\\n+    \\\"120416\\\": 107,\\n+    \\\"120468\\\":
        107,\\n+    \\\"8490\\\": 75,\\n+    \\\"65323\\\": 75,\\n+    \\\"119818\\\":
        75,\\n+    \\\"119870\\\": 75,\\n+    \\\"119922\\\": 75,\\n+    \\\"119974\\\":
        75,\\n+    \\\"120026\\\": 75,\\n+    \\\"120078\\\": 75,\\n+    \\\"120130\\\":
        75,\\n+    \\\"120182\\\": 75,\\n+    \\\"120234\\\": 75,\\n+    \\\"120286\\\":
        75,\\n+    \\\"120338\\\": 75,\\n+    \\\"120390\\\": 75,\\n+    \\\"120442\\\":
        75,\\n+    \\\"922\\\": 75,\\n+    \\\"120497\\\": 75,\\n+    \\\"120555\\\":
        75,\\n+    \\\"120613\\\": 75,\\n+    \\\"120671\\\": 75,\\n+    \\\"120729\\\":
        75,\\n+    \\\"11412\\\": 75,\\n+    \\\"5094\\\": 75,\\n+    \\\"5845\\\":
        75,\\n+    \\\"42199\\\": 75,\\n+    \\\"66840\\\": 75,\\n+    \\\"1472\\\":
        108,\\n+    \\\"8739\\\": 73,\\n+    \\\"9213\\\": 73,\\n+    \\\"65512\\\":
        73,\\n+    \\\"1633\\\": 108,\\n+    \\\"1777\\\": 73,\\n+    \\\"66336\\\":
        108,\\n+    \\\"125127\\\": 108,\\n+    \\\"120783\\\": 73,\\n+    \\\"120793\\\":
        73,\\n+    \\\"120803\\\": 73,\\n+    \\\"120813\\\": 73,\\n+    \\\"120823\\\":
        73,\\n+    \\\"130033\\\": 73,\\n+    \\\"65321\\\": 73,\\n+    \\\"8544\\\":
        73,\\n+    \\\"8464\\\": 73,\\n+    \\\"8465\\\": 73,\\n+    \\\"119816\\\":
        73,\\n+    \\\"119868\\\": 73,\\n+    \\\"119920\\\": 73,\\n+    \\\"120024\\\":
        73,\\n+    \\\"120128\\\": 73,\\n+    \\\"120180\\\": 73,\\n+    \\\"120232\\\":
        73,\\n+    \\\"120284\\\": 73,\\n+    \\\"120336\\\": 73,\\n+    \\\"120388\\\":
        73,\\n+    \\\"120440\\\": 73,\\n+    \\\"65356\\\": 108,\\n+    \\\"8572\\\":
        73,\\n+    \\\"8467\\\": 108,\\n+    \\\"119845\\\": 108,\\n+    \\\"119897\\\":
        108,\\n+    \\\"119949\\\": 108,\\n+    \\\"120001\\\": 108,\\n+    \\\"120053\\\":
        108,\\n+    \\\"120105\\\": 73,\\n+    \\\"120157\\\": 73,\\n+    \\\"120209\\\":
        73,\\n+    \\\"120261\\\": 73,\\n+    \\\"120313\\\": 73,\\n+    \\\"120365\\\":
        73,\\n+    \\\"120417\\\": 73,\\n+    \\\"120469\\\": 73,\\n+    \\\"448\\\":
        73,\\n+    \\\"120496\\\": 73,\\n+    \\\"120554\\\": 73,\\n+    \\\"120612\\\":
        73,\\n+    \\\"120670\\\": 73,\\n+    \\\"120728\\\": 73,\\n+    \\\"11410\\\":
        73,\\n+    \\\"1030\\\": 73,\\n+    \\\"1216\\\": 73,\\n+    \\\"1493\\\":
        108,\\n+    \\\"1503\\\": 108,\\n+    \\\"1575\\\": 108,\\n+    \\\"126464\\\":
        108,\\n+    \\\"126592\\\": 108,\\n+    \\\"65166\\\": 108,\\n+    \\\"65165\\\":
        108,\\n+    \\\"1994\\\": 108,\\n+    \\\"11599\\\": 73,\\n+    \\\"5825\\\":
        73,\\n+    \\\"42226\\\": 73,\\n+    \\\"93992\\\": 73,\\n+    \\\"66186\\\":
        124,\\n+    \\\"66313\\\": 124,\\n+    \\\"119338\\\": 76,\\n+    \\\"8556\\\":
        76,\\n+    \\\"8466\\\": 76,\\n+    \\\"119819\\\": 76,\\n+    \\\"119871\\\":
        76,\\n+    \\\"119923\\\": 76,\\n+    \\\"120027\\\": 76,\\n+    \\\"120079\\\":
        76,\\n+    \\\"120131\\\": 76,\\n+    \\\"120183\\\": 76,\\n+    \\\"120235\\\":
        76,\\n+    \\\"120287\\\": 76,\\n+    \\\"120339\\\": 76,\\n+    \\\"120391\\\":
        76,\\n+    \\\"120443\\\": 76,\\n+    \\\"11472\\\": 76,\\n+    \\\"5086\\\":
        76,\\n+    \\\"5290\\\": 76,\\n+    \\\"42209\\\": 76,\\n+    \\\"93974\\\":
        76,\\n+    \\\"71843\\\": 76,\\n+    \\\"71858\\\": 76,\\n+    \\\"66587\\\":
        76,\\n+    \\\"66854\\\": 76,\\n+    \\\"65325\\\": 77,\\n+    \\\"8559\\\":
        77,\\n+    \\\"8499\\\": 77,\\n+    \\\"119820\\\": 77,\\n+    \\\"119872\\\":
        77,\\n+    \\\"119924\\\": 77,\\n+    \\\"120028\\\": 77,\\n+    \\\"120080\\\":
        77,\\n+    \\\"120132\\\": 77,\\n+    \\\"120184\\\": 77,\\n+    \\\"120236\\\":
        77,\\n+    \\\"120288\\\": 77,\\n+    \\\"120340\\\": 77,\\n+    \\\"120392\\\":
        77,\\n+    \\\"120444\\\": 77,\\n+    \\\"924\\\": 77,\\n+    \\\"120499\\\":
        77,\\n+    \\\"120557\\\": 77,\\n+    \\\"120615\\\": 77,\\n+    \\\"120673\\\":
        77,\\n+    \\\"120731\\\": 77,\\n+    \\\"1018\\\": 77,\\n+    \\\"11416\\\":
        77,\\n+    \\\"5047\\\": 77,\\n+    \\\"5616\\\": 77,\\n+    \\\"5846\\\":
        77,\\n+    \\\"42207\\\": 77,\\n+    \\\"66224\\\": 77,\\n+    \\\"66321\\\":
        77,\\n+    \\\"119847\\\": 110,\\n+    \\\"119899\\\": 110,\\n+    \\\"119951\\\":
        110,\\n+    \\\"120003\\\": 110,\\n+    \\\"120055\\\": 110,\\n+    \\\"120107\\\":
        110,\\n+    \\\"120159\\\": 110,\\n+    \\\"120211\\\": 110,\\n+    \\\"120263\\\":
        110,\\n+    \\\"120315\\\": 110,\\n+    \\\"120367\\\": 110,\\n+    \\\"120419\\\":
        110,\\n+    \\\"120471\\\": 110,\\n+    \\\"1400\\\": 110,\\n+    \\\"1404\\\":
        110,\\n+    \\\"65326\\\": 78,\\n+    \\\"8469\\\": 78,\\n+    \\\"119821\\\":
        78,\\n+    \\\"119873\\\": 78,\\n+    \\\"119925\\\": 78,\\n+    \\\"119977\\\":
        78,\\n+    \\\"120029\\\": 78,\\n+    \\\"120081\\\": 78,\\n+    \\\"120185\\\":
        78,\\n+    \\\"120237\\\": 78,\\n+    \\\"120289\\\": 78,\\n+    \\\"120341\\\":
        78,\\n+    \\\"120393\\\": 78,\\n+    \\\"120445\\\": 78,\\n+    \\\"925\\\":
        78,\\n+    \\\"120500\\\": 78,\\n+    \\\"120558\\\": 78,\\n+    \\\"120616\\\":
        78,\\n+    \\\"120674\\\": 78,\\n+    \\\"120732\\\": 78,\\n+    \\\"11418\\\":
        78,\\n+    \\\"42208\\\": 78,\\n+    \\\"66835\\\": 78,\\n+    \\\"3074\\\":
        111,\\n+    \\\"3202\\\": 111,\\n+    \\\"3330\\\": 111,\\n+    \\\"3458\\\":
        111,\\n+    \\\"2406\\\": 111,\\n+    \\\"2662\\\": 111,\\n+    \\\"2790\\\":
        111,\\n+    \\\"3046\\\": 111,\\n+    \\\"3174\\\": 111,\\n+    \\\"3302\\\":
        111,\\n+    \\\"3430\\\": 111,\\n+    \\\"3664\\\": 111,\\n+    \\\"3792\\\":
        111,\\n+    \\\"4160\\\": 111,\\n+    \\\"1637\\\": 111,\\n+    \\\"1781\\\":
        111,\\n+    \\\"65359\\\": 111,\\n+    \\\"8500\\\": 111,\\n+    \\\"119848\\\":
        111,\\n+    \\\"119900\\\": 111,\\n+    \\\"119952\\\": 111,\\n+    \\\"120056\\\":
        111,\\n+    \\\"120108\\\": 111,\\n+    \\\"120160\\\": 111,\\n+    \\\"120212\\\":
        111,\\n+    \\\"120264\\\": 111,\\n+    \\\"120316\\\": 111,\\n+    \\\"120368\\\":
        111,\\n+    \\\"120420\\\": 111,\\n+    \\\"120472\\\": 111,\\n+    \\\"7439\\\":
        111,\\n+    \\\"7441\\\": 111,\\n+    \\\"43837\\\": 111,\\n+    \\\"959\\\":
        111,\\n+    \\\"120528\\\": 111,\\n+    \\\"120586\\\": 111,\\n+    \\\"120644\\\":
        111,\\n+    \\\"120702\\\": 111,\\n+    \\\"120760\\\": 111,\\n+    \\\"963\\\":
        111,\\n+    \\\"120532\\\": 111,\\n+    \\\"120590\\\": 111,\\n+    \\\"120648\\\":
        111,\\n+    \\\"120706\\\": 111,\\n+    \\\"120764\\\": 111,\\n+    \\\"11423\\\":
        111,\\n+    \\\"4351\\\": 111,\\n+    \\\"1413\\\": 111,\\n+    \\\"1505\\\":
        111,\\n+    \\\"1607\\\": 111,\\n+    \\\"126500\\\": 111,\\n+    \\\"126564\\\":
        111,\\n+    \\\"126596\\\": 111,\\n+    \\\"65259\\\": 111,\\n+    \\\"65260\\\":
        111,\\n+    \\\"65258\\\": 111,\\n+    \\\"65257\\\": 111,\\n+    \\\"1726\\\":
        111,\\n+    \\\"64428\\\": 111,\\n+    \\\"64429\\\": 111,\\n+    \\\"64427\\\":
        111,\\n+    \\\"64426\\\": 111,\\n+    \\\"1729\\\": 111,\\n+    \\\"64424\\\":
        111,\\n+    \\\"64425\\\": 111,\\n+    \\\"64423\\\": 111,\\n+    \\\"64422\\\":
        111,\\n+    \\\"1749\\\": 111,\\n+    \\\"3360\\\": 111,\\n+    \\\"4125\\\":
        111,\\n+    \\\"66794\\\": 111,\\n+    \\\"71880\\\": 111,\\n+    \\\"71895\\\":
        111,\\n+    \\\"66604\\\": 111,\\n+    \\\"1984\\\": 79,\\n+    \\\"2534\\\":
        79,\\n+    \\\"2918\\\": 79,\\n+    \\\"12295\\\": 79,\\n+    \\\"70864\\\":
        79,\\n+    \\\"71904\\\": 79,\\n+    \\\"120782\\\": 79,\\n+    \\\"120792\\\":
        79,\\n+    \\\"120802\\\": 79,\\n+    \\\"120812\\\": 79,\\n+    \\\"120822\\\":
        79,\\n+    \\\"130032\\\": 79,\\n+    \\\"65327\\\": 79,\\n+    \\\"119822\\\":
        79,\\n+    \\\"119874\\\": 79,\\n+    \\\"119926\\\": 79,\\n+    \\\"119978\\\":
        79,\\n+    \\\"120030\\\": 79,\\n+    \\\"120082\\\": 79,\\n+    \\\"120134\\\":
        79,\\n+    \\\"120186\\\": 79,\\n+    \\\"120238\\\": 79,\\n+    \\\"120290\\\":
        79,\\n+    \\\"120342\\\": 79,\\n+    \\\"120394\\\": 79,\\n+    \\\"120446\\\":
        79,\\n+    \\\"927\\\": 79,\\n+    \\\"120502\\\": 79,\\n+    \\\"120560\\\":
        79,\\n+    \\\"120618\\\": 79,\\n+    \\\"120676\\\": 79,\\n+    \\\"120734\\\":
        79,\\n+    \\\"11422\\\": 79,\\n+    \\\"1365\\\": 79,\\n+    \\\"11604\\\":
        79,\\n+    \\\"4816\\\": 79,\\n+    \\\"2848\\\": 79,\\n+    \\\"66754\\\":
        79,\\n+    \\\"42227\\\": 79,\\n+    \\\"71861\\\": 79,\\n+    \\\"66194\\\":
        79,\\n+    \\\"66219\\\": 79,\\n+    \\\"66564\\\": 79,\\n+    \\\"66838\\\":
        79,\\n+    \\\"9076\\\": 112,\\n+    \\\"65360\\\": 112,\\n+    \\\"119849\\\":
        112,\\n+    \\\"119901\\\": 112,\\n+    \\\"119953\\\": 112,\\n+    \\\"120005\\\":
        112,\\n+    \\\"120057\\\": 112,\\n+    \\\"120109\\\": 112,\\n+    \\\"120161\\\":
        112,\\n+    \\\"120213\\\": 112,\\n+    \\\"120265\\\": 112,\\n+    \\\"120317\\\":
        112,\\n+    \\\"120369\\\": 112,\\n+    \\\"120421\\\": 112,\\n+    \\\"120473\\\":
        112,\\n+    \\\"961\\\": 112,\\n+    \\\"120530\\\": 112,\\n+    \\\"120544\\\":
        112,\\n+    \\\"120588\\\": 112,\\n+    \\\"120602\\\": 112,\\n+    \\\"120646\\\":
        112,\\n+    \\\"120660\\\": 112,\\n+    \\\"120704\\\": 112,\\n+    \\\"120718\\\":
        112,\\n+    \\\"120762\\\": 112,\\n+    \\\"120776\\\": 112,\\n+    \\\"11427\\\":
        112,\\n+    \\\"65328\\\": 80,\\n+    \\\"8473\\\": 80,\\n+    \\\"119823\\\":
        80,\\n+    \\\"119875\\\": 80,\\n+    \\\"119927\\\": 80,\\n+    \\\"119979\\\":
        80,\\n+    \\\"120031\\\": 80,\\n+    \\\"120083\\\": 80,\\n+    \\\"120187\\\":
        80,\\n+    \\\"120239\\\": 80,\\n+    \\\"120291\\\": 80,\\n+    \\\"120343\\\":
        80,\\n+    \\\"120395\\\": 80,\\n+    \\\"120447\\\": 80,\\n+    \\\"929\\\":
        80,\\n+    \\\"120504\\\": 80,\\n+    \\\"120562\\\": 80,\\n+    \\\"120620\\\":
        80,\\n+    \\\"120678\\\": 80,\\n+    \\\"120736\\\": 80,\\n+    \\\"11426\\\":
        80,\\n+    \\\"5090\\\": 80,\\n+    \\\"5229\\\": 80,\\n+    \\\"42193\\\":
        80,\\n+    \\\"66197\\\": 80,\\n+    \\\"119850\\\": 113,\\n+    \\\"119902\\\":
        113,\\n+    \\\"119954\\\": 113,\\n+    \\\"120006\\\": 113,\\n+    \\\"120058\\\":
        113,\\n+    \\\"120110\\\": 113,\\n+    \\\"120162\\\": 113,\\n+    \\\"120214\\\":
        113,\\n+    \\\"120266\\\": 113,\\n+    \\\"120318\\\": 113,\\n+    \\\"120370\\\":
        113,\\n+    \\\"120422\\\": 113,\\n+    \\\"120474\\\": 113,\\n+    \\\"1307\\\":
        113,\\n+    \\\"1379\\\": 113,\\n+    \\\"1382\\\": 113,\\n+    \\\"8474\\\":
        81,\\n+    \\\"119824\\\": 81,\\n+    \\\"119876\\\": 81,\\n+    \\\"119928\\\":
        81,\\n+    \\\"119980\\\": 81,\\n+    \\\"120032\\\": 81,\\n+    \\\"120084\\\":
        81,\\n+    \\\"120188\\\": 81,\\n+    \\\"120240\\\": 81,\\n+    \\\"120292\\\":
        81,\\n+    \\\"120344\\\": 81,\\n+    \\\"120396\\\": 81,\\n+    \\\"120448\\\":
        81,\\n+    \\\"11605\\\": 81,\\n+    \\\"119851\\\": 114,\\n+    \\\"119903\\\":
        114,\\n+    \\\"119955\\\": 114,\\n+    \\\"120007\\\": 114,\\n+    \\\"120059\\\":
        114,\\n+    \\\"120111\\\": 114,\\n+    \\\"120163\\\": 114,\\n+    \\\"120215\\\":
        114,\\n+    \\\"120267\\\": 114,\\n+    \\\"120319\\\": 114,\\n+    \\\"120371\\\":
        114,\\n+    \\\"120423\\\": 114,\\n+    \\\"120475\\\": 114,\\n+    \\\"43847\\\":
        114,\\n+    \\\"43848\\\": 114,\\n+    \\\"7462\\\": 114,\\n+    \\\"11397\\\":
        114,\\n+    \\\"43905\\\": 114,\\n+    \\\"119318\\\": 82,\\n+    \\\"8475\\\":
        82,\\n+    \\\"8476\\\": 82,\\n+    \\\"8477\\\": 82,\\n+    \\\"119825\\\":
        82,\\n+    \\\"119877\\\": 82,\\n+    \\\"119929\\\": 82,\\n+    \\\"120033\\\":
        82,\\n+    \\\"120189\\\": 82,\\n+    \\\"120241\\\": 82,\\n+    \\\"120293\\\":
        82,\\n+    \\\"120345\\\": 82,\\n+    \\\"120397\\\": 82,\\n+    \\\"120449\\\":
        82,\\n+    \\\"422\\\": 82,\\n+    \\\"5025\\\": 82,\\n+    \\\"5074\\\":
        82,\\n+    \\\"66740\\\": 82,\\n+    \\\"5511\\\": 82,\\n+    \\\"42211\\\":
        82,\\n+    \\\"94005\\\": 82,\\n+    \\\"65363\\\": 115,\\n+    \\\"119852\\\":
        115,\\n+    \\\"119904\\\": 115,\\n+    \\\"119956\\\": 115,\\n+    \\\"120008\\\":
        115,\\n+    \\\"120060\\\": 115,\\n+    \\\"120112\\\": 115,\\n+    \\\"120164\\\":
        115,\\n+    \\\"120216\\\": 115,\\n+    \\\"120268\\\": 115,\\n+    \\\"120320\\\":
        115,\\n+    \\\"120372\\\": 115,\\n+    \\\"120424\\\": 115,\\n+    \\\"120476\\\":
        115,\\n+    \\\"42801\\\": 115,\\n+    \\\"445\\\": 115,\\n+    \\\"1109\\\":
        115,\\n+    \\\"43946\\\": 115,\\n+    \\\"71873\\\": 115,\\n+    \\\"66632\\\":
        115,\\n+    \\\"65331\\\": 83,\\n+    \\\"119826\\\": 83,\\n+    \\\"119878\\\":
        83,\\n+    \\\"119930\\\": 83,\\n+    \\\"119982\\\": 83,\\n+    \\\"120034\\\":
        83,\\n+    \\\"120086\\\": 83,\\n+    \\\"120138\\\": 83,\\n+    \\\"120190\\\":
        83,\\n+    \\\"120242\\\": 83,\\n+    \\\"120294\\\": 83,\\n+    \\\"120346\\\":
        83,\\n+    \\\"120398\\\": 83,\\n+    \\\"120450\\\": 83,\\n+    \\\"1029\\\":
        83,\\n+    \\\"1359\\\": 83,\\n+    \\\"5077\\\": 83,\\n+    \\\"5082\\\":
        83,\\n+    \\\"42210\\\": 83,\\n+    \\\"94010\\\": 83,\\n+    \\\"66198\\\":
        83,\\n+    \\\"66592\\\": 83,\\n+    \\\"119853\\\": 116,\\n+    \\\"119905\\\":
        116,\\n+    \\\"119957\\\": 116,\\n+    \\\"120009\\\": 116,\\n+    \\\"120061\\\":
        116,\\n+    \\\"120113\\\": 116,\\n+    \\\"120165\\\": 116,\\n+    \\\"120217\\\":
        116,\\n+    \\\"120269\\\": 116,\\n+    \\\"120321\\\": 116,\\n+    \\\"120373\\\":
        116,\\n+    \\\"120425\\\": 116,\\n+    \\\"120477\\\": 116,\\n+    \\\"8868\\\":
        84,\\n+    \\\"10201\\\": 84,\\n+    \\\"128872\\\": 84,\\n+    \\\"65332\\\":
        84,\\n+    \\\"119827\\\": 84,\\n+    \\\"119879\\\": 84,\\n+    \\\"119931\\\":
        84,\\n+    \\\"119983\\\": 84,\\n+    \\\"120035\\\": 84,\\n+    \\\"120087\\\":
        84,\\n+    \\\"120139\\\": 84,\\n+    \\\"120191\\\": 84,\\n+    \\\"120243\\\":
        84,\\n+    \\\"120295\\\": 84,\\n+    \\\"120347\\\": 84,\\n+    \\\"120399\\\":
        84,\\n+    \\\"120451\\\": 84,\\n+    \\\"932\\\": 84,\\n+    \\\"120507\\\":
        84,\\n+    \\\"120565\\\": 84,\\n+    \\\"120623\\\": 84,\\n+    \\\"120681\\\":
        84,\\n+    \\\"120739\\\": 84,\\n+    \\\"11430\\\": 84,\\n+    \\\"5026\\\":
        84,\\n+    \\\"42196\\\": 84,\\n+    \\\"93962\\\": 84,\\n+    \\\"71868\\\":
        84,\\n+    \\\"66199\\\": 84,\\n+    \\\"66225\\\": 84,\\n+    \\\"66325\\\":
        84,\\n+    \\\"119854\\\": 117,\\n+    \\\"119906\\\": 117,\\n+    \\\"119958\\\":
        117,\\n+    \\\"120010\\\": 117,\\n+    \\\"120062\\\": 117,\\n+    \\\"120114\\\":
        117,\\n+    \\\"120166\\\": 117,\\n+    \\\"120218\\\": 117,\\n+    \\\"120270\\\":
        117,\\n+    \\\"120322\\\": 117,\\n+    \\\"120374\\\": 117,\\n+    \\\"120426\\\":
        117,\\n+    \\\"120478\\\": 117,\\n+    \\\"42911\\\": 117,\\n+    \\\"7452\\\":
        117,\\n+    \\\"43854\\\": 117,\\n+    \\\"43858\\\": 117,\\n+    \\\"651\\\":
        117,\\n+    \\\"965\\\": 117,\\n+    \\\"120534\\\": 117,\\n+    \\\"120592\\\":
        117,\\n+    \\\"120650\\\": 117,\\n+    \\\"120708\\\": 117,\\n+    \\\"120766\\\":
        117,\\n+    \\\"1405\\\": 117,\\n+    \\\"66806\\\": 117,\\n+    \\\"71896\\\":
        117,\\n+    \\\"8746\\\": 85,\\n+    \\\"8899\\\": 85,\\n+    \\\"119828\\\":
        85,\\n+    \\\"119880\\\": 85,\\n+    \\\"119932\\\": 85,\\n+    \\\"119984\\\":
        85,\\n+    \\\"120036\\\": 85,\\n+    \\\"120088\\\": 85,\\n+    \\\"120140\\\":
        85,\\n+    \\\"120192\\\": 85,\\n+    \\\"120244\\\": 85,\\n+    \\\"120296\\\":
        85,\\n+    \\\"120348\\\": 85,\\n+    \\\"120400\\\": 85,\\n+    \\\"120452\\\":
        85,\\n+    \\\"1357\\\": 85,\\n+    \\\"4608\\\": 85,\\n+    \\\"66766\\\":
        85,\\n+    \\\"5196\\\": 85,\\n+    \\\"42228\\\": 85,\\n+    \\\"94018\\\":
        85,\\n+    \\\"71864\\\": 85,\\n+    \\\"8744\\\": 118,\\n+    \\\"8897\\\":
        118,\\n+    \\\"65366\\\": 118,\\n+    \\\"8564\\\": 118,\\n+    \\\"119855\\\":
        118,\\n+    \\\"119907\\\": 118,\\n+    \\\"119959\\\": 118,\\n+    \\\"120011\\\":
        118,\\n+    \\\"120063\\\": 118,\\n+    \\\"120115\\\": 118,\\n+    \\\"120167\\\":
        118,\\n+    \\\"120219\\\": 118,\\n+    \\\"120271\\\": 118,\\n+    \\\"120323\\\":
        118,\\n+    \\\"120375\\\": 118,\\n+    \\\"120427\\\": 118,\\n+    \\\"120479\\\":
        118,\\n+    \\\"7456\\\": 118,\\n+    \\\"957\\\": 118,\\n+    \\\"120526\\\":
        118,\\n+    \\\"120584\\\": 118,\\n+    \\\"120642\\\": 118,\\n+    \\\"120700\\\":
        118,\\n+    \\\"120758\\\": 118,\\n+    \\\"1141\\\": 118,\\n+    \\\"1496\\\":
        118,\\n+    \\\"71430\\\": 118,\\n+    \\\"43945\\\": 118,\\n+    \\\"71872\\\":
        118,\\n+    \\\"119309\\\": 86,\\n+    \\\"1639\\\": 86,\\n+    \\\"1783\\\":
        86,\\n+    \\\"8548\\\": 86,\\n+    \\\"119829\\\": 86,\\n+    \\\"119881\\\":
        86,\\n+    \\\"119933\\\": 86,\\n+    \\\"119985\\\": 86,\\n+    \\\"120037\\\":
        86,\\n+    \\\"120089\\\": 86,\\n+    \\\"120141\\\": 86,\\n+    \\\"120193\\\":
        86,\\n+    \\\"120245\\\": 86,\\n+    \\\"120297\\\": 86,\\n+    \\\"120349\\\":
        86,\\n+    \\\"120401\\\": 86,\\n+    \\\"120453\\\": 86,\\n+    \\\"1140\\\":
        86,\\n+    \\\"11576\\\": 86,\\n+    \\\"5081\\\": 86,\\n+    \\\"5167\\\":
        86,\\n+    \\\"42719\\\": 86,\\n+    \\\"42214\\\": 86,\\n+    \\\"93960\\\":
        86,\\n+    \\\"71840\\\": 86,\\n+    \\\"66845\\\": 86,\\n+    \\\"623\\\":
        119,\\n+    \\\"119856\\\": 119,\\n+    \\\"119908\\\": 119,\\n+    \\\"119960\\\":
        119,\\n+    \\\"120012\\\": 119,\\n+    \\\"120064\\\": 119,\\n+    \\\"120116\\\":
        119,\\n+    \\\"120168\\\": 119,\\n+    \\\"120220\\\": 119,\\n+    \\\"120272\\\":
        119,\\n+    \\\"120324\\\": 119,\\n+    \\\"120376\\\": 119,\\n+    \\\"120428\\\":
        119,\\n+    \\\"120480\\\": 119,\\n+    \\\"7457\\\": 119,\\n+    \\\"1121\\\":
        119,\\n+    \\\"1309\\\": 119,\\n+    \\\"1377\\\": 119,\\n+    \\\"71434\\\":
        119,\\n+    \\\"71438\\\": 119,\\n+    \\\"71439\\\": 119,\\n+    \\\"43907\\\":
        119,\\n+    \\\"71919\\\": 87,\\n+    \\\"71910\\\": 87,\\n+    \\\"119830\\\":
        87,\\n+    \\\"119882\\\": 87,\\n+    \\\"119934\\\": 87,\\n+    \\\"119986\\\":
        87,\\n+    \\\"120038\\\": 87,\\n+    \\\"120090\\\": 87,\\n+    \\\"120142\\\":
        87,\\n+    \\\"120194\\\": 87,\\n+    \\\"120246\\\": 87,\\n+    \\\"120298\\\":
        87,\\n+    \\\"120350\\\": 87,\\n+    \\\"120402\\\": 87,\\n+    \\\"120454\\\":
        87,\\n+    \\\"1308\\\": 87,\\n+    \\\"5043\\\": 87,\\n+    \\\"5076\\\":
        87,\\n+    \\\"42218\\\": 87,\\n+    \\\"5742\\\": 120,\\n+    \\\"10539\\\":
        120,\\n+    \\\"10540\\\": 120,\\n+    \\\"10799\\\": 120,\\n+    \\\"65368\\\":
        120,\\n+    \\\"8569\\\": 120,\\n+    \\\"119857\\\": 120,\\n+    \\\"119909\\\":
        120,\\n+    \\\"119961\\\": 120,\\n+    \\\"120013\\\": 120,\\n+    \\\"120065\\\":
        120,\\n+    \\\"120117\\\": 120,\\n+    \\\"120169\\\": 120,\\n+    \\\"120221\\\":
        120,\\n+    \\\"120273\\\": 120,\\n+    \\\"120325\\\": 120,\\n+    \\\"120377\\\":
        120,\\n+    \\\"120429\\\": 120,\\n+    \\\"120481\\\": 120,\\n+    \\\"5441\\\":
        120,\\n+    \\\"5501\\\": 120,\\n+    \\\"5741\\\": 88,\\n+    \\\"9587\\\":
        88,\\n+    \\\"66338\\\": 88,\\n+    \\\"71916\\\": 88,\\n+    \\\"65336\\\":
        88,\\n+    \\\"8553\\\": 88,\\n+    \\\"119831\\\": 88,\\n+    \\\"119883\\\":
        88,\\n+    \\\"119935\\\": 88,\\n+    \\\"119987\\\": 88,\\n+    \\\"120039\\\":
        88,\\n+    \\\"120091\\\": 88,\\n+    \\\"120143\\\": 88,\\n+    \\\"120195\\\":
        88,\\n+    \\\"120247\\\": 88,\\n+    \\\"120299\\\": 88,\\n+    \\\"120351\\\":
        88,\\n+    \\\"120403\\\": 88,\\n+    \\\"120455\\\": 88,\\n+    \\\"42931\\\":
        88,\\n+    \\\"935\\\": 88,\\n+    \\\"120510\\\": 88,\\n+    \\\"120568\\\":
        88,\\n+    \\\"120626\\\": 88,\\n+    \\\"120684\\\": 88,\\n+    \\\"120742\\\":
        88,\\n+    \\\"11436\\\": 88,\\n+    \\\"11613\\\": 88,\\n+    \\\"5815\\\":
        88,\\n+    \\\"42219\\\": 88,\\n+    \\\"66192\\\": 88,\\n+    \\\"66228\\\":
        88,\\n+    \\\"66327\\\": 88,\\n+    \\\"66855\\\": 88,\\n+    \\\"611\\\":
        121,\\n+    \\\"7564\\\": 121,\\n+    \\\"65369\\\": 121,\\n+    \\\"119858\\\":
        121,\\n+    \\\"119910\\\": 121,\\n+    \\\"119962\\\": 121,\\n+    \\\"120014\\\":
        121,\\n+    \\\"120066\\\": 121,\\n+    \\\"120118\\\": 121,\\n+    \\\"120170\\\":
        121,\\n+    \\\"120222\\\": 121,\\n+    \\\"120274\\\": 121,\\n+    \\\"120326\\\":
        121,\\n+    \\\"120378\\\": 121,\\n+    \\\"120430\\\": 121,\\n+    \\\"120482\\\":
        121,\\n+    \\\"655\\\": 121,\\n+    \\\"7935\\\": 121,\\n+    \\\"43866\\\":
        121,\\n+    \\\"947\\\": 121,\\n+    \\\"8509\\\": 121,\\n+    \\\"120516\\\":
        121,\\n+    \\\"120574\\\": 121,\\n+    \\\"120632\\\": 121,\\n+    \\\"120690\\\":
        121,\\n+    \\\"120748\\\": 121,\\n+    \\\"1199\\\": 121,\\n+    \\\"4327\\\":
        121,\\n+    \\\"71900\\\": 121,\\n+    \\\"65337\\\": 89,\\n+    \\\"119832\\\":
        89,\\n+    \\\"119884\\\": 89,\\n+    \\\"119936\\\": 89,\\n+    \\\"119988\\\":
        89,\\n+    \\\"120040\\\": 89,\\n+    \\\"120092\\\": 89,\\n+    \\\"120144\\\":
        89,\\n+    \\\"120196\\\": 89,\\n+    \\\"120248\\\": 89,\\n+    \\\"120300\\\":
        89,\\n+    \\\"120352\\\": 89,\\n+    \\\"120404\\\": 89,\\n+    \\\"120456\\\":
        89,\\n+    \\\"933\\\": 89,\\n+    \\\"978\\\": 89,\\n+    \\\"120508\\\":
        89,\\n+    \\\"120566\\\": 89,\\n+    \\\"120624\\\": 89,\\n+    \\\"120682\\\":
        89,\\n+    \\\"120740\\\": 89,\\n+    \\\"11432\\\": 89,\\n+    \\\"1198\\\":
        89,\\n+    \\\"5033\\\": 89,\\n+    \\\"5053\\\": 89,\\n+    \\\"42220\\\":
        89,\\n+    \\\"94019\\\": 89,\\n+    \\\"71844\\\": 89,\\n+    \\\"66226\\\":
        89,\\n+    \\\"119859\\\": 122,\\n+    \\\"119911\\\": 122,\\n+    \\\"119963\\\":
        122,\\n+    \\\"120015\\\": 122,\\n+    \\\"120067\\\": 122,\\n+    \\\"120119\\\":
        122,\\n+    \\\"120171\\\": 122,\\n+    \\\"120223\\\": 122,\\n+    \\\"120275\\\":
        122,\\n+    \\\"120327\\\": 122,\\n+    \\\"120379\\\": 122,\\n+    \\\"120431\\\":
        122,\\n+    \\\"120483\\\": 122,\\n+    \\\"7458\\\": 122,\\n+    \\\"43923\\\":
        122,\\n+    \\\"71876\\\": 122,\\n+    \\\"66293\\\": 90,\\n+    \\\"71909\\\":
        90,\\n+    \\\"65338\\\": 90,\\n+    \\\"8484\\\": 90,\\n+    \\\"8488\\\":
        90,\\n+    \\\"119833\\\": 90,\\n+    \\\"119885\\\": 90,\\n+    \\\"119937\\\":
        90,\\n+    \\\"119989\\\": 90,\\n+    \\\"120041\\\": 90,\\n+    \\\"120197\\\":
        90,\\n+    \\\"120249\\\": 90,\\n+    \\\"120301\\\": 90,\\n+    \\\"120353\\\":
        90,\\n+    \\\"120405\\\": 90,\\n+    \\\"120457\\\": 90,\\n+    \\\"918\\\":
        90,\\n+    \\\"120493\\\": 90,\\n+    \\\"120551\\\": 90,\\n+    \\\"120609\\\":
        90,\\n+    \\\"120667\\\": 90,\\n+    \\\"120725\\\": 90,\\n+    \\\"5059\\\":
        90,\\n+    \\\"42204\\\": 90,\\n+    \\\"71849\\\": 90,\\n+    \\\"65282\\\":
        34,\\n+    \\\"65284\\\": 36,\\n+    \\\"65285\\\": 37,\\n+    \\\"65286\\\":
        38,\\n+    \\\"65290\\\": 42,\\n+    \\\"65291\\\": 43,\\n+    \\\"65294\\\":
        46,\\n+    \\\"65295\\\": 47,\\n+    \\\"65296\\\": 48,\\n+    \\\"65297\\\":
        49,\\n+    \\\"65298\\\": 50,\\n+    \\\"65299\\\": 51,\\n+    \\\"65300\\\":
        52,\\n+    \\\"65301\\\": 53,\\n+    \\\"65302\\\": 54,\\n+    \\\"65303\\\":
        55,\\n+    \\\"65304\\\": 56,\\n+    \\\"65305\\\": 57,\\n+    \\\"65308\\\":
        60,\\n+    \\\"65309\\\": 61,\\n+    \\\"65310\\\": 62,\\n+    \\\"65312\\\":
        64,\\n+    \\\"65316\\\": 68,\\n+    \\\"65318\\\": 70,\\n+    \\\"65319\\\":
        71,\\n+    \\\"65324\\\": 76,\\n+    \\\"65329\\\": 81,\\n+    \\\"65330\\\":
        82,\\n+    \\\"65333\\\": 85,\\n+    \\\"65334\\\": 86,\\n+    \\\"65335\\\":
        87,\\n+    \\\"65343\\\": 95,\\n+    \\\"65346\\\": 98,\\n+    \\\"65348\\\":
        100,\\n+    \\\"65350\\\": 102,\\n+    \\\"65355\\\": 107,\\n+    \\\"65357\\\":
        109,\\n+    \\\"65358\\\": 110,\\n+    \\\"65361\\\": 113,\\n+    \\\"65362\\\":
        114,\\n+    \\\"65364\\\": 116,\\n+    \\\"65365\\\": 117,\\n+    \\\"65367\\\":
        119,\\n+    \\\"65370\\\": 122,\\n+    \\\"65371\\\": 123,\\n+    \\\"65373\\\":
        125,\\n+    \\\"160\\\": 32,\\n+    \\\"8211\\\": 45,\\n+    \\\"65374\\\":
        126,\\n+    \\\"65306\\\": 58,\\n+    \\\"65281\\\": 33,\\n+    \\\"8216\\\":
        96,\\n+    \\\"8217\\\": 96,\\n+    \\\"8245\\\": 96,\\n+    \\\"180\\\":
        96,\\n+    \\\"12494\\\": 47,\\n+    \\\"1047\\\": 51,\\n+    \\\"1073\\\":
        54,\\n+    \\\"1072\\\": 97,\\n+    \\\"1040\\\": 65,\\n+    \\\"1068\\\":
        98,\\n+    \\\"1042\\\": 66,\\n+    \\\"1089\\\": 99,\\n+    \\\"1057\\\":
        67,\\n+    \\\"1077\\\": 101,\\n+    \\\"1045\\\": 69,\\n+    \\\"1053\\\":
        72,\\n+    \\\"305\\\": 105,\\n+    \\\"1050\\\": 75,\\n+    \\\"921\\\":
        73,\\n+    \\\"1052\\\": 77,\\n+    \\\"1086\\\": 111,\\n+    \\\"1054\\\":
        79,\\n+    \\\"1009\\\": 112,\\n+    \\\"1088\\\": 112,\\n+    \\\"1056\\\":
        80,\\n+    \\\"1075\\\": 114,\\n+    \\\"1058\\\": 84,\\n+    \\\"215\\\":
        120,\\n+    \\\"1093\\\": 120,\\n+    \\\"1061\\\": 88,\\n+    \\\"1091\\\":
        121,\\n+    \\\"1059\\\": 89,\\n+    \\\"65283\\\": 35,\\n+    \\\"65288\\\":
        40,\\n+    \\\"65289\\\": 41,\\n+    \\\"65292\\\": 44,\\n+    \\\"65307\\\":
        59,\\n+    \\\"65311\\\": 63,\\n+}\"},{\"sha\":\"7aaeddfb783e27d27acc46144bca155d3742d888\",\"filename\":\"spotdl/utils/web.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fweb.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/spotdl%2Futils%2Fweb.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fweb.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"496560ac65f2fd528b809486e5f3dfb5916836a8\",\"filename\":\"termux/setup_spotdl.sh\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Fsetup_spotdl.sh\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Fsetup_spotdl.sh\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/termux%2Fsetup_spotdl.sh?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"d3ed23c27087caa306915d657223cddf1e0a16e3\",\"filename\":\"termux/termux-url-opener\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Ftermux-url-opener\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Ftermux-url-opener\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/termux%2Ftermux-url-opener?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"1118869e0098ed3d8094afb85ada705a788d83ed\",\"filename\":\"tests/README.md\",\"status\":\"modified\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2FREADME.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2FREADME.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2FREADME.md?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"24810baa0dbe10af524e0b39c7d9979846f95e0b\",\"filename\":\"tests/cassettes/test_download_a_playlist.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_playlist.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_playlist.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_a_playlist.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"fabaf917703dd82867703a14ec22d8e700e84e85\",\"filename\":\"tests/cassettes/test_download_a_single_song.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_single_song.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_single_song.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_a_single_song.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"ea60ddfeb6eb5846a8d2272dab420b740336c5b4\",\"filename\":\"tests/cassettes/test_download_an_album.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_an_album.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_an_album.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_an_album.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"efa8f137b90c1ee34de17f3094b93e379b94229d\",\"filename\":\"tests/cassettes/test_download_long_artists_song.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_long_artists_song.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_long_artists_song.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_long_artists_song.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"8628629dcc8122e1b48cf176dc2d2e20a916e6e8\",\"filename\":\"tests/cassettes/test_download_single_song.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_single_song.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_single_song.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_single_song.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"9f7db42070b8c465268d51023c46e69fb33ca70c\",\"filename\":\"tests/cassettes/test_multiple_elements.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_multiple_elements.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_multiple_elements.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_multiple_elements.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"ee1d68210ece388e9c6f7f737c145ffc0ad20faf\",\"filename\":\"tests/cassettes/test_search_and_download.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_search_and_download.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_search_and_download.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_search_and_download.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"be125359f1c20b5045659c2d8c3e454ec1687f3d\",\"filename\":\"tests/conftest.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fconftest.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fconftest.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fconftest.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"3f7dffba056081cfffa33ca64acd0d3d841c7550\",\"filename\":\"tests/console/test_entry_point.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fconsole%2Ftest_entry_point.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fconsole%2Ftest_entry_point.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fconsole%2Ftest_entry_point.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"832f5a717c5d18d5d755968dd5ec99918c61e177\",\"filename\":\"tests/providers/audio/cassettes/test_ytm_get_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_get_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_get_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_get_results.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"e68dad2ed27133ffed223c15333c4cde10e46e5e\",\"filename\":\"tests/providers/audio/cassettes/test_ytm_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_search.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"39c2ed328a3399ba51414eb36e814d96acdfa70b\",\"filename\":\"tests/providers/audio/test_youtube.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Ftest_youtube.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Ftest_youtube.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Ftest_youtube.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"d0a775ce68d24bb42b0470c6e0e6c3ec3f5be9f2\",\"filename\":\"tests/providers/audio/test_ytmusic.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Ftest_ytmusic.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Faudio%2Ftest_ytmusic.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Ftest_ytmusic.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"18d75df2b8c665a994c17ef52ae4f1b152acc8e4\",\"filename\":\"tests/providers/lyrics/cassettes/test_get_azlyrics_lyrics.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_azlyrics_lyrics.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_azlyrics_lyrics.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_azlyrics_lyrics.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"1fb87b34bb5969093ad483891005763628628fed\",\"filename\":\"tests/providers/lyrics/cassettes/test_get_genius_lyrics.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_genius_lyrics.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_genius_lyrics.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_genius_lyrics.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"7d42402c3e3b2f5ec3facd4aa818aaeea54d9300\",\"filename\":\"tests/providers/lyrics/cassettes/test_get_musixmatch_lyrics.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_musixmatch_lyrics.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_musixmatch_lyrics.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_get_musixmatch_lyrics.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"b393a81f99f455881113562fedc6cb822c9995a4\",\"filename\":\"tests/providers/lyrics/test_azlyrics.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Ftest_azlyrics.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Ftest_azlyrics.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Ftest_azlyrics.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"d4696c4171667ca1631bc60c7fe27c155d1f1a34\",\"filename\":\"tests/providers/lyrics/test_genius.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Ftest_genius.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Ftest_genius.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Ftest_genius.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"0926902497299de180d831529ae0d8e89cde2a1a\",\"filename\":\"tests/providers/lyrics/test_musixmatch.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Ftest_musixmatch.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Fproviders%2Flyrics%2Ftest_musixmatch.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Ftest_musixmatch.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"bfb516dcd014ecd09d16dece3e7bd526a0851a3a\",\"filename\":\"tests/regressions.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fregressions.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fregressions.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fregressions.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"ed7e75a2871d4354cccd93cc3fb17fc17d8a86dd\",\"filename\":\"tests/test_downloader.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_downloader.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_downloader.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_downloader.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"234321d059a642ca5ac35c98b0e998a47b6435da\",\"filename\":\"tests/test_entry_point.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_entry_point.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_entry_point.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_entry_point.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"25ed0bfd22bb038b7cad76bae6987fbe62c3a471\",\"filename\":\"tests/test_ffmpeg.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_ffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_ffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_ffmpeg.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"c5f0ba9cf99e059717f0be06c8ab0f65d3fd5ceb\",\"filename\":\"tests/test_init.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftest_init.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftest_init.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_init.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"7f61595bbf816795999bc5ba7efe86c6e872cd30\",\"filename\":\"tests/test_main.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftest_main.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftest_main.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_main.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"d309611592b227253c4304a4638c5a82cfaa7987\",\"filename\":\"tests/test_matching.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftest_matching.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftest_matching.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_matching.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"79869c0bed9cde15c7dd28bdaa297eb2a909ebac\",\"filename\":\"tests/test_provider_utils.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_provider_utils.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_provider_utils.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_provider_utils.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"c7329f998897867c2d750daabeafa38e79c4b05e\",\"filename\":\"tests/types/cassettes/test_album_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_album_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_album_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_album_from_url.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"10044e17bdfcc785040190932c3a7b3220e2660b\",\"filename\":\"tests/types/cassettes/test_artist_from_string.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_string.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_string.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_string.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"a9e76285b3942847a77f45ea66e21b9a1f863306\",\"filename\":\"tests/types/cassettes/test_artist_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_url.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"b149341240f9890a0ebae19890bee71bf3e1b251\",\"filename\":\"tests/types/cassettes/test_playlist_from_string.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_string.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_string.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_string.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"93f7de01b8fc79837aa0d6b36336f50baf8c5736\",\"filename\":\"tests/types/cassettes/test_playlist_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_url.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"dde2406eff82998af98cff2af01e35764d3ba72e\",\"filename\":\"tests/types/cassettes/test_song_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_song_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Fcassettes%2Ftest_song_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_song_from_url.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"7a9b435e38401c7a165cdc6adb43abc9f7814407\",\"filename\":\"tests/types/test_album.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_album.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_album.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_album.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"6b014feab14c37b02a9e5006ad3ea5431a9de500\",\"filename\":\"tests/types/test_artist.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_artist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_artist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_artist.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"a5e0abd28764227bb659d76d02d991565aae365d\",\"filename\":\"tests/types/test_playlist.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_playlist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_playlist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_playlist.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"42480197990478ee690302025468b342912aca34\",\"filename\":\"tests/types/test_song.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_song.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Ftypes%2Ftest_song.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_song.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"1c3750a4f041246239764629ff9ccf679120fbc0\",\"filename\":\"tests/utils/cassettes/test_check_for_updates.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_check_for_updates.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_check_for_updates.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_check_for_updates.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"e6aa4c05d8779a4880b57bb3633a2ed44811865e\",\"filename\":\"tests/utils/cassettes/test_check_for_updates_fail.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_check_for_updates_fail.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_check_for_updates_fail.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_check_for_updates_fail.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"c06a35de90604db0715978dcc0066a836e3afe6b\",\"filename\":\"tests/utils/cassettes/test_download_github_dir.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_download_github_dir.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_download_github_dir.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_download_github_dir.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"19d3ac0d071c7d10de1b78d411bba0a942fa507a\",\"filename\":\"tests/utils/cassettes/test_get_search_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_get_search_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_get_search_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_get_search_results.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"9adcbfa4845e785d02417b1db88f915f7015b0f2\",\"filename\":\"tests/utils/cassettes/test_get_status.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_get_status.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_get_status.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_get_status.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"b0482f21b7a53c1bc2139655aa1b527f4e7ba48e\",\"filename\":\"tests/utils/cassettes/test_get_status_fail.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_get_status_fail.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_get_status_fail.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_get_status_fail.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"a2156c00d9be8227d7056b0771850cec4bff93c2\",\"filename\":\"tests/utils/cassettes/test_parse_album_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_parse_album_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_parse_album_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_parse_album_search.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"1a7de077cece96f8ea11ae0750900ab85d512d42\",\"filename\":\"tests/utils/cassettes/test_parse_yt_link.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_parse_yt_link.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Fcassettes%2Ftest_parse_yt_link.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_parse_yt_link.yaml?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"07c75054b69b0d84bb30d89be960ba3da38237aa\",\"filename\":\"tests/utils/test_archive.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_archive.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_archive.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_archive.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"2c31604ad1b50482d17ad957d1f8bd4175c92295\",\"filename\":\"tests/utils/test_arguments.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_arguments.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_arguments.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_arguments.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"0884fcbfc0a294211f972fbecab72f0d142aa129\",\"filename\":\"tests/utils/test_config.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_config.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_config.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_config.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"84b210fd949feb49621b4cde6854421bfb339f5c\",\"filename\":\"tests/utils/test_ffmpeg.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_ffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_ffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_ffmpeg.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"dbb8d90d9cfe7a8d9743701d3c763be393bddad5\",\"filename\":\"tests/utils/test_formatter.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_formatter.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_formatter.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_formatter.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"394142d4b0b63011aea1a21a80101edf4587eb41\",\"filename\":\"tests/utils/test_github.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_github.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_github.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_github.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"b89b8002d7806128f0b04c0dacb51b9af5a714b0\",\"filename\":\"tests/utils/test_logging.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_logging.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_logging.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_logging.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"dfa798a485aa3545d7e5b1d07a18ca40bfb19265\",\"filename\":\"tests/utils/test_m3u.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_m3u.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_m3u.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_m3u.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"801d020a872aeb5908c80afe7dec57193ef55e87\",\"filename\":\"tests/utils/test_metadata.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_metadata.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_metadata.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_metadata.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"a1d560bede5ed2a15127570af81d9c1deabdb478\",\"filename\":\"tests/utils/test_search.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_search.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_search.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_search.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"588063dbc6733e81fb0724518ef5698adb3be17f\",\"filename\":\"tests/utils/test_spotify.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_spotify.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/tests%2Futils%2Ftest_spotify.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_spotify.py?ref=f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"},{\"sha\":\"57f19594d6ea6360aadad68a205dab1b2de44cf9\",\"filename\":\"tests/utils/tracking_files.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Futils%2Ftracking_files.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Futils%2Ftracking_files.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftracking_files.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"fa71bde914f4037d33ef86e2244e235c0e63746c\",\"filename\":\"tox.ini\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tox.ini\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tox.ini\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tox.ini?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"}]}"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 28 Mar 2024 18:28:08 GMT
      ETag:
      - W/"dda47a1366b3dac67c7fc29c7fb10df20770d6988c124772ebb59264cf18d59f"
      Last-Modified:
      - Sun, 03 Dec 2023 14:19:54 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - 4513:18E762:1A9BBD3:1AB3AB4:6605B6B7
      X-RateLimit-Limit:
      - '60'
      X-RateLimit-Remaining:
      - '40'
      X-RateLimit-Reset:
      - '1711651475'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '20'
      X-XSS-Protection:
      - '0'
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, br
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.31.0
    method: GET
    uri: https://api.github.com/repos/spotdl/spotify-downloader/compare/v3.9.4...dev
  response:
    body:
      string: "{\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/compare/v3.9.4...dev\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/compare/v3.9.4...dev\",\"permalink_url\":\"https://github.com/spotDL/spotify-downloader/compare/spotDL:597f5db...spotDL:866ed14\",\"diff_url\":\"https://github.com/spotDL/spotify-downloader/compare/v3.9.4...dev.diff\",\"patch_url\":\"https://github.com/spotDL/spotify-downloader/compare/v3.9.4...dev.patch\",\"base_commit\":{\"sha\":\"597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"node_id\":\"C_kwDOA71kIdoAKDU5N2Y1ZGJiNzJmMzA4MmZmODcxMmYzOGZkZmVmZWI4MjcwMWM4NDc\",\"commit\":{\"author\":{\"name\":\"Jakub
        Kot\",\"email\":\"42355410+xnetcat@users.noreply.github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"message\":\"release
        v3.9.4\",\"tree\":{\"sha\":\"d892f5ff3869fa670fc65126929ed5d2f87ee972\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d892f5ff3869fa670fc65126929ed5d2f87ee972\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiSgF0CRBK7hj4Ov3rIwAAqxAIAG2bc4ntRiKygBh7hrVfA09D\\nhmHXrsVQmum6vEceAwofg7yzxo028eNycO5EeyBLNekfMKUCBjZP5DPnULRH8Q+0\\nMbYN9y7ARy4qm5Ks58UmF4GaP+2/FbKt+OWPmhQmYA675w5XU5RJ5ciHRztJxnNg\\nvWj7jlUHKZ8GuNYRiJWf+n1OifJ+3uNraZQLMURfjitw4dWjNsXn1l8SGlgRfzfB\\nA2RJVcjUKz7oIuvd6PmwSEy8dRwBNl3VH4RjaHfVy0vK3IpaxhthSaPvyn9Mc/h0\\n5mEjcUU37txu5+D1D7Xy131Zvv3IWUS91PD1IU4Z8Kf7rtezONb40ORVan8S3Uw=\\n=mAwM\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree d892f5ff3869fa670fc65126929ed5d2f87ee972\\nparent
        5a32848689617a47763ba8983342b5bbf4f67ca1\\nparent 4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\\nauthor
        Jakub Kot <42355410+xnetcat@users.noreply.github.com> 1649017204 -0700\\ncommitter
        GitHub <noreply@github.com> 1649017204 -0700\\n\\nrelease v3.9.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5a32848689617a47763ba8983342b5bbf4f67ca1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5a32848689617a47763ba8983342b5bbf4f67ca1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5a32848689617a47763ba8983342b5bbf4f67ca1\"},{\"sha\":\"4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\"}]},\"merge_base_commit\":{\"sha\":\"597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"node_id\":\"C_kwDOA71kIdoAKDU5N2Y1ZGJiNzJmMzA4MmZmODcxMmYzOGZkZmVmZWI4MjcwMWM4NDc\",\"commit\":{\"author\":{\"name\":\"Jakub
        Kot\",\"email\":\"42355410+xnetcat@users.noreply.github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2022-04-03T20:20:04Z\"},\"message\":\"release
        v3.9.4\",\"tree\":{\"sha\":\"d892f5ff3869fa670fc65126929ed5d2f87ee972\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d892f5ff3869fa670fc65126929ed5d2f87ee972\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJiSgF0CRBK7hj4Ov3rIwAAqxAIAG2bc4ntRiKygBh7hrVfA09D\\nhmHXrsVQmum6vEceAwofg7yzxo028eNycO5EeyBLNekfMKUCBjZP5DPnULRH8Q+0\\nMbYN9y7ARy4qm5Ks58UmF4GaP+2/FbKt+OWPmhQmYA675w5XU5RJ5ciHRztJxnNg\\nvWj7jlUHKZ8GuNYRiJWf+n1OifJ+3uNraZQLMURfjitw4dWjNsXn1l8SGlgRfzfB\\nA2RJVcjUKz7oIuvd6PmwSEy8dRwBNl3VH4RjaHfVy0vK3IpaxhthSaPvyn9Mc/h0\\n5mEjcUU37txu5+D1D7Xy131Zvv3IWUS91PD1IU4Z8Kf7rtezONb40ORVan8S3Uw=\\n=mAwM\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree d892f5ff3869fa670fc65126929ed5d2f87ee972\\nparent
        5a32848689617a47763ba8983342b5bbf4f67ca1\\nparent 4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\\nauthor
        Jakub Kot <42355410+xnetcat@users.noreply.github.com> 1649017204 -0700\\ncommitter
        GitHub <noreply@github.com> 1649017204 -0700\\n\\nrelease v3.9.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/597f5dbb72f3082ff8712f38fdfefeb82701c847/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5a32848689617a47763ba8983342b5bbf4f67ca1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5a32848689617a47763ba8983342b5bbf4f67ca1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5a32848689617a47763ba8983342b5bbf4f67ca1\"},{\"sha\":\"4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a06d5a1d66a7eb8c3c1163722f490fb9e0210e9\"}]},\"status\":\"ahead\",\"ahead_by\":1107,\"behind_by\":0,\"total_commits\":1107,\"commits\":[{\"sha\":\"f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"node_id\":\"C_kwDOA71kIdoAKGY0NzhkZmI4NzkyMzMwM2Y3MTI1YzhkMGM4YTJlOTVkNzUxNzVkNjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:55:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:55:30Z\"},\"message\":\"added
        docstring to get_ytm_client\",\"tree\":{\"sha\":\"8e31c2bbc29206788c0861efc63b4d95291096c9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8e31c2bbc29206788c0861efc63b4d95291096c9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a7c2f93fa0837908c924aaee22224907ff894ec2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a7c2f93fa0837908c924aaee22224907ff894ec2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a7c2f93fa0837908c924aaee22224907ff894ec2\"}]},{\"sha\":\"82d80adf16ca731472502a3406d19e794fa86158\",\"node_id\":\"C_kwDOA71kIdoAKDgyZDgwYWRmMTZjYTczMTQ3MjUwMmEzNDA2ZDE5ZTc5NGZhODYxNTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:56:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T13:56:01Z\"},\"message\":\"black
        .\",\"tree\":{\"sha\":\"eb175b948b6f05115934faae8f8a1a286ea509ee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/eb175b948b6f05115934faae8f8a1a286ea509ee\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/82d80adf16ca731472502a3406d19e794fa86158\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/82d80adf16ca731472502a3406d19e794fa86158\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/82d80adf16ca731472502a3406d19e794fa86158\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/82d80adf16ca731472502a3406d19e794fa86158/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f478dfb87923303f7125c8d0c8a2e95d75175d66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f478dfb87923303f7125c8d0c8a2e95d75175d66\"}]},{\"sha\":\"f54c96dc1c417ec72051295692f104a0139d9133\",\"node_id\":\"C_kwDOA71kIdoAKGY1NGM5NmRjMWM0MTdlYzcyMDUxMjk1NjkyZjEwNGEwMTM5ZDkxMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:21:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:21:11Z\"},\"message\":\"updated
        syncedlyrics\",\"tree\":{\"sha\":\"c4b0836adb1527c2e816985369159a4a411d598c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c4b0836adb1527c2e816985369159a4a411d598c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f54c96dc1c417ec72051295692f104a0139d9133\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f54c96dc1c417ec72051295692f104a0139d9133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f54c96dc1c417ec72051295692f104a0139d9133\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f54c96dc1c417ec72051295692f104a0139d9133/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"82d80adf16ca731472502a3406d19e794fa86158\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/82d80adf16ca731472502a3406d19e794fa86158\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/82d80adf16ca731472502a3406d19e794fa86158\"}]},{\"sha\":\"dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"node_id\":\"C_kwDOA71kIdoAKGRjYTEwMjVjMDk1ZWIzMzNjN2IxZWM1NzNmY2I4MjVhNmUzYzVmYzc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:29:50Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:29:50Z\"},\"message\":\"more
        improvements to lyrics providers\",\"tree\":{\"sha\":\"7397472573076e950ff2a7d35b6bb6734163f82c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7397472573076e950ff2a7d35b6bb6734163f82c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f54c96dc1c417ec72051295692f104a0139d9133\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f54c96dc1c417ec72051295692f104a0139d9133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f54c96dc1c417ec72051295692f104a0139d9133\"}]},{\"sha\":\"443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"node_id\":\"C_kwDOA71kIdoAKDQ0M2U4OGQwYTE3ZGYyYjhjNmY1MWRmYjczZmQ2NzBkYjc2ODA2OGE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:43:09Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:43:09Z\"},\"message\":\"ignore
        kado - tired eyes when testing song matching\",\"tree\":{\"sha\":\"6df980d90462c35c7391a9fe95de6f00e1e0af92\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6df980d90462c35c7391a9fe95de6f00e1e0af92\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/dca1025c095eb333c7b1ec573fcb825a6e3c5fc7\"}]},{\"sha\":\"ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"node_id\":\"C_kwDOA71kIdoAKGZmY2YyMzAzYjRlMDg0N2Y0MDljOGY1NDA3NzRmZGFiNjMzMjhlZTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T14:50:47Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-06T14:50:47Z\"},\"message\":\"v4.1.4\",\"tree\":{\"sha\":\"6df980d90462c35c7391a9fe95de6f00e1e0af92\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6df980d90462c35c7391a9fe95de6f00e1e0af92\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkLtxHCRBK7hj4Ov3rIwAAQXAIAIb+8FgxBdzZdBbDD8ABMAN2\\ntIwuizoVSp+LCBEkw0CP7BuNBclj+VCMkwrUgOpBMEL7C45vAS+ctKPlk7pxYkNX\\nSkvy+p9QwuOgcyZlC/DUvBxqQ5LSkFMBbW+2TfuNla8asUgK3nuglUbvEz2FC32e\\nV1mL2XfRKuSFjmKk8dKTSF0ZXF6a6LzHTLgK1yrp3Up0dgAT/g7ne9eI36kseoEn\\nbBQTIdGmrIdVSKCIpWJsTo7BesGWOYSvRCmO22U3HUqiRjBQjzi9mU3iwxJwdgJx\\nKiErCfbj3t4tUAFB1Ux6DKVAm8cxyGeHcwFcQHMgqtOuRqnjzlB0MfZe/yO3khE=\\n=BskX\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 6df980d90462c35c7391a9fe95de6f00e1e0af92\\nparent
        ff37ff7e8e92307837c0afa746e37e0639a0f9a8\\nparent 443e88d0a17df2b8c6f51dfb73fd670db768068a\\nauthor
        kuba <xnetcat.dev@gmail.com> 1680792647 +0200\\ncommitter GitHub <noreply@github.com>
        1680792647 +0200\\n\\nv4.1.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ff37ff7e8e92307837c0afa746e37e0639a0f9a8\"},{\"sha\":\"443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/443e88d0a17df2b8c6f51dfb73fd670db768068a\"}]},{\"sha\":\"9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"node_id\":\"C_kwDOA71kIdoAKDljMmMzYzhiODQ1ZWE2YWUzNDZlNTRlNDQzNzQ3YWNiNzZlZjc0MTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:28:02Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:28:02Z\"},\"message\":\"added
        donate section\",\"tree\":{\"sha\":\"68669303a8eef8009e516d3f0d967e1a5f0a5bb3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/68669303a8eef8009e516d3f0d967e1a5f0a5bb3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffcf2303b4e0847f409c8f540774fdab63328ee3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ffcf2303b4e0847f409c8f540774fdab63328ee3\"}]},{\"sha\":\"a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"node_id\":\"C_kwDOA71kIdoAKGE0NzA1NDcyMTFmZjg3ZDliYWM2N2ViNGJjZmNlNjU4OGZiNzUzYTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:41:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-06T15:41:55Z\"},\"message\":\"Squashed
        commit of the following:\\n\\ncommit 9c2c3c8b845ea6ae346e54e443747acb76ef7419\\nAuthor:
        kuba <xnetcat.dev@gmail.com>\\nDate:   Thu Apr 6 17:28:02 2023 +0200\\n\\n
        \   added donate section\\n\\ncommit ffcf2303b4e0847f409c8f540774fdab63328ee3\\nMerge:
        ff37ff7 443e88d\\nAuthor: kuba <xnetcat.dev@gmail.com>\\nDate:   Thu Apr 6
        16:50:47 2023 +0200\\n\\n    v4.1.4\",\"tree\":{\"sha\":\"68669303a8eef8009e516d3f0d967e1a5f0a5bb3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/68669303a8eef8009e516d3f0d967e1a5f0a5bb3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/443e88d0a17df2b8c6f51dfb73fd670db768068a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/443e88d0a17df2b8c6f51dfb73fd670db768068a\"}]},{\"sha\":\"ee319ccef843f78d41f22f03d431765a47899db1\",\"node_id\":\"C_kwDOA71kIdoAKGVlMzE5Y2NlZjg0M2Y3OGQ0MWYyMmYwM2Q0MzE3NjVhNDc4OTlkYjE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T14:32:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T14:32:44Z\"},\"message\":\"check
        if song has track number\",\"tree\":{\"sha\":\"f919997f4666149a9c0dadce01aece0aad0ce16a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f919997f4666149a9c0dadce01aece0aad0ce16a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ee319ccef843f78d41f22f03d431765a47899db1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ee319ccef843f78d41f22f03d431765a47899db1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ee319ccef843f78d41f22f03d431765a47899db1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ee319ccef843f78d41f22f03d431765a47899db1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a470547211ff87d9bac67eb4bcfce6588fb753a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a470547211ff87d9bac67eb4bcfce6588fb753a9\"}]},{\"sha\":\"2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"node_id\":\"C_kwDOA71kIdoAKDJhNzFjNmE2MTQyOTFkMjEwZDc5OGY3ZDFiNjkxNTM5Y2JiZTgxZDU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T17:29:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-07T17:31:11Z\"},\"message\":\"catch
        more unexpected exceptions when downloading songs\",\"tree\":{\"sha\":\"4f53e13e552a013cb26ce977a29fad1593ee4e66\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f53e13e552a013cb26ce977a29fad1593ee4e66\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ee319ccef843f78d41f22f03d431765a47899db1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ee319ccef843f78d41f22f03d431765a47899db1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ee319ccef843f78d41f22f03d431765a47899db1\"}]},{\"sha\":\"75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"node_id\":\"C_kwDOA71kIdoAKDc1ZmJmOGIwMWYyZGEyZDczM2NhZDgzZWVhOTk1ZTVkZTA2YzA5MmE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:22:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:22:01Z\"},\"message\":\"bump
        version to v4.1.5\",\"tree\":{\"sha\":\"59a8a1cdcec0cfcf7c69470b0483917f4797ef4e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/59a8a1cdcec0cfcf7c69470b0483917f4797ef4e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a71c6a614291d210d798f7d1b691539cbbe81d5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a71c6a614291d210d798f7d1b691539cbbe81d5\"}]},{\"sha\":\"99032688da705166973336e05d9bf0b6cf74877f\",\"node_id\":\"C_kwDOA71kIdoAKDk5MDMyNjg4ZGE3MDUxNjY5NzMzMzZlMDVkOWJmMGI2Y2Y3NDg3N2Y\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:25:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-08T08:25:28Z\"},\"message\":\"updated
        link to cookie.txt extension\",\"tree\":{\"sha\":\"28c72a2bd47a56176f1975b999058d139b1b5f88\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/28c72a2bd47a56176f1975b999058d139b1b5f88\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/99032688da705166973336e05d9bf0b6cf74877f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/99032688da705166973336e05d9bf0b6cf74877f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/99032688da705166973336e05d9bf0b6cf74877f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/99032688da705166973336e05d9bf0b6cf74877f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/75fbf8b01f2da2d733cad83eea995e5de06c092a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/75fbf8b01f2da2d733cad83eea995e5de06c092a\"}]},{\"sha\":\"1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"node_id\":\"C_kwDOA71kIdoAKDFiZDQ3MjdiMzA3YWU1MDY4YmI3ZmNhZWJmNWE2NGVmODY5YWU4ZTI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:26:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:26:15Z\"},\"message\":\"removed
        unused import\",\"tree\":{\"sha\":\"9ca80f5c45043ef9f41d94e0091254a4027e0b05\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9ca80f5c45043ef9f41d94e0091254a4027e0b05\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"99032688da705166973336e05d9bf0b6cf74877f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/99032688da705166973336e05d9bf0b6cf74877f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/99032688da705166973336e05d9bf0b6cf74877f\"}]},{\"sha\":\"49965114249c50fba44283d27a67071ad9e3e9d1\",\"node_id\":\"C_kwDOA71kIdoAKDQ5OTY1MTE0MjQ5YzUwZmJhNDQyODNkMjdhNjcwNzFhZDllM2U5ZDE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:28:32Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:28:32Z\"},\"message\":\"disabled
        Ai kamano - \u87BA\u65CB\u306E\u5854 from tests\",\"tree\":{\"sha\":\"f9e8d53ce10e3b8b546ee7ac5d48e4d64d79186d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f9e8d53ce10e3b8b546ee7ac5d48e4d64d79186d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/49965114249c50fba44283d27a67071ad9e3e9d1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49965114249c50fba44283d27a67071ad9e3e9d1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49965114249c50fba44283d27a67071ad9e3e9d1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49965114249c50fba44283d27a67071ad9e3e9d1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1bd4727b307ae5068bb7fcaebf5a64ef869ae8e2\"}]},{\"sha\":\"c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"node_id\":\"C_kwDOA71kIdoAKGM1YjE4YzhkZTE3NzdkNDA2NTk5YzEwMmUyMWM3YmM2NGQzZjRjY2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:50:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T15:50:15Z\"},\"message\":\"use
        correct album artist when embedding metadata\",\"tree\":{\"sha\":\"aae722293663aa86203707d1fa74a1765fd8eabb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/aae722293663aa86203707d1fa74a1765fd8eabb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"49965114249c50fba44283d27a67071ad9e3e9d1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49965114249c50fba44283d27a67071ad9e3e9d1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49965114249c50fba44283d27a67071ad9e3e9d1\"}]},{\"sha\":\"c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"node_id\":\"C_kwDOA71kIdoAKGMwMmNjODMwZjZmMjU0YjFiZDRiZjlmOTgzYjM4OTIzZmJhYmVlMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:23:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:23:26Z\"},\"message\":\"added
        ability to generate lrc files when using spotdl meta\",\"tree\":{\"sha\":\"c2580c08c24c65a5187f3d903d50f389307d8db7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c2580c08c24c65a5187f3d903d50f389307d8db7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c5b18c8de1777d406599c102e21c7bc64d3f4ccb\"}]},{\"sha\":\"86d3514d0e625e76ba415573585b566658a46d4a\",\"node_id\":\"C_kwDOA71kIdoAKDg2ZDM1MTRkMGU2MjVlNzZiYTQxNTU3MzU4NWI1NjY2NThhNDZkNGE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:28:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:28:12Z\"},\"message\":\"use
        .m3u8 file extension for m3u files by default\",\"tree\":{\"sha\":\"5cec8ff278a2d658ec478ddf2f23efdb33966417\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5cec8ff278a2d658ec478ddf2f23efdb33966417\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/86d3514d0e625e76ba415573585b566658a46d4a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86d3514d0e625e76ba415573585b566658a46d4a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86d3514d0e625e76ba415573585b566658a46d4a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86d3514d0e625e76ba415573585b566658a46d4a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c02cc830f6f254b1bd4bf9f983b38923fbabee33\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c02cc830f6f254b1bd4bf9f983b38923fbabee33\"}]},{\"sha\":\"b137e1b54c9fc7264d631807959e86ed914ca668\",\"node_id\":\"C_kwDOA71kIdoAKGIxMzdlMWI1NGM5ZmM3MjY0ZDYzMTgwNzk1OWU4NmVkOTE0Y2E2Njg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:29:50Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:29:50Z\"},\"message\":\"Update
        usage.md\",\"tree\":{\"sha\":\"64a0a937909bc88f7361a19c0be38e64ab40b77c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/64a0a937909bc88f7361a19c0be38e64ab40b77c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b137e1b54c9fc7264d631807959e86ed914ca668\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b137e1b54c9fc7264d631807959e86ed914ca668\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b137e1b54c9fc7264d631807959e86ed914ca668\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b137e1b54c9fc7264d631807959e86ed914ca668/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"86d3514d0e625e76ba415573585b566658a46d4a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86d3514d0e625e76ba415573585b566658a46d4a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86d3514d0e625e76ba415573585b566658a46d4a\"}]},{\"sha\":\"cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"node_id\":\"C_kwDOA71kIdoAKGNiZjNmMmI0ODlhOTVkMzE1YzQ3MzliMGFlNDcxODc2NWEyY2YzNjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:31:46Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T16:31:46Z\"},\"message\":\"removed
        geo bypass option\",\"tree\":{\"sha\":\"cc5fab651e6ce791b2292d7eb60ecfdfd3d8d43d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cc5fab651e6ce791b2292d7eb60ecfdfd3d8d43d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b137e1b54c9fc7264d631807959e86ed914ca668\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b137e1b54c9fc7264d631807959e86ed914ca668\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b137e1b54c9fc7264d631807959e86ed914ca668\"}]},{\"sha\":\"e3a79490700837da7b342c569157c23ba004a133\",\"node_id\":\"C_kwDOA71kIdoAKGUzYTc5NDkwNzAwODM3ZGE3YjM0MmM1NjkxNTdjMjNiYTAwNGExMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T17:15:35Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T17:15:35Z\"},\"message\":\"embed
        synced lyrics to both sylt and uslt id3 tags\",\"tree\":{\"sha\":\"b35c53e5027c6107d2d64d07f3d2de626c114faa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b35c53e5027c6107d2d64d07f3d2de626c114faa\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e3a79490700837da7b342c569157c23ba004a133\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3a79490700837da7b342c569157c23ba004a133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3a79490700837da7b342c569157c23ba004a133\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3a79490700837da7b342c569157c23ba004a133/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cbf3f2b489a95d315c4739b0ae4718765a2cf365\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cbf3f2b489a95d315c4739b0ae4718765a2cf365\"}]},{\"sha\":\"07e22814e0defed10097a59bbd8c48651125540f\",\"node_id\":\"C_kwDOA71kIdoAKDA3ZTIyODE0ZTBkZWZlZDEwMDk3YTU5YmJkOGM0ODY1MTEyNTU0MGY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T18:43:32Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:28:17Z\"},\"message\":\"copy
        all types of files when they are of the same type\\n\\nUpdate downloader.py\\n\\nUpdate
        downloader.py\",\"tree\":{\"sha\":\"6432552ffa5a0592d858de15e42cdd9c92d7604c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6432552ffa5a0592d858de15e42cdd9c92d7604c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/07e22814e0defed10097a59bbd8c48651125540f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/07e22814e0defed10097a59bbd8c48651125540f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/07e22814e0defed10097a59bbd8c48651125540f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/07e22814e0defed10097a59bbd8c48651125540f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e3a79490700837da7b342c569157c23ba004a133\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3a79490700837da7b342c569157c23ba004a133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3a79490700837da7b342c569157c23ba004a133\"}]},{\"sha\":\"180a606a170b5d6245fb42b164a08dc8583f640d\",\"node_id\":\"C_kwDOA71kIdoAKDE4MGE2MDZhMTcwYjVkNjI0NWZiNDJiMTY0YTA4ZGM4NTgzZjY0MGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:31:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:31:36Z\"},\"message\":\"changed
        error logs to debug in base lyrics provider\",\"tree\":{\"sha\":\"a19d0f08a37ede90d98513c7ec6d6f304c3e9b50\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a19d0f08a37ede90d98513c7ec6d6f304c3e9b50\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/180a606a170b5d6245fb42b164a08dc8583f640d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/180a606a170b5d6245fb42b164a08dc8583f640d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/180a606a170b5d6245fb42b164a08dc8583f640d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/180a606a170b5d6245fb42b164a08dc8583f640d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"07e22814e0defed10097a59bbd8c48651125540f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/07e22814e0defed10097a59bbd8c48651125540f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/07e22814e0defed10097a59bbd8c48651125540f\"}]},{\"sha\":\"925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"node_id\":\"C_kwDOA71kIdoAKDkyNWIyYzVlMDg4N2ZiYTFlNzQ2OGU2Yjk3ZDFmYmRiZWE1NDZhMGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:33:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-15T19:33:48Z\"},\"message\":\"Update
        test_matching.py\",\"tree\":{\"sha\":\"5438d0252602392f02c053b6ffd4c0b91d8b9333\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5438d0252602392f02c053b6ffd4c0b91d8b9333\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"180a606a170b5d6245fb42b164a08dc8583f640d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/180a606a170b5d6245fb42b164a08dc8583f640d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/180a606a170b5d6245fb42b164a08dc8583f640d\"}]},{\"sha\":\"6fc62a671c400ddb59f5fe4b457303550ef12332\",\"node_id\":\"C_kwDOA71kIdoAKDZmYzYyYTY3MWM0MDBkZGI1OWY1ZmU0YjQ1NzMwMzU1MGVmMTIzMzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-16T10:02:05Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-16T10:02:05Z\"},\"message\":\"updated
        docs regarding url operation\",\"tree\":{\"sha\":\"47d534bf6695ac8dc782e18e8a534ae9146ea421\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/47d534bf6695ac8dc782e18e8a534ae9146ea421\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6fc62a671c400ddb59f5fe4b457303550ef12332/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\"}]},{\"sha\":\"0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"node_id\":\"C_kwDOA71kIdoAKDBjNGNkMzZhMmNlYTVhYWVhOTI2MWQwZjY2NTYzNTRmZGQ0YjA3NzQ\",\"commit\":{\"author\":{\"name\":\"suchencjusz\",\"email\":\"sucheta348@gmail.com\",\"date\":\"2023-04-17T17:27:04Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-17T17:27:04Z\"},\"message\":\"Slider.kz
        audio provider (#1798)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"010577ee20d81e5393bce29235f0bcf9ff900b3e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/010577ee20d81e5393bce29235f0bcf9ff900b3e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkPYFoCRBK7hj4Ov3rIwAALjMIAAudovEriaYhlS4tJCsgWiAU\\ndXxJIq+sC5swB96kq2ByeOqCvWduvltKlKBMdFVLsPyLJ+EydvS6kJIe8zsMcLoN\\nB6QI+3qmy65toE7g7uJcUm6WlCMnD1Cp72zckoTkvvGm5n+ZX1LzALhX/y+vucul\\nZqUXiODhlf0lg0Ft9zoT/gKOTh0ekR24r7K+xdyF59PCrhbUvTLVG9k9ZQgs82dn\\n3qoechcOvIS5ge0ho/DOjEreLdzeXUb2gyQEhqHH4/ObZaklua8rK8xO/ZzVHqb1\\nMJL4PiG94qt6Xv0n3j01gH9uzsTXlxvCw+jwyvZLZyrwVlFyriUHD978pQBIHok=\\n=dOl0\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 010577ee20d81e5393bce29235f0bcf9ff900b3e\\nparent
        925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\\nauthor suchencjusz <sucheta348@gmail.com>
        1681752424 +0200\\ncommitter GitHub <noreply@github.com> 1681752424 +0200\\n\\nSlider.kz
        audio provider (#1798)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774/comments\",\"author\":{\"login\":\"suchencjusz\",\"id\":34921955,\"node_id\":\"MDQ6VXNlcjM0OTIxOTU1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/34921955?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/suchencjusz\",\"html_url\":\"https://github.com/suchencjusz\",\"followers_url\":\"https://api.github.com/users/suchencjusz/followers\",\"following_url\":\"https://api.github.com/users/suchencjusz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/suchencjusz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/suchencjusz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/suchencjusz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/suchencjusz/orgs\",\"repos_url\":\"https://api.github.com/users/suchencjusz/repos\",\"events_url\":\"https://api.github.com/users/suchencjusz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/suchencjusz/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/925b2c5e0887fba1e7468e6b97d1fbdbea546a0c\"}]},{\"sha\":\"1b0af5eef1a466d303f354f39011285c2f806308\",\"node_id\":\"C_kwDOA71kIdoAKDFiMGFmNWVlZjFhNDY2ZDMwM2YzNTRmMzkwMTEyODVjMmY4MDYzMDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T17:27:16Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T17:27:16Z\"},\"message\":\"Merge
        branch 'dev' of https://github.com/spotDL/spotify-downloader into dev\",\"tree\":{\"sha\":\"69ca5fd0822ec9e3e5cf072b3020c170f41bfbd9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/69ca5fd0822ec9e3e5cf072b3020c170f41bfbd9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1b0af5eef1a466d303f354f39011285c2f806308\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b0af5eef1a466d303f354f39011285c2f806308\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1b0af5eef1a466d303f354f39011285c2f806308\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b0af5eef1a466d303f354f39011285c2f806308/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6fc62a671c400ddb59f5fe4b457303550ef12332\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6fc62a671c400ddb59f5fe4b457303550ef12332\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6fc62a671c400ddb59f5fe4b457303550ef12332\"},{\"sha\":\"0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0c4cd36a2cea5aaea9261d0f6656354fdd4b0774\"}]},{\"sha\":\"451950fe59db4a6c443859ff871edd0cd6511dd4\",\"node_id\":\"C_kwDOA71kIdoAKDQ1MTk1MGZlNTlkYjRhNmM0NDM4NTlmZjg3MWVkZDBjZDY1MTFkZDQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:36Z\"},\"message\":\"re-added
        slider-kz to audio providers\",\"tree\":{\"sha\":\"87a75dabfd8d46e7d31aaf1e174f729055e32567\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/87a75dabfd8d46e7d31aaf1e174f729055e32567\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/451950fe59db4a6c443859ff871edd0cd6511dd4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1b0af5eef1a466d303f354f39011285c2f806308\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b0af5eef1a466d303f354f39011285c2f806308\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1b0af5eef1a466d303f354f39011285c2f806308\"}]},{\"sha\":\"a6323e96b911a07cd4b5140c2573464a7804d540\",\"node_id\":\"C_kwDOA71kIdoAKGE2MzIzZTk2YjkxMWEwN2NkNGI1MTQwYzI1NzM0NjRhNzgwNGQ1NDA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:25:54Z\"},\"message\":\"cleaned
        up the code\",\"tree\":{\"sha\":\"9928a3649087e7dff356cdfb1c8eceddf01995cb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9928a3649087e7dff356cdfb1c8eceddf01995cb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a6323e96b911a07cd4b5140c2573464a7804d540\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6323e96b911a07cd4b5140c2573464a7804d540\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6323e96b911a07cd4b5140c2573464a7804d540\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6323e96b911a07cd4b5140c2573464a7804d540/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"451950fe59db4a6c443859ff871edd0cd6511dd4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/451950fe59db4a6c443859ff871edd0cd6511dd4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/451950fe59db4a6c443859ff871edd0cd6511dd4\"}]},{\"sha\":\"e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"node_id\":\"C_kwDOA71kIdoAKGU0Yzc2Njc5YTE3MWY0Y2VhM2M2OWY4YjJhYzg3OGFlMTg1Y2RmMTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:18Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:18Z\"},\"message\":\"simplified
        slider.kz audio provider\",\"tree\":{\"sha\":\"87e77646bb0167a6b9af8dca54d624266d67c382\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/87e77646bb0167a6b9af8dca54d624266d67c382\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a6323e96b911a07cd4b5140c2573464a7804d540\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6323e96b911a07cd4b5140c2573464a7804d540\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6323e96b911a07cd4b5140c2573464a7804d540\"}]},{\"sha\":\"e5ba678faeeaa490c02c5840027777bffc7f2466\",\"node_id\":\"C_kwDOA71kIdoAKGU1YmE2NzhmYWVlYWE0OTBjMDJjNTg0MDAyNzc3N2JmZmM3ZjI0NjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:26:48Z\"},\"message\":\"added
        check for forbidden words\",\"tree\":{\"sha\":\"bd72db674f7313da3da514caf78a2f8986276d52\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bd72db674f7313da3da514caf78a2f8986276d52\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e5ba678faeeaa490c02c5840027777bffc7f2466/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e4c76679a171f4cea3c69f8b2ac878ae185cdf19\"}]},{\"sha\":\"59277e0cd62d98344671078576aa2689deb0750f\",\"node_id\":\"C_kwDOA71kIdoAKDU5Mjc3ZTBjZDYyZDk4MzQ0NjcxMDc4NTc2YWEyNjg5ZGViMDc1MGY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:27:35Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:27:35Z\"},\"message\":\"lower
        name match even more for forbidden words\",\"tree\":{\"sha\":\"1608fb7fd757e128e40ac6fca61c36c82f6e10a4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1608fb7fd757e128e40ac6fca61c36c82f6e10a4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/59277e0cd62d98344671078576aa2689deb0750f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e5ba678faeeaa490c02c5840027777bffc7f2466\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e5ba678faeeaa490c02c5840027777bffc7f2466\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e5ba678faeeaa490c02c5840027777bffc7f2466\"}]},{\"sha\":\"1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"node_id\":\"C_kwDOA71kIdoAKDFhODU0ODk1YjlhNDA4N2FiNzk1ZDBlOTg4NGZjMzQ3YjkyZDhmNzY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T18:38:11Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-17T18:38:11Z\"},\"message\":\"v4.1.5\",\"tree\":{\"sha\":\"1608fb7fd757e128e40ac6fca61c36c82f6e10a4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1608fb7fd757e128e40ac6fca61c36c82f6e10a4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkPZITCRBK7hj4Ov3rIwAA4WIIAG6rWXcFHfXoAOjpuCNP95if\\nHqRKyJfjoJ/7Bu0u8ttamj0fXWQHfnvsbJPZ/zxpusCWSRdRfDNeo9WiN+BbiRhX\\nTC3kzwUyqPhuMojVIPBheX4elXCpEvoB45c4x3cGyHpUBvP3KVGYM29z096/0CCM\\njF/qVEpBPNy4KtZkv+BFj04bcSWFj0n8jNwAy76KckA+hbtl23pJjJzU4HS7aFpZ\\nNOHIM9DNd+tlCBATz/sPCdsJrZHPI/vk3vJom9/EG0Tv9w1rDJrVo7THFkk2h8qk\\n3xQr7eRgk3gELg1XWo4rada06keI71W9sCNaYpDeYHB3vgtnFg4Wt9zV8LYoTS0=\\n=I3Y5\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 1608fb7fd757e128e40ac6fca61c36c82f6e10a4\\nparent
        9c2c3c8b845ea6ae346e54e443747acb76ef7419\\nparent 59277e0cd62d98344671078576aa2689deb0750f\\nauthor
        kuba <xnetcat.dev@gmail.com> 1681756691 +0200\\ncommitter GitHub <noreply@github.com>
        1681756691 +0200\\n\\nv4.1.5\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9c2c3c8b845ea6ae346e54e443747acb76ef7419\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9c2c3c8b845ea6ae346e54e443747acb76ef7419\"},{\"sha\":\"59277e0cd62d98344671078576aa2689deb0750f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/59277e0cd62d98344671078576aa2689deb0750f\"}]},{\"sha\":\"d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"node_id\":\"C_kwDOA71kIdoAKGQ0OWNmZDNhYzgwYWRkOWIxNjcwMjM4OGY5ZmRjZmIyZWQzN2YzMjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:24:08Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:24:08Z\"},\"message\":\"use
        shutil to move the file\",\"tree\":{\"sha\":\"0d9827967339c3a9ea752680d5f3f13702d4f909\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0d9827967339c3a9ea752680d5f3f13702d4f909\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"59277e0cd62d98344671078576aa2689deb0750f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/59277e0cd62d98344671078576aa2689deb0750f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/59277e0cd62d98344671078576aa2689deb0750f\"}]},{\"sha\":\"0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"node_id\":\"C_kwDOA71kIdoAKDBjZDVjYTMzZWY5ZWZiZTM4MmRkM2FjNjdmNTYwOTQ1NTg0OGQ0NTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:32:40Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:32:40Z\"},\"message\":\"bump
        version to v4.1.6\",\"tree\":{\"sha\":\"8166de39ded53c267ab4512a0e55fcd2b38752ba\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8166de39ded53c267ab4512a0e55fcd2b38752ba\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d49cfd3ac80add9b16702388f9fdcfb2ed37f325\"}]},{\"sha\":\"b624e6f338a33bc177ef57f074b6118f77455f5f\",\"node_id\":\"C_kwDOA71kIdoAKGI2MjRlNmYzMzhhMzNiYzE3N2VmNTdmMDc0YjYxMThmNzc0NTVmNWY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-17T19:56:18Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-17T19:56:18Z\"},\"message\":\"v4.1.6\",\"tree\":{\"sha\":\"8166de39ded53c267ab4512a0e55fcd2b38752ba\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8166de39ded53c267ab4512a0e55fcd2b38752ba\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkPaRiCRBK7hj4Ov3rIwAAEO4IAAgZ4QpLI65FAqFApZQyh0dg\\nxE4Vc7ItuB2DXDAZ9i5IamdTTWjOhk/GY/Wag7KZjmHmwopHivwtma88XxMZvD32\\nwTN8VXgy4sI/oQb4PeeePtRA7Vn+0eTFvHpVOtz8MNomrWQb9a4btFRSvBDYfZd7\\nQDlO9eT30qLt7z5b3p/GwnjD4ed0I1hLt6YJMxWZRUi5mOEPclWn5NaYHaYvOPOd\\nZdEZDuh9aWyNjaJ2wYiD2SgS9m1CkTCAAJF/qve1F3BSeVtXjDvgnnNlQmr6tnYE\\n++NslQNphD5wKzdIJnnuuSqNnu0q2MF9mirMaEOs4QOuSil2DP1yaRGjNk/z7xI=\\n=dEY8\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8166de39ded53c267ab4512a0e55fcd2b38752ba\\nparent
        1a854895b9a4087ab795d0e9884fc347b92d8f76\\nparent 0cd5ca33ef9efbe382dd3ac67f5609455848d457\\nauthor
        kuba <xnetcat.dev@gmail.com> 1681761378 +0200\\ncommitter GitHub <noreply@github.com>
        1681761378 +0200\\n\\nv4.1.6\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b624e6f338a33bc177ef57f074b6118f77455f5f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a854895b9a4087ab795d0e9884fc347b92d8f76\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a854895b9a4087ab795d0e9884fc347b92d8f76\"},{\"sha\":\"0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0cd5ca33ef9efbe382dd3ac67f5609455848d457\"}]},{\"sha\":\"bfc3058f38cdee383bb727083054edd938384ec1\",\"node_id\":\"C_kwDOA71kIdoAKGJmYzMwNThmMzhjZGVlMzgzYmI3MjcwODMwNTRlZGQ5MzgzODRlYzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:20:43Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:20:43Z\"},\"message\":\"fixed
        missing data error when using youtube ur\",\"tree\":{\"sha\":\"55eb59b457a3c4140eafa1e24006a08d6b462403\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/55eb59b457a3c4140eafa1e24006a08d6b462403\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bfc3058f38cdee383bb727083054edd938384ec1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bfc3058f38cdee383bb727083054edd938384ec1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bfc3058f38cdee383bb727083054edd938384ec1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bfc3058f38cdee383bb727083054edd938384ec1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0cd5ca33ef9efbe382dd3ac67f5609455848d457\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0cd5ca33ef9efbe382dd3ac67f5609455848d457\"}]},{\"sha\":\"f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"node_id\":\"C_kwDOA71kIdoAKGYyM2FkZDIyYTNhZTIzOGE0ZmFlMGRjOWVhMGI3MDI3OTM0ODM2ZGI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:23:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:23:55Z\"},\"message\":\"create
        tracker after reinit\",\"tree\":{\"sha\":\"8c48d0181d024998d59a2064391450b36558b403\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8c48d0181d024998d59a2064391450b36558b403\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bfc3058f38cdee383bb727083054edd938384ec1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bfc3058f38cdee383bb727083054edd938384ec1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bfc3058f38cdee383bb727083054edd938384ec1\"}]},{\"sha\":\"9846afa5bee7c93035729572f890f73e634dc0ed\",\"node_id\":\"C_kwDOA71kIdoAKDk4NDZhZmE1YmVlN2M5MzAzNTcyOTU3MmY4OTBmNzNlNjM0ZGMwZWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:37:27Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T15:37:27Z\"},\"message\":\"updated
        project dependencies\",\"tree\":{\"sha\":\"fb545d36869adc6d08982462ddd70a58e0d7b2a7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/fb545d36869adc6d08982462ddd70a58e0d7b2a7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9846afa5bee7c93035729572f890f73e634dc0ed\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9846afa5bee7c93035729572f890f73e634dc0ed\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9846afa5bee7c93035729572f890f73e634dc0ed\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9846afa5bee7c93035729572f890f73e634dc0ed/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f23add22a3ae238a4fae0dc9ea0b7027934836db\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f23add22a3ae238a4fae0dc9ea0b7027934836db\"}]},{\"sha\":\"d0d1d672696f114d630fe5a527a02840a19526e6\",\"node_id\":\"C_kwDOA71kIdoAKGQwZDFkNjcyNjk2ZjExNGQ2MzBmZTVhNTI3YTAyODQwYTE5NTI2ZTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:17:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:17:59Z\"},\"message\":\"added
        option to only use verified results\",\"tree\":{\"sha\":\"62cdc277cb195478e6c0c96d85efc2be0ab9c773\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/62cdc277cb195478e6c0c96d85efc2be0ab9c773\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d0d1d672696f114d630fe5a527a02840a19526e6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d0d1d672696f114d630fe5a527a02840a19526e6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d0d1d672696f114d630fe5a527a02840a19526e6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d0d1d672696f114d630fe5a527a02840a19526e6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9846afa5bee7c93035729572f890f73e634dc0ed\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9846afa5bee7c93035729572f890f73e634dc0ed\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9846afa5bee7c93035729572f890f73e634dc0ed\"}]},{\"sha\":\"b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"node_id\":\"C_kwDOA71kIdoAKGIwMmZkYmM0ZjUwMTRhN2I5NDgzODk0MzI3NDlhYjE5YWZjNGMyNGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:19:04Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:19:04Z\"},\"message\":\"bump
        version to v4.1.7\",\"tree\":{\"sha\":\"84ed147084e14ca169701ca2d7ec8dafec457ae7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/84ed147084e14ca169701ca2d7ec8dafec457ae7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d0d1d672696f114d630fe5a527a02840a19526e6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d0d1d672696f114d630fe5a527a02840a19526e6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d0d1d672696f114d630fe5a527a02840a19526e6\"}]},{\"sha\":\"a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"node_id\":\"C_kwDOA71kIdoAKGExMmM5ZDljN2JhNjUzZGIxZTBiM2ExNzExOTY2ZWU3NjdkMWNlMDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:44Z\"},\"message\":\"added
        option to sync without deleting new songs\",\"tree\":{\"sha\":\"d213a6f51381fcc774382263343fa93f4f4d8ec5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d213a6f51381fcc774382263343fa93f4f4d8ec5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b02fdbc4f5014a7b948389432749ab19afc4c24d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b02fdbc4f5014a7b948389432749ab19afc4c24d\"}]},{\"sha\":\"c8337226feea121018d56861dbb87c79fc1660a9\",\"node_id\":\"C_kwDOA71kIdoAKGM4MzM3MjI2ZmVlYTEyMTAxOGQ1Njg2MWRiYjg3Yzc5ZmMxNjYwYTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:52Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:26:52Z\"},\"message\":\"updated
        docs\",\"tree\":{\"sha\":\"0b9bfed1bf7fee6aaff6224324983b62890e82f9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0b9bfed1bf7fee6aaff6224324983b62890e82f9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c8337226feea121018d56861dbb87c79fc1660a9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c8337226feea121018d56861dbb87c79fc1660a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c8337226feea121018d56861dbb87c79fc1660a9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c8337226feea121018d56861dbb87c79fc1660a9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a12c9d9c7ba653db1e0b3a1711966ee767d1ce02\"}]},{\"sha\":\"55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"node_id\":\"C_kwDOA71kIdoAKDU1MTY1YmIxYjVhMGZiNDBkMmU1MjE3NDQ3Y2YwOWYyMjdkZTBiOWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:51:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T16:51:55Z\"},\"message\":\"added
        option to change the max filename length\",\"tree\":{\"sha\":\"b024d085238f40403c35c180df2bb21f5ec74946\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b024d085238f40403c35c180df2bb21f5ec74946\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c8337226feea121018d56861dbb87c79fc1660a9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c8337226feea121018d56861dbb87c79fc1660a9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c8337226feea121018d56861dbb87c79fc1660a9\"}]},{\"sha\":\"7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"node_id\":\"C_kwDOA71kIdoAKDdmN2Q1MGU0Y2QyZjBkYWM1YTMyODg4ZjU4OWFmNjhhYWM2OWYzYWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T17:52:19Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T17:52:19Z\"},\"message\":\"added
        option to cache spotify requests\",\"tree\":{\"sha\":\"5abe7b2f5f563b22633e7683b2e8fe5a6708a67b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5abe7b2f5f563b22633e7683b2e8fe5a6708a67b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55165bb1b5a0fb40d2e5217447cf09f227de0b9d\"}]},{\"sha\":\"cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"node_id\":\"C_kwDOA71kIdoAKGNkMGZkOTU5ODlhNDFiN2QyNjc0Nzc4NWNiOWEwOWE0MTZhZDU3NDM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T18:04:25Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T18:04:25Z\"},\"message\":\"Update
        conftest.py\",\"tree\":{\"sha\":\"6f77efde4873404dc3f10e1a10892258e1397207\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6f77efde4873404dc3f10e1a10892258e1397207\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f7d50e4cd2f0dac5a32888f589af68aac69f3aa\"}]},{\"sha\":\"cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"node_id\":\"C_kwDOA71kIdoAKGNkYTNlYTE1YzY4YTRlOGM5ODViNjMwOGE0Mzc2MWUwYTc5ZDA2YzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-22T18:22:51Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-22T18:22:51Z\"},\"message\":\"v4.1.7\",\"tree\":{\"sha\":\"6f77efde4873404dc3f10e1a10892258e1397207\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6f77efde4873404dc3f10e1a10892258e1397207\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkRCX7CRBK7hj4Ov3rIwAAzeAIAEDo/Ph2TDfGO4LmamyIDXSd\\ntfv2+itM/GiZT3fzva/Ut4YGm9e5H3Uq2HevHdZ19ozAh5hpo1IoJTtnkP2xr6Ab\\nDsXlIuOC4mg2X+Q8erkdlr8KWIxB/iaQciX2gBgiZePQBmKviG7NSMt+jWJ7PltR\\nHD0iqPCjixj+Cn7s6qynJJsSOUH8eldipp1OAY40ZXWob+uinQVpiSoea5Z0Mei4\\naZz3aWrQF0Mi9u1xzr1QAK9EEeijoORNY/waiaODOxAcOR5O6RyRrvKjZ8AWdxkX\\neZbtoC+3ZGX0Yj2xpusYPgwQDs15+BKvFk7DTZ1fP/eyZcrHem7bjfFtZeZRUnw=\\n=LjLP\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 6f77efde4873404dc3f10e1a10892258e1397207\\nparent
        b624e6f338a33bc177ef57f074b6118f77455f5f\\nparent cd0fd95989a41b7d26747785cb9a09a416ad5743\\nauthor
        kuba <xnetcat.dev@gmail.com> 1682187771 +0200\\ncommitter GitHub <noreply@github.com>
        1682187771 +0200\\n\\nv4.1.7\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b624e6f338a33bc177ef57f074b6118f77455f5f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b624e6f338a33bc177ef57f074b6118f77455f5f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b624e6f338a33bc177ef57f074b6118f77455f5f\"},{\"sha\":\"cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cd0fd95989a41b7d26747785cb9a09a416ad5743\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cd0fd95989a41b7d26747785cb9a09a416ad5743\"}]},{\"sha\":\"6f075b6e96d6db338869789320f9fbee43e54837\",\"node_id\":\"C_kwDOA71kIdoAKDZmMDc1YjZlOTZkNmRiMzM4ODY5Nzg5MzIwZjlmYmVlNDNlNTQ4Mzc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:29:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:29:39Z\"},\"message\":\"check
        if time tags are actually time signatures\",\"tree\":{\"sha\":\"b3e9811c1df8ac4ef1bd201b36e32dc918ca2670\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b3e9811c1df8ac4ef1bd201b36e32dc918ca2670\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6f075b6e96d6db338869789320f9fbee43e54837\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f075b6e96d6db338869789320f9fbee43e54837\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f075b6e96d6db338869789320f9fbee43e54837\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f075b6e96d6db338869789320f9fbee43e54837/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\"}]},{\"sha\":\"45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"node_id\":\"C_kwDOA71kIdoAKDQ1YWQ1MDM1NzQzMDUwMzAxZTZkN2Y2YzQ5Y2JjMzRhNjczNjZlZWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:21Z\"},\"message\":\"catch
        unexpected exceptions when getting lyrics\",\"tree\":{\"sha\":\"45f9799848b5820cb3154e3e144686df7cf5fe4a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/45f9799848b5820cb3154e3e144686df7cf5fe4a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6f075b6e96d6db338869789320f9fbee43e54837\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f075b6e96d6db338869789320f9fbee43e54837\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f075b6e96d6db338869789320f9fbee43e54837\"}]},{\"sha\":\"47832339274ff8229eb64d956071b26a3fd96786\",\"node_id\":\"C_kwDOA71kIdoAKDQ3ODMyMzM5Mjc0ZmY4MjI5ZWI2NGQ5NTYwNzFiMjZhM2ZkOTY3ODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:31Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T08:35:31Z\"},\"message\":\"bump
        version to v4.1.8\",\"tree\":{\"sha\":\"cd62c4d9d768533e5f3b57b071a84b7d0103adc1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd62c4d9d768533e5f3b57b071a84b7d0103adc1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/47832339274ff8229eb64d956071b26a3fd96786\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47832339274ff8229eb64d956071b26a3fd96786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/47832339274ff8229eb64d956071b26a3fd96786\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47832339274ff8229eb64d956071b26a3fd96786/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45ad5035743050301e6d7f6c49cbc34a67366eeb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/45ad5035743050301e6d7f6c49cbc34a67366eeb\"}]},{\"sha\":\"ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"node_id\":\"C_kwDOA71kIdoAKGVkNmU4ZmFlYzQzMTExZDA0NDc4MzBmZTkxM2JhMzJmNWJiMzhmNTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T10:06:22Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T10:06:22Z\"},\"message\":\"rewritten
        file name creation logic for long file names\",\"tree\":{\"sha\":\"5d5a7ba0d40af9745090591f275a671ee1e88723\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5d5a7ba0d40af9745090591f275a671ee1e88723\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"47832339274ff8229eb64d956071b26a3fd96786\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47832339274ff8229eb64d956071b26a3fd96786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/47832339274ff8229eb64d956071b26a3fd96786\"}]},{\"sha\":\"7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"node_id\":\"C_kwDOA71kIdoAKDdkNjE2MGI0ODlmNzk1NGJjNjQ5ZWFhOTk1NzY1OGJkNWI3NWZlNTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T12:26:00Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T12:26:00Z\"},\"message\":\"keep
        the parent path when creating short path name\",\"tree\":{\"sha\":\"0a8a8360c5627310bc4702b6e2fb347416341b6a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0a8a8360c5627310bc4702b6e2fb347416341b6a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed6e8faec43111d0447830fe913ba32f5bb38f54\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed6e8faec43111d0447830fe913ba32f5bb38f54\"}]},{\"sha\":\"841f95ab6d9b93527feba1652873865b19104885\",\"node_id\":\"C_kwDOA71kIdoAKDg0MWY5NWFiNmQ5YjkzNTI3ZmViYTE2NTI4NzM4NjViMTkxMDQ4ODU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:40:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:40:21Z\"},\"message\":\"don't
        use default template when formatting template\",\"tree\":{\"sha\":\"683c0ebcfc76da4ee004a3d95881f0c3658e0bb2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/683c0ebcfc76da4ee004a3d95881f0c3658e0bb2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/841f95ab6d9b93527feba1652873865b19104885\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/841f95ab6d9b93527feba1652873865b19104885\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/841f95ab6d9b93527feba1652873865b19104885\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/841f95ab6d9b93527feba1652873865b19104885/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d6160b489f7954bc649eaa9957658bd5b75fe58\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d6160b489f7954bc649eaa9957658bd5b75fe58\"}]},{\"sha\":\"3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"node_id\":\"C_kwDOA71kIdoAKDMyOTNjODU5NmU4ZjA0NTNmOWE1MGFjNmE5ZjM3NWZiMjk2NGQ2YjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:47:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T14:47:12Z\"},\"message\":\"added
        support for spotify.link\",\"tree\":{\"sha\":\"155d022a5d8d0c9ef61ea47c489c71888c01d25f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/155d022a5d8d0c9ef61ea47c489c71888c01d25f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"841f95ab6d9b93527feba1652873865b19104885\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/841f95ab6d9b93527feba1652873865b19104885\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/841f95ab6d9b93527feba1652873865b19104885\"}]},{\"sha\":\"1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"node_id\":\"C_kwDOA71kIdoAKDExNzNiNjJkMGE5ZTU4MjNmNmU1ZDdkMTA2ZjEyZDg0MGUzNjBlODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T15:51:20Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T15:51:20Z\"},\"message\":\"updated
        syncedlyrics to v0.5.0\",\"tree\":{\"sha\":\"67e7f1d289bfdb04e9840bddb04ea5335b60f44e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/67e7f1d289bfdb04e9840bddb04ea5335b60f44e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3293c8596e8f0453f9a50ac6a9f375fb2964d6b4\"}]},{\"sha\":\"06901adb6aa419733d06575daa89168ce89fa255\",\"node_id\":\"C_kwDOA71kIdoAKDA2OTAxYWRiNmFhNDE5NzMzZDA2NTc1ZGFhODkxNjhjZTg5ZmEyNTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-04-23T15:54:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-04-23T15:54:44Z\"},\"message\":\"v4.1.8\",\"tree\":{\"sha\":\"67e7f1d289bfdb04e9840bddb04ea5335b60f44e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/67e7f1d289bfdb04e9840bddb04ea5335b60f44e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkRVTECRBK7hj4Ov3rIwAAOjoIAAY3mLytmPn97CaV7v5OuSPT\\nxy7+E2ho9O1Clgq3GcXumDloT8NGwBMMnEef9VUOf2N4l1vaHkQN5z5BC2mDguQv\\nDuIlyd45IjZWcQUwqrJbaBqwiFzxm8EtJYViqg2ctW+GylFckvxqhu2MhVGvuGSK\\nAbsQu6YiH5ggT+RC17mD2y621Wq5zAllWMyRCubRx4pPjkXHPTFf68IfnFTNlnPx\\ndJimiohrUWEcLI9Okt78Vzlp+o3V+CEiCapcDcGphK1Sf1SrS+7odpdvSUgkF5Uq\\nO1AUsih0e5uzwY2K043S7kR6pNg73CD5Bm20+UYX4Ed1PhL+B+VRY9yMqCR62qo=\\n=+xX2\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 67e7f1d289bfdb04e9840bddb04ea5335b60f44e\\nparent
        cda3ea15c68a4e8c985b6308a43761e0a79d06c3\\nparent 1173b62d0a9e5823f6e5d7d106f12d840e360e86\\nauthor
        kuba <xnetcat.dev@gmail.com> 1682265284 +0200\\ncommitter GitHub <noreply@github.com>
        1682265284 +0200\\n\\nv4.1.8\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06901adb6aa419733d06575daa89168ce89fa255\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cda3ea15c68a4e8c985b6308a43761e0a79d06c3\"},{\"sha\":\"1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1173b62d0a9e5823f6e5d7d106f12d840e360e86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1173b62d0a9e5823f6e5d7d106f12d840e360e86\"}]},{\"sha\":\"3ba2f016da8914b85c6443b823ab43e508112807\",\"node_id\":\"C_kwDOA71kIdoAKDNiYTJmMDE2ZGE4OTE0Yjg1YzY0NDNiODIzYWI0M2U1MDgxMTI4MDc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:23:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:23:26Z\"},\"message\":\"fixed
        `KeyError` when downloading ytm playlists\",\"tree\":{\"sha\":\"cbf6174004c45ccef83b1d184467e9b8bcb599bf\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cbf6174004c45ccef83b1d184467e9b8bcb599bf\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3ba2f016da8914b85c6443b823ab43e508112807\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba2f016da8914b85c6443b823ab43e508112807\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba2f016da8914b85c6443b823ab43e508112807\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba2f016da8914b85c6443b823ab43e508112807/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06901adb6aa419733d06575daa89168ce89fa255\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06901adb6aa419733d06575daa89168ce89fa255\"}]},{\"sha\":\"2fe593bf831c7af24ad72817c53692ded21ff090\",\"node_id\":\"C_kwDOA71kIdoAKDJmZTU5M2JmODMxYzdhZjI0YWQ3MjgxN2M1MzY5MmRlZDIxZmYwOTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:29:46Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:29:46Z\"},\"message\":\"added
        support for links with language codes\",\"tree\":{\"sha\":\"3527b12647c18f224351700ae5bc30a257597b5a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3527b12647c18f224351700ae5bc30a257597b5a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2fe593bf831c7af24ad72817c53692ded21ff090\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2fe593bf831c7af24ad72817c53692ded21ff090\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2fe593bf831c7af24ad72817c53692ded21ff090\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2fe593bf831c7af24ad72817c53692ded21ff090/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3ba2f016da8914b85c6443b823ab43e508112807\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba2f016da8914b85c6443b823ab43e508112807\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba2f016da8914b85c6443b823ab43e508112807\"}]},{\"sha\":\"f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"node_id\":\"C_kwDOA71kIdoAKGY3MDY5NDhkOTU4MGExNTMzYTU5YThmYTM3MGRjYmIwYjE5Y2QxNGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:33:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:33:48Z\"},\"message\":\"bump
        version to v4.1.9\",\"tree\":{\"sha\":\"4f45c2195a4209ecdf8b0ab804380788fb436d76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f45c2195a4209ecdf8b0ab804380788fb436d76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2fe593bf831c7af24ad72817c53692ded21ff090\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2fe593bf831c7af24ad72817c53692ded21ff090\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2fe593bf831c7af24ad72817c53692ded21ff090\"}]},{\"sha\":\"9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"node_id\":\"C_kwDOA71kIdoAKDlkYTdkNWQwNWJhZWY1Yjg4YTRkNzU3NWNkNzZhZDYyZjdlMjI4ZDQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:50:14Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-01T11:50:14Z\"},\"message\":\"v4.1.9\",\"tree\":{\"sha\":\"4f45c2195a4209ecdf8b0ab804380788fb436d76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f45c2195a4209ecdf8b0ab804380788fb436d76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkT6d2CRBK7hj4Ov3rIwAAzFoIAFTc/PrvBuSq6n+s40g91DVf\\nA8s00YfaJ7ZPSfas9G/tkT8VqFPYxaZexOZbvk7XdBYADcTpatlx1tgz3uJ9VpDb\\nszcEhNcHTOSowUz7FP23mW5+esBoY42+s4vRwwwMbo7jcD2eMc1sLYFE1rwgsfA3\\nS2LfcTvxN4loeWXNdeAbF0nlaIdJNhvL+w/tslsr3rak7oM8VedwjuL0gp+BkeEq\\nu22ntXfqgFmksHBwn5Yr0b73NJyhtWWSAbT1/WEcMulJY7MhWK1LSwjHqiR7Hyp4\\nSqgi8p4Arlf5aE1Skp46DyLfSHgfpJYF4vXEPEtRELsSlmQtzxiaO+G14fB2NNA=\\n=9mmA\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 4f45c2195a4209ecdf8b0ab804380788fb436d76\\nparent
        06901adb6aa419733d06575daa89168ce89fa255\\nauthor kuba <xnetcat.dev@gmail.com>
        1682941814 +0200\\ncommitter GitHub <noreply@github.com> 1682941814 +0200\\n\\nv4.1.9\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06901adb6aa419733d06575daa89168ce89fa255\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06901adb6aa419733d06575daa89168ce89fa255\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06901adb6aa419733d06575daa89168ce89fa255\"}]},{\"sha\":\"9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"node_id\":\"C_kwDOA71kIdoAKDljZDZlOGY4NDk4YjE5ZWJlMmUwZWRhZDNjOTg1NzRjZmVlZjRlMmE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:56:41Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T11:56:41Z\"},\"message\":\"Merge
        branch 'master' into dev\",\"tree\":{\"sha\":\"4f45c2195a4209ecdf8b0ab804380788fb436d76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f45c2195a4209ecdf8b0ab804380788fb436d76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f706948d9580a1533a59a8fa370dcbb0b19cd14d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f706948d9580a1533a59a8fa370dcbb0b19cd14d\"},{\"sha\":\"9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\"}]},{\"sha\":\"d1e68ff27ddedfd666ce417242a071164934527c\",\"node_id\":\"C_kwDOA71kIdoAKGQxZTY4ZmYyN2RkZWRmZDY2NmNlNDE3MjQyYTA3MTE2NDkzNDUyN2M\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:02:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:02:48Z\"},\"message\":\"remove
        intl-xx from all spotify links\",\"tree\":{\"sha\":\"cd4073f3fb238e0dc60a14ec59f0e0550e6dddc8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd4073f3fb238e0dc60a14ec59f0e0550e6dddc8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d1e68ff27ddedfd666ce417242a071164934527c\",\"comment_count\":1,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d1e68ff27ddedfd666ce417242a071164934527c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d1e68ff27ddedfd666ce417242a071164934527c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d1e68ff27ddedfd666ce417242a071164934527c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9cd6e8f8498b19ebe2e0edad3c98574cfeef4e2a\"}]},{\"sha\":\"3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"node_id\":\"C_kwDOA71kIdoAKDNlOGYzMmYxYzhjMmRhNmQ2MDFkOTA1MDY3ZWJmY2U5MGIyMWFhZWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:03:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:03:24Z\"},\"message\":\"v4.1.10\",\"tree\":{\"sha\":\"cd38d2564c751d34cd66f25ebb4de9feb8b45734\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd38d2564c751d34cd66f25ebb4de9feb8b45734\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d1e68ff27ddedfd666ce417242a071164934527c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d1e68ff27ddedfd666ce417242a071164934527c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d1e68ff27ddedfd666ce417242a071164934527c\"}]},{\"sha\":\"5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"node_id\":\"C_kwDOA71kIdoAKDVlZGMxNWUwNjc3YzAxZWMwZWYwOTNhOTc0ZmRjYzMwZmU4YmY1MDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-01T12:07:30Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-01T12:07:30Z\"},\"message\":\"v4.1.10\",\"tree\":{\"sha\":\"cd38d2564c751d34cd66f25ebb4de9feb8b45734\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cd38d2564c751d34cd66f25ebb4de9feb8b45734\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkT6uCCRBK7hj4Ov3rIwAA/jQIAGj/Y2faaMHTj0IFwElZO0Dz\\nBW79De8/enxTkmiqjSB5RJSTsHS4laJVNGmiNJVug3eQKBD1dJyF3D/kDqInqsN1\\nM5QZwrnLu8Lo+oMVWj20lTCgjj7tmiB+dTXfwysba1rUwKM0XWZ/ortS99bdAfTX\\nbGqG3rX2to1AIdddl+RFyJa9ZIZEUcqtx8ngt7vJzB5aARFKrRFECXphWFTGksL8\\nIoUbHjECuc4AVi9ZWby8YbFeKklkkEyeiZ/rgYONSQvd3CuhC1vk6mxIMhqOxxYA\\n5WZEvFVZiYVOEQcJsMM6ZKEnv2r9xCoNw8LtKk17YegrpNm/43MxVC+R2Mac9EA=\\n=rOOd\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree cd38d2564c751d34cd66f25ebb4de9feb8b45734\\nparent
        9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\\nparent 3e8f32f1c8c2da6d601d905067ebfce90b21aaee\\nauthor
        kuba <xnetcat.dev@gmail.com> 1682942850 +0200\\ncommitter GitHub <noreply@github.com>
        1682942850 +0200\\n\\nv4.1.10\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9da7d5d05baef5b88a4d7575cd76ad62f7e228d4\"},{\"sha\":\"3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3e8f32f1c8c2da6d601d905067ebfce90b21aaee\"}]},{\"sha\":\"ef2b647d762789a29ff48e1e98222a4691521e66\",\"node_id\":\"C_kwDOA71kIdoAKGVmMmI2NDdkNzYyNzg5YTI5ZmY0OGUxZTk4MjIyYTQ2OTE1MjFlNjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:13Z\"},\"message\":\"removed
        original date from id3 tags\",\"tree\":{\"sha\":\"66c9856979b7c3147f2b495c726ba161347e627d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/66c9856979b7c3147f2b495c726ba161347e627d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ef2b647d762789a29ff48e1e98222a4691521e66\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ef2b647d762789a29ff48e1e98222a4691521e66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ef2b647d762789a29ff48e1e98222a4691521e66\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ef2b647d762789a29ff48e1e98222a4691521e66/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\"}]},{\"sha\":\"7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"node_id\":\"C_kwDOA71kIdoAKDdkMTNlNTJmMTBhZTQ1YTRiMDIyZjA0NzAzOWE1ZWNkODRiY2NkNjI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:40Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T15:18:40Z\"},\"message\":\"formatted
        code\",\"tree\":{\"sha\":\"3a3f76840176dbed64f62b80182c222f399bb792\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3a3f76840176dbed64f62b80182c222f399bb792\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ef2b647d762789a29ff48e1e98222a4691521e66\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ef2b647d762789a29ff48e1e98222a4691521e66\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ef2b647d762789a29ff48e1e98222a4691521e66\"}]},{\"sha\":\"7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"node_id\":\"C_kwDOA71kIdoAKDdiYTYyZWZhOWFlODI1MzMxN2RiZDhiOWUwN2E5MTcxMTllNzMxYWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:22:23Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:22:23Z\"},\"message\":\"fixed
        links on readthedocs\",\"tree\":{\"sha\":\"9a9d1f775b0d629414e00dd4c9befb22a98d6466\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9a9d1f775b0d629414e00dd4c9befb22a98d6466\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d13e52f10ae45a4b022f047039a5ecd84bccd62\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d13e52f10ae45a4b022f047039a5ecd84bccd62\"}]},{\"sha\":\"bb71d642defacbc71d974c7497cd23e654d4b934\",\"node_id\":\"C_kwDOA71kIdoAKGJiNzFkNjQyZGVmYWNiYzcxZDk3NGM3NDk3Y2QyM2U2NTRkNGI5MzQ\",\"commit\":{\"author\":{\"name\":\"Lia
        Chen\",\"email\":\"124116769+cordeliachen@users.noreply.github.com\",\"date\":\"2023-05-04T21:28:07Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-04T21:28:07Z\"},\"message\":\"Include
        Spotify Popularity in metadata for MP3 files (#1827)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"56f074feaca9d82d0c19d13ffd24dd53dbfd3863\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/56f074feaca9d82d0c19d13ffd24dd53dbfd3863\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bb71d642defacbc71d974c7497cd23e654d4b934\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkVCNnCRBK7hj4Ov3rIwAA/qgIAHKmL01LKSgrM1hP93fXt5XS\\nRNxFeuU8EsSf9wErYY/lKMAh33FhHwGzvDzUDtbGt2iRS4Q9sWYP6lYCg0k38GZ5\\nj35kZ2VP3WMVL0sVm6CjBDBGfEBqmdc16ohmk7RkY5RAjRDRFwJqckDNmCPJbrE0\\nkJzk3caexNpJUDLEPCOCcW2THb+lwWVRWyIyVMbPL8Puhzkry040LVwPYuK6yDzH\\n5zTG2owZYivPJ+8jb6D0gprB7BSWJVZJ1Wn2mq+o+e9C+0nCUmZUIWEzNya10sp5\\nXiQS5A6JB0ETj7jtmf2qqBnTXiHJhxmX53scJ9MZ/h7jkg6ak9WVlGylg10WsrM=\\n=kwzr\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 56f074feaca9d82d0c19d13ffd24dd53dbfd3863\\nparent
        7ba62efa9ae8253317dbd8b9e07a917119e731aa\\nauthor Lia Chen <124116769+cordeliachen@users.noreply.github.com>
        1683235687 -0400\\ncommitter GitHub <noreply@github.com> 1683235687 +0200\\n\\nInclude
        Spotify Popularity in metadata for MP3 files (#1827)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb71d642defacbc71d974c7497cd23e654d4b934\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb71d642defacbc71d974c7497cd23e654d4b934\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb71d642defacbc71d974c7497cd23e654d4b934/comments\",\"author\":{\"login\":\"cordeliachen\",\"id\":124116769,\"node_id\":\"U_kgDOB2XfIQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/124116769?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/cordeliachen\",\"html_url\":\"https://github.com/cordeliachen\",\"followers_url\":\"https://api.github.com/users/cordeliachen/followers\",\"following_url\":\"https://api.github.com/users/cordeliachen/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/cordeliachen/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/cordeliachen/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/cordeliachen/subscriptions\",\"organizations_url\":\"https://api.github.com/users/cordeliachen/orgs\",\"repos_url\":\"https://api.github.com/users/cordeliachen/repos\",\"events_url\":\"https://api.github.com/users/cordeliachen/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/cordeliachen/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ba62efa9ae8253317dbd8b9e07a917119e731aa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ba62efa9ae8253317dbd8b9e07a917119e731aa\"}]},{\"sha\":\"581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"node_id\":\"C_kwDOA71kIdoAKDU4MTMzMDY5OWNmZTNiNjZjNjVmZDdmMDAwNWNlM2EyYzMzMGU5NTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:30:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-04T21:30:54Z\"},\"message\":\"bump
        version to v4.1.11\",\"tree\":{\"sha\":\"f81cd9164f8ed4bca1e139bf8fe6a2f5ad750b82\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f81cd9164f8ed4bca1e139bf8fe6a2f5ad750b82\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bb71d642defacbc71d974c7497cd23e654d4b934\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb71d642defacbc71d974c7497cd23e654d4b934\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb71d642defacbc71d974c7497cd23e654d4b934\"}]},{\"sha\":\"55644854b7752df8e1f1a219d3098e78ed0a7908\",\"node_id\":\"C_kwDOA71kIdoAKDU1NjQ0ODU0Yjc3NTJkZjhlMWYxYTIxOWQzMDk4ZTc4ZWQwYTc5MDg\",\"commit\":{\"author\":{\"name\":\"Shabinder
        Singh\",\"email\":\"owner@shabinder.in\",\"date\":\"2023-05-25T16:39:06Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-25T16:39:06Z\"},\"message\":\"Fix
        URL command usage in ReadME. (#1840)\",\"tree\":{\"sha\":\"96f30ca358ff15f301af3c0a066e6a0c3604de99\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/96f30ca358ff15f301af3c0a066e6a0c3604de99\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkb48qCRBK7hj4Ov3rIwAAcaoIAFoHGyyjhTkEu1YPGp8M6cmV\\nz4quP+pJipg2slycYDLgkUmsKaY4drwDxLtRdAlfZ5Qo8sObIiZpB7GjowrYx9ZE\\nZvCOn2fPwADjB7s2iKcOJfE0ix8xOzy2Nw5ozpLnd0wlb0LTn3tL98VfAs4Uezrp\\nxnQ6+tVFbN+nq25W87T0aj5/nQuypBNRrS0Ma6c3saS4IaKgOEeMyoqvsQg7ltrr\\nx5aS0ocuU5XSSwqaxeT++DlitfyTguB3qYfgMXlyjzERzR/L0oVj6LS33fyMZUoG\\nzDnBDY9v0vWJWwpWnhM/KxCO8nL1yUwsOT9Ef3VssTD68HfYu6+Kj4QaqcaGMKo=\\n=KA07\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 96f30ca358ff15f301af3c0a066e6a0c3604de99\\nparent
        581330699cfe3b66c65fd7f0005ce3a2c330e956\\nauthor Shabinder Singh <owner@shabinder.in>
        1685032746 +0530\\ncommitter GitHub <noreply@github.com> 1685032746 +0200\\n\\nFix
        URL command usage in ReadME. (#1840)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55644854b7752df8e1f1a219d3098e78ed0a7908/comments\",\"author\":{\"login\":\"Shabinder\",\"id\":44765050,\"node_id\":\"MDQ6VXNlcjQ0NzY1MDUw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/44765050?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Shabinder\",\"html_url\":\"https://github.com/Shabinder\",\"followers_url\":\"https://api.github.com/users/Shabinder/followers\",\"following_url\":\"https://api.github.com/users/Shabinder/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Shabinder/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Shabinder/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Shabinder/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Shabinder/orgs\",\"repos_url\":\"https://api.github.com/users/Shabinder/repos\",\"events_url\":\"https://api.github.com/users/Shabinder/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Shabinder/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/581330699cfe3b66c65fd7f0005ce3a2c330e956\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/581330699cfe3b66c65fd7f0005ce3a2c330e956\"}]},{\"sha\":\"a15f7557753117e4701e6b70303c3847d449ab3b\",\"node_id\":\"C_kwDOA71kIdoAKGExNWY3NTU3NzUzMTE3ZTQ3MDFlNmI3MDMwM2MzODQ3ZDQ0OWFiM2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T16:59:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T16:59:59Z\"},\"message\":\"added
        update command to docs\",\"tree\":{\"sha\":\"3f892ce5cf5bd81b89f4a644bfefa7d51619c7e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3f892ce5cf5bd81b89f4a644bfefa7d51619c7e9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a15f7557753117e4701e6b70303c3847d449ab3b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a15f7557753117e4701e6b70303c3847d449ab3b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a15f7557753117e4701e6b70303c3847d449ab3b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a15f7557753117e4701e6b70303c3847d449ab3b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"55644854b7752df8e1f1a219d3098e78ed0a7908\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/55644854b7752df8e1f1a219d3098e78ed0a7908\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/55644854b7752df8e1f1a219d3098e78ed0a7908\"}]},{\"sha\":\"6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"node_id\":\"C_kwDOA71kIdoAKDZmMGRlODdjMmIxNjdmMzdmMWJkNDJlZDA4NWQwNjU4ODgyZmQzNTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:14:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:14:30Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"a1a596d57359a43c85cf79c30d4d634a7f7f94c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a1a596d57359a43c85cf79c30d4d634a7f7f94c8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a15f7557753117e4701e6b70303c3847d449ab3b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a15f7557753117e4701e6b70303c3847d449ab3b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a15f7557753117e4701e6b70303c3847d449ab3b\"}]},{\"sha\":\"1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"node_id\":\"C_kwDOA71kIdoAKDEyMTc1OTVmYTllMDdkYTQ1ZTBkN2FjYzU3ZWQ1ZjUwMGU2ZjU2ZjI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:38:04Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:38:04Z\"},\"message\":\"check
        if we get less than 2 template parts\",\"tree\":{\"sha\":\"09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f0de87c2b167f37f1bd42ed085d0658882fd350\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f0de87c2b167f37f1bd42ed085d0658882fd350\"}]},{\"sha\":\"1924fbe6d5fdc4cd9132464f377fce150750730e\",\"node_id\":\"C_kwDOA71kIdoAKDE5MjRmYmU2ZDVmZGM0Y2Q5MTMyNDY0ZjM3N2ZjZTE1MDc1MDczMGU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-25T17:45:01Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-05-25T17:45:01Z\"},\"message\":\"v4.11.0\",\"tree\":{\"sha\":\"09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkb56dCRBK7hj4Ov3rIwAAnsQIAI/9LDz+h77PUYYO52ybwED2\\nMsDitkHMteo0Vzqg5hU97R6duYUp6UNfqhnuavWeRTQRSd66cMtOypFjQIvB+oxU\\nfGG4Qgj4ByPighEseJgFlMe85fCjUuWTLTVb1S6zeSYhe0uka9k4thx/2V5kU5Rx\\nKakzkiiFtvfMJ52GuQZ6rfjSjrNLmv9gotYXVHvS3mIs1hBLyZsR912OmDsm5OWK\\n7uvfO1b3HotM/pEMtWiDpyo/7JodtEpJwcDZq9krLxt1tpqm3y33TMFpzVcFOpuO\\nyq+Xwgdx+LFFRoqrhjnXrwIDftM1OV3iYZLphB4XGKhjxSr3tmI/apr9c2LpzH8=\\n=7Yrj\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 09e469ed1ebd385e3fe2b8767cc00c4cbdae86db\\nparent
        5edc15e0677c01ec0ef093a974fdcc30fe8bf508\\nparent 1217595fa9e07da45e0d7acc57ed5f500e6f56f2\\nauthor
        kuba <xnetcat.dev@gmail.com> 1685036701 +0200\\ncommitter GitHub <noreply@github.com>
        1685036701 +0200\\n\\nv4.11.0\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5edc15e0677c01ec0ef093a974fdcc30fe8bf508\"},{\"sha\":\"1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1217595fa9e07da45e0d7acc57ed5f500e6f56f2\"}]},{\"sha\":\"fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"node_id\":\"C_kwDOA71kIdoAKGZjODE3YWQ5YmM2ZDQ1ZWQzMGZmMTFiMDRkMTc0ODdjNjRhY2ZkZTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-05-26T20:52:16Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"added
        links for more info about cookies\",\"tree\":{\"sha\":\"2fa2ccb5a6afa3b05c674728ba5985e12e2083d8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/2fa2ccb5a6afa3b05c674728ba5985e12e2083d8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1924fbe6d5fdc4cd9132464f377fce150750730e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1924fbe6d5fdc4cd9132464f377fce150750730e\"}]},{\"sha\":\"e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"node_id\":\"C_kwDOA71kIdoAKGU5ZGVlNGY1NWQwMGVmOWY1ZGQ3YTM5M2VmYzU5NzhjM2YwNDYxOWM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-03T23:40:38Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"even
        more improvements to file name creation func\",\"tree\":{\"sha\":\"58880668e12764729f3766253573480e70f87873\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/58880668e12764729f3766253573480e70f87873\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fc817ad9bc6d45ed30ff11b04d17487c64acfde1\"}]},{\"sha\":\"e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"node_id\":\"C_kwDOA71kIdoAKGU3ZmE4ZmM1NzU1NjMzMmNlYzdhOTFkMGZjYTAxMDgyMGY1ZmFiYjk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-03T23:40:50Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"adding
        support for wav files 1\",\"tree\":{\"sha\":\"607712fb3c7b9e714abbe2734dae5c463d48b68e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/607712fb3c7b9e714abbe2734dae5c463d48b68e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e9dee4f55d00ef9f5dd7a393efc5978c3f04619c\"}]},{\"sha\":\"c1fb5089bc0b91250d38f705acc655908a6277f6\",\"node_id\":\"C_kwDOA71kIdoAKGMxZmI1MDg5YmMwYjkxMjUwZDM4ZjcwNWFjYzY1NTkwOGE2Mjc3ZjY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:33:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"adding
        support for wav files 2\",\"tree\":{\"sha\":\"3d0b4dbe4776e6d343c45362a962a73f3217c986\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3d0b4dbe4776e6d343c45362a962a73f3217c986\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c1fb5089bc0b91250d38f705acc655908a6277f6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e7fa8fc57556332cec7a91d0fca010820f5fabb9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e7fa8fc57556332cec7a91d0fca010820f5fabb9\"}]},{\"sha\":\"c642e3605e41a024625945acfd40adde044c4887\",\"node_id\":\"C_kwDOA71kIdoAKGM2NDJlMzYwNWU0MWEwMjQ2MjU5NDVhY2ZkNDBhZGRlMDQ0YzQ4ODc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:33:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T00:37:28Z\"},\"message\":\"bump
        version to v4.2.0\",\"tree\":{\"sha\":\"198a24326623d8f818d46dced6a609e5527adef0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/198a24326623d8f818d46dced6a609e5527adef0\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c642e3605e41a024625945acfd40adde044c4887\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c642e3605e41a024625945acfd40adde044c4887\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c642e3605e41a024625945acfd40adde044c4887\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c642e3605e41a024625945acfd40adde044c4887/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c1fb5089bc0b91250d38f705acc655908a6277f6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c1fb5089bc0b91250d38f705acc655908a6277f6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c1fb5089bc0b91250d38f705acc655908a6277f6\"}]},{\"sha\":\"4fd1be7713089641d1b73c48acf0849949c81491\",\"node_id\":\"C_kwDOA71kIdoAKDRmZDFiZTc3MTMwODk2NDFkMWI3M2M0OGFjZjA4NDk5NDljODE0OTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:03:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:03:24Z\"},\"message\":\"update
        client's downloader settings\",\"tree\":{\"sha\":\"09e8ac1cd62ca8dbd802edb86cb87ba48e8505e0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/09e8ac1cd62ca8dbd802edb86cb87ba48e8505e0\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4fd1be7713089641d1b73c48acf0849949c81491\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4fd1be7713089641d1b73c48acf0849949c81491\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4fd1be7713089641d1b73c48acf0849949c81491\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4fd1be7713089641d1b73c48acf0849949c81491/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c642e3605e41a024625945acfd40adde044c4887\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c642e3605e41a024625945acfd40adde044c4887\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c642e3605e41a024625945acfd40adde044c4887\"}]},{\"sha\":\"4e55b156696ca17eb124209e7449918010729102\",\"node_id\":\"C_kwDOA71kIdoAKDRlNTViMTU2Njk2Y2ExN2ViMTI0MjA5ZTc0NDk5MTgwMTA3MjkxMDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:07:45Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:07:45Z\"},\"message\":\"fixed
        code to comply with mypy\",\"tree\":{\"sha\":\"4ccccbbbad5ed7e554a9c70b6b95bc9eeb1cba24\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4ccccbbbad5ed7e554a9c70b6b95bc9eeb1cba24\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4e55b156696ca17eb124209e7449918010729102\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e55b156696ca17eb124209e7449918010729102\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4e55b156696ca17eb124209e7449918010729102\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e55b156696ca17eb124209e7449918010729102/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4fd1be7713089641d1b73c48acf0849949c81491\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4fd1be7713089641d1b73c48acf0849949c81491\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4fd1be7713089641d1b73c48acf0849949c81491\"}]},{\"sha\":\"aac20f56a138dc2a53d985173c96ab3dde580da7\",\"node_id\":\"C_kwDOA71kIdoAKGFhYzIwZjU2YTEzOGRjMmE1M2Q5ODUxNzNjOTZhYjNkZGU1ODBkYTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:12:41Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:12:41Z\"},\"message\":\"use
        poetry to run build script\",\"tree\":{\"sha\":\"de28370cfc9abb85b3c7a476e174c7044e74c032\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/de28370cfc9abb85b3c7a476e174c7044e74c032\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/aac20f56a138dc2a53d985173c96ab3dde580da7/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4e55b156696ca17eb124209e7449918010729102\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e55b156696ca17eb124209e7449918010729102\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4e55b156696ca17eb124209e7449918010729102\"}]},{\"sha\":\"4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"node_id\":\"C_kwDOA71kIdoAKDRhOTVlNmE2YjA3ZjZjYjM5MzlmNWY1M2ZmMTBkZGUzMTk2MWQxZjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:13:37Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-04T01:21:40Z\"},\"message\":\"removed
        unused import\\n\\nblack .\\n\\nformat code\",\"tree\":{\"sha\":\"11d172d5375e0a47d81ccdb8ae488475f14d74b4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/11d172d5375e0a47d81ccdb8ae488475f14d74b4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"aac20f56a138dc2a53d985173c96ab3dde580da7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/aac20f56a138dc2a53d985173c96ab3dde580da7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/aac20f56a138dc2a53d985173c96ab3dde580da7\"}]},{\"sha\":\"059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"node_id\":\"C_kwDOA71kIdoAKDA1OWYyZjNjNmUyZDBjYTE2NTgxOTA1ZGQ5MjYxZDcyZWNlMmYzM2Q\",\"commit\":{\"author\":{\"name\":\"Biswapriyo
        Nath\",\"email\":\"nathbappai@gmail.com\",\"date\":\"2023-06-09T19:11:57Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-06-09T19:11:57Z\"},\"message\":\"Remove
        unwanted directories in container image (#1856)\",\"tree\":{\"sha\":\"9c27d0e11c75b2e554be6f95693aa178dc52fe1b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9c27d0e11c75b2e554be6f95693aa178dc52fe1b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkg3l9CRBK7hj4Ov3rIwAAhG8IACEMlEyARzjF/EYebJrJYbr8\\nYA4tao1tVhmR7K5BqqnBm7F7nnlVNvGa+1CxFOBpEbqqEnrMIplUt/1ex3ovoPNN\\nCX3EIDFZz5tw+ONxYczoONHDw2+RUIB0WLfPn6jm+eqlq0k/5RIoEh+gETbFBM2h\\nCJenWU4dMewKmjC+S32RndhhOtpfCwwEQriPSC3mBY+7gnixe2Eq9Axy8CCj1E+z\\nNGwuMSVca73FBpywEeEo3UqwwikVJ3sDVsL1Vn1oW8Ij3LGanOliAAFVQimLayhb\\ntsjGLERm/3QRw/7wPs3WEvoKMMPbWaIaiPpoQ+QL0p2RUloIXDDMOA7dWwRFJK8=\\n=wa01\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 9c27d0e11c75b2e554be6f95693aa178dc52fe1b\\nparent
        4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\\nauthor Biswapriyo Nath <nathbappai@gmail.com>
        1686337917 +0530\\ncommitter GitHub <noreply@github.com> 1686337917 +0200\\n\\nRemove
        unwanted directories in container image (#1856)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d/comments\",\"author\":{\"login\":\"Biswa96\",\"id\":31443074,\"node_id\":\"MDQ6VXNlcjMxNDQzMDc0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/31443074?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Biswa96\",\"html_url\":\"https://github.com/Biswa96\",\"followers_url\":\"https://api.github.com/users/Biswa96/followers\",\"following_url\":\"https://api.github.com/users/Biswa96/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Biswa96/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Biswa96/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Biswa96/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Biswa96/orgs\",\"repos_url\":\"https://api.github.com/users/Biswa96/repos\",\"events_url\":\"https://api.github.com/users/Biswa96/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Biswa96/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4a95e6a6b07f6cb3939f5f53ff10dde31961d1f4\"}]},{\"sha\":\"d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"node_id\":\"C_kwDOA71kIdoAKGQ2MzRlMjY0Nzc3ZjJhM2RjYWQ0MmQ3MGNiZTBjYTZkODc0M2Q5ZWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:14:29Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:14:29Z\"},\"message\":\"fixed
        mypy errors\",\"tree\":{\"sha\":\"a990170f8b6e07760b474d768b9ea9364c2108e7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a990170f8b6e07760b474d768b9ea9364c2108e7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/059f2f3c6e2d0ca16581905dd9261d72ece2f33d\"}]},{\"sha\":\"039801f107c701af666331b3ed4a2c147a31fb28\",\"node_id\":\"C_kwDOA71kIdoAKDAzOTgwMWYxMDdjNzAxYWY2NjYzMzFiM2VkNGEyYzE0N2EzMWZiMjg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:26:33Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T19:26:33Z\"},\"message\":\"handle
        sync files that are not dicts\",\"tree\":{\"sha\":\"337a21ada924cd843a1469a3ce764ec8ca6692a6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/337a21ada924cd843a1469a3ce764ec8ca6692a6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/039801f107c701af666331b3ed4a2c147a31fb28\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/039801f107c701af666331b3ed4a2c147a31fb28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/039801f107c701af666331b3ed4a2c147a31fb28\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/039801f107c701af666331b3ed4a2c147a31fb28/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d634e264777f2a3dcad42d70cbe0ca6d8743d9ee\"}]},{\"sha\":\"f4835a426111cc1258899ff4fda5205db6508d24\",\"node_id\":\"C_kwDOA71kIdoAKGY0ODM1YTQyNjExMWNjMTI1ODg5OWZmNGZkYTUyMDVkYjY1MDhkMjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T20:08:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T20:08:01Z\"},\"message\":\"added
        more forbidden words\",\"tree\":{\"sha\":\"0bf474f77d406b7c0cce192afb4f328f8c5efc37\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0bf474f77d406b7c0cce192afb4f328f8c5efc37\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f4835a426111cc1258899ff4fda5205db6508d24\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f4835a426111cc1258899ff4fda5205db6508d24\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f4835a426111cc1258899ff4fda5205db6508d24\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f4835a426111cc1258899ff4fda5205db6508d24/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"039801f107c701af666331b3ed4a2c147a31fb28\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/039801f107c701af666331b3ed4a2c147a31fb28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/039801f107c701af666331b3ed4a2c147a31fb28\"}]},{\"sha\":\"f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"node_id\":\"C_kwDOA71kIdoAKGYwZWNlNDMyMzc1ZmI2ZDdhNzU3M2YzNWVkMTNjNmJiN2RmODZmMjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T21:22:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-09T21:22:39Z\"},\"message\":\"improved
        result score calculation by changing how the views are included in the result
        score\",\"tree\":{\"sha\":\"57288d51968de6e84e7464961e1a9c5ff5f21036\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/57288d51968de6e84e7464961e1a9c5ff5f21036\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f4835a426111cc1258899ff4fda5205db6508d24\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f4835a426111cc1258899ff4fda5205db6508d24\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f4835a426111cc1258899ff4fda5205db6508d24\"}]},{\"sha\":\"3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"node_id\":\"C_kwDOA71kIdoAKDNmMDU2NWM4OGFlMWEwYTc1MzM0N2QxNWExYjQ4NGFlMmM1MTRkMjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-10T11:20:23Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-10T11:20:23Z\"},\"message\":\"check
        if audio provider provides views\",\"tree\":{\"sha\":\"5b6afe08e18cb152fb237af859ae2fa5e63ba526\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5b6afe08e18cb152fb237af859ae2fa5e63ba526\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f0ece432375fb6d7a7573f35ed13c6bb7df86f25\"}]},{\"sha\":\"a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"node_id\":\"C_kwDOA71kIdoAKGE2YTg5MjkxY2NhMGNkNDg3ZTE2YjI4YWFjZDFiMzljMWJkYzgzNTc\",\"commit\":{\"author\":{\"name\":\"Maxence
        G\",\"email\":\"maxence.gr@hotmail.fr\",\"date\":\"2023-06-10T17:40:37Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-10T17:41:21Z\"},\"message\":\"Add
        ISRC in file tags (#1859)\",\"tree\":{\"sha\":\"cdf9dd94abf092870e5c0edc22a0062fa4ea8965\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cdf9dd94abf092870e5c0edc22a0062fa4ea8965\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357/comments\",\"author\":{\"login\":\"Maxmystere\",\"id\":24446198,\"node_id\":\"MDQ6VXNlcjI0NDQ2MTk4\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/24446198?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Maxmystere\",\"html_url\":\"https://github.com/Maxmystere\",\"followers_url\":\"https://api.github.com/users/Maxmystere/followers\",\"following_url\":\"https://api.github.com/users/Maxmystere/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Maxmystere/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Maxmystere/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Maxmystere/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Maxmystere/orgs\",\"repos_url\":\"https://api.github.com/users/Maxmystere/repos\",\"events_url\":\"https://api.github.com/users/Maxmystere/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Maxmystere/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3f0565c88ae1a0a753347d15a1b484ae2c514d25\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3f0565c88ae1a0a753347d15a1b484ae2c514d25\"}]},{\"sha\":\"2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"node_id\":\"C_kwDOA71kIdoAKDJiYWFkNGE0OTE0ZWEyMGU4ZTRiNTAxZWJiOWVlYmFmNzEwMzUxZjA\",\"commit\":{\"author\":{\"name\":\"Laurens\",\"email\":\"laurens94@users.noreply.github.com\",\"date\":\"2023-06-11T13:06:31Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-06-11T13:06:31Z\"},\"message\":\"Fix
        broken link in docs\",\"tree\":{\"sha\":\"e59149dd29b5a88edf96048638c97ceb534e8113\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e59149dd29b5a88edf96048638c97ceb534e8113\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkhcbXCRBK7hj4Ov3rIwAAHugIABeol+R47cS6P1QRTDuv1qMC\\nXR/DF9S9yVT+jQ4X6KruBTLUM2H3m6qE5eVs3xJN+LVWzgCRwPeCbYfqxNr8Gm5Z\\nMhq+gY3PJGEZAMenYAQ5f2eaEZmeEbLHZLvIzGq27P9ndbWQqWpU7WBz1MikoQUP\\nkMdMxv8bVYZ/VaWlttCPw8MYfjdg2OJ7S93ud3GIQhS5P+vwH0XrsJTCokYiJ6Jw\\nYdrCiVutn9xk5UhHs/63p+5NwB3jzkBLmbxZgAJrhNAcAHTCEOvjgBFFB6VmyneJ\\nJBzNWeW7zgseoELPi97ZSyiihAT5RNxvEhtNezf/jDMIMaIw5cyBldsQuaECAPg=\\n=uDc1\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e59149dd29b5a88edf96048638c97ceb534e8113\\nparent
        a6a89291cca0cd487e16b28aacd1b39c1bdc8357\\nauthor Laurens <laurens94@users.noreply.github.com>
        1686488791 +0200\\ncommitter GitHub <noreply@github.com> 1686488791 +0200\\n\\nFix
        broken link in docs\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0/comments\",\"author\":{\"login\":\"laurens94\",\"id\":5780704,\"node_id\":\"MDQ6VXNlcjU3ODA3MDQ=\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/5780704?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/laurens94\",\"html_url\":\"https://github.com/laurens94\",\"followers_url\":\"https://api.github.com/users/laurens94/followers\",\"following_url\":\"https://api.github.com/users/laurens94/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/laurens94/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/laurens94/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/laurens94/subscriptions\",\"organizations_url\":\"https://api.github.com/users/laurens94/orgs\",\"repos_url\":\"https://api.github.com/users/laurens94/repos\",\"events_url\":\"https://api.github.com/users/laurens94/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/laurens94/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6a89291cca0cd487e16b28aacd1b39c1bdc8357\"}]},{\"sha\":\"d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"node_id\":\"C_kwDOA71kIdoAKGQ3ODlhNWNiMWFiZjIzZTdhMjg2NjBiYTc5YjNmZWJjZWU0NWJmZGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:36:14Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:36:14Z\"},\"message\":\"added
        `--yt-dlp-args` flag\",\"tree\":{\"sha\":\"f50b22d5926ce2e0d1928794eab20fc45cc61c65\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f50b22d5926ce2e0d1928794eab20fc45cc61c65\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2baad4a4914ea20e8e4b501ebb9eebaf710351f0\"}]},{\"sha\":\"b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"node_id\":\"C_kwDOA71kIdoAKGIzYzdmZjE5ZTg3MDQ3YTc2ZmI2ZjZkNjU0NzAwOWIyMmRmMGIwMTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:39:31Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:39:31Z\"},\"message\":\"always
        return the best result\",\"tree\":{\"sha\":\"318f8c19772f053ea6df0afc8fc1749db10f177d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/318f8c19772f053ea6df0afc8fc1749db10f177d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d789a5cb1abf23e7a28660ba79b3febcee45bfdc\"}]},{\"sha\":\"2f9185277d488894ad9c523f7fe6a039037212c0\",\"node_id\":\"C_kwDOA71kIdoAKDJmOTE4NTI3N2Q0ODg4OTRhZDljNTIzZjdmZTZhMDM5MDM3MjEyYzA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:46:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:46:12Z\"},\"message\":\"fixed
        mypy issues\",\"tree\":{\"sha\":\"bdf03661860551ebade0683335368a0e9494bc90\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bdf03661860551ebade0683335368a0e9494bc90\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2f9185277d488894ad9c523f7fe6a039037212c0\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2f9185277d488894ad9c523f7fe6a039037212c0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2f9185277d488894ad9c523f7fe6a039037212c0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2f9185277d488894ad9c523f7fe6a039037212c0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b3c7ff19e87047a76fb6f6d6547009b22df0b019\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b3c7ff19e87047a76fb6f6d6547009b22df0b019\"}]},{\"sha\":\"bbbe924c72b265f2493973fab649ac054f3e04a0\",\"node_id\":\"C_kwDOA71kIdoAKGJiYmU5MjRjNzJiMjY1ZjI0OTM5NzNmYWI2NDlhYzA1NGYzZTA0YTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:51:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:51:44Z\"},\"message\":\"increased
        name match threshold\",\"tree\":{\"sha\":\"f200081d23fa5be2bb9a6dbc78c5cd3647fbc8f7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f200081d23fa5be2bb9a6dbc78c5cd3647fbc8f7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bbbe924c72b265f2493973fab649ac054f3e04a0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2f9185277d488894ad9c523f7fe6a039037212c0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2f9185277d488894ad9c523f7fe6a039037212c0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2f9185277d488894ad9c523f7fe6a039037212c0\"}]},{\"sha\":\"efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"node_id\":\"C_kwDOA71kIdoAKGVmYzI0YWM2ZThhZmM4NjE3MjI4ZTg3YTJmMmU2NWMyNzY5NmZhNzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:52:23Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T16:52:23Z\"},\"message\":\"format
        with black\",\"tree\":{\"sha\":\"75e9fed1804f034657eae98e5730eeec626dacec\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/75e9fed1804f034657eae98e5730eeec626dacec\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bbbe924c72b265f2493973fab649ac054f3e04a0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bbbe924c72b265f2493973fab649ac054f3e04a0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bbbe924c72b265f2493973fab649ac054f3e04a0\"}]},{\"sha\":\"e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"node_id\":\"C_kwDOA71kIdoAKGU2ZjAzMzk2YmRmZWZiM2UwZWI3NmM3NjljODE2ZjY2NWFiMDMxZWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:14:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:14:53Z\"},\"message\":\"added
        soundcloud audio provider\",\"tree\":{\"sha\":\"9d7b6d249dd45e4cb7b0aafb3f4b5b4f97824172\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9d7b6d249dd45e4cb7b0aafb3f4b5b4f97824172\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/efc24ac6e8afc8617228e87a2f2e65c27696fa71\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/efc24ac6e8afc8617228e87a2f2e65c27696fa71\"}]},{\"sha\":\"27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"node_id\":\"C_kwDOA71kIdoAKDI3YTYyZjA2YjYzM2FkYTQ2OWY2YjAxYTI1OGQyZmQ1ZGVkZDIwNjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:18:06Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:18:06Z\"},\"message\":\"update
        packages\",\"tree\":{\"sha\":\"1b594752c5a96db69b35759c83326c3117e0df61\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1b594752c5a96db69b35759c83326c3117e0df61\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e6f03396bdfefb3e0eb76c769c816f665ab031eb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e6f03396bdfefb3e0eb76c769c816f665ab031eb\"}]},{\"sha\":\"ed83651932c496505090dea49257320599300b90\",\"node_id\":\"C_kwDOA71kIdoAKGVkODM2NTE5MzJjNDk2NTA1MDkwZGVhNDkyNTczMjA1OTkzMDBiOTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:45:16Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T18:45:16Z\"},\"message\":\"updated
        vcrpy\",\"tree\":{\"sha\":\"91010235754db28fe257eae5d667233a0b72b0ef\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/91010235754db28fe257eae5d667233a0b72b0ef\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ed83651932c496505090dea49257320599300b90\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed83651932c496505090dea49257320599300b90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed83651932c496505090dea49257320599300b90\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed83651932c496505090dea49257320599300b90/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/27a62f06b633ada469f6b01a258d2fd5dedd2065\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/27a62f06b633ada469f6b01a258d2fd5dedd2065\"}]},{\"sha\":\"cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"node_id\":\"C_kwDOA71kIdoAKGNjMzk5YTg5NDIxODdmNWE3MmU0YTBjYzhlM2JjMzk5ZDdhNTAyOTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:48:25Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:48:25Z\"},\"message\":\"added
        bandcamp audio provider\",\"tree\":{\"sha\":\"4044bc091d245cc564b5ddb914e1d50497710a28\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4044bc091d245cc564b5ddb914e1d50497710a28\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ed83651932c496505090dea49257320599300b90\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ed83651932c496505090dea49257320599300b90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ed83651932c496505090dea49257320599300b90\"}]},{\"sha\":\"4256a3b1c74b605c876bd92738e247974e212558\",\"node_id\":\"C_kwDOA71kIdoAKDQyNTZhM2IxYzc0YjYwNWM4NzZiZDkyNzM4ZTI0Nzk3NGUyMTI1NTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:51:49Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T20:51:49Z\"},\"message\":\"fixed
        mypy issues in bandcamp\",\"tree\":{\"sha\":\"b7f9cbff3334c8e43cf2a6c90972ef86daad5e9a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b7f9cbff3334c8e43cf2a6c90972ef86daad5e9a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4256a3b1c74b605c876bd92738e247974e212558\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4256a3b1c74b605c876bd92738e247974e212558\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4256a3b1c74b605c876bd92738e247974e212558\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4256a3b1c74b605c876bd92738e247974e212558/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/cc399a8942187f5a72e4a0cc8e3bc399d7a50293\"}]},{\"sha\":\"ecba7d611bae329e407f61da03df66645b879163\",\"node_id\":\"C_kwDOA71kIdoAKGVjYmE3ZDYxMWJhZTMyOWU0MDdmNjFkYTAzZGY2NjY0NWI4NzkxNjM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:38:27Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:44:04Z\"},\"message\":\"added
        piped audio provider\\n\\nremoved debug print\",\"tree\":{\"sha\":\"36c21ad9d6b3c800bdcd46d8e7f41258e206ae4c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/36c21ad9d6b3c800bdcd46d8e7f41258e206ae4c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ecba7d611bae329e407f61da03df66645b879163\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ecba7d611bae329e407f61da03df66645b879163\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ecba7d611bae329e407f61da03df66645b879163\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ecba7d611bae329e407f61da03df66645b879163/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4256a3b1c74b605c876bd92738e247974e212558\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4256a3b1c74b605c876bd92738e247974e212558\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4256a3b1c74b605c876bd92738e247974e212558\"}]},{\"sha\":\"d29385535508a000e322c843943b38ea6a8a13c2\",\"node_id\":\"C_kwDOA71kIdoAKGQyOTM4NTUzNTUwOGEwMDBlMzIyYzg0Mzk0M2IzOGVhNmE4YTEzYzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:47Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:47Z\"},\"message\":\"added
        support for piped links\",\"tree\":{\"sha\":\"e9d442079531b2c923d57893e81fa1ba6869fea1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e9d442079531b2c923d57893e81fa1ba6869fea1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d29385535508a000e322c843943b38ea6a8a13c2\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d29385535508a000e322c843943b38ea6a8a13c2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d29385535508a000e322c843943b38ea6a8a13c2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d29385535508a000e322c843943b38ea6a8a13c2/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ecba7d611bae329e407f61da03df66645b879163\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ecba7d611bae329e407f61da03df66645b879163\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ecba7d611bae329e407f61da03df66645b879163\"}]},{\"sha\":\"49b4af7ec2b9c87010439805c077528decec2b70\",\"node_id\":\"C_kwDOA71kIdoAKDQ5YjRhZjdlYzJiOWM4NzAxMDQzOTgwNWMwNzc1MjhkZWNlYzJiNzA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:57Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-12T22:52:57Z\"},\"message\":\"format
        code with black\",\"tree\":{\"sha\":\"abb0053f5658c62fcfd80e2c48bc6cb743543caa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/abb0053f5658c62fcfd80e2c48bc6cb743543caa\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/49b4af7ec2b9c87010439805c077528decec2b70\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49b4af7ec2b9c87010439805c077528decec2b70\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49b4af7ec2b9c87010439805c077528decec2b70\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49b4af7ec2b9c87010439805c077528decec2b70/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d29385535508a000e322c843943b38ea6a8a13c2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d29385535508a000e322c843943b38ea6a8a13c2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d29385535508a000e322c843943b38ea6a8a13c2\"}]},{\"sha\":\"57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"node_id\":\"C_kwDOA71kIdoAKDU3YWU1MTRiZTA0ODdkNzlkZWJkOTdjMDk3YzdkMGVkNGVkMmU3Mzc\",\"commit\":{\"author\":{\"name\":\"Alejandro
        Avil\xE9s\",\"email\":\"omegak@gmail.com\",\"date\":\"2023-06-24T12:17:33Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-06-24T12:17:33Z\"},\"message\":\"Give
        an ascii mode to --restrict flag (#1858)\",\"tree\":{\"sha\":\"3181aa4a3da3a4b8a01b0f447b954d5131bdf408\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3181aa4a3da3a4b8a01b0f447b954d5131bdf408\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJklt7dCRBK7hj4Ov3rIwAATUcIAKxrhbUfXXNh+fpgcCIDk6df\\npKzqT3qeX5aBQzK4CQKqplhOfOPnzT3IB7uo+woli7C935o0YqoKAI/+R7iHo4Hw\\nBR+Kjj1VJ27pHQj4Xj4LdL5RnE9ta9Juw8s7RMop/lEPRu5N0tsOBNuTdtFhKTZO\\nOfEyRjt8ckQmh3ZXCsTfHtU+nUCNGiSzQOw2lOUFp80jEiQcZdYVyAsFANQSGu2r\\nCRsFYC8/QbrgJZodzq+43YRrG8hy6+7t6nth7s1Pd/hQHTbJVgRXuAHL+cZzBObW\\nBwC6yprjvCdxDRfYncpjOKdckRkPc4LWgWxRKB+ZbwoVIkYP1SStyB1HBXT6HXQ=\\n=7bGe\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 3181aa4a3da3a4b8a01b0f447b954d5131bdf408\\nparent
        49b4af7ec2b9c87010439805c077528decec2b70\\nauthor Alejandro Avil\xE9s <omegak@gmail.com>
        1687609053 +0200\\ncommitter GitHub <noreply@github.com> 1687609053 +0200\\n\\nGive
        an ascii mode to --restrict flag (#1858)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737/comments\",\"author\":{\"login\":\"OmeGak\",\"id\":716307,\"node_id\":\"MDQ6VXNlcjcxNjMwNw==\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/716307?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/OmeGak\",\"html_url\":\"https://github.com/OmeGak\",\"followers_url\":\"https://api.github.com/users/OmeGak/followers\",\"following_url\":\"https://api.github.com/users/OmeGak/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/OmeGak/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/OmeGak/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/OmeGak/subscriptions\",\"organizations_url\":\"https://api.github.com/users/OmeGak/orgs\",\"repos_url\":\"https://api.github.com/users/OmeGak/repos\",\"events_url\":\"https://api.github.com/users/OmeGak/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/OmeGak/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"49b4af7ec2b9c87010439805c077528decec2b70\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/49b4af7ec2b9c87010439805c077528decec2b70\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/49b4af7ec2b9c87010439805c077528decec2b70\"}]},{\"sha\":\"d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"node_id\":\"C_kwDOA71kIdoAKGQ5YWFjNTcxMGU0ZjEwZjZiNWMxNmNhMTBmOGYxMDVjMzRhNTEyZDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:23:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:23:11Z\"},\"message\":\"added
        detect formats option\",\"tree\":{\"sha\":\"1b412403f0e5d07de5cbdebaea88c01f0e3880b3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1b412403f0e5d07de5cbdebaea88c01f0e3880b3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/57ae514be0487d79debd97c097c7d0ed4ed2e737\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/57ae514be0487d79debd97c097c7d0ed4ed2e737\"}]},{\"sha\":\"060156598112a8d0a19623d28c9c30c110d0b38d\",\"node_id\":\"C_kwDOA71kIdoAKDA2MDE1NjU5ODExMmE4ZDBhMTk2MjNkMjhjOWMzMGMxMTBkMGIzOGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:39:07Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:39:23Z\"},\"message\":\"detect
        all file formats when checking for duplicates without scan for songs flag\\n\\nblack
        .\",\"tree\":{\"sha\":\"b513c5a075d9e7ffee0d750639a795292fd465a9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b513c5a075d9e7ffee0d750639a795292fd465a9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/060156598112a8d0a19623d28c9c30c110d0b38d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/060156598112a8d0a19623d28c9c30c110d0b38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/060156598112a8d0a19623d28c9c30c110d0b38d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/060156598112a8d0a19623d28c9c30c110d0b38d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d9aac5710e4f10f6b5c16ca10f8f105c34a512d8\"}]},{\"sha\":\"7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"node_id\":\"C_kwDOA71kIdoAKDdjMDE3MjQ0YzI2ZmQ0YzdjMWZmY2ZjNTBkMDQ1MTlmZTkxNTZkMWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:48:14Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:48:14Z\"},\"message\":\"updated
        packages\",\"tree\":{\"sha\":\"1fed78cb6a09022c7dfb630a5b0a7c158da823c5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1fed78cb6a09022c7dfb630a5b0a7c158da823c5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"060156598112a8d0a19623d28c9c30c110d0b38d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/060156598112a8d0a19623d28c9c30c110d0b38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/060156598112a8d0a19623d28c9c30c110d0b38d\"}]},{\"sha\":\"06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"node_id\":\"C_kwDOA71kIdoAKDA2Y2FjMGZjODJjNzcwMGY3ZGY4ZDNhOWRkZmI2MzM2MzY4ZWYwNTI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:50:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:50:28Z\"},\"message\":\"added
        more forbidden words\",\"tree\":{\"sha\":\"34feffa26fbcbff87f3a7a012175a02f67eb4ad6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/34feffa26fbcbff87f3a7a012175a02f67eb4ad6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7c017244c26fd4c7c1ffcfc50d04519fe9156d1b\"}]},{\"sha\":\"6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"node_id\":\"C_kwDOA71kIdoAKDY4MDJkY2NlNTI4MjY4NDVhMDZhNTZlNzJlMDhjZDkxZTBiMDJjM2Y\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:51:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:51:15Z\"},\"message\":\"isort
        .\",\"tree\":{\"sha\":\"cc9780004e09ceac183877b3916f68128489f2fb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cc9780004e09ceac183877b3916f68128489f2fb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06cac0fc82c7700f7df8d3a9ddfb6336368ef052\"}]},{\"sha\":\"6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"node_id\":\"C_kwDOA71kIdoAKDZmNjVhMTUyYjI4MzNjZTY4YzgzOGM2NGE1ZGJiOGNjYmJhZDFlNTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:52:49Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T13:52:49Z\"},\"message\":\"fixed
        ext path creation\",\"tree\":{\"sha\":\"087dc51f76378db74e3b9c4f38de5f003d4dac3e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/087dc51f76378db74e3b9c4f38de5f003d4dac3e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6802dcce52826845a06a56e72e08cd91e0b02c3f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6802dcce52826845a06a56e72e08cd91e0b02c3f\"}]},{\"sha\":\"875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"node_id\":\"C_kwDOA71kIdoAKDg3NWEzODRjZTQ5ZDIyMmU3NDhjZWJhNmFkYzJhNzE4ZTRiN2IzM2E\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T14:04:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-24T14:04:55Z\"},\"message\":\"Update
        test_yt_search.yaml\",\"tree\":{\"sha\":\"878979fae9fd60f8fba54a4492f22bd84b044a9f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/878979fae9fd60f8fba54a4492f22bd84b044a9f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6f65a152b2833ce68c838c64a5dbb8ccbbad1e59\"}]},{\"sha\":\"5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"node_id\":\"C_kwDOA71kIdoAKDVmNmNmZGZjZWEyODc4ZDgyMWEwNzc5YzgwNmY3YjUwMGY3ZGJkNjc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-27T10:19:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-27T10:19:48Z\"},\"message\":\"fixed
        song matching during song object reinit\",\"tree\":{\"sha\":\"e37b841da18f23113431313215e1d8a55c7034f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e37b841da18f23113431313215e1d8a55c7034f2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/875a384ce49d222e748ceba6adc2a718e4b7b33a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/875a384ce49d222e748ceba6adc2a718e4b7b33a\"}]},{\"sha\":\"7568dd9b3323828614a2b226c5e9be1913d4782a\",\"node_id\":\"C_kwDOA71kIdoAKDc1NjhkZDliMzMyMzgyODYxNGEyYjIyNmM1ZTliZTE5MTNkNDc4MmE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:10:05Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:10:24Z\"},\"message\":\"simplified
        artist match fixup for verified results\\n\\nUpdate test_matching.py\",\"tree\":{\"sha\":\"17ab88d8156eaf060aac93075c6a136a6e69c5da\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/17ab88d8156eaf060aac93075c6a136a6e69c5da\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7568dd9b3323828614a2b226c5e9be1913d4782a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5f6cfdfcea2878d821a0779c806f7b500f7dbd67\"}]},{\"sha\":\"44737dbad4393ccdb517a662190295c56a8416f0\",\"node_id\":\"C_kwDOA71kIdoAKDQ0NzM3ZGJhZDQzOTNjY2RiNTE3YTY2MjE5MDI5NWM1NmE4NDE2ZjA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:15:17Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T12:15:17Z\"},\"message\":\"removed
        unused code\",\"tree\":{\"sha\":\"22b8cb3096997b10c5f1595787ec31187fd14b04\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/22b8cb3096997b10c5f1595787ec31187fd14b04\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/44737dbad4393ccdb517a662190295c56a8416f0\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/44737dbad4393ccdb517a662190295c56a8416f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/44737dbad4393ccdb517a662190295c56a8416f0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/44737dbad4393ccdb517a662190295c56a8416f0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7568dd9b3323828614a2b226c5e9be1913d4782a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7568dd9b3323828614a2b226c5e9be1913d4782a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7568dd9b3323828614a2b226c5e9be1913d4782a\"}]},{\"sha\":\"81d6e064c4910424776ff98705d37a571de61dea\",\"node_id\":\"C_kwDOA71kIdoAKDgxZDZlMDY0YzQ5MTA0MjQ3NzZmZjk4NzA1ZDM3YTU3MWRlNjFkZWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T13:07:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-29T13:45:44Z\"},\"message\":\"added
        support for ytm links without spotify link\\n\\nUpdate search.py\",\"tree\":{\"sha\":\"3cde6deaa678d4d18bdcbbf2eb3f7e7210bb12e2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3cde6deaa678d4d18bdcbbf2eb3f7e7210bb12e2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/81d6e064c4910424776ff98705d37a571de61dea\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/81d6e064c4910424776ff98705d37a571de61dea\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/81d6e064c4910424776ff98705d37a571de61dea\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/81d6e064c4910424776ff98705d37a571de61dea/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"44737dbad4393ccdb517a662190295c56a8416f0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/44737dbad4393ccdb517a662190295c56a8416f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/44737dbad4393ccdb517a662190295c56a8416f0\"}]},{\"sha\":\"b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"node_id\":\"C_kwDOA71kIdoAKGI2MTFhMGU0YTRhMThiYmQwMjNjMzk0NTFiN2EyNjEwYTgxY2U3NzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T08:54:48Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T08:54:48Z\"},\"message\":\"working
        on piped proxy\",\"tree\":{\"sha\":\"bada0a9802cb8a05bdcd202baf573344a8cff093\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bada0a9802cb8a05bdcd202baf573344a8cff093\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"81d6e064c4910424776ff98705d37a571de61dea\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/81d6e064c4910424776ff98705d37a571de61dea\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/81d6e064c4910424776ff98705d37a571de61dea\"}]},{\"sha\":\"b64868a66edb45197a27d904445f9ce42eb46fbf\",\"node_id\":\"C_kwDOA71kIdoAKGI2NDg2OGE2NmVkYjQ1MTk3YTI3ZDkwNDQ0NWY5Y2U0MmViNDZmYmY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:00:51Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:00:51Z\"},\"message\":\"don't
        copy files when using piped\",\"tree\":{\"sha\":\"5a5bacf74858561433fe6b5293a1d3baed9e55d3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5a5bacf74858561433fe6b5293a1d3baed9e55d3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64868a66edb45197a27d904445f9ce42eb46fbf/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b611a0e4a4a18bbd023c39451b7a2610a81ce772\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b611a0e4a4a18bbd023c39451b7a2610a81ce772\"}]},{\"sha\":\"6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"node_id\":\"C_kwDOA71kIdoAKDY4MjRjMzY4NDQ5MGE2NWE0NWJkYmQ3MTQxZGQ4NGJiMWViNGQ2MGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:01:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-06-30T11:01:01Z\"},\"message\":\"fixed
        format selector\",\"tree\":{\"sha\":\"e3f5ea245029bd66330ccb63767102d2a99eeeee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e3f5ea245029bd66330ccb63767102d2a99eeeee\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b64868a66edb45197a27d904445f9ce42eb46fbf\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64868a66edb45197a27d904445f9ce42eb46fbf\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64868a66edb45197a27d904445f9ce42eb46fbf\"}]},{\"sha\":\"2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"node_id\":\"C_kwDOA71kIdoAKDIzODRmMGIxOTkwYjFhN2IzZjdkNWJlYjY2NGEyNDA4MWYzNzZkY2E\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T09:51:20Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T09:51:20Z\"},\"message\":\"use
        POPM id3 tag for popularity\",\"tree\":{\"sha\":\"cf3c4c6d75beca0f83748dcf6696bae3fd91fa7b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cf3c4c6d75beca0f83748dcf6696bae3fd91fa7b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6824c3684490a65a45bdbd7141dd84bb1eb4d60d\"}]},{\"sha\":\"b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"node_id\":\"C_kwDOA71kIdoAKGI5MTVkYzNhMzIzNjY4MzA2MjdiNzdmYzNlZWIzNDc4OWFkMWZhNWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:29:04Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:29:04Z\"},\"message\":\"added
        ability to download all user playlists\",\"tree\":{\"sha\":\"6b415962a411020674955b27efbc723936fa43e0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6b415962a411020674955b27efbc723936fa43e0\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2384f0b1990b1a7b3f7d5beb664a24081f376dca\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2384f0b1990b1a7b3f7d5beb664a24081f376dca\"}]},{\"sha\":\"fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"node_id\":\"C_kwDOA71kIdoAKGZhNTczN2Y4MGU4YmIzMTMyZGExZmNlZjI5YzYxNTYzZTViOWU2OWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:45:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:45:28Z\"},\"message\":\"fixed
        mypy and pylint errors\",\"tree\":{\"sha\":\"12c38af0e59646c6fb245367d3d44730d9ab2728\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/12c38af0e59646c6fb245367d3d44730d9ab2728\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b915dc3a32366830627b77fc3eeb34789ad1fa5e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b915dc3a32366830627b77fc3eeb34789ad1fa5e\"}]},{\"sha\":\"7d22281666756b352192aeee0bc30b778bf7ad86\",\"node_id\":\"C_kwDOA71kIdoAKDdkMjIyODE2NjY3NTZiMzUyMTkyYWVlZTBiYzMwYjc3OGJmN2FkODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:49:52Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:49:52Z\"},\"message\":\"format
        with black\",\"tree\":{\"sha\":\"7581c84cb43424b5400ef5e67f8fc9b303c5edf5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7581c84cb43424b5400ef5e67f8fc9b303c5edf5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7d22281666756b352192aeee0bc30b778bf7ad86\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d22281666756b352192aeee0bc30b778bf7ad86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d22281666756b352192aeee0bc30b778bf7ad86\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d22281666756b352192aeee0bc30b778bf7ad86/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/fa5737f80e8bb3132da1fcef29c61563e5b9e69a\"}]},{\"sha\":\"a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"node_id\":\"C_kwDOA71kIdoAKGE2Y2Q3MTA2MjIzYjgyY2U1MjU0YWMyNTA5ZjI2ZTU4YjBmMzQwYTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:52:42Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T10:52:42Z\"},\"message\":\"updated
        dependencies\",\"tree\":{\"sha\":\"2f0fe2e2da2e2f6df58589db987697df80885819\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/2f0fe2e2da2e2f6df58589db987697df80885819\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7d22281666756b352192aeee0bc30b778bf7ad86\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7d22281666756b352192aeee0bc30b778bf7ad86\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7d22281666756b352192aeee0bc30b778bf7ad86\"}]},{\"sha\":\"00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"node_id\":\"C_kwDOA71kIdoAKDAwYzU2YjI1MmY3YmMyYmMzNWI4MjUyZTlmMjhkZDNkZWQ3YTc3ZTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T11:14:09Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T12:34:01Z\"},\"message\":\"fixed
        tests\\n\\nUpdate pyproject.toml\\n\\nUpdate test_matching.py\",\"tree\":{\"sha\":\"1fec5f1358b9eacf422c238f6c3da790ea5ad40b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1fec5f1358b9eacf422c238f6c3da790ea5ad40b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6cd7106223b82ce5254ac2509f26e58b0f340a7\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6cd7106223b82ce5254ac2509f26e58b0f340a7\"}]},{\"sha\":\"520c8c21cb2516859881487c94596a7018ebf057\",\"node_id\":\"C_kwDOA71kIdoAKDUyMGM4YzIxY2IyNTE2ODU5ODgxNDg3Yzk0NTk2YTcwMThlYmYwNTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-07-11T12:43:58Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-07-11T12:43:58Z\"},\"message\":\"v4.2.0\",\"tree\":{\"sha\":\"1fec5f1358b9eacf422c238f6c3da790ea5ad40b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1fec5f1358b9eacf422c238f6c3da790ea5ad40b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkrU6OCRBK7hj4Ov3rIwAAPI8IAH7avLromw2d6anIeXC2SXTA\\n8KADkVRi9S3OM5ajnIfNB5tVd1q7OcEs+rh3XOE815maO4m6FZnOVjsj62vZyaGr\\nrdJd08LKRlbQJOCP82Eqt8U782jSrMjoW5OVIU99QMhRqFFC4RXV8XI5ibU7vf15\\nMUCaZSkJbEP5kuyhis4DSF5KumgM04WPCZG1WF1L7pIkKEF+OjPrhJA2Bdr8YN89\\nS7IRTvJPeVCnSFCjQEvwH0w8RDiTkjqBXlyGgFVZU3FpuXlOv/wIssH1p++ZcF1Q\\nNXDaldQLCOdZ8IupRCXEI64ObMaZgaazJgz/nIJB+3fkRkxi0cS5qbOh44mQ0dg=\\n=Pw4S\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 1fec5f1358b9eacf422c238f6c3da790ea5ad40b\\nparent
        1924fbe6d5fdc4cd9132464f377fce150750730e\\nparent 00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\\nauthor
        kuba <xnetcat.dev@gmail.com> 1689079438 +0200\\ncommitter GitHub <noreply@github.com>
        1689079438 +0200\\n\\nv4.2.0\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/520c8c21cb2516859881487c94596a7018ebf057\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1924fbe6d5fdc4cd9132464f377fce150750730e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1924fbe6d5fdc4cd9132464f377fce150750730e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1924fbe6d5fdc4cd9132464f377fce150750730e\"},{\"sha\":\"00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/00c56b252f7bc2bc35b8252e9f28dd3ded7a77e3\"}]},{\"sha\":\"2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"node_id\":\"C_kwDOA71kIdoAKDI5MjFlOTZiZjM4ODYwYmM4ODZhNWE5ODY1ZDRkOGNlOThlOTUyZTE\",\"commit\":{\"author\":{\"name\":\"oscarvx00\",\"email\":\"60139475+oscarvx00@users.noreply.github.com\",\"date\":\"2023-07-13T10:07:10Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-07-13T10:07:10Z\"},\"message\":\"Playlist,
        artist and album download from web app. (#1865)\\n\\nCo-authored-by: kuba
        <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"c5ded294769f2965ecbee5948df9aca190c917f8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c5ded294769f2965ecbee5948df9aca190c917f8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJkr8zOCRBK7hj4Ov3rIwAAsbgIAIZYILnnQEXilSTjYkcyKkhP\\nrCFWNhJhKLLxGPz+IsM+Tpf7V06UuHy2xcEkFoyUZ3DPJ7EkjoToumgJOM1rkSqO\\nZc+ZminB7UIigxPLqr73nWusOHwwLnW+26/CPZdtc+4sNqywHOIn6eQSHBuHk6Fm\\nrem+5t9zcYKfDobeNPFGMxLE8isMn+HHRMDNrfcgVaXslncMvk/2aV6rq3WAWO9g\\nKj45QbUPf3Cl51Vf8v6mkOKj6eIuDT4Z0nvHJJ70Nm9mAxyq2Irr7bieUE/pS75a\\nwA1R9zOpL/8bbF/CCPptlJAo6pEg6oOYq3aoThINhfREWk25MTTiLcjx3eJQvrQ=\\n=nLxi\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree c5ded294769f2965ecbee5948df9aca190c917f8\\nparent
        520c8c21cb2516859881487c94596a7018ebf057\\nauthor oscarvx00 <60139475+oscarvx00@users.noreply.github.com>
        1689242830 +0200\\ncommitter GitHub <noreply@github.com> 1689242830 +0200\\n\\nPlaylist,
        artist and album download from web app. (#1865)\\n\\nCo-authored-by: kuba
        <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1/comments\",\"author\":{\"login\":\"oscarvx00\",\"id\":60139475,\"node_id\":\"MDQ6VXNlcjYwMTM5NDc1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/60139475?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/oscarvx00\",\"html_url\":\"https://github.com/oscarvx00\",\"followers_url\":\"https://api.github.com/users/oscarvx00/followers\",\"following_url\":\"https://api.github.com/users/oscarvx00/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/oscarvx00/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/oscarvx00/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/oscarvx00/subscriptions\",\"organizations_url\":\"https://api.github.com/users/oscarvx00/orgs\",\"repos_url\":\"https://api.github.com/users/oscarvx00/repos\",\"events_url\":\"https://api.github.com/users/oscarvx00/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/oscarvx00/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"520c8c21cb2516859881487c94596a7018ebf057\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/520c8c21cb2516859881487c94596a7018ebf057\"}]},{\"sha\":\"249cce2f65802e735cd2fa0583621257b22396c1\",\"node_id\":\"C_kwDOA71kIdoAKDI0OWNjZTJmNjU4MDJlNzM1Y2QyZmEwNTgzNjIxMjU3YjIyMzk2YzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-18T14:37:43Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-18T14:37:43Z\"},\"message\":\"dropped
        support for python 3.7\",\"tree\":{\"sha\":\"9183930c46aeb1c755494f68fe5e25f426d9ca79\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9183930c46aeb1c755494f68fe5e25f426d9ca79\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/249cce2f65802e735cd2fa0583621257b22396c1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/249cce2f65802e735cd2fa0583621257b22396c1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/249cce2f65802e735cd2fa0583621257b22396c1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/249cce2f65802e735cd2fa0583621257b22396c1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2921e96bf38860bc886a5a9865d4d8ce98e952e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2921e96bf38860bc886a5a9865d4d8ce98e952e1\"}]},{\"sha\":\"be2d1358d55ff1f712996c60841331e1e12bb387\",\"node_id\":\"C_kwDOA71kIdoAKGJlMmQxMzU4ZDU1ZmYxZjcxMjk5NmM2MDg0MTMzMWUxZTEyYmIzODc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:15Z\"},\"message\":\"Update
        poetry.lock\",\"tree\":{\"sha\":\"75df1f028152e6e4ea7fe0589d4693d1f854432e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/75df1f028152e6e4ea7fe0589d4693d1f854432e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/be2d1358d55ff1f712996c60841331e1e12bb387\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/be2d1358d55ff1f712996c60841331e1e12bb387\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/be2d1358d55ff1f712996c60841331e1e12bb387\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/be2d1358d55ff1f712996c60841331e1e12bb387/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"249cce2f65802e735cd2fa0583621257b22396c1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/249cce2f65802e735cd2fa0583621257b22396c1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/249cce2f65802e735cd2fa0583621257b22396c1\"}]},{\"sha\":\"1525fea0d94b097a669706a63d6f2aefff8f995f\",\"node_id\":\"C_kwDOA71kIdoAKDE1MjVmZWEwZDk0YjA5N2E2Njk3MDZhNjNkNmYyYWVmZmY4Zjk5NWY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:19Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:23:19Z\"},\"message\":\"Update
        test_matching.py\",\"tree\":{\"sha\":\"54295a3655096cdbe78a76be10598ecc3f5c4a1a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/54295a3655096cdbe78a76be10598ecc3f5c4a1a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1525fea0d94b097a669706a63d6f2aefff8f995f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"be2d1358d55ff1f712996c60841331e1e12bb387\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/be2d1358d55ff1f712996c60841331e1e12bb387\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/be2d1358d55ff1f712996c60841331e1e12bb387\"}]},{\"sha\":\"589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"node_id\":\"C_kwDOA71kIdoAKDU4OWY2NDNlNGFmM2EwMGE1YTUwNWIxOWQ2MDIyMTExYTNlYWFhOTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:42:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T20:42:13Z\"},\"message\":\"updating
        workflows\",\"tree\":{\"sha\":\"80ce351c5de6fa50bd21589a3405dcb29a50335c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/80ce351c5de6fa50bd21589a3405dcb29a50335c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1525fea0d94b097a669706a63d6f2aefff8f995f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1525fea0d94b097a669706a63d6f2aefff8f995f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1525fea0d94b097a669706a63d6f2aefff8f995f\"}]},{\"sha\":\"8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"node_id\":\"C_kwDOA71kIdoAKDg5NDliOWE2OTJjOGZhYmFjMjY2Zjk1ZjJhMmE1ODk1ZGFhZjc3Njk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:09:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:09:53Z\"},\"message\":\"check
        if track is a song when downloading playlists\",\"tree\":{\"sha\":\"ad2f169331ac7d224a207ca715ecf0c6638c5c5e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ad2f169331ac7d224a207ca715ecf0c6638c5c5e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/589f643e4af3a00a5a505b19d6022111a3eaaa90\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/589f643e4af3a00a5a505b19d6022111a3eaaa90\"}]},{\"sha\":\"f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"node_id\":\"C_kwDOA71kIdoAKGY4NzlmNjNiMTBiZmZiMWIzOWYzMjJkNGMwY2MyY2FjOTY0ZDUxNWE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:11:10Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-08-25T21:11:10Z\"},\"message\":\"bump
        version to v4.2.1\",\"tree\":{\"sha\":\"453bfadf8ecef71a0791bcd01077de82f73cfd23\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/453bfadf8ecef71a0791bcd01077de82f73cfd23\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8949b9a692c8fabac266f95f2a2a5895daaf7769\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8949b9a692c8fabac266f95f2a2a5895daaf7769\"}]},{\"sha\":\"992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"node_id\":\"C_kwDOA71kIdoAKDk5MmQzMGIzYjIzY2NjY2UzOWFlMzcyZDJhMDZjZDAxZjZjZjg0Yzg\",\"commit\":{\"author\":{\"name\":\"Piripe\",\"email\":\"77517308+Piripe@users.noreply.github.com\",\"date\":\"2023-09-01T15:35:40Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-09-01T15:35:40Z\"},\"message\":\"Random
        changes and fixes. (#1897)\",\"tree\":{\"sha\":\"8b940bf3e0657e034ca274f0228a08f57b70acfb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8b940bf3e0657e034ca274f0228a08f57b70acfb\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJk8gTMCRBK7hj4Ov3rIwAAZM8IABlZy3q4g9vo5FHRmm1qHAsP\\neko2jtBNTBYPIsW96ejVUD/KyER7ZyOXS1ZSN6hSTkOLVex/QJErQ6qIveuWEUn4\\nufnoB/TC0DGE1+igwBXqpVqeMWOXYPSR6HvWmnXjkivKBwZmttgnTrDi52H01PCx\\nLB8R4RorGneUzCkmDHI8KYSuu8dlHFrUVqi+SKn+xu8729dj2QzV6OGShXlFYvr4\\nu1RoTCMztK23qBDCK5lsiqYEmpzfrqbI8s/5Z1o/LTvepCBV/P6Zb8WNjrytxgb5\\n68j9/2fGYiKzSXnq5/8KU4iXzTqh/KNbZmDkjATobFLdj45VT8w8XP/FcbOxmIc=\\n=M1hd\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8b940bf3e0657e034ca274f0228a08f57b70acfb\\nparent
        f879f63b10bffb1b39f322d4c0cc2cac964d515a\\nauthor Piripe <77517308+Piripe@users.noreply.github.com>
        1693582540 +0200\\ncommitter GitHub <noreply@github.com> 1693582540 +0200\\n\\nRandom
        changes and fixes. (#1897)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8/comments\",\"author\":{\"login\":\"Piripe\",\"id\":77517308,\"node_id\":\"MDQ6VXNlcjc3NTE3MzA4\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/77517308?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Piripe\",\"html_url\":\"https://github.com/Piripe\",\"followers_url\":\"https://api.github.com/users/Piripe/followers\",\"following_url\":\"https://api.github.com/users/Piripe/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Piripe/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Piripe/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Piripe/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Piripe/orgs\",\"repos_url\":\"https://api.github.com/users/Piripe/repos\",\"events_url\":\"https://api.github.com/users/Piripe/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Piripe/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f879f63b10bffb1b39f322d4c0cc2cac964d515a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f879f63b10bffb1b39f322d4c0cc2cac964d515a\"}]},{\"sha\":\"b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"node_id\":\"C_kwDOA71kIdoAKGIxYTQ4ZGViYzU3MzkyNGQxMDBhOTFhNDdmMmJjMGFiNzQxYTUxY2M\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:36:10Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:36:10Z\"},\"message\":\"fixed
        bandcamp\",\"tree\":{\"sha\":\"306465346f827ec07c3ea9ed124da66584ae7a33\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/306465346f827ec07c3ea9ed124da66584ae7a33\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/992d30b3b23cccce39ae372d2a06cd01f6cf84c8\"}]},{\"sha\":\"2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"node_id\":\"C_kwDOA71kIdoAKDJhNjE1ZmYzMWFiYmE2ZDZiN2FiY2ZhYjBlOTljNDI4MjQ1ZDM0N2U\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:37:29Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T15:37:29Z\"},\"message\":\"black/isort
        code\",\"tree\":{\"sha\":\"cc74a17d7be8bb1865a9bf8febfe6e23fde3a1d2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/cc74a17d7be8bb1865a9bf8febfe6e23fde3a1d2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b1a48debc573924d100a91a47f2bc0ab741a51cc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b1a48debc573924d100a91a47f2bc0ab741a51cc\"}]},{\"sha\":\"0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"node_id\":\"C_kwDOA71kIdoAKDBhNjkyYzdiMGIwNjEwMjA0OTA4Yzc4MjNjZDE0Y2UwNzhkZjFiNmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:21:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:21:13Z\"},\"message\":\"use
        downloader settings when parsing query\",\"tree\":{\"sha\":\"b41f0d228739642ab780ee2c714e635269e5498e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b41f0d228739642ab780ee2c714e635269e5498e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2a615ff31abba6d6b7abcfab0e99c428245d347e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2a615ff31abba6d6b7abcfab0e99c428245d347e\"}]},{\"sha\":\"920442e134292e892b762b4fdf7f69aeafc3c972\",\"node_id\":\"C_kwDOA71kIdoAKDkyMDQ0MmUxMzQyOTJlODkyYjc2MmI0ZmRmN2Y2OWFlYWZjM2M5NzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:34:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:34:54Z\"},\"message\":\"added
        option to save errors\",\"tree\":{\"sha\":\"4aba1bc0e43c203bac5aa4d768b59299496a1b96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4aba1bc0e43c203bac5aa4d768b59299496a1b96\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/920442e134292e892b762b4fdf7f69aeafc3c972\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/920442e134292e892b762b4fdf7f69aeafc3c972\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/920442e134292e892b762b4fdf7f69aeafc3c972\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/920442e134292e892b762b4fdf7f69aeafc3c972/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0a692c7b0b0610204908c7823cd14ce078df1b6d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0a692c7b0b0610204908c7823cd14ce078df1b6d\"}]},{\"sha\":\"5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"node_id\":\"C_kwDOA71kIdoAKDVlMzRiMjE2Mjg3Yjg0ZGFlY2Y1YjI2YWZiNmM5OWI1N2Q0NTcyYWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:37:17Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T17:37:17Z\"},\"message\":\"added
        more checks for sync file\",\"tree\":{\"sha\":\"d6a958511e477162c2dd9e868326065664c38cb1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d6a958511e477162c2dd9e868326065664c38cb1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"920442e134292e892b762b4fdf7f69aeafc3c972\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/920442e134292e892b762b4fdf7f69aeafc3c972\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/920442e134292e892b762b4fdf7f69aeafc3c972\"}]},{\"sha\":\"8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"node_id\":\"C_kwDOA71kIdoAKDhhODg5MWUwOTc0ODBjYWNjYmRhNzRiNzVmNWVkMWQ2MmJiMDVmODE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T18:26:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T18:26:11Z\"},\"message\":\"respect
        detect-formats option when using m3u option\",\"tree\":{\"sha\":\"ae42a5becaaede2c4d0d2ac89991392fd8bb1a76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ae42a5becaaede2c4d0d2ac89991392fd8bb1a76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5e34b216287b84daecf5b26afb6c99b57d4572ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5e34b216287b84daecf5b26afb6c99b57d4572ab\"}]},{\"sha\":\"ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"node_id\":\"C_kwDOA71kIdoAKGNlMmJjZTY1MWQ0NjgxMDYyMWFlOGViNzI5YmI4MTZjY2RkMTE1ZGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:04:03Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:04:03Z\"},\"message\":\"added
        ability to print to stdout when using save\",\"tree\":{\"sha\":\"019267f069c7320e3f8fc55b6de6e1da273d3bb9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/019267f069c7320e3f8fc55b6de6e1da273d3bb9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8a8891e097480caccbda74b75f5ed1d62bb05f81\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8a8891e097480caccbda74b75f5ed1d62bb05f81\"}]},{\"sha\":\"f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"node_id\":\"C_kwDOA71kIdoAKGY5ZjExMGY2MWRkN2JiMzg4NTQ2YmQ2NzkxZGE4MWZiYjVkMjA3N2Y\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:39:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T19:39:28Z\"},\"message\":\"all-user-followed-artists\",\"tree\":{\"sha\":\"5addb50b2ebaaa4b07568b06aea170fdd2a5ee52\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5addb50b2ebaaa4b07568b06aea170fdd2a5ee52\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce2bce651d46810621ae8eb729bb816ccdd115dc\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce2bce651d46810621ae8eb729bb816ccdd115dc\"}]},{\"sha\":\"eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"node_id\":\"C_kwDOA71kIdoAKGVlYjkzNWJiZTUyNmYxOTM1MDZjN2JmZDBhZGJmMDBmNGIyYTgwYzg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:33:20Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:33:20Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"5d43881d8553da03f213bf166ac71cf333954a26\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5d43881d8553da03f213bf166ac71cf333954a26\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f9f110f61dd7bb388546bd6791da81fbb5d2077f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f9f110f61dd7bb388546bd6791da81fbb5d2077f\"}]},{\"sha\":\"a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"node_id\":\"C_kwDOA71kIdoAKGE0YzZlOGRjYjgwYWI5OWNkNjJmODRiODBkY2JhMGVjN2ExZGFkZGU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:14Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:14Z\"},\"message\":\"fixed
        bandcamp provider for python 3.8\",\"tree\":{\"sha\":\"433683eec7c807f434fc4e1d0226f5d14cdb9799\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/433683eec7c807f434fc4e1d0226f5d14cdb9799\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/eeb935bbe526f193506c7bfd0adbf00f4b2a80c8\"}]},{\"sha\":\"f8d749048537239085d7335e24f2f87ed24402ab\",\"node_id\":\"C_kwDOA71kIdoAKGY4ZDc0OTA0ODUzNzIzOTA4NWQ3MzM1ZTI0ZjJmODdlZDI0NDAyYWI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:35Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:49:35Z\"},\"message\":\"updated
        packages\\n\\nremoved bandcamp package, copied few functions and adjusted
        them manually\",\"tree\":{\"sha\":\"701702421b4939ac8d6d069c17ceed692158997e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/701702421b4939ac8d6d069c17ceed692158997e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f8d749048537239085d7335e24f2f87ed24402ab\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f8d749048537239085d7335e24f2f87ed24402ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f8d749048537239085d7335e24f2f87ed24402ab\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f8d749048537239085d7335e24f2f87ed24402ab/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a4c6e8dcb80ab99cd62f84b80dcba0ec7a1dadde\"}]},{\"sha\":\"43343964556da50eb322031f931a60951c4b7d57\",\"node_id\":\"C_kwDOA71kIdoAKDQzMzQzOTY0NTU2ZGE1MGViMzIyMDMxZjkzMWE2MDk1MWM0YjdkNTc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:50:22Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T20:50:22Z\"},\"message\":\"cleaned
        up pyproject.toml\",\"tree\":{\"sha\":\"7b5de13f2d4ebf0b0dfeba4ccc86130cd69b734e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7b5de13f2d4ebf0b0dfeba4ccc86130cd69b734e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/43343964556da50eb322031f931a60951c4b7d57\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43343964556da50eb322031f931a60951c4b7d57\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/43343964556da50eb322031f931a60951c4b7d57\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43343964556da50eb322031f931a60951c4b7d57/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f8d749048537239085d7335e24f2f87ed24402ab\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f8d749048537239085d7335e24f2f87ed24402ab\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f8d749048537239085d7335e24f2f87ed24402ab\"}]},{\"sha\":\"a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"node_id\":\"C_kwDOA71kIdoAKGEyY2QzMzc3MjVmYzM0YzQ1NDA0NjhhMDBmYTY2MWViYzlmNWEwMzU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:17:08Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:17:08Z\"},\"message\":\"use
        master branch for web ui in production\",\"tree\":{\"sha\":\"6b36fa81a8b76e22b26e7ca1aa0fff6bb851eb53\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6b36fa81a8b76e22b26e7ca1aa0fff6bb851eb53\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"43343964556da50eb322031f931a60951c4b7d57\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43343964556da50eb322031f931a60951c4b7d57\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/43343964556da50eb322031f931a60951c4b7d57\"}]},{\"sha\":\"c9466b0d074d623975353317ef68aa414916c902\",\"node_id\":\"C_kwDOA71kIdoAKGM5NDY2YjBkMDc0ZDYyMzk3NTM1MzMxN2VmNjhhYTQxNDkxNmM5MDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:27:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:27:54Z\"},\"message\":\"removed
        debug print\",\"tree\":{\"sha\":\"058489707dc13859531d1118f4aa044442fa2dd2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/058489707dc13859531d1118f4aa044442fa2dd2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c9466b0d074d623975353317ef68aa414916c902\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c9466b0d074d623975353317ef68aa414916c902\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c9466b0d074d623975353317ef68aa414916c902\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c9466b0d074d623975353317ef68aa414916c902/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a2cd337725fc34c4540468a00fa661ebc9f5a035\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a2cd337725fc34c4540468a00fa661ebc9f5a035\"}]},{\"sha\":\"8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"node_id\":\"C_kwDOA71kIdoAKDhhZmEzZGM1OTNmNmFmOTRjOWM4N2YwZDE4ZmE1NTVjMzM4YzQyZTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:28:07Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T21:28:07Z\"},\"message\":\"added
        information about file location for web ui\",\"tree\":{\"sha\":\"937ea2786de03f7e7dddd0fba98d05df69f6c7b5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/937ea2786de03f7e7dddd0fba98d05df69f6c7b5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c9466b0d074d623975353317ef68aa414916c902\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c9466b0d074d623975353317ef68aa414916c902\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c9466b0d074d623975353317ef68aa414916c902\"}]},{\"sha\":\"db11f719d7ba76451e3a7d628909277cab8ac38d\",\"node_id\":\"C_kwDOA71kIdoAKGRiMTFmNzE5ZDdiYTc2NDUxZTNhN2Q2Mjg5MDkyNzdjYWI4YWMzOGQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:01:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:01:44Z\"},\"message\":\"fixed
        search term matching\",\"tree\":{\"sha\":\"1a22e446a9887eb943b894470b5946bf1e2d2a9b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1a22e446a9887eb943b894470b5946bf1e2d2a9b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db11f719d7ba76451e3a7d628909277cab8ac38d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8afa3dc593f6af94c9c87f0d18fa555c338c42e1\"}]},{\"sha\":\"828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"node_id\":\"C_kwDOA71kIdoAKDgyOGQyYzM2Y2QzMjJjZWRlZDc1NmIwM2VkMzQwZWEyN2Q2ZTNiYTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:02:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:02:01Z\"},\"message\":\"updated
        documentation\",\"tree\":{\"sha\":\"0525568cd2291465a6e0f0b85123d0cc679e7de4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0525568cd2291465a6e0f0b85123d0cc679e7de4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"db11f719d7ba76451e3a7d628909277cab8ac38d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db11f719d7ba76451e3a7d628909277cab8ac38d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db11f719d7ba76451e3a7d628909277cab8ac38d\"}]},{\"sha\":\"06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"node_id\":\"C_kwDOA71kIdoAKDA2ZjFlOWViODRkZjljMzZiZjg2ZTg0YTIxMTdlZGNlYmQ2N2RmNzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:21:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:21:24Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"4f12f7130f971c5e9ebde89be24ea6fe3c9ac336\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4f12f7130f971c5e9ebde89be24ea6fe3c9ac336\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/828d2c36cd322ceded756b03ed340ea27d6e3ba6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/828d2c36cd322ceded756b03ed340ea27d6e3ba6\"}]},{\"sha\":\"b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"node_id\":\"C_kwDOA71kIdoAKGIzOTU3MmIwMWM0ZjI2NzIyZmJiY2FlMGQwOWM0OTJmZDliNGFlN2U\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:23:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:23:53Z\"},\"message\":\"black/isort\",\"tree\":{\"sha\":\"5ff09b61a2da2160e2281cc36cb5350f221059d7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5ff09b61a2da2160e2281cc36cb5350f221059d7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/06f1e9eb84df9c36bf86e84a2117edcebd67df73\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/06f1e9eb84df9c36bf86e84a2117edcebd67df73\"}]},{\"sha\":\"b536b8fd1cd875edfcee954f11c078f1608433d3\",\"node_id\":\"C_kwDOA71kIdoAKGI1MzZiOGZkMWNkODc1ZWRmY2VlOTU0ZjExYzA3OGYxNjA4NDMzZDM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:32:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:32:13Z\"},\"message\":\"update
        cassettes\",\"tree\":{\"sha\":\"a045f3f3963e9d2176ac2ed98fea219e6e804c96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a045f3f3963e9d2176ac2ed98fea219e6e804c96\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b39572b01c4f26722fbbcae0d09c492fd9b4ae7e\"}]},{\"sha\":\"4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"node_id\":\"C_kwDOA71kIdoAKDRmNWQ5YjZlMWYxNGEyMTFjYWZhYTkzNmM2NmFkOWI1ZDZhODVlMTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-09-01T22:42:48Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-09-01T22:42:48Z\"},\"message\":\"v4.2.1\",\"tree\":{\"sha\":\"a045f3f3963e9d2176ac2ed98fea219e6e804c96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a045f3f3963e9d2176ac2ed98fea219e6e804c96\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJk8mjoCRBK7hj4Ov3rIwAAmB4IAHQe/HNhFioZXF40GxM5TqyN\\nu8A26+9sKqTRjRsKXY80LLedwqcHtKPphDcPX2OnEMw8yE1bCBw6TaqD9x++1WVU\\nSXZ6FJMRFPxFS22LJ2olIffYFjcEGl4dRgSL+QdrbtvUJH6NMtzfFLmNZZwdD9w0\\nyxPrl8TWzg3UUO96OaDC0fEdDAqBHeL1+arUtWihHLSdptHf6iOmk5KxGuUqS2tv\\nfhRkaF5YRJ2D5sVSghA0dYFIKE78TF1ckBJ66JtmmyOxfzpdlGyd9//aY3cham3t\\nNzDxkEYRxuCfJE8ACixOE2uKDiP5OUG1htJMqZkCOHpHZ6QEhfkDTb7DjCezO38=\\n=CAh7\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree a045f3f3963e9d2176ac2ed98fea219e6e804c96\\nparent
        520c8c21cb2516859881487c94596a7018ebf057\\nparent b536b8fd1cd875edfcee954f11c078f1608433d3\\nauthor
        kuba <xnetcat.dev@gmail.com> 1693608168 +0200\\ncommitter GitHub <noreply@github.com>
        1693608168 +0200\\n\\nv4.2.1\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"520c8c21cb2516859881487c94596a7018ebf057\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/520c8c21cb2516859881487c94596a7018ebf057\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/520c8c21cb2516859881487c94596a7018ebf057\"},{\"sha\":\"b536b8fd1cd875edfcee954f11c078f1608433d3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b536b8fd1cd875edfcee954f11c078f1608433d3\"}]},{\"sha\":\"41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"node_id\":\"C_kwDOA71kIdoAKDQxZjQ4MjNkZDI0YmMzZjA1NWU1YTI4M2QwZmEwYjg1ZjRkZDFjMWY\",\"commit\":{\"author\":{\"name\":\"Bharat
        Nair\",\"email\":\"bharatsnair@gmail.com\",\"date\":\"2023-10-06T09:44:13Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T09:44:13Z\"},\"message\":\"add
        option to scrape any user's playlists (#1916)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"e42ab4b54380e0b5d13d028171e3f80a1e849b35\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e42ab4b54380e0b5d13d028171e3f80a1e849b35\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH9btCRBK7hj4Ov3rIwAAbSAIALLe2VjBnWNGfuQiLeO2ay5S\\nJRkfe9WaoYWExgGXs6RXXBOgBRnwn8luzWXNrFQWy8somwmYp9re+ZYSByO4iKpl\\nZzQ7s3/ZEj5lFngxzgT4VNZvOEvxXoFmniDEyp8ys8HQmWDbklt2eRxeEBBL56HN\\nBPIDi8MstGaI5Nbps0Q/QrL6BDQy6wVbaxi2nLdA6yvP54H+mC/Y+5QUGEYa7c8+\\nSDV3jTC5JpIxK1IX/U2Lqn3HVTZ3LpxCz4tyoYUHhOa/QaDow8c6ZknRHvrKIYn0\\nhgQywMEm/7exILmr3PIg3Ux3FZALjuVYxlHOnCNOAvR0/a06cAaKvpm6OeWrVoY=\\n=b2hg\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e42ab4b54380e0b5d13d028171e3f80a1e849b35\\nparent
        b536b8fd1cd875edfcee954f11c078f1608433d3\\nauthor Bharat Nair <bharatsnair@gmail.com>
        1696585453 +0530\\ncommitter GitHub <noreply@github.com> 1696585453 +0200\\n\\nadd
        option to scrape any user's playlists (#1916)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f/comments\",\"author\":{\"login\":\"bharat-nair\",\"id\":10357994,\"node_id\":\"MDQ6VXNlcjEwMzU3OTk0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/10357994?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/bharat-nair\",\"html_url\":\"https://github.com/bharat-nair\",\"followers_url\":\"https://api.github.com/users/bharat-nair/followers\",\"following_url\":\"https://api.github.com/users/bharat-nair/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/bharat-nair/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/bharat-nair/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/bharat-nair/subscriptions\",\"organizations_url\":\"https://api.github.com/users/bharat-nair/orgs\",\"repos_url\":\"https://api.github.com/users/bharat-nair/repos\",\"events_url\":\"https://api.github.com/users/bharat-nair/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/bharat-nair/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b536b8fd1cd875edfcee954f11c078f1608433d3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b536b8fd1cd875edfcee954f11c078f1608433d3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b536b8fd1cd875edfcee954f11c078f1608433d3\"}]},{\"sha\":\"b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"node_id\":\"C_kwDOA71kIdoAKGI2OTYxOTU0ZjU0NTRlODM5ZmNhODNiZmZjOWE1YWUyYmVlODA4ZWU\",\"commit\":{\"author\":{\"name\":\"Tunglies\",\"email\":\"77394545+Tunglies@users.noreply.github.com\",\"date\":\"2023-10-06T09:45:01Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T09:45:01Z\"},\"message\":\"Support
        proxy server download song. (#1911) (#1912)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"6d8e7a9ac7d5c882db078f994f2df06118e6e601\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6d8e7a9ac7d5c882db078f994f2df06118e6e601\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH9cdCRBK7hj4Ov3rIwAAzP0IAESMX99a8sHfaOlgcJmy5UhY\\nOzWRCpFXqznexx9hQmoS6hCn3f+gSs8QA+5QSOmaw5JYQy3sEDnDdivAYSm41kvS\\nGDTrIZSg5RH4LuMLhCUvcyqMdvjCtVUOdyEZAIJX7toQrSTDKB6fjzfCMwtmVtzB\\nWC6IZQU9cbZ/f5ZyR4bL3x46BoStSouJCkXEPlP8gcs9tpKCVLjhdjSJYEiVVh0m\\nfx/GcCFdSICzQxDkKMqygC2pKweYh2UhZcgy20BupeDOjjFG8jsFpsuThBmDdqgd\\nI8GyOb9JZSFsRIp9ulIp98IWiE3ZruXTcfLwj9uafAwSgeNtGfORDQGQhZ7qa6I=\\n=3nGH\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 6d8e7a9ac7d5c882db078f994f2df06118e6e601\\nparent
        41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\\nauthor Tunglies <77394545+Tunglies@users.noreply.github.com>
        1696585501 +0800\\ncommitter GitHub <noreply@github.com> 1696585501 +0200\\n\\nSupport
        proxy server download song. (#1911) (#1912)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee/comments\",\"author\":{\"login\":\"Tunglies\",\"id\":77394545,\"node_id\":\"MDQ6VXNlcjc3Mzk0NTQ1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/77394545?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Tunglies\",\"html_url\":\"https://github.com/Tunglies\",\"followers_url\":\"https://api.github.com/users/Tunglies/followers\",\"following_url\":\"https://api.github.com/users/Tunglies/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Tunglies/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Tunglies/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Tunglies/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Tunglies/orgs\",\"repos_url\":\"https://api.github.com/users/Tunglies/repos\",\"events_url\":\"https://api.github.com/users/Tunglies/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Tunglies/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/41f4823dd24bc3f055e5a283d0fa0b85f4dd1c1f\"}]},{\"sha\":\"86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"node_id\":\"C_kwDOA71kIdoAKDg2MzEzZDQwMjRkOWJiOGYzYjcxOTc1OWQ2NWZkMWVhOWE4NjdkYjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-06T10:28:48Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T10:28:48Z\"},\"message\":\"bump
        dependencies (#1917)\",\"tree\":{\"sha\":\"92d0820394a4a922997d9175d79e62786b8e3582\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/92d0820394a4a922997d9175d79e62786b8e3582\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH+FgCRBK7hj4Ov3rIwAAezoIAD57U4x8l5z67YeH3nX8Q/mV\\nbEPkWihICKKKxqqE3vXjQbOf5993B4S+bht8yshYezsZBlYxfnzhQUm5/m3WhvJH\\n1Xdbc6OoxMH1kRaY8/Hq2uEhkFkxZQzjxRhiNuwcMrUpbw7qls3lKSR42d/UEaWx\\n5mOaQyl/tyd+rxGAB+hVXXZqSaDLHZ52jXvlfcTdeHRd9itub2cmwTJ07YKD9CV5\\noOxwRN9IRHnsaNgfAbPCTGFfJq6jfgeD+rmvtupcGCgWK/JxzfwHG5BYaaTeP9/0\\nMIprMeDu3WbmUlUMtdjSPChj4sGtBbzHhsMwx6WIAJylLKcNDTMtpT0V6o0N7h0=\\n=rS4r\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 92d0820394a4a922997d9175d79e62786b8e3582\\nparent
        b6961954f5454e839fca83bffc9a5ae2bee808ee\\nauthor kuba <xnetcat.dev@gmail.com>
        1696588128 +0200\\ncommitter GitHub <noreply@github.com> 1696588128 +0200\\n\\nbump
        dependencies (#1917)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b6961954f5454e839fca83bffc9a5ae2bee808ee\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b6961954f5454e839fca83bffc9a5ae2bee808ee\"}]},{\"sha\":\"1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"node_id\":\"C_kwDOA71kIdoAKDFlMzBkMGFjMDE1ZGQ2NTMwMjMwNTY1ZDJlOTA2OWMyYjIyMTZjN2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-06T10:44:32Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-06T10:44:32Z\"},\"message\":\"get
        download url when reading file metadata (#1918)\",\"tree\":{\"sha\":\"ad9195bdae6408becf7907f14e13c8626198802e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ad9195bdae6408becf7907f14e13c8626198802e\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlH+UQCRBK7hj4Ov3rIwAAG80IAGL4jhaXSzmEW6zXmVg1Vbho\\nTzN/c+UV/v9t6npGBRakt7vgH00X1ciceR8kWEz7aUJjx9Ft3cglwYFBHg3IAihP\\nvXVr+TfFBmKwLuwbiA8HpG9Q0TVYuH+hG2mOH9MOFA2QbLRSw/2g0+RBQfLeXumR\\nXXqm4m7i20I20ZSu+Z1kPav4Wy70eTuf7kFtI/NPO1a8NhDi1/gQVwq6cn1EgakC\\ni4eKfRY0n8rnqPvfYFHtD7NFlocl9Ct7YW3kLSWheFhY9k8fQ6bCUoZT+Rok2Mcr\\nTwynmTcAGPrET63WhZr/xUpNwu23m2ofHxoISIYpmmd8eYRNue0wAXI31U13JHY=\\n=pYvX\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree ad9195bdae6408becf7907f14e13c8626198802e\\nparent
        86313d4024d9bb8f3b719759d65fd1ea9a867db4\\nauthor kuba <xnetcat.dev@gmail.com>
        1696589072 +0200\\ncommitter GitHub <noreply@github.com> 1696589072 +0200\\n\\nget
        download url when reading file metadata (#1918)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/86313d4024d9bb8f3b719759d65fd1ea9a867db4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/86313d4024d9bb8f3b719759d65fd1ea9a867db4\"}]},{\"sha\":\"8be7680bb540939ec8003a6117261f9142a1cfda\",\"node_id\":\"C_kwDOA71kIdoAKDhiZTc2ODBiYjU0MDkzOWVjODAwM2E2MTE3MjYxZjkxNDJhMWNmZGE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:49Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:49Z\"},\"message\":\"check
        if youtube-music is accessible\",\"tree\":{\"sha\":\"dd3344a879c53a0f9914921a431904f8682d7c4b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/dd3344a879c53a0f9914921a431904f8682d7c4b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/8be7680bb540939ec8003a6117261f9142a1cfda\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8be7680bb540939ec8003a6117261f9142a1cfda\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8be7680bb540939ec8003a6117261f9142a1cfda\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8be7680bb540939ec8003a6117261f9142a1cfda/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e30d0ac015dd6530230565d2e9069c2b2216c7b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1e30d0ac015dd6530230565d2e9069c2b2216c7b\"}]},{\"sha\":\"2ad38aab66db59b45b74dc40daec97508e00006d\",\"node_id\":\"C_kwDOA71kIdoAKDJhZDM4YWFiNjZkYjU5YjQ1Yjc0ZGM0MGRhZWM5NzUwOGUwMDAwNmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:54Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T18:42:54Z\"},\"message\":\"format
        code\",\"tree\":{\"sha\":\"339e680a77f2c9328f9737c0b49367ed993ad4c2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/339e680a77f2c9328f9737c0b49367ed993ad4c2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2ad38aab66db59b45b74dc40daec97508e00006d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ad38aab66db59b45b74dc40daec97508e00006d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ad38aab66db59b45b74dc40daec97508e00006d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ad38aab66db59b45b74dc40daec97508e00006d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"8be7680bb540939ec8003a6117261f9142a1cfda\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/8be7680bb540939ec8003a6117261f9142a1cfda\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/8be7680bb540939ec8003a6117261f9142a1cfda\"}]},{\"sha\":\"1ba370f1cb196142291c5deca477c089bf4670e5\",\"node_id\":\"C_kwDOA71kIdoAKDFiYTM3MGYxY2IxOTYxNDIyOTFjNWRlY2E0NzdjMDg5YmY0NjcwZTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T19:10:06Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T19:10:06Z\"},\"message\":\"added
        option to skip explicit songs\",\"tree\":{\"sha\":\"bac3ee3b7259f92c9fc57f0ae9c6b061077fd8e9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bac3ee3b7259f92c9fc57f0ae9c6b061077fd8e9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1ba370f1cb196142291c5deca477c089bf4670e5\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1ba370f1cb196142291c5deca477c089bf4670e5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1ba370f1cb196142291c5deca477c089bf4670e5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1ba370f1cb196142291c5deca477c089bf4670e5/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2ad38aab66db59b45b74dc40daec97508e00006d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ad38aab66db59b45b74dc40daec97508e00006d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ad38aab66db59b45b74dc40daec97508e00006d\"}]},{\"sha\":\"bb165211050191b5c1247017981312cc94ce307b\",\"node_id\":\"C_kwDOA71kIdoAKGJiMTY1MjExMDUwMTkxYjVjMTI0NzAxNzk4MTMxMmNjOTRjZTMwN2I\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T20:40:15Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-10T20:40:15Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"45400573761a7241306a60364727efc20f1af7f2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/45400573761a7241306a60364727efc20f1af7f2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/bb165211050191b5c1247017981312cc94ce307b\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb165211050191b5c1247017981312cc94ce307b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb165211050191b5c1247017981312cc94ce307b\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb165211050191b5c1247017981312cc94ce307b/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1ba370f1cb196142291c5deca477c089bf4670e5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1ba370f1cb196142291c5deca477c089bf4670e5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1ba370f1cb196142291c5deca477c089bf4670e5\"}]},{\"sha\":\"554dab6709e603249e65257e14e6bdb1ea585672\",\"node_id\":\"C_kwDOA71kIdoAKDU1NGRhYjY3MDllNjAzMjQ5ZTY1MjU3ZTE0ZTZiZGIxZWE1ODU2NzI\",\"commit\":{\"author\":{\"name\":\"Muhammad
        Ishaque Nizamani\",\"email\":\"49721249+MuhammadNizamani@users.noreply.github.com\",\"date\":\"2023-10-13T16:43:28Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-13T16:43:28Z\"},\"message\":\"DOC:
        adding top 100 contributer pics in does (#1926)\\n\\nCo-authored-by: kuba
        <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"99066b0d6c55d1828293d8fa8fe5be6c0557a0ed\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/99066b0d6c55d1828293d8fa8fe5be6c0557a0ed\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/554dab6709e603249e65257e14e6bdb1ea585672\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlKXOwCRBK7hj4Ov3rIwAAeVUIADKDLT1dTywe88hpmG1InFF8\\nN/uDL+pqhVKNm1k1WC/U0xnYeyYH/s2KdWLhe2N9b+A6BE/7Bl0NRBvJdFYrkcFw\\nT3aMstsu1fWAZUpK7hTA4JMI8Pctl4ho7GoMWKX+UW2Q2iOSh6Cagoj4bGz1RRmI\\ngompBJZ6eSc5s6XEa/XUEEqm/wQhCjQoCdm0jgr3uM/TmHNZmDLfNQFGqM+EC9VE\\n6vy6u5dUhhLUlx2J0zuJYlG7ns0bcWN9vvryjxKk43Q3d2hmUOa02Jv1pWUWJI4m\\ngbQ1+dUmsXUg9oQGFawU8uZlNdjWNorJB4DiTWKU/WHDDltWZcjS0C2p5q3aIdU=\\n=ZZzj\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 99066b0d6c55d1828293d8fa8fe5be6c0557a0ed\\nparent
        bb165211050191b5c1247017981312cc94ce307b\\nauthor Muhammad Ishaque Nizamani
        <49721249+MuhammadNizamani@users.noreply.github.com> 1697215408 +0500\\ncommitter
        GitHub <noreply@github.com> 1697215408 +0200\\n\\nDOC: adding top 100 contributer
        pics in does (#1926)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/554dab6709e603249e65257e14e6bdb1ea585672\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/554dab6709e603249e65257e14e6bdb1ea585672\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/554dab6709e603249e65257e14e6bdb1ea585672/comments\",\"author\":{\"login\":\"MuhammadNizamani\",\"id\":49721249,\"node_id\":\"MDQ6VXNlcjQ5NzIxMjQ5\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/49721249?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/MuhammadNizamani\",\"html_url\":\"https://github.com/MuhammadNizamani\",\"followers_url\":\"https://api.github.com/users/MuhammadNizamani/followers\",\"following_url\":\"https://api.github.com/users/MuhammadNizamani/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/MuhammadNizamani/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/MuhammadNizamani/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/MuhammadNizamani/subscriptions\",\"organizations_url\":\"https://api.github.com/users/MuhammadNizamani/orgs\",\"repos_url\":\"https://api.github.com/users/MuhammadNizamani/repos\",\"events_url\":\"https://api.github.com/users/MuhammadNizamani/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/MuhammadNizamani/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"bb165211050191b5c1247017981312cc94ce307b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/bb165211050191b5c1247017981312cc94ce307b\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/bb165211050191b5c1247017981312cc94ce307b\"}]},{\"sha\":\"698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"node_id\":\"C_kwDOA71kIdoAKDY5ODk4M2E3MmE2M2M5MGFlYWRkYzkzYzFjZTdjOWYwM2JhYWM0OTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-13T20:54:29Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-13T20:54:29Z\"},\"message\":\"fixes
        (#1927)\",\"tree\":{\"sha\":\"a00e7fe2a3fe338d1aaf85534c36bc9e7db58379\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a00e7fe2a3fe338d1aaf85534c36bc9e7db58379\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlKa6FCRBK7hj4Ov3rIwAAmdYIAEfDe61bpBinl6TpaL9B1BF9\\nSv8SNxPzHCcpTgdDNTncb3pdMBOJv/eDyFqgtPprq3BP/c8YoQ17Mj6+wTJa2ILu\\nZsgpZC8d6hfKLuPBLHxkjO0/yXTFJLG8RkrfFZi7X3ELELKqyVc5F026qsqiIlQ4\\nmL+IDQIFoA3horrvGe1QWErlG04xUAPU/xZJJMeuAqvn5kyrdi5v/XoiZf4R6uhz\\n49JOkBvv/VbDO+GS9PaqrL1IJ7pcLHdv+VBPWqeiTL/3g1lZAWgebiJ7WusBqAzT\\nboFYaBNQ0tb2/3YyQ3tHWMHvIFNt1P/m8fs/95CKL+JWFFs+RXht8XezZDVwODQ=\\n=vcxg\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree a00e7fe2a3fe338d1aaf85534c36bc9e7db58379\\nparent
        554dab6709e603249e65257e14e6bdb1ea585672\\nauthor kuba <xnetcat.dev@gmail.com>
        1697230469 +0200\\ncommitter GitHub <noreply@github.com> 1697230469 +0200\\n\\nfixes
        (#1927)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"554dab6709e603249e65257e14e6bdb1ea585672\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/554dab6709e603249e65257e14e6bdb1ea585672\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/554dab6709e603249e65257e14e6bdb1ea585672\"}]},{\"sha\":\"186473d23e5da320f3e1ce5379f0b59842f2db28\",\"node_id\":\"C_kwDOA71kIdoAKDE4NjQ3M2QyM2U1ZGEzMjBmM2UxY2U1Mzc5ZjBiNTk4NDJmMmRiMjg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-13T21:34:53Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-13T21:34:53Z\"},\"message\":\"bump
        version to 4.2.2 (#1928)\",\"tree\":{\"sha\":\"e76b8534ceee6e475a773cfe8cef877c3e2c3e58\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e76b8534ceee6e475a773cfe8cef877c3e2c3e58\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlKbf9CRBK7hj4Ov3rIwAA24sIAFCEWl8OseMMoLBEOXGt2NQY\\nMBlft+1YOg6Qij4/Gef8L+GOyHUxcJzhVrrhrFug71Rc3Ft8VsNmZXtwKd6RFAXk\\nLimXAMqNDEmG2jDsqX7Qsv8cfHwHky32PSNpEry6y0/uTjIb5Vt+bAuXyYP8CXXU\\n9Cf58q/UTFEAIBQCaHmFgYrePYJTD0lzX04/Kpcmc5mQUpnYmZ9rG+dKbWxGOIVU\\nmsFYqKb9EsyFt65BW4hgBWdHwcQFSNDjnHhRB4bbLyRiWwyLlz78KsYyH/sMajwA\\nutqA9ESVTgoImeFp59XP+Iq8BPD/KcpeShcNxEDoxHuxVRJd2lmX5p2xBp4hn7s=\\n=NCZo\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e76b8534ceee6e475a773cfe8cef877c3e2c3e58\\nparent
        698983a72a63c90aeaddc93c1ce7c9f03baac495\\nauthor kuba <xnetcat.dev@gmail.com>
        1697232893 +0200\\ncommitter GitHub <noreply@github.com> 1697232893 +0200\\n\\nbump
        version to 4.2.2 (#1928)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/186473d23e5da320f3e1ce5379f0b59842f2db28/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/698983a72a63c90aeaddc93c1ce7c9f03baac495\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/698983a72a63c90aeaddc93c1ce7c9f03baac495\"}]},{\"sha\":\"e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"node_id\":\"C_kwDOA71kIdoAKGUzZDY4NDdlNTk3OTkyNDJjZmU5OGMwMjgyYzBjNmU0MDFiYjJmYzY\",\"commit\":{\"author\":{\"name\":\"Aniket
        Patil\",\"email\":\"128228805+AniketP04@users.noreply.github.com\",\"date\":\"2023-10-17T08:50:45Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-17T08:50:45Z\"},\"message\":\"Fixed
        typo in progress_handler.py (#1929)\\n\\nUpdate progress_handler.py\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"b81b84d6015bdef7588722f5bd86b2f2d958d9c6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b81b84d6015bdef7588722f5bd86b2f2d958d9c6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlLkrlCRBK7hj4Ov3rIwAAGqsIAJIO7yrk0/DSNQ4v0k8EjDIe\\nGnPi1fYyDOU+pH+qpnuXZ6JZ6A6b/gPNd5sP+rzQaGvVIQwRRGmLhAOUVr9S5UPd\\ntQO3j7xYFgVxEkITs7N8JK7G3SsFGFZjL97Qxry2k/XL8X33DJIedvAScddG6Svb\\nQ4UHCQEiFL9OD4SupCoucVY5AAUVAKieIOgIYKzsEpk4k6KK9JpQas/qH/vKmzu0\\napF/GIePJ5XFW0AjXRGSC/dFLkAKQQMMXAn0afFwJgCKZL/BpUEiGz4ns8S0sMvS\\n71FdxBFSPalrEH9kgmIelipo2F9Ry1kSf5MeAYvpoyOVDbyB2BJNUA4JcnSTgrc=\\n=w5tA\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree b81b84d6015bdef7588722f5bd86b2f2d958d9c6\\nparent
        186473d23e5da320f3e1ce5379f0b59842f2db28\\nauthor Aniket Patil <128228805+AniketP04@users.noreply.github.com>
        1697532645 +0530\\ncommitter GitHub <noreply@github.com> 1697532645 +0200\\n\\nFixed
        typo in progress_handler.py (#1929)\\n\\nUpdate progress_handler.py\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6/comments\",\"author\":{\"login\":\"AniketP04\",\"id\":128228805,\"node_id\":\"U_kgDOB6SdxQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/128228805?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/AniketP04\",\"html_url\":\"https://github.com/AniketP04\",\"followers_url\":\"https://api.github.com/users/AniketP04/followers\",\"following_url\":\"https://api.github.com/users/AniketP04/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/AniketP04/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/AniketP04/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/AniketP04/subscriptions\",\"organizations_url\":\"https://api.github.com/users/AniketP04/orgs\",\"repos_url\":\"https://api.github.com/users/AniketP04/repos\",\"events_url\":\"https://api.github.com/users/AniketP04/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/AniketP04/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"186473d23e5da320f3e1ce5379f0b59842f2db28\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/186473d23e5da320f3e1ce5379f0b59842f2db28\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/186473d23e5da320f3e1ce5379f0b59842f2db28\"}]},{\"sha\":\"388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"node_id\":\"C_kwDOA71kIdoAKDM4OGI1ZjUxNTU0ZjJlZjY2MTAxNmZmNTlhYTYyZTNjNWE4MTZhMDQ\",\"commit\":{\"author\":{\"name\":\"Aniket
        Patil\",\"email\":\"128228805+AniketP04@users.noreply.github.com\",\"date\":\"2023-10-20T12:06:38Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-20T12:06:38Z\"},\"message\":\"Fixed
        typo in formatter.py result.py (#1933)\\n\\n* Update formatter.py\\n\\n* Update
        result.py\\n\\n---------\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"027ac3784dc26230992c0a14bff5c0e937a613e1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/027ac3784dc26230992c0a14bff5c0e937a613e1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlMm1OCRBK7hj4Ov3rIwAActsIAK7S6+k8E1I82wsTzEhCdM7L\\nVD7atNQy4nvtCbgXDyXJeSHu01eRbI0yyRENW8XBQ80gqaAJyfvAqjtTrR54Si0W\\n5IRQ3K3T1O8uWyP6UWmGM4TDpuA9th9rBfFwvy/jCM7MrDcsF2Pu9k0qJnzEtyKm\\nSncBTRD8GBv+7UQ/ojNfVvHBAoK0eubeAkI2C02kaQsPjvfQEwc60h5TujZ+lrFU\\nUKYvdvl981Id6g/LSA8apyPD+X19ex2DRV7EZW68pdLQTeSb2N/BqLTU1CDYDGpN\\nBYqK2V+joD9bMmchdzx3arPuAlANcMbMG12DAabNh83SBoXXlYMVuVcbPotBf+c=\\n=GTih\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 027ac3784dc26230992c0a14bff5c0e937a613e1\\nparent
        e3d6847e59799242cfe98c0282c0c6e401bb2fc6\\nauthor Aniket Patil <128228805+AniketP04@users.noreply.github.com>
        1697803598 +0530\\ncommitter GitHub <noreply@github.com> 1697803598 +0200\\n\\nFixed
        typo in formatter.py result.py (#1933)\\n\\n* Update formatter.py\\n\\n* Update
        result.py\\n\\n---------\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04/comments\",\"author\":{\"login\":\"AniketP04\",\"id\":128228805,\"node_id\":\"U_kgDOB6SdxQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/128228805?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/AniketP04\",\"html_url\":\"https://github.com/AniketP04\",\"followers_url\":\"https://api.github.com/users/AniketP04/followers\",\"following_url\":\"https://api.github.com/users/AniketP04/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/AniketP04/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/AniketP04/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/AniketP04/subscriptions\",\"organizations_url\":\"https://api.github.com/users/AniketP04/orgs\",\"repos_url\":\"https://api.github.com/users/AniketP04/repos\",\"events_url\":\"https://api.github.com/users/AniketP04/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/AniketP04/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3d6847e59799242cfe98c0282c0c6e401bb2fc6\"}]},{\"sha\":\"66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"node_id\":\"C_kwDOA71kIdoAKDY2ZmFjZjI3NWE1MjkxZDc2NmFiYTQzYTgyMWQ5ZGM4YmExYWVmZmQ\",\"commit\":{\"author\":{\"name\":\"Biresh
        Biswas\",\"email\":\"90760974+Billa05@users.noreply.github.com\",\"date\":\"2023-10-22T15:10:54Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-22T15:10:54Z\"},\"message\":\"feat:
        --ignore-album (#1934)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"084ced35de62f8aecb3ee5ac0c29dabfd5a3c13b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/084ced35de62f8aecb3ee5ac0c29dabfd5a3c13b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlNTt+CRBK7hj4Ov3rIwAAFyQIAG3ScmOw4xOaE4tES0AJ0RMY\\ngns6G2e9F0SSPIEdvZ8unb9uqsarBkxg7jgHLo0Liz5tIJmmjhWUzBajvCXU1Vo7\\nvJ2Oh+sbUluCyUOfF6vlSmrCWR2z2KBFK8Ml7Kl4mB/JCmIoU2w3Oh+6vfmJ8N3R\\nNz/066pyTGSynIGxneSGIvRUXLVXpdZdLrpCTb7pciXub4g2HbGUGbpD2XgNo3Tq\\ndsS56EYPz+uzgcZNotyeuPJ/ENHSV+vESj2D97rX8AJ9gXBModLZ6FKLhWXOEORI\\nUhxZqQLNYiPUjvGBlxfXqm2dTEZ0zA+FB42sOy+KtExfCvum2jbVhW8Z5QrJMSs=\\n=JzzU\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 084ced35de62f8aecb3ee5ac0c29dabfd5a3c13b\\nparent
        388b5f51554f2ef661016ff59aa62e3c5a816a04\\nauthor Biresh Biswas <90760974+Billa05@users.noreply.github.com>
        1697987454 +0530\\ncommitter GitHub <noreply@github.com> 1697987454 +0200\\n\\nfeat:
        --ignore-album (#1934)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd/comments\",\"author\":{\"login\":\"Billa05\",\"id\":90760974,\"node_id\":\"MDQ6VXNlcjkwNzYwOTc0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/90760974?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Billa05\",\"html_url\":\"https://github.com/Billa05\",\"followers_url\":\"https://api.github.com/users/Billa05/followers\",\"following_url\":\"https://api.github.com/users/Billa05/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Billa05/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Billa05/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Billa05/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Billa05/orgs\",\"repos_url\":\"https://api.github.com/users/Billa05/repos\",\"events_url\":\"https://api.github.com/users/Billa05/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Billa05/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/388b5f51554f2ef661016ff59aa62e3c5a816a04\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/388b5f51554f2ef661016ff59aa62e3c5a816a04\"}]},{\"sha\":\"2ecda4c2184963ebff81ba896ee8769f29da11da\",\"node_id\":\"C_kwDOA71kIdoAKDJlY2RhNGMyMTg0OTYzZWJmZjgxYmE4OTZlZTg3NjlmMjlkYTExZGE\",\"commit\":{\"author\":{\"name\":\"Aniket
        Patil\",\"email\":\"128228805+AniketP04@users.noreply.github.com\",\"date\":\"2023-10-24T08:54:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-24T08:54:44Z\"},\"message\":\"Fixed
        typo in installation.md (#1936)\\n\\nUpdate installation.md\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"5b1c639691dd3188f17e1963f68163743c91ba5b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5b1c639691dd3188f17e1963f68163743c91ba5b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlN4ZUCRBK7hj4Ov3rIwAAyJUIAF9oPNEJBz4hkvNEUbKRXGhL\\nO0iQoysXgzFuA9qNGWUPFuULsBnCaxa06vKyo6a74MpnTftQMK5srNFR7c70QBZc\\n2BKFBNrNRgSKzPwl7Ytz487EY3R0wr6EssL/M2sf56S2FMjDOwP1k+D7183z/dBY\\nOIA62/aNEx63r0vxnxRO3U3xtj8UNJoxKFYizXIxpnSYiKO5chohD5qHVBg7veSl\\nt1BTpdKBshM5A2ivFvZauVvOkaY+bvOCjQiHRw8DTvSwG46RGizRAXcXm8UOEkiK\\nM0vmyR5XcflP8pgMJt8/R4l8X9R2Xfnt1KgR0HLmAQ31lOaqDCYIDA8azsg2PqY=\\n=QUNR\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 5b1c639691dd3188f17e1963f68163743c91ba5b\\nparent
        66facf275a5291d766aba43a821d9dc8ba1aeffd\\nauthor Aniket Patil <128228805+AniketP04@users.noreply.github.com>
        1698137684 +0530\\ncommitter GitHub <noreply@github.com> 1698137684 +0200\\n\\nFixed
        typo in installation.md (#1936)\\n\\nUpdate installation.md\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ecda4c2184963ebff81ba896ee8769f29da11da/comments\",\"author\":{\"login\":\"AniketP04\",\"id\":128228805,\"node_id\":\"U_kgDOB6SdxQ\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/128228805?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/AniketP04\",\"html_url\":\"https://github.com/AniketP04\",\"followers_url\":\"https://api.github.com/users/AniketP04/followers\",\"following_url\":\"https://api.github.com/users/AniketP04/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/AniketP04/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/AniketP04/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/AniketP04/subscriptions\",\"organizations_url\":\"https://api.github.com/users/AniketP04/orgs\",\"repos_url\":\"https://api.github.com/users/AniketP04/repos\",\"events_url\":\"https://api.github.com/users/AniketP04/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/AniketP04/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/66facf275a5291d766aba43a821d9dc8ba1aeffd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/66facf275a5291d766aba43a821d9dc8ba1aeffd\"}]},{\"sha\":\"23549294c2ea8679c2a724932b70913f1a34f876\",\"node_id\":\"C_kwDOA71kIdoAKDIzNTQ5Mjk0YzJlYTg2NzljMmE3MjQ5MzJiNzA5MTNmMWEzNGY4NzY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-27T13:44:59Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-27T13:44:59Z\"},\"message\":\"fixed
        spotify.link for non song links\",\"tree\":{\"sha\":\"f3aef07f622f91fa4f3c3ae92b7dde2748354755\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f3aef07f622f91fa4f3c3ae92b7dde2748354755\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/23549294c2ea8679c2a724932b70913f1a34f876\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlO77bCRBK7hj4Ov3rIwAAjTsIAIuvWbXvz0vwmuXPgEfSCiBa\\niimyeiwrf43qkBlBaoTkDd4tZYjxYZVjBLBhP5Sueux9ywcQ1wNhRlTJL6hNBkOu\\nNsq3nWqsaajPm2BWGPFmwvFDOVUQjxkSn3qJ4r6Pt20+ObsIeVTMxRs9bxDwe0GT\\nSb8ZZKh7igc2sHJNRViKGSkFx6RYFlTZlSkGJKH4G1oltPcfWU2vv/HuHz652dm+\\n5BFTyX0vfbgaMyMlSeMpZMqftJzu7W5I0z/XAoHK1S88yt6o4qE6zbElAlX9oC63\\nS53Hwzv5r2JmNaQdk4NiHNfPVAg/kG3g2WsB+zF0IEW1Zb5DR7ockww2RLTEd+U=\\n=oNsU\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree f3aef07f622f91fa4f3c3ae92b7dde2748354755\\nparent
        2ecda4c2184963ebff81ba896ee8769f29da11da\\nauthor kuba <xnetcat.dev@gmail.com>
        1698414299 +0200\\ncommitter GitHub <noreply@github.com> 1698414299 +0200\\n\\nfixed
        spotify.link for non song links\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/23549294c2ea8679c2a724932b70913f1a34f876\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/23549294c2ea8679c2a724932b70913f1a34f876\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/23549294c2ea8679c2a724932b70913f1a34f876/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"2ecda4c2184963ebff81ba896ee8769f29da11da\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/2ecda4c2184963ebff81ba896ee8769f29da11da\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/2ecda4c2184963ebff81ba896ee8769f29da11da\"}]},{\"sha\":\"83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"node_id\":\"C_kwDOA71kIdoAKDgzYTEwYjRmNDczNjVjMTQyOWEzY2JkNzhmNzJmMjU1ZjI1OTZjYTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-27T14:13:21Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-27T14:13:21Z\"},\"message\":\"added
        timer\",\"tree\":{\"sha\":\"8852d847d90ae192e6c0e9bf7d1157d7781692f1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8852d847d90ae192e6c0e9bf7d1157d7781692f1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlO8WBCRBK7hj4Ov3rIwAACucIAD+o3hcu9qPOSn47y1PUJdce\\n7zDxFBWjGYIAsK5XhxQ1d5qODtGsGMyFanSJ+kj5JuEHu4nOfMdwKIdgXQaf4Z/S\\nDHd0hX2NRZ2yvFa+zd3UQEz4VCfLdCcXSY+jRedWoHNIHy2stYq0/rgUAzYVaEO2\\nQkGzjJGfEeAJthkHDe1Qfeb4j8jX7Tg/h8TugTt8P3RmOWkPkUNUHDsV1gDIOT91\\nBp8J0yewmC7f5i9Q1w718uHPMtgbHA1ftNrw+XPUNR5t0GSGi1N97dBTfm746p8a\\nQn/jvfwmFigC1g0ufl27Ct8QOWoTBLkPwUbcLtoWL/8HHwZ38LyR2+6ZcZ4IvkI=\\n=XyMd\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8852d847d90ae192e6c0e9bf7d1157d7781692f1\\nparent
        23549294c2ea8679c2a724932b70913f1a34f876\\nauthor kuba <xnetcat.dev@gmail.com>
        1698416001 +0200\\ncommitter GitHub <noreply@github.com> 1698416001 +0200\\n\\nadded
        timer\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"23549294c2ea8679c2a724932b70913f1a34f876\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/23549294c2ea8679c2a724932b70913f1a34f876\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/23549294c2ea8679c2a724932b70913f1a34f876\"}]},{\"sha\":\"b04a86428db9f031873a7c23c965534cd681c1c6\",\"node_id\":\"C_kwDOA71kIdoAKGIwNGE4NjQyOGRiOWYwMzE4NzNhN2MyM2M5NjU1MzRjZDY4MWMxYzY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-10-27T14:25:36Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-27T14:25:36Z\"},\"message\":\"added
        log format option\",\"tree\":{\"sha\":\"002292901501ef888ed025b402fad56f61a107fd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/002292901501ef888ed025b402fad56f61a107fd\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b04a86428db9f031873a7c23c965534cd681c1c6\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlO8hgCRBK7hj4Ov3rIwAAn6IIAHINvsHU9zJMiHAtDHKewcmq\\n3CIwCgAKG7LonJj9zCZIy2heP5Gqd2i0ZKyuaPuMCMV+Q4GTA7qGCUGrmsCgB4SP\\nBiZb8zkXP/fUnWeMmhFkpN5qbNeGYqn+mb7V8ND7AB8G8GfFyJxe56VNB/YhGkrR\\nHkJuETXRkkv2UP3zHLcbNMExh+ZHxFUdeoM1MyoqJv1rP13+aC5UwPa8Y1MeEKYv\\nnQvBUXyd142cSIW+EPb0k5o9nrNTt16slTYEvtmFEQpCPeJgRljAbD8eTTj1ncbb\\n4mjXI4OItlIaWo8SFMlo572dydUy09sE/T6pbw1PGOx00+0VDSDaiv+cZ0YO8Ig=\\n=RlCt\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 002292901501ef888ed025b402fad56f61a107fd\\nparent
        83a10b4f47365c1429a3cbd78f72f255f2596ca0\\nauthor kuba <xnetcat.dev@gmail.com>
        1698416736 +0200\\ncommitter GitHub <noreply@github.com> 1698416736 +0200\\n\\nadded
        log format option\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b04a86428db9f031873a7c23c965534cd681c1c6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b04a86428db9f031873a7c23c965534cd681c1c6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b04a86428db9f031873a7c23c965534cd681c1c6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83a10b4f47365c1429a3cbd78f72f255f2596ca0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/83a10b4f47365c1429a3cbd78f72f255f2596ca0\"}]},{\"sha\":\"359f8fe6889a728f35eea9d014d7020d79fda479\",\"node_id\":\"C_kwDOA71kIdoAKDM1OWY4ZmU2ODg5YTcyOGYzNWVlYTlkMDE0ZDcwMjBkNzlmZGE0Nzk\",\"commit\":{\"author\":{\"name\":\"Ibukun
        Ekunwe\",\"email\":\"ekunweibukun159357@gmail.com\",\"date\":\"2023-10-30T08:21:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-30T08:21:44Z\"},\"message\":\"update
        documentation (#1947)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"e22deeb582f3bd7737a36c404e89593facebc1b5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e22deeb582f3bd7737a36c404e89593facebc1b5\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/359f8fe6889a728f35eea9d014d7020d79fda479\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlP2eYCRBK7hj4Ov3rIwAAiNYIAIYvuJo3+O+5wy81pKUtMzxQ\\nELY/HcghPClS9TvZtXQSckKl9nval+jQDCsCWZIf99rzTVbo+w/1JnxjUoxAhYVU\\nG0JJEypdTUWmI6vZCVXCucYrd+sylgCPZ82yPEFi1PnhSaftTHubjTv9tucYAN7u\\nrojOjrm4A0KddXprf7f4RTgt43lrcIE9ilh2kYJRxuott/PbiW/3x1JrAWxqff43\\nYhnOyF+Twd7GnP2ilp2lhBud0uxNNOLwNaktYv8iYL2Q2M9xDuDlOT9T2L3ULQyM\\nr3MwMg8ZbhrJZs2FsjxqPEJbtVtQACAFaDZaL5F/zbS7AI50tAlOt6HYfmpsFM8=\\n=sxwc\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree e22deeb582f3bd7737a36c404e89593facebc1b5\\nparent
        b04a86428db9f031873a7c23c965534cd681c1c6\\nauthor Ibukun Ekunwe <ekunweibukun159357@gmail.com>
        1698654104 +0100\\ncommitter GitHub <noreply@github.com> 1698654104 +0100\\n\\nupdate
        documentation (#1947)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/359f8fe6889a728f35eea9d014d7020d79fda479\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/359f8fe6889a728f35eea9d014d7020d79fda479\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/359f8fe6889a728f35eea9d014d7020d79fda479/comments\",\"author\":{\"login\":\"drvnprgrmr\",\"id\":67306305,\"node_id\":\"MDQ6VXNlcjY3MzA2MzA1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/67306305?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/drvnprgrmr\",\"html_url\":\"https://github.com/drvnprgrmr\",\"followers_url\":\"https://api.github.com/users/drvnprgrmr/followers\",\"following_url\":\"https://api.github.com/users/drvnprgrmr/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/drvnprgrmr/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/drvnprgrmr/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/drvnprgrmr/subscriptions\",\"organizations_url\":\"https://api.github.com/users/drvnprgrmr/orgs\",\"repos_url\":\"https://api.github.com/users/drvnprgrmr/repos\",\"events_url\":\"https://api.github.com/users/drvnprgrmr/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/drvnprgrmr/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b04a86428db9f031873a7c23c965534cd681c1c6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b04a86428db9f031873a7c23c965534cd681c1c6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b04a86428db9f031873a7c23c965534cd681c1c6\"}]},{\"sha\":\"912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"node_id\":\"C_kwDOA71kIdoAKDkxMmFkYzkwYzUzNGMxYTFlNjRmMGI0OGZhMDRiODVjMGM3NGUwZjA\",\"commit\":{\"author\":{\"name\":\"Biresh
        Biswas\",\"email\":\"90760974+Billa05@users.noreply.github.com\",\"date\":\"2023-10-30T08:25:55Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-30T08:25:55Z\"},\"message\":\"Feat:
        redownload flag for meta (#1944)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"0dd0827ba8391d8673a53940b08c25a4d5e80eac\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0dd0827ba8391d8673a53940b08c25a4d5e80eac\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlP2iTCRBK7hj4Ov3rIwAAj48IABiCmphzggh8oz6DboEyubS7\\nYezEgpbmXqjm9H2uuwKky4r/5LPejPDuAjRM/Pasmc2n0lUiG/knW7zVDSqYqZOB\\niuj5wx+pewM7LNbqQVl1yrPQ513mW4JkxPu63UaSBFCK4uhuQ+0Kk8fISXBn62yD\\neZRNi7tc7dlG9FyotAcPfameawf/JHla4vH4WohfFVLsibZgjB3rj5Kyjh1DjHmJ\\nv7Gcf8NG70lue20FO+tD5b2gUHmUpWgB8fl3znonafsWlaBy22ASBqrqnjwmcXLu\\nk6gBrlsjYSFa0ZVuNxKixGajtxytJO2YncPYX/KZMTyaUJ/71Em9U6HcgPgI6/8=\\n=dJnU\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 0dd0827ba8391d8673a53940b08c25a4d5e80eac\\nparent
        359f8fe6889a728f35eea9d014d7020d79fda479\\nauthor Biresh Biswas <90760974+Billa05@users.noreply.github.com>
        1698654355 +0530\\ncommitter GitHub <noreply@github.com> 1698654355 +0100\\n\\nFeat:
        redownload flag for meta (#1944)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0/comments\",\"author\":{\"login\":\"Billa05\",\"id\":90760974,\"node_id\":\"MDQ6VXNlcjkwNzYwOTc0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/90760974?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Billa05\",\"html_url\":\"https://github.com/Billa05\",\"followers_url\":\"https://api.github.com/users/Billa05/followers\",\"following_url\":\"https://api.github.com/users/Billa05/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Billa05/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Billa05/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Billa05/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Billa05/orgs\",\"repos_url\":\"https://api.github.com/users/Billa05/repos\",\"events_url\":\"https://api.github.com/users/Billa05/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Billa05/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"359f8fe6889a728f35eea9d014d7020d79fda479\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/359f8fe6889a728f35eea9d014d7020d79fda479\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/359f8fe6889a728f35eea9d014d7020d79fda479\"}]},{\"sha\":\"ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"node_id\":\"C_kwDOA71kIdoAKGFiNWVmMTdkZDQyZDVlZWE0YzEwNmUxM2JlZTk4YjQ4MDhkNDExN2Y\",\"commit\":{\"author\":{\"name\":\"Ed\",\"email\":\"mredgaryu@gmail.com\",\"date\":\"2023-10-30T08:26:41Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-10-30T08:26:41Z\"},\"message\":\"All
        user saved albums (#1945)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"c244eea8008a670edd1d271d452a84bf8ba67920\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c244eea8008a670edd1d271d452a84bf8ba67920\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlP2jBCRBK7hj4Ov3rIwAAlZAIAEy4Rb9I0CLIUGwh2OuktL+I\\nLBhnj2gu1xIQ0/jH60Lxk5SSOOZ4o2FSfjolmOerqAUO7ZEaBuMY0BawfOxyCSHv\\ncbe2Y+SuY1rjN1ONQbmUCR/ahQJdfY139NcA5nWy4BOh7HQuviQ99l1+CIVlPqsJ\\nCjIQIynxXRYZCgVUUdFvuB6cJOFjUNkGrfvfW1nQsU+doivGOJr2NWijV5sWsk2W\\nXy9MQtvjZvSprVwCXhA/8IVOUKGuD9d+jpz9hNd7/BhnY2NBVm/rXAIoOm/b6ZCN\\n1gGSPblCHLEPCSXhxs6DHB/AIza3fJWvOPeekMBNVx+kX/YJ4OlWXT0N8uuRR5M=\\n=c0MZ\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree c244eea8008a670edd1d271d452a84bf8ba67920\\nparent
        912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\\nauthor Ed <mredgaryu@gmail.com>
        1698654401 -0700\\ncommitter GitHub <noreply@github.com> 1698654401 +0100\\n\\nAll
        user saved albums (#1945)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f/comments\",\"author\":{\"login\":\"edy252\",\"id\":11168525,\"node_id\":\"MDQ6VXNlcjExMTY4NTI1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/11168525?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/edy252\",\"html_url\":\"https://github.com/edy252\",\"followers_url\":\"https://api.github.com/users/edy252/followers\",\"following_url\":\"https://api.github.com/users/edy252/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/edy252/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/edy252/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/edy252/subscriptions\",\"organizations_url\":\"https://api.github.com/users/edy252/orgs\",\"repos_url\":\"https://api.github.com/users/edy252/repos\",\"events_url\":\"https://api.github.com/users/edy252/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/edy252/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/912adc90c534c1a1e64f0b48fa04b85c0c74e0f0\"}]},{\"sha\":\"e828353611c94dca7514c966878e371b25925097\",\"node_id\":\"C_kwDOA71kIdoAKGU4MjgzNTM2MTFjOTRkY2E3NTE0Yzk2Njg3OGUzNzFiMjU5MjUwOTc\",\"commit\":{\"author\":{\"name\":\"Edin
        O\",\"email\":\"22921456+edinosma@users.noreply.github.com\",\"date\":\"2023-11-10T14:54:06Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-10T14:54:06Z\"},\"message\":\"Change
        URI Auth Port from 8080 to 9900 (something less common) (#1959)\\n\\nUpdate
        spotify.py\\r\\n\\r\\nChange URI auth port from 8080 to 9900 (something less
        common)\\r\\n\\r\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"1ae376b17ed048abc503cf3a21e50e544751363f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1ae376b17ed048abc503cf3a21e50e544751363f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e828353611c94dca7514c966878e371b25925097\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlTkQOCRBK7hj4Ov3rIwAAgPcIAIcIGHHLnWFz8KsWrGt+wsuy\\nuSNvik2rH63QfxkAvKdfHvu58I2lt6Z2A5b6Ggo0+1T30WOCSAO729aiY0sR8zzH\\n5+dGmLT6DPl2wxrP5d6Bf2ddQO52MiLLTZKMCJzQlSrGzcZsMEyR6VhIbxKR+POj\\nx9lt+gjMfyQO+UJGPSPu7XHUN398mUEN6Amqlw/IiS60EF2tBC2M7yC7Q/WgCEQZ\\nfd3dw1uP+gy2EFOWONElfqPa7wdMDP1re0oPB822LpL4je2zWVNO9fvfsyoj2FtP\\njb8E3kLr9FTqwf+SI0NhaS/yJwJuf1qCzkBlcajYNXsZt9NjsiTj/smVRZPLvXY=\\n=1LSp\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 1ae376b17ed048abc503cf3a21e50e544751363f\\nparent
        ab5ef17dd42d5eea4c106e13bee98b4808d4117f\\nauthor Edin O <22921456+edinosma@users.noreply.github.com>
        1699628046 -0500\\ncommitter GitHub <noreply@github.com> 1699628046 +0100\\n\\nChange
        URI Auth Port from 8080 to 9900 (something less common) (#1959)\\n\\nUpdate
        spotify.py\\r\\n\\r\\nChange URI auth port from 8080 to 9900 (something less
        common)\\r\\n\\r\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e828353611c94dca7514c966878e371b25925097\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e828353611c94dca7514c966878e371b25925097\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e828353611c94dca7514c966878e371b25925097/comments\",\"author\":{\"login\":\"edinosma\",\"id\":22921456,\"node_id\":\"MDQ6VXNlcjIyOTIxNDU2\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/22921456?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/edinosma\",\"html_url\":\"https://github.com/edinosma\",\"followers_url\":\"https://api.github.com/users/edinosma/followers\",\"following_url\":\"https://api.github.com/users/edinosma/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/edinosma/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/edinosma/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/edinosma/subscriptions\",\"organizations_url\":\"https://api.github.com/users/edinosma/orgs\",\"repos_url\":\"https://api.github.com/users/edinosma/repos\",\"events_url\":\"https://api.github.com/users/edinosma/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/edinosma/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ab5ef17dd42d5eea4c106e13bee98b4808d4117f\"}]},{\"sha\":\"af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"node_id\":\"C_kwDOA71kIdoAKGFmNWM4ZjdkZjdjZTkxMTBhZmMyZDExNTAyMTJiOTQ1ZDI2YzlhYzk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:23:55Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"set
        log_format to None by default\",\"tree\":{\"sha\":\"585283cab69609debbfcd878dd05f9f955cdeb45\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/585283cab69609debbfcd878dd05f9f955cdeb45\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e828353611c94dca7514c966878e371b25925097\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e828353611c94dca7514c966878e371b25925097\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e828353611c94dca7514c966878e371b25925097\"}]},{\"sha\":\"1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"node_id\":\"C_kwDOA71kIdoAKDFhMmM5ZDgxYTFlOTBhMWE3ZWY4YTA1Y2U2ZDZkY2VlMzBmNDQ1MTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:24:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"fixed
        time calculations\",\"tree\":{\"sha\":\"5cdf5a6052208d4e40f77203a31c1790dfbddebc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5cdf5a6052208d4e40f77203a31c1790dfbddebc\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/af5c8f7df7ce9110afc2d1150212b945d26c9ac9\"}]},{\"sha\":\"40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"node_id\":\"C_kwDOA71kIdoAKDQwMjYyYzhkNDNlMmY3Y2E2MmU0OWY0YjVkMmIzZjExMWFiZWRhMWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:24:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"format
        with black\",\"tree\":{\"sha\":\"6f527fb84f9d259e8797c76d69e898579796e247\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/6f527fb84f9d259e8797c76d69e898579796e247\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1a2c9d81a1e90a1a7ef8a05ce6d6dcee30f44511\"}]},{\"sha\":\"14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"node_id\":\"C_kwDOA71kIdoAKDE0MTk0YTE4YTZlNzI3ZmFhM2NkNTc4MWZiZWFhYTkyZTM5ZjFhNDg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:29:27Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"fixing
        tests workflow\",\"tree\":{\"sha\":\"e3f6b8838b62a3c64d1b9bb350d15b00b757b879\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/e3f6b8838b62a3c64d1b9bb350d15b00b757b879\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/40262c8d43e2f7ca62e49f4b5d2b3f111abeda1d\"}]},{\"sha\":\"7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"node_id\":\"C_kwDOA71kIdoAKDdmMzYxZTFjYjE2ZjFmOTNlOTBiYTdiMWVhMDA2ZTIxMTY4ZGZkMTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:37:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:38:11Z\"},\"message\":\"fixing
        matching algo\",\"tree\":{\"sha\":\"dedae0d338bcaee74c007244d2607cdcfb2708e2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/dedae0d338bcaee74c007244d2607cdcfb2708e2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/14194a18a6e727faa3cd5781fbeaaa92e39f1a48\"}]},{\"sha\":\"b0b962354b4fe5e4478617e086fede0293edcd68\",\"node_id\":\"C_kwDOA71kIdoAKGIwYjk2MjM1NGI0ZmU1ZTQ0Nzg2MTdlMDg2ZmVkZTAyOTNlZGNkNjg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:49:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:49:11Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"ec30c8ce59efccf29ec8f583dec696e2d08fa01c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ec30c8ce59efccf29ec8f583dec696e2d08fa01c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b0b962354b4fe5e4478617e086fede0293edcd68\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0b962354b4fe5e4478617e086fede0293edcd68\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b0b962354b4fe5e4478617e086fede0293edcd68\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0b962354b4fe5e4478617e086fede0293edcd68/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7f361e1cb16f1f93e90ba7b1ea006e21168dfd14\"}]},{\"sha\":\"e3fe21b3e605f58c03835d0a716d0d681567c342\",\"node_id\":\"C_kwDOA71kIdoAKGUzZmUyMWIzZTYwNWY1OGMwMzgzNWQwYTcxNmQwZDY4MTU2N2MzNDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:50:59Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:50:59Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"3ea562c5e90001917f5cf95901fb8f1b533cd6b2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3ea562c5e90001917f5cf95901fb8f1b533cd6b2\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3fe21b3e605f58c03835d0a716d0d681567c342/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b0b962354b4fe5e4478617e086fede0293edcd68\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0b962354b4fe5e4478617e086fede0293edcd68\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b0b962354b4fe5e4478617e086fede0293edcd68\"}]},{\"sha\":\"90f0b31ef0cd54270172987841f255bffb158e94\",\"node_id\":\"C_kwDOA71kIdoAKDkwZjBiMzFlZjBjZDU0MjcwMTcyOTg3ODQxZjI1NWJmZmIxNThlOTQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:54:56Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:54:56Z\"},\"message\":\"fixed
        log format argument parsing\",\"tree\":{\"sha\":\"fb7b7be5adaab01fa7351f003b70278aa352e333\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/fb7b7be5adaab01fa7351f003b70278aa352e333\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/90f0b31ef0cd54270172987841f255bffb158e94\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/90f0b31ef0cd54270172987841f255bffb158e94\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/90f0b31ef0cd54270172987841f255bffb158e94\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/90f0b31ef0cd54270172987841f255bffb158e94/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e3fe21b3e605f58c03835d0a716d0d681567c342\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e3fe21b3e605f58c03835d0a716d0d681567c342\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e3fe21b3e605f58c03835d0a716d0d681567c342\"}]},{\"sha\":\"3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"node_id\":\"C_kwDOA71kIdoAKDNiYTY3NzE5Y2QwZWFkNDhjNWRiMDRiODkyNTc2MGMwY2Q5YWFjMTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:59:44Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T15:59:44Z\"},\"message\":\"fixed
        help message\",\"tree\":{\"sha\":\"7d1cdca7f92ed0c2c663e013bbf546210516c60b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7d1cdca7f92ed0c2c663e013bbf546210516c60b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"90f0b31ef0cd54270172987841f255bffb158e94\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/90f0b31ef0cd54270172987841f255bffb158e94\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/90f0b31ef0cd54270172987841f255bffb158e94\"}]},{\"sha\":\"6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"node_id\":\"C_kwDOA71kIdoAKDZkMmRhZDkwNDIxYzhlZjk5NDI4ZDllNWU0N2EzNTEwNjc5ZDUwZjk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T16:02:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-10T16:02:30Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"b5894d2c72fea8b984b490b5d8511fd288f3c456\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b5894d2c72fea8b984b490b5d8511fd288f3c456\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3ba67719cd0ead48c5db04b8925760c0cd9aac15\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3ba67719cd0ead48c5db04b8925760c0cd9aac15\"}]},{\"sha\":\"affddb49599c5a6a4972e67c68e788474015f06d\",\"node_id\":\"C_kwDOA71kIdoAKGFmZmRkYjQ5NTk5YzVhNmE0OTcyZTY3YzY4ZTc4ODQ3NDAxNWYwNmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:41:05Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:41:05Z\"},\"message\":\"perform
        subdomain swap on youtube playlists\",\"tree\":{\"sha\":\"4411133c12c52f025ee52805c189e1ac963d0d1b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/4411133c12c52f025ee52805c189e1ac963d0d1b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/affddb49599c5a6a4972e67c68e788474015f06d\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV3uCCRBK7hj4Ov3rIwAA6xAIAAbxir6EE4+9TVM3S8XWSr9k\\nZkxoZxDfbdzC3Z2aJp36qiat4OyxzEjNaW5YLdpibIFOu3CgZv7hm7vCVpkW6Z9I\\niJE2DVLGv1QVfXkkCDRVo6VjqxeaPTBAroZ3bFXcQKEiKPHW5fPSGkNqYEneaMW5\\n1M8ha4nndjqRU3PqEh2RRAuBgV3f0E+z4/RfO2GgzvzjmF0z2r8ZEF9wS4Gl+777\\nDzbqz+B2cf/jziZ4ZdQsokAPZaMBGo6r8V1o5ud//41zB3PBtIP4MkVWpupQ95Vr\\n8g2v0BKnkEtSY4jbhzVp+J3Rqb8rLRQXTw4C7aagOIOqtVKoOED9/+QKAm+MQe8=\\n=TMdC\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree 4411133c12c52f025ee52805c189e1ac963d0d1b\\nparent
        6d2dad90421c8ef99428d9e5e47a3510679d50f9\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232065 +0000\\ncommitter GitHub <noreply@github.com> 1700232065 +0000\\n\\nperform
        subdomain swap on youtube playlists\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/affddb49599c5a6a4972e67c68e788474015f06d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/affddb49599c5a6a4972e67c68e788474015f06d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/affddb49599c5a6a4972e67c68e788474015f06d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6d2dad90421c8ef99428d9e5e47a3510679d50f9\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6d2dad90421c8ef99428d9e5e47a3510679d50f9\"}]},{\"sha\":\"67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"node_id\":\"C_kwDOA71kIdoAKDY3YjA5Y2YzMGNlMDc3NGYwMjRiMzEwZDQzZjYwMmQxZmI0YmVhMzQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:46:09Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:46:09Z\"},\"message\":\"updated
        quality docs/options\",\"tree\":{\"sha\":\"49dd2ca47fd999f3cc9feb6572f36a8b366c51c9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/49dd2ca47fd999f3cc9feb6572f36a8b366c51c9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV3yxCRBK7hj4Ov3rIwAAC04IAK0GftihjKneOjWmJG+5falc\\n0xqMPLfiVuXkMC1hmLVylEZUUg1UdhLoWDkcgIXuiqQZuwlpv6oTuzj4tf4McfZO\\nYmsPjD7V2ugTDxtIRaiuR06jmUshzNSB4EDyc4gX0x+YBlIwkpfc4ywxz5SYEhn+\\ntFTpY4NnuSyEeTDcEsDg4K9vc8sSiGyvv7PVHNkBLkqj+AS6WC7KHSIPq417S4km\\n2yiZtvDpmWiY1bprSxSNfMU58yIcZaIbWRhalHjsHNXZZysbG9YB0zxLfjq5TLcv\\nTU84QlA41RGP4jsNnuN0mJiC/i3lOkRrsYyIPzGbiLpkpygasCFLDdPRh6bdNCE=\\n=s8lj\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree 49dd2ca47fd999f3cc9feb6572f36a8b366c51c9\\nparent
        affddb49599c5a6a4972e67c68e788474015f06d\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232369 +0000\\ncommitter GitHub <noreply@github.com> 1700232369 +0000\\n\\nupdated
        quality docs/options\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"affddb49599c5a6a4972e67c68e788474015f06d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/affddb49599c5a6a4972e67c68e788474015f06d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/affddb49599c5a6a4972e67c68e788474015f06d\"}]},{\"sha\":\"67b0a39ccdcc77c9740ca31809392901d3d37646\",\"node_id\":\"C_kwDOA71kIdoAKDY3YjBhMzljY2RjYzc3Yzk3NDBjYTMxODA5MzkyOTAxZDNkMzc2NDY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:46:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:46:44Z\"},\"message\":\"black
        .\",\"tree\":{\"sha\":\"b21a52b9aadb2f05465447006ed09da1be6efeaa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b21a52b9aadb2f05465447006ed09da1be6efeaa\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV3zUCRBK7hj4Ov3rIwAAi5kIAHssqFyWlRkZS2wTrJEapj+o\\nSa6OEuIJFkNFMZrp+vQHRbOaWI7anPTGvVTqiealj+bdftET/Y+IPSTUU+ssjtyE\\ngf2HnFIAgaEIRZiX43jNBtLrs22hD/SaJ7OMMuYbrdKUAKw4djUnMVWxnqaSpIyA\\nLE7bLlU5cLooOVBIfmLdgCRUw4rrFlZjeSBPxkeHeUkK4PIfSQ9Ex89H4wT914BJ\\nmk6jyn/rAUZ9WR+jA+zjG93eYZ4CLH7d841W4UISIeaL01y9BuA46XyD5W6q2EYj\\nHcP2/8raOpIRnFgYs2FSXvQKojwG8Hz5hE5FDwTEsZ59OWtDAV9LLCQ8tr3/AR0=\\n=rJ3u\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree b21a52b9aadb2f05465447006ed09da1be6efeaa\\nparent
        67b09cf30ce0774f024b310d43f602d1fb4bea34\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232404 +0000\\ncommitter GitHub <noreply@github.com> 1700232404 +0000\\n\\nblack
        .\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b0a39ccdcc77c9740ca31809392901d3d37646/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b09cf30ce0774f024b310d43f602d1fb4bea34\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b09cf30ce0774f024b310d43f602d1fb4bea34\"}]},{\"sha\":\"c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"node_id\":\"C_kwDOA71kIdoAKGMxOWU5YTkyODM5MzQ1ZjhkM2Q4OTgxMGVlY2ZkMGI1NWM2NzA2ZWM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:49:59Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:49:59Z\"},\"message\":\"update
        dependencies\",\"tree\":{\"sha\":\"8bd7c0f559bb1346301eda36db22d9713d7c7c92\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8bd7c0f559bb1346301eda36db22d9713d7c7c92\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV32XCRBK7hj4Ov3rIwAANcEIAEwCv2K2N7kLlOkPDVxZYclr\\nZCUpm7JGYcdMaLIu3mO3uX8yncnzzyRVZUAsDw9IuQhZsXXokgNACRetfwyWv5iJ\\nT5TLPi6wIcp2Okho1yDGfOX42tTxUXVadDmCiTPiyBOe/pve5iEe1SEN0vmYjDaA\\nvQV9pIEq6UaskdW1I3cCpRdNi7hHKCxURpUxAgYNDMoW4Hp7m67KGUYC812Px2/j\\nRdcNoD7jMVJgbn2vXnfi5cKYFK3pefaTEvfWx0pb61ye9DU6lRfS6EmKx8QneNc6\\nH/Y6m1nqUc+/5+83XZdynw5RR95qfI5YizTPBN+rR8CFk4CtoVuaXK+tGeaLic0=\\n=RGtg\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree 8bd7c0f559bb1346301eda36db22d9713d7c7c92\\nparent
        67b0a39ccdcc77c9740ca31809392901d3d37646\\nauthor kuba <xnetcat.dev@gmail.com>
        1700232599 +0000\\ncommitter GitHub <noreply@github.com> 1700232599 +0000\\n\\nupdate
        dependencies\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"67b0a39ccdcc77c9740ca31809392901d3d37646\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/67b0a39ccdcc77c9740ca31809392901d3d37646\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/67b0a39ccdcc77c9740ca31809392901d3d37646\"}]},{\"sha\":\"553e7a843b86c575034a80aa27c8aa0dbd030786\",\"node_id\":\"C_kwDOA71kIdoAKDU1M2U3YTg0M2I4NmM1NzUwMzRhODBhYTI3YzhhYTBkYmQwMzA3ODY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-17T14:57:41Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-17T14:57:41Z\"},\"message\":\"update
        readthedocs build\",\"tree\":{\"sha\":\"f28ef3c129542d3c2594c931b2c93ee3d66225f9\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/f28ef3c129542d3c2594c931b2c93ee3d66225f9\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlV39lCRBK7hj4Ov3rIwAAVYUIABQX0j8HCQpaSazkNzGHSRbo\\nIVVtJhz7PSHIwvecQGafYFMhy03BqB+5ZP3sOc0gLGdnRduDMTJe60dq29eLOdN3\\ngZ/NOLKoziSq6PyBEQ29XjDArX4Uo6xfzIx5e3SXd3u3fbicTJRsAxfMJ5Ss62W2\\nWd8iYr+NM2vTKZF6jfwUEvyWJUVFZ7LAdctY38mg9ETsgtNkoKE3qFAUnuQMDB+H\\n0koGjusqkd5A/+KmodzemWAtw2XKtkfHJH6cwoXo0IOevJcb8jNUQd8z7sYrUOvq\\nXfvV28sBkOZevewsqZb2wRGrvK01Epp6F9E32bSdFkdqD76JPPpMr0Ph4f7Yho4=\\n=kzmg\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree f28ef3c129542d3c2594c931b2c93ee3d66225f9\\nparent
        c19e9a92839345f8d3d89810eecfd0b55c6706ec\\nauthor kuba <xnetcat.dev@gmail.com>
        1700233061 +0000\\ncommitter GitHub <noreply@github.com> 1700233061 +0000\\n\\nupdate
        readthedocs build\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/553e7a843b86c575034a80aa27c8aa0dbd030786/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c19e9a92839345f8d3d89810eecfd0b55c6706ec\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c19e9a92839345f8d3d89810eecfd0b55c6706ec\"}]},{\"sha\":\"6643a334fd34f9ebb27447648436fa34dd2239be\",\"node_id\":\"C_kwDOA71kIdoAKDY2NDNhMzM0ZmQzNGY5ZWJiMjc0NDc2NDg0MzZmYTM0ZGQyMjM5YmU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:13:13Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:13:13Z\"},\"message\":\"fallback
        \ to title matching for non verified results when score is lower than 70\",\"tree\":{\"sha\":\"b590170b47fd72e3107cd55cb49b671cccaa66fd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b590170b47fd72e3107cd55cb49b671cccaa66fd\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/6643a334fd34f9ebb27447648436fa34dd2239be\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6643a334fd34f9ebb27447648436fa34dd2239be\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6643a334fd34f9ebb27447648436fa34dd2239be\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6643a334fd34f9ebb27447648436fa34dd2239be/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"553e7a843b86c575034a80aa27c8aa0dbd030786\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/553e7a843b86c575034a80aa27c8aa0dbd030786\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/553e7a843b86c575034a80aa27c8aa0dbd030786\"}]},{\"sha\":\"7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"node_id\":\"C_kwDOA71kIdoAKDdmZjBhZjBkOTNhN2ZlNzAyODIyMGRiOTQzYTJjN2E2MTFjZjYxMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:41:38Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:41:38Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"5bc8ff35016799f64077508ab1d733572dde3a08\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5bc8ff35016799f64077508ab1d733572dde3a08\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"6643a334fd34f9ebb27447648436fa34dd2239be\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/6643a334fd34f9ebb27447648436fa34dd2239be\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/6643a334fd34f9ebb27447648436fa34dd2239be\"}]},{\"sha\":\"c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"node_id\":\"C_kwDOA71kIdoAKGMyYjMyMmM4YWFkY2E5NWJlNGQ0Njg2NzJiNmMzNmZkMDdhYjY5MGM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-11-18T18:54:24Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-11-18T18:54:24Z\"},\"message\":\"v4.2.2\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\\r\\nCo-authored-by: Bharat Nair <bharatsnair@gmail.com>\\r\\nCo-authored-by:
        Tunglies <77394545+Tunglies@users.noreply.github.com>\\r\\nCo-authored-by:
        Muhammad Ishaque Nizamani <49721249+MuhammadNizamani@users.noreply.github.com>\\r\\nCo-authored-by:
        Aniket Patil <128228805+AniketP04@users.noreply.github.com>\\r\\nCo-authored-by:
        Biresh Biswas <90760974+Billa05@users.noreply.github.com>\\r\\nCo-authored-by:
        Ibukun Ekunwe <ekunweibukun159357@gmail.com>\\r\\nCo-authored-by: Ed <mredgaryu@gmail.com>\\r\\nCo-authored-by:
        Edin O <22921456+edinosma@users.noreply.github.com>\",\"tree\":{\"sha\":\"5bc8ff35016799f64077508ab1d733572dde3a08\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5bc8ff35016799f64077508ab1d733572dde3a08\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlWQhgCRBK7hj4Ov3rIwAA8m4IAKGqIf5npaWJG3iv8myD8n72\\nUmJ/LUwmUq6iaRBjxHSPaM+OlgFNJh2LkH5cPqP7xvDSAiC4SX6zJZgwrdsnsyKH\\nKU8AXHxxrmVHHA+qlVYHe9d4/9YH6RTqjL0S+Q5qw5OGK1YzwbhGQ6uC41KsD4mw\\nTfbxzHipquW5U8qvh9DodOd+1AHWgWGjADVumffz7UcmGoFeYiXepSpqG3drDFYV\\nMravvBer/vaIyri8RUmCfs3YB37NtNgN1uxxPcEJXHrup9nSrWwWz+KogrPnooTW\\neKEBxKJtzfgKnCUat7DPBDqynZDdBwdHeUCzNeBIbRBk6wPegPc/zrv4I4Ipxbc=\\n=GhRt\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 5bc8ff35016799f64077508ab1d733572dde3a08\\nparent
        4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\\nparent 7ff0af0d93a7fe7028220db943a2c7a611cf6133\\nauthor
        kuba <xnetcat.dev@gmail.com> 1700333664 +0100\\ncommitter GitHub <noreply@github.com>
        1700333664 +0100\\n\\nv4.2.2\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\nCo-authored-by:
        Bharat Nair <bharatsnair@gmail.com>\\r\\nCo-authored-by: Tunglies <77394545+Tunglies@users.noreply.github.com>\\r\\nCo-authored-by:
        Muhammad Ishaque Nizamani <49721249+MuhammadNizamani@users.noreply.github.com>\\r\\nCo-authored-by:
        Aniket Patil <128228805+AniketP04@users.noreply.github.com>\\r\\nCo-authored-by:
        Biresh Biswas <90760974+Billa05@users.noreply.github.com>\\r\\nCo-authored-by:
        Ibukun Ekunwe <ekunweibukun159357@gmail.com>\\r\\nCo-authored-by: Ed <mredgaryu@gmail.com>\\r\\nCo-authored-by:
        Edin O <22921456+edinosma@users.noreply.github.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4f5d9b6e1f14a211cafaa936c66ad9b5d6a85e18\"},{\"sha\":\"7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7ff0af0d93a7fe7028220db943a2c7a611cf6133\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7ff0af0d93a7fe7028220db943a2c7a611cf6133\"}]},{\"sha\":\"b64e87932517cd0054bf73e110db49b0e47c9e96\",\"node_id\":\"C_kwDOA71kIdoAKGI2NGU4NzkzMjUxN2NkMDA1NGJmNzNlMTEwZGI0OWIwZTQ3YzllOTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T20:42:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T20:42:30Z\"},\"message\":\"add
        support for python 3.12\",\"tree\":{\"sha\":\"5c19afd7a981bfa842c672dfe7e7c24c78f3ac33\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5c19afd7a981bfa842c672dfe7e7c24c78f3ac33\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64e87932517cd0054bf73e110db49b0e47c9e96/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2b322c8aadca95be4d468672b6c36fd07ab690c\"}]},{\"sha\":\"f6aa8855a1adb8aff681e482455bbaa632de1768\",\"node_id\":\"C_kwDOA71kIdoAKGY2YWE4ODU1YTFhZGI4YWZmNjgxZTQ4MjQ1NWJiYWE2MzJkZTE3Njg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:01Z\"},\"message\":\"mute
        pytube warnings\",\"tree\":{\"sha\":\"c72f967752d9e69959ff404b044a85d22099bc08\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c72f967752d9e69959ff404b044a85d22099bc08\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f6aa8855a1adb8aff681e482455bbaa632de1768/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b64e87932517cd0054bf73e110db49b0e47c9e96\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b64e87932517cd0054bf73e110db49b0e47c9e96\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b64e87932517cd0054bf73e110db49b0e47c9e96\"}]},{\"sha\":\"db660618996ea4ddbab94280916ac0464aadcd32\",\"node_id\":\"C_kwDOA71kIdoAKGRiNjYwNjE4OTk2ZWE0ZGRiYWI5NDI4MDkxNmFjMDQ2NGFhZGNkMzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:22Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:19:22Z\"},\"message\":\"update
        cassettes\",\"tree\":{\"sha\":\"ed0717adb80ffaf8c59557be7b6850225ec11c13\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ed0717adb80ffaf8c59557be7b6850225ec11c13\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/db660618996ea4ddbab94280916ac0464aadcd32\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db660618996ea4ddbab94280916ac0464aadcd32\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db660618996ea4ddbab94280916ac0464aadcd32\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db660618996ea4ddbab94280916ac0464aadcd32/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f6aa8855a1adb8aff681e482455bbaa632de1768\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f6aa8855a1adb8aff681e482455bbaa632de1768\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f6aa8855a1adb8aff681e482455bbaa632de1768\"}]},{\"sha\":\"9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"node_id\":\"C_kwDOA71kIdoAKDk1NzhhZDMzYmM2ZGM3YTgxM2NiYTZlNDNhMDcxZGQyODI1OTg4Yzg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:24:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-01T21:24:26Z\"},\"message\":\"use
        python 3.11 for tests\\n\\nblocked by https://github.com/kevin1024/vcrpy/pull/775\",\"tree\":{\"sha\":\"5174344a294b5e930f2e384ead69b78e429510f7\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5174344a294b5e930f2e384ead69b78e429510f7\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"db660618996ea4ddbab94280916ac0464aadcd32\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/db660618996ea4ddbab94280916ac0464aadcd32\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/db660618996ea4ddbab94280916ac0464aadcd32\"}]},{\"sha\":\"330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"node_id\":\"C_kwDOA71kIdoAKDMzMGMxODU2YTlhYjg5YzhjZmYzMmFlZjk2NjFjN2MxZDA4MDU3MjA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-02T17:28:11Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-02T17:28:11Z\"},\"message\":\"updated
        syncedlyrics\",\"tree\":{\"sha\":\"64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9578ad33bc6dc7a813cba6e43a071dd2825988c8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9578ad33bc6dc7a813cba6e43a071dd2825988c8\"}]},{\"sha\":\"c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"node_id\":\"C_kwDOA71kIdoAKGM5MzJlNWRhZmRmNGVhZmMyZDEwNDRlMjU1ZDk2YWI2OTM5YmY0ZmU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-02T17:33:58Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-12-02T17:33:58Z\"},\"message\":\"v4.2.3\",\"tree\":{\"sha\":\"64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJla2qGCRBK7hj4Ov3rIwAAxaoIAI1C8RdHrRr2VNOwMnfSvYhO\\nPJslmwa+H0JNkpz2ezG0d3XQpj4MP8NCooNR9x2Q/xJvYVan+htBCO9QhREgJN+0\\nLcjka1m3b7FXjkl/y9RvqdSvQqr1Qf9PEV2sXcqm2yzaz/Pah4ORhfHkMDtr27Pa\\nSR05HPICOlS1VcMqzevW5DLR8oFMhnsdZGpUzSxrSGDgoAum4NZPSCXXHgRWXS9h\\ndXFIgU3Qk5I2MF7KfV7ByINY0HcPdM3KOO4q0pmstVHbAEWuYIV0prwXR49/aqwB\\nuyRPofllJOV8VcbyvTStH815YUYb3Qi1IPm5wl4SgkHvIDaQ7FaquJ+um4b8aQs=\\n=3wUm\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 64ae2949f20f68e376dbf2d4c5a5db31ffe7c5a6\\nparent
        c2b322c8aadca95be4d468672b6c36fd07ab690c\\nparent 330c1856a9ab89c8cff32aef9661c7c1d0805720\\nauthor
        kuba <xnetcat.dev@gmail.com> 1701538438 +0100\\ncommitter GitHub <noreply@github.com>
        1701538438 +0100\\n\\nv4.2.3\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c2b322c8aadca95be4d468672b6c36fd07ab690c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c2b322c8aadca95be4d468672b6c36fd07ab690c\"},{\"sha\":\"330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/330c1856a9ab89c8cff32aef9661c7c1d0805720\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/330c1856a9ab89c8cff32aef9661c7c1d0805720\"}]},{\"sha\":\"03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"node_id\":\"C_kwDOA71kIdoAKDAzZmFkMWY5MTM3MGNkZGQ4ZjZmZDkzMzMzZmUyMWQwYzIyMDEyMjc\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:45Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:45Z\"},\"message\":\"bump
        version to v4.2.4\",\"tree\":{\"sha\":\"9535e2ae0f2306a322fa0b05332e32194a8be38b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9535e2ae0f2306a322fa0b05332e32194a8be38b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\"}]},{\"sha\":\"107500b28857e16fa6915ca0c38c3fa426b32c64\",\"node_id\":\"C_kwDOA71kIdoAKDEwNzUwMGIyODg1N2UxNmZhNjkxNWNhMGMzOGMzZmE0MjZiMzJjNjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:52:53Z\"},\"message\":\"fixed
        tests on mac\",\"tree\":{\"sha\":\"7394628875b0732d7b466f5049ef26af84b4ae76\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/7394628875b0732d7b466f5049ef26af84b4ae76\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/107500b28857e16fa6915ca0c38c3fa426b32c64/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/03fad1f91370cddd8f6fd93333fe21d0c2201227\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/03fad1f91370cddd8f6fd93333fe21d0c2201227\"}]},{\"sha\":\"680263b78edbabd0c061fec9beae34202b1a6084\",\"node_id\":\"C_kwDOA71kIdoAKDY4MDI2M2I3OGVkYmFiZDBjMDYxZmVjOWJlYWUzNDIwMmIxYTYwODQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:01Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:01Z\"},\"message\":\"Update
        poetry.lock\",\"tree\":{\"sha\":\"9ba459c4437ce8fdc76b324278a428af1acef791\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9ba459c4437ce8fdc76b324278a428af1acef791\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/680263b78edbabd0c061fec9beae34202b1a6084\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/680263b78edbabd0c061fec9beae34202b1a6084\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/680263b78edbabd0c061fec9beae34202b1a6084\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/680263b78edbabd0c061fec9beae34202b1a6084/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"107500b28857e16fa6915ca0c38c3fa426b32c64\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/107500b28857e16fa6915ca0c38c3fa426b32c64\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/107500b28857e16fa6915ca0c38c3fa426b32c64\"}]},{\"sha\":\"ce154672ab9f71dc175858461a1e06382421c453\",\"node_id\":\"C_kwDOA71kIdoAKGNlMTU0NjcyYWI5ZjcxZGMxNzU4NTg0NjFhMWUwNjM4MjQyMWM0NTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:21Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T13:53:21Z\"},\"message\":\"fixed
        builds on arm (hopefully)\",\"tree\":{\"sha\":\"8f5d931eaea001dd6833136c1e1a9a81f705a63c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8f5d931eaea001dd6833136c1e1a9a81f705a63c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce154672ab9f71dc175858461a1e06382421c453\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"680263b78edbabd0c061fec9beae34202b1a6084\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/680263b78edbabd0c061fec9beae34202b1a6084\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/680263b78edbabd0c061fec9beae34202b1a6084\"}]},{\"sha\":\"f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"node_id\":\"C_kwDOA71kIdoAKGY5MGNmYjNmNWFiMWIxNWU3M2QwMzkzZDUzMTkwOGQ0YWM3ODllN2Q\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-03T14:19:54Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-12-03T14:19:54Z\"},\"message\":\"v4.2.4\",\"tree\":{\"sha\":\"8f5d931eaea001dd6833136c1e1a9a81f705a63c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8f5d931eaea001dd6833136c1e1a9a81f705a63c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlbI6KCRBK7hj4Ov3rIwAA2U4IAJmAfLPZJsrIS/VTkpowlKhY\\ncnk3h5Gvz5qdGBBHyRqgvuH7K9HaxRVYtw74mW89jqrdLL5sy0X05XLoUXu5uzvq\\nSgFOMgPID22U6fUi/WSuTbLNohWMML66DJoTA5WU0RL775qlbE07TEQotX/0Ap0u\\nORbW7mix56LY5MyC1NmgNsppPnn2jgG/7ozIQxSYGDFu0Yb6o4+H0oC+J0FUuhi7\\nGgu6KPEl1CdJzpYGCcprQt0UGjkEz4R5OHTQhKiqPi4JkXaJmeUtZnETocjEOpEm\\nXlOfjtFnNPyPamipAoOU3wht8sg+Z11EptEUwr83OtPJ05IU+n/cQDobpLLPYXE=\\n=mXkc\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 8f5d931eaea001dd6833136c1e1a9a81f705a63c\\nparent
        c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\\nparent ce154672ab9f71dc175858461a1e06382421c453\\nauthor
        kuba <xnetcat.dev@gmail.com> 1701613194 +0100\\ncommitter GitHub <noreply@github.com>
        1701613194 +0100\\n\\nv4.2.4\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/c932e5dafdf4eafc2d1044e255d96ab6939bf4fe\"},{\"sha\":\"ce154672ab9f71dc175858461a1e06382421c453\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce154672ab9f71dc175858461a1e06382421c453\"}]},{\"sha\":\"9037a96bfb5ebf69e56c99c0f5165808ad90de49\",\"node_id\":\"C_kwDOA71kIdoAKDkwMzdhOTZiZmI1ZWJmNjllNTZjOTljMGY1MTY1ODA4YWQ5MGRlNDk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2023-12-08T14:41:09Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2023-12-08T14:41:09Z\"},\"message\":\"fixed
        mac os ffmpeg download\",\"tree\":{\"sha\":\"08328af6c1e32d06510d0cef106b5a3cebd7feae\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/08328af6c1e32d06510d0cef106b5a3cebd7feae\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9037a96bfb5ebf69e56c99c0f5165808ad90de49\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlcysGCRBK7hj4Ov3rIwAASNEIAKbRsJ3XXM0qIc8zsvEeMGk1\\n3F+NSrzhvia7nVqJEcLQS06fytwYIXIsrGkTQwUq+VS7D0zZd/gGAE8XxDJ9iAgH\\nm5o1FuK/GmZschAUSfk7houNVdWBAl405DewYletGlAmaVsAGrAuQx1r/FvFecN0\\nqgvtIHoW5DqOcYszGWEybGKStE5BCnXYeJv6kdR4OFvXXKbcYTpQPOkdnmZSHc+6\\n+EhxwDufYbRQYeoQiPHAhJm1kay+9cZ5VGwYbp2sRBhFFz9l/cI7SvKF78zk91sj\\nlnKTJByMnChrto9O8aJcWgfWPWLEMcTIQLOg1NytaDnO3CaAstdPY1I3knN58cQ=\\n=lT/6\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree 08328af6c1e32d06510d0cef106b5a3cebd7feae\\nparent
        ce154672ab9f71dc175858461a1e06382421c453\\nauthor kuba <xnetcat.dev@gmail.com>
        1702046469 +0000\\ncommitter GitHub <noreply@github.com> 1702046469 +0000\\n\\nfixed
        mac os ffmpeg download\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9037a96bfb5ebf69e56c99c0f5165808ad90de49\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9037a96bfb5ebf69e56c99c0f5165808ad90de49\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9037a96bfb5ebf69e56c99c0f5165808ad90de49/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ce154672ab9f71dc175858461a1e06382421c453\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce154672ab9f71dc175858461a1e06382421c453\"}]},{\"sha\":\"ff952d3b9fc76906509276b85c4937d2c853bc44\",\"node_id\":\"C_kwDOA71kIdoAKGZmOTUyZDNiOWZjNzY5MDY1MDkyNzZiODVjNDkzN2QyYzg1M2JjNDQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T14:18:47Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T14:18:47Z\"},\"message\":\"always
        skip results with low time match\",\"tree\":{\"sha\":\"b78b46d3a748b727cca159d5376fb1c0104f2291\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b78b46d3a748b727cca159d5376fb1c0104f2291\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ff952d3b9fc76906509276b85c4937d2c853bc44\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff952d3b9fc76906509276b85c4937d2c853bc44\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ff952d3b9fc76906509276b85c4937d2c853bc44\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff952d3b9fc76906509276b85c4937d2c853bc44/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ce154672ab9f71dc175858461a1e06382421c453\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ce154672ab9f71dc175858461a1e06382421c453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ce154672ab9f71dc175858461a1e06382421c453\"}]},{\"sha\":\"18b44f36e3db394fb41eba5e075ca9273dfe1dc2\",\"node_id\":\"C_kwDOA71kIdoAKDE4YjQ0ZjM2ZTNkYjM5NGZiNDFlYmE1ZTA3NWNhOTI3M2RmZTFkYzI\",\"commit\":{\"author\":{\"name\":\"Mahas1\",\"email\":\"82939599+Mahas1@users.noreply.github.com\",\"date\":\"2024-01-05T14:19:30Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-01-05T14:19:30Z\"},\"message\":\"Fix
        SSLError and TypeError when fetching synced lyrics (#1981)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"16d0b7ce22030404f0eec0dff5088ba648e97119\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/16d0b7ce22030404f0eec0dff5088ba648e97119\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/18b44f36e3db394fb41eba5e075ca9273dfe1dc2\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsBcBAABCAAQBQJlmA/yCRBK7hj4Ov3rIwAAltUIAG9joT3n7c4ZR94jsqgYwAlV\\nLtb3BcBjbua+4ahPR5SucxxEXanxLgtbXbMaUmPVTQUajrjLnP/IseaK2kQ0TwAj\\njwqTxzF/NYfaAhje59RCMsZkoEhioojBM3TyZLJSnu7gHC0tzV+kucTGXGdVwEsO\\nbfM36ZbSIgnJW8MKi755l4ukt3FA1OGHSLKgFJkqoW7x9RMvUTelpiegPxubBk1h\\nEGUMXRG9LfA214kelA48/CYM1jSuzG6/++pKMMQMZCmo1ObfU8u1WBWg2R5cKCJo\\nbrSoKGPRMZgHsma6MuRLWTg+LbYCLd4vwHs022hN9VMJUIaQ58nYQ/lvQHu9SpY=\\n=DHgi\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 16d0b7ce22030404f0eec0dff5088ba648e97119\\nparent
        9037a96bfb5ebf69e56c99c0f5165808ad90de49\\nauthor Mahas1 <82939599+Mahas1@users.noreply.github.com>
        1704464370 +0530\\ncommitter GitHub <noreply@github.com> 1704464370 +0100\\n\\nFix
        SSLError and TypeError when fetching synced lyrics (#1981)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/18b44f36e3db394fb41eba5e075ca9273dfe1dc2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/18b44f36e3db394fb41eba5e075ca9273dfe1dc2\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/18b44f36e3db394fb41eba5e075ca9273dfe1dc2/comments\",\"author\":{\"login\":\"Mahasvan\",\"id\":82939599,\"node_id\":\"MDQ6VXNlcjgyOTM5NTk5\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/82939599?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Mahasvan\",\"html_url\":\"https://github.com/Mahasvan\",\"followers_url\":\"https://api.github.com/users/Mahasvan/followers\",\"following_url\":\"https://api.github.com/users/Mahasvan/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Mahasvan/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Mahasvan/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Mahasvan/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Mahasvan/orgs\",\"repos_url\":\"https://api.github.com/users/Mahasvan/repos\",\"events_url\":\"https://api.github.com/users/Mahasvan/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Mahasvan/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9037a96bfb5ebf69e56c99c0f5165808ad90de49\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9037a96bfb5ebf69e56c99c0f5165808ad90de49\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9037a96bfb5ebf69e56c99c0f5165808ad90de49\"}]},{\"sha\":\"62b91dcf78c36eb8d2d9dc19387378bec5106a72\",\"node_id\":\"C_kwDOA71kIdoAKDYyYjkxZGNmNzhjMzZlYjhkMmQ5ZGMxOTM4NzM3OGJlYzUxMDZhNzI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T14:40:28Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T14:40:28Z\"},\"message\":\"Merge
        branch 'dev' of https://github.com/spotDL/spotify-downloader into dev\",\"tree\":{\"sha\":\"b5be6a3594e93d67ba936e10540090784e98963b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b5be6a3594e93d67ba936e10540090784e98963b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/62b91dcf78c36eb8d2d9dc19387378bec5106a72\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/62b91dcf78c36eb8d2d9dc19387378bec5106a72\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/62b91dcf78c36eb8d2d9dc19387378bec5106a72\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/62b91dcf78c36eb8d2d9dc19387378bec5106a72/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ff952d3b9fc76906509276b85c4937d2c853bc44\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ff952d3b9fc76906509276b85c4937d2c853bc44\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ff952d3b9fc76906509276b85c4937d2c853bc44\"},{\"sha\":\"18b44f36e3db394fb41eba5e075ca9273dfe1dc2\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/18b44f36e3db394fb41eba5e075ca9273dfe1dc2\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/18b44f36e3db394fb41eba5e075ca9273dfe1dc2\"}]},{\"sha\":\"f47d77ce62ea61a4bf8554f5d27d90577b4b98fa\",\"node_id\":\"C_kwDOA71kIdoAKGY0N2Q3N2NlNjJlYTYxYTRiZjg1NTRmNWQyN2Q5MDU3N2I0Yjk4ZmE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T15:36:24Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T15:36:24Z\"},\"message\":\"remove
        sync tags from lyrics when saving them in uslt tag\",\"tree\":{\"sha\":\"02fc8f5e87bcc1e7d835a4e5dd136eeb634dcc0d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/02fc8f5e87bcc1e7d835a4e5dd136eeb634dcc0d\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/f47d77ce62ea61a4bf8554f5d27d90577b4b98fa\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f47d77ce62ea61a4bf8554f5d27d90577b4b98fa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f47d77ce62ea61a4bf8554f5d27d90577b4b98fa\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f47d77ce62ea61a4bf8554f5d27d90577b4b98fa/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"62b91dcf78c36eb8d2d9dc19387378bec5106a72\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/62b91dcf78c36eb8d2d9dc19387378bec5106a72\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/62b91dcf78c36eb8d2d9dc19387378bec5106a72\"}]},{\"sha\":\"43d16deb4b67cda4184ff35b92e9475d4bff4453\",\"node_id\":\"C_kwDOA71kIdoAKDQzZDE2ZGViNGI2N2NkYTQxODRmZjM1YjkyZTk0NzVkNGJmZjQ0NTM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T15:36:35Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T15:36:35Z\"},\"message\":\"bump
        reqs\",\"tree\":{\"sha\":\"25494f12e345deacab0bafa4e9a75c1219afff31\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/25494f12e345deacab0bafa4e9a75c1219afff31\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/43d16deb4b67cda4184ff35b92e9475d4bff4453\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43d16deb4b67cda4184ff35b92e9475d4bff4453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/43d16deb4b67cda4184ff35b92e9475d4bff4453\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43d16deb4b67cda4184ff35b92e9475d4bff4453/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"f47d77ce62ea61a4bf8554f5d27d90577b4b98fa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f47d77ce62ea61a4bf8554f5d27d90577b4b98fa\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f47d77ce62ea61a4bf8554f5d27d90577b4b98fa\"}]},{\"sha\":\"306c7c2b402ee3e151dec68a129be214b88e9742\",\"node_id\":\"C_kwDOA71kIdoAKDMwNmM3YzJiNDAyZWUzZTE1MWRlYzY4YTEyOWJlMjE0Yjg4ZTk3NDI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T16:16:53Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T16:16:53Z\"},\"message\":\"bump
        version to v4.2.5\",\"tree\":{\"sha\":\"ddcd5146a2d4d8b7d2ba95181b47f93838bc9b36\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ddcd5146a2d4d8b7d2ba95181b47f93838bc9b36\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/306c7c2b402ee3e151dec68a129be214b88e9742\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/306c7c2b402ee3e151dec68a129be214b88e9742\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/306c7c2b402ee3e151dec68a129be214b88e9742\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/306c7c2b402ee3e151dec68a129be214b88e9742/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"43d16deb4b67cda4184ff35b92e9475d4bff4453\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/43d16deb4b67cda4184ff35b92e9475d4bff4453\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/43d16deb4b67cda4184ff35b92e9475d4bff4453\"}]},{\"sha\":\"08a003487158cdb371903020601099948f5a7323\",\"node_id\":\"C_kwDOA71kIdoAKDA4YTAwMzQ4NzE1OGNkYjM3MTkwMzAyMDYwMTA5OTk0OGY1YTczMjM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T16:51:12Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-01-05T16:51:12Z\"},\"message\":\"get
        correct duration when downloading playlist\",\"tree\":{\"sha\":\"2c123cd83ce7060393b3c8d040baa9f5d136f4b4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/2c123cd83ce7060393b3c8d040baa9f5d136f4b4\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/08a003487158cdb371903020601099948f5a7323\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/08a003487158cdb371903020601099948f5a7323\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/08a003487158cdb371903020601099948f5a7323\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/08a003487158cdb371903020601099948f5a7323/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"306c7c2b402ee3e151dec68a129be214b88e9742\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/306c7c2b402ee3e151dec68a129be214b88e9742\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/306c7c2b402ee3e151dec68a129be214b88e9742\"}]},{\"sha\":\"4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\",\"node_id\":\"C_kwDOA71kIdoAKDRhYmFmMTNjOWJmMmZmOWIzYWJlMWQyNGQ2N2M0MjcxMmNmZDY1MzQ\",\"commit\":{\"author\":{\"name\":\"Pekka
        Ristola\",\"email\":\"pekkarr@protonmail.com\",\"date\":\"2024-01-18T17:19:03Z\"},\"committer\":{\"name\":\"Pekka
        Ristola\",\"email\":\"pekkarr@protonmail.com\",\"date\":\"2024-01-18T17:19:03Z\"},\"message\":\"Fix
        performance issue when ffmpeg outputs a lot of lines\\n\\nChange the python
        code that records the ffmpeg output to not\\nunnecessarily construct a new
        string of the entire output every time\\na new line is read from the process.
        Instead, construct the string only\\nonce at the end, if it is needed.\\n\\nBefore
        this commit the `out` string was constructed in a loop every time\\na new
        line was read, which requires O(n^2) time where n is the number of\\nlines
        in the output. For every loop iteration, the\\n`\\\"\\\\n\\\".join(out_buffer)`
        code constructed a new string by iterating over\\nall the recorded lines so
        far. This commit reduces the time complexity\\nto O(n) because the output
        string is constructed outside of the loop.\\n\\nSpotdl runs ffmpeg with debug
        logging level, which can result in a lot of\\nrecorded output. For example,
        running the `test_download_song` test in\\n`test_entry_point.py` on my Linux
        system with ffmpeg 6.1.1 makes ffmpeg\\noutput a total of 13 MiB of messages,
        consisting of almost 179 000 lines.\\n\\nThis fix reduces the time needed
        for `test_download_song` from 779 s to\\n10 s on my machine, which is a 99%
        performance increase.\",\"tree\":{\"sha\":\"a7fea1debd9ae1080af43d93f6a44893fd825d10\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a7fea1debd9ae1080af43d93f6a44893fd825d10\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\niHUEABYKAB0WIQQbsWzcjIv1na9o/AosIL5xbgUhPgUCZaldhwAKCRAsIL5xbgUh\\nPiVKAP9glCD+LnpkKAWOzgXfTRTnhgk1diU5k6kM8GHNGbWZ7AEA1DVzljEXYCHJ\\n8+oSEQxXqumJjTp+kg3eLXogCf/ZRAQ=\\n=zp9J\\n-----END
        PGP SIGNATURE-----\",\"payload\":\"tree a7fea1debd9ae1080af43d93f6a44893fd825d10\\nparent
        08a003487158cdb371903020601099948f5a7323\\nauthor Pekka Ristola <pekkarr@protonmail.com>
        1705598343 +0200\\ncommitter Pekka Ristola <pekkarr@protonmail.com> 1705598343
        +0200\\n\\nFix performance issue when ffmpeg outputs a lot of lines\\n\\nChange
        the python code that records the ffmpeg output to not\\nunnecessarily construct
        a new string of the entire output every time\\na new line is read from the
        process. Instead, construct the string only\\nonce at the end, if it is needed.\\n\\nBefore
        this commit the `out` string was constructed in a loop every time\\na new
        line was read, which requires O(n^2) time where n is the number of\\nlines
        in the output. For every loop iteration, the\\n`\\\"\\\\n\\\".join(out_buffer)`
        code constructed a new string by iterating over\\nall the recorded lines so
        far. This commit reduces the time complexity\\nto O(n) because the output
        string is constructed outside of the loop.\\n\\nSpotdl runs ffmpeg with debug
        logging level, which can result in a lot of\\nrecorded output. For example,
        running the `test_download_song` test in\\n`test_entry_point.py` on my Linux
        system with ffmpeg 6.1.1 makes ffmpeg\\noutput a total of 13 MiB of messages,
        consisting of almost 179 000 lines.\\n\\nThis fix reduces the time needed
        for `test_download_song` from 779 s to\\n10 s on my machine, which is a 99%
        performance increase.\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534/comments\",\"author\":{\"login\":\"pekkarr\",\"id\":40121471,\"node_id\":\"MDQ6VXNlcjQwMTIxNDcx\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/40121471?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/pekkarr\",\"html_url\":\"https://github.com/pekkarr\",\"followers_url\":\"https://api.github.com/users/pekkarr/followers\",\"following_url\":\"https://api.github.com/users/pekkarr/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/pekkarr/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/pekkarr/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/pekkarr/subscriptions\",\"organizations_url\":\"https://api.github.com/users/pekkarr/orgs\",\"repos_url\":\"https://api.github.com/users/pekkarr/repos\",\"events_url\":\"https://api.github.com/users/pekkarr/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/pekkarr/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"pekkarr\",\"id\":40121471,\"node_id\":\"MDQ6VXNlcjQwMTIxNDcx\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/40121471?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/pekkarr\",\"html_url\":\"https://github.com/pekkarr\",\"followers_url\":\"https://api.github.com/users/pekkarr/followers\",\"following_url\":\"https://api.github.com/users/pekkarr/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/pekkarr/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/pekkarr/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/pekkarr/subscriptions\",\"organizations_url\":\"https://api.github.com/users/pekkarr/orgs\",\"repos_url\":\"https://api.github.com/users/pekkarr/repos\",\"events_url\":\"https://api.github.com/users/pekkarr/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/pekkarr/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"08a003487158cdb371903020601099948f5a7323\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/08a003487158cdb371903020601099948f5a7323\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/08a003487158cdb371903020601099948f5a7323\"}]},{\"sha\":\"1b9bc72f8a541e344bbcf0aaf76f121093fa264e\",\"node_id\":\"C_kwDOA71kIdoAKDFiOWJjNzJmOGE1NDFlMzQ0YmJjZjBhYWY3NmYxMjEwOTNmYTI2NGU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-08T02:21:32Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-08T02:21:32Z\"},\"message\":\"lower
        average match for explicit mismatch\",\"tree\":{\"sha\":\"eed4b260d223ed541323fc0c2e3c0158cbaa3af3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/eed4b260d223ed541323fc0c2e3c0158cbaa3af3\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1b9bc72f8a541e344bbcf0aaf76f121093fa264e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b9bc72f8a541e344bbcf0aaf76f121093fa264e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1b9bc72f8a541e344bbcf0aaf76f121093fa264e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b9bc72f8a541e344bbcf0aaf76f121093fa264e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"08a003487158cdb371903020601099948f5a7323\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/08a003487158cdb371903020601099948f5a7323\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/08a003487158cdb371903020601099948f5a7323\"}]},{\"sha\":\"0e6d224d03086a888413b7d31e0c9ef7303a0ffd\",\"node_id\":\"C_kwDOA71kIdoAKDBlNmQyMjRkMDMwODZhODg4NDEzYjdkMzFlMGM5ZWY3MzAzYTBmZmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-08T02:28:57Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-08T02:28:57Z\"},\"message\":\"format
        with black\",\"tree\":{\"sha\":\"ab5e856c22a2ace406e930780153c8858cc7adfe\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ab5e856c22a2ace406e930780153c8858cc7adfe\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/0e6d224d03086a888413b7d31e0c9ef7303a0ffd\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0e6d224d03086a888413b7d31e0c9ef7303a0ffd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0e6d224d03086a888413b7d31e0c9ef7303a0ffd\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0e6d224d03086a888413b7d31e0c9ef7303a0ffd/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1b9bc72f8a541e344bbcf0aaf76f121093fa264e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1b9bc72f8a541e344bbcf0aaf76f121093fa264e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1b9bc72f8a541e344bbcf0aaf76f121093fa264e\"}]},{\"sha\":\"3dc0eeb1fef5a50cfa16617abb208766dc4981f4\",\"node_id\":\"C_kwDOA71kIdoAKDNkYzBlZWIxZmVmNWE1MGNmYTE2NjE3YWJiMjA4NzY2ZGM0OTgxZjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-08T02:29:04Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-08T02:29:04Z\"},\"message\":\"update
        deps\",\"tree\":{\"sha\":\"2d3cc587d0590cf00f675805b35fc3389f008c93\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/2d3cc587d0590cf00f675805b35fc3389f008c93\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/3dc0eeb1fef5a50cfa16617abb208766dc4981f4\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3dc0eeb1fef5a50cfa16617abb208766dc4981f4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3dc0eeb1fef5a50cfa16617abb208766dc4981f4\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3dc0eeb1fef5a50cfa16617abb208766dc4981f4/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"0e6d224d03086a888413b7d31e0c9ef7303a0ffd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/0e6d224d03086a888413b7d31e0c9ef7303a0ffd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/0e6d224d03086a888413b7d31e0c9ef7303a0ffd\"}]},{\"sha\":\"1988035e64515fbf8196ef52f1263e8fbd4fd15e\",\"node_id\":\"C_kwDOA71kIdoAKDE5ODgwMzVlNjQ1MTVmYmY4MTk2ZWY1MmYxMjYzZThmYmQ0ZmQxNWU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-11T19:30:00Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-11T19:30:00Z\"},\"message\":\"Default
        to the current directory when running a frozen application\",\"tree\":{\"sha\":\"0957907fee0d92bbd067b35cf562a1aee474741b\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0957907fee0d92bbd067b35cf562a1aee474741b\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1988035e64515fbf8196ef52f1263e8fbd4fd15e\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1988035e64515fbf8196ef52f1263e8fbd4fd15e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1988035e64515fbf8196ef52f1263e8fbd4fd15e\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1988035e64515fbf8196ef52f1263e8fbd4fd15e/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"3dc0eeb1fef5a50cfa16617abb208766dc4981f4\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/3dc0eeb1fef5a50cfa16617abb208766dc4981f4\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/3dc0eeb1fef5a50cfa16617abb208766dc4981f4\"}]},{\"sha\":\"45c4edd1072515ea5d2867db1444d3ee74d7cbe3\",\"node_id\":\"C_kwDOA71kIdoAKDQ1YzRlZGQxMDcyNTE1ZWE1ZDI4NjdkYjE0NDRkM2VlNzRkN2NiZTM\",\"commit\":{\"author\":{\"name\":\"Jayden\",\"email\":\"23619946+Silverarmor@users.noreply.github.com\",\"date\":\"2024-02-22T03:28:36Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-02-22T03:28:36Z\"},\"message\":\"Merge
        pull request #2013 from pekkarr/performance-fix\\n\\nFix performance issue
        when ffmpeg outputs a lot of lines\",\"tree\":{\"sha\":\"a7fea1debd9ae1080af43d93f6a44893fd825d10\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a7fea1debd9ae1080af43d93f6a44893fd825d10\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/45c4edd1072515ea5d2867db1444d3ee74d7cbe3\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJl1r9kCRC1aQ7uu5UhlAAAUScQAEvZz8TMNm7l0az7hHgjKBAH\\nGBtuscHRHrnSLexytU+U4qBlZu/0EvJW8rjH5OzjRtHtDAox58lojsF6TtNNiuJW\\nSAL/1Po71qTcSh65YvzceWIP/nZ8In7WL+N91GSbsRct/F+/v3YfaqTbLQvJf6fW\\n9k0T92fCoGzNB6OwJXhwVGNbYP3tBclLic6JkGsMP+2KkXlkSjfD5FM/9EHCpzRz\\n0zV7teTmQdQI2u+0u3kn3/sHhqKCKFZYsOOjeif/bp1+mVJJrw1lmISMtEX07Xhm\\nrPwk4gi4nHkdbOxeZNr+U0SVu67WdzzZGj6BykC8zHuRWxjFKKu8Gh6ag386jh62\\n4Nar7rDsMGMYbbaRm+T3CXTn5nT3QPvuvC2gtB/VeEp0XIWCTuKePHW8nUGWnN0f\\nZ3pEUgDmP2HvAKpWXAasTR9oEqQaiJqwmu2BCDsoZfkfm6D3PTCVjmieyhpzsWaX\\nZXh/4dE7T+P3dYFaCV+JkvZGa6DyZlqYN5Iv4z5DirYOhuCiWlcQmMUBGCgi3UKH\\np81V/476Kw05mAwrsba/BMFU+78Dbyyczj34RIGt0d51AW6m8i9i+0XqNVuLKNOC\\n1DDZEUuHyi7/ZlsCjRT1Ow3dyZhBgeaoAbiMyvRE65C8460kcTfI+wH67TLCy129\\nSo53LKpwDJy7qGDmWK6F\\n=iopN\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree a7fea1debd9ae1080af43d93f6a44893fd825d10\\nparent
        08a003487158cdb371903020601099948f5a7323\\nparent 4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\\nauthor
        Jayden <23619946+Silverarmor@users.noreply.github.com> 1708572516 +1300\\ncommitter
        GitHub <noreply@github.com> 1708572516 +1300\\n\\nMerge pull request #2013
        from pekkarr/performance-fix\\n\\nFix performance issue when ffmpeg outputs
        a lot of lines\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45c4edd1072515ea5d2867db1444d3ee74d7cbe3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/45c4edd1072515ea5d2867db1444d3ee74d7cbe3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45c4edd1072515ea5d2867db1444d3ee74d7cbe3/comments\",\"author\":{\"login\":\"Silverarmor\",\"id\":23619946,\"node_id\":\"MDQ6VXNlcjIzNjE5OTQ2\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/23619946?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Silverarmor\",\"html_url\":\"https://github.com/Silverarmor\",\"followers_url\":\"https://api.github.com/users/Silverarmor/followers\",\"following_url\":\"https://api.github.com/users/Silverarmor/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Silverarmor/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Silverarmor/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Silverarmor/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Silverarmor/orgs\",\"repos_url\":\"https://api.github.com/users/Silverarmor/repos\",\"events_url\":\"https://api.github.com/users/Silverarmor/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Silverarmor/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"08a003487158cdb371903020601099948f5a7323\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/08a003487158cdb371903020601099948f5a7323\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/08a003487158cdb371903020601099948f5a7323\"},{\"sha\":\"4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4abaf13c9bf2ff9b3abe1d24d67c42712cfd6534\"}]},{\"sha\":\"973efa80e82c5e3813273a10658bc3c52109b18a\",\"node_id\":\"C_kwDOA71kIdoAKDk3M2VmYTgwZTgyYzVlMzgxMzI3M2ExMDY1OGJjM2M1MjEwOWIxOGE\",\"commit\":{\"author\":{\"name\":\"Silverarmor\",\"email\":\"23619946+Silverarmor@users.noreply.github.com\",\"date\":\"2024-02-22T03:35:47Z\"},\"committer\":{\"name\":\"Silverarmor\",\"email\":\"23619946+Silverarmor@users.noreply.github.com\",\"date\":\"2024-02-22T03:35:47Z\"},\"message\":\"Merge
        branch 'master' into dev\",\"tree\":{\"sha\":\"a7fea1debd9ae1080af43d93f6a44893fd825d10\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/a7fea1debd9ae1080af43d93f6a44893fd825d10\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/973efa80e82c5e3813273a10658bc3c52109b18a\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/973efa80e82c5e3813273a10658bc3c52109b18a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/973efa80e82c5e3813273a10658bc3c52109b18a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/973efa80e82c5e3813273a10658bc3c52109b18a/comments\",\"author\":{\"login\":\"Silverarmor\",\"id\":23619946,\"node_id\":\"MDQ6VXNlcjIzNjE5OTQ2\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/23619946?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Silverarmor\",\"html_url\":\"https://github.com/Silverarmor\",\"followers_url\":\"https://api.github.com/users/Silverarmor/followers\",\"following_url\":\"https://api.github.com/users/Silverarmor/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Silverarmor/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Silverarmor/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Silverarmor/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Silverarmor/orgs\",\"repos_url\":\"https://api.github.com/users/Silverarmor/repos\",\"events_url\":\"https://api.github.com/users/Silverarmor/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Silverarmor/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"Silverarmor\",\"id\":23619946,\"node_id\":\"MDQ6VXNlcjIzNjE5OTQ2\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/23619946?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/Silverarmor\",\"html_url\":\"https://github.com/Silverarmor\",\"followers_url\":\"https://api.github.com/users/Silverarmor/followers\",\"following_url\":\"https://api.github.com/users/Silverarmor/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/Silverarmor/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/Silverarmor/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/Silverarmor/subscriptions\",\"organizations_url\":\"https://api.github.com/users/Silverarmor/orgs\",\"repos_url\":\"https://api.github.com/users/Silverarmor/repos\",\"events_url\":\"https://api.github.com/users/Silverarmor/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/Silverarmor/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"45c4edd1072515ea5d2867db1444d3ee74d7cbe3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/45c4edd1072515ea5d2867db1444d3ee74d7cbe3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/45c4edd1072515ea5d2867db1444d3ee74d7cbe3\"},{\"sha\":\"f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/f90cfb3f5ab1b15e73d0393d531908d4ac789e7d\"}]},{\"sha\":\"28c287bd2d0bffd340b1e25755a1a0d852b3b033\",\"node_id\":\"C_kwDOA71kIdoAKDI4YzI4N2JkMmQwYmZmZDM0MGIxZTI1NzU1YTFhMGQ4NTJiM2IwMzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-23T01:20:09Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-23T01:20:09Z\"},\"message\":\"Merge
        branch 'dev' of https://github.com/spotDL/spotify-downloader into dev\",\"tree\":{\"sha\":\"83e466ea53a8289ee5a0a90696c32d72ebca3435\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/83e466ea53a8289ee5a0a90696c32d72ebca3435\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/28c287bd2d0bffd340b1e25755a1a0d852b3b033\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/28c287bd2d0bffd340b1e25755a1a0d852b3b033\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/28c287bd2d0bffd340b1e25755a1a0d852b3b033\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/28c287bd2d0bffd340b1e25755a1a0d852b3b033/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1988035e64515fbf8196ef52f1263e8fbd4fd15e\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1988035e64515fbf8196ef52f1263e8fbd4fd15e\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1988035e64515fbf8196ef52f1263e8fbd4fd15e\"},{\"sha\":\"973efa80e82c5e3813273a10658bc3c52109b18a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/973efa80e82c5e3813273a10658bc3c52109b18a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/973efa80e82c5e3813273a10658bc3c52109b18a\"}]},{\"sha\":\"ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\",\"node_id\":\"C_kwDOA71kIdoAKGFjODlhNzM5MmJmYTEyZmI0YjRkNmQ4OWQyZDllM2QwOWQwMGFmMGY\",\"commit\":{\"author\":{\"name\":\"Egehan
        Gunduz\",\"email\":\"egehangunduz@gmail.com\",\"date\":\"2024-02-23T01:24:52Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-02-23T01:24:52Z\"},\"message\":\"Fix
        milliseconds for song initialization (#2028)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"967842cca9d0d770a57b02a9553bff2d08cb9d88\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/967842cca9d0d770a57b02a9553bff2d08cb9d88\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJl1/PkCRC1aQ7uu5UhlAAAwyUQAJKexpDlF+P0zApAU+swdH8M\\nIiZMGR53G2sypZFlmPciQiv/DxHAF4kDhgs/cvHor3I9+VcfwSlGvwgFoKsaYpEQ\\nPXr7b2GHAOJHlYZOo5DjglFMDiveIXUQKDw9zvEg4hiK///7afCZBKP73keaxodG\\nhXFPXYc0eudGnmy2+Mix+l7jtPHv4kZoGmFvB1f35La5Ib8LyG+Ld4DMVHfCU0AL\\nZz8WdSwc+uolkIZJITWUrZ4ywf8po0KtTcKxDUpXnQ4bZeiuXyI0f9WOS0CK5uat\\nF+HO4HtIAP/i5U3SbHISiKboNYrYtPtanStWU/KqebFVovGBUxzdVQ5A5unrL/iW\\nG7f+XjiMd2kq8jrazwllmtaZP0W4YWqcsDXJXmzpTzL/riAU4ieR0i3RLXOZsWIn\\n9A/Kbulwkel/OOyN1Q/ocJtvOlc2eW5v1srIP6hutITR+2ZsMZoaNg4W3b2sOEOo\\np29qIvi0qIbq8uJIq+DXsG/PokoI9qPXOuxGXF+S5rRiCyarx4hf6RfwB/TcGnpR\\nvwZ1D8XN70ylnVfqGHmNtgYXBnPlpWCxFvKDC1R2L3LgOckc34k8zhzMHHHVkQz9\\nDHFmhHZELJjDXHJJ/F2xA0b3RJ+o/CbgWQ7JxHr9yJ3Kqvche2zsgXwQknDxTGSW\\n7KiyVDPJaNrBplycIMoQ\\n=UjsE\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 967842cca9d0d770a57b02a9553bff2d08cb9d88\\nparent
        28c287bd2d0bffd340b1e25755a1a0d852b3b033\\nauthor Egehan Gunduz <egehangunduz@gmail.com>
        1708651492 +0000\\ncommitter GitHub <noreply@github.com> 1708651492 +0100\\n\\nFix
        milliseconds for song initialization (#2028)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f/comments\",\"author\":{\"login\":\"egndz\",\"id\":24767895,\"node_id\":\"MDQ6VXNlcjI0NzY3ODk1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/24767895?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/egndz\",\"html_url\":\"https://github.com/egndz\",\"followers_url\":\"https://api.github.com/users/egndz/followers\",\"following_url\":\"https://api.github.com/users/egndz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/egndz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/egndz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/egndz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/egndz/orgs\",\"repos_url\":\"https://api.github.com/users/egndz/repos\",\"events_url\":\"https://api.github.com/users/egndz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/egndz/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"28c287bd2d0bffd340b1e25755a1a0d852b3b033\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/28c287bd2d0bffd340b1e25755a1a0d852b3b033\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/28c287bd2d0bffd340b1e25755a1a0d852b3b033\"}]},{\"sha\":\"47cde8309fcd4996b1ad26af1b66374875e04d22\",\"node_id\":\"C_kwDOA71kIdoAKDQ3Y2RlODMwOWZjZDQ5OTZiMWFkMjZhZjFiNjYzNzQ4NzVlMDRkMjI\",\"commit\":{\"author\":{\"name\":\"Manuel\",\"email\":\"prodigy7@users.noreply.github.com\",\"date\":\"2024-02-23T01:28:09Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-02-23T01:28:09Z\"},\"message\":\"Update/implement
        skip flag (#2010)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\nCo-authored-by:
        Jayden <23619946+Silverarmor@users.noreply.github.com>\",\"tree\":{\"sha\":\"af3ca3ccd435b2f47139eecb2854c6e6de1294ae\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/af3ca3ccd435b2f47139eecb2854c6e6de1294ae\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/47cde8309fcd4996b1ad26af1b66374875e04d22\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJl1/SpCRC1aQ7uu5UhlAAAV8cQAAF3w5pNOc+NPNtxRBoGsEW2\\n3q6M6SFoohJOUJ83+vJjLCmxtPB8RqXXkcS4fvghhMmd/pbsTgNqDUsujhw9o6pC\\ny6Oz3u4U4/pI35+x1h32JiSBGF4rCwmH5bBaqAy5wQjSNdFxNDD5Fl/2zUUrrb2h\\nIB7vSxRMaP4bGK8GG9NcMyuedP/Z9qBc4nYvzgbWRRvelR+K2fc1+j4R1rzyO5ip\\nXdAiDMHxqNxvY903yCO6NRd+XFGcCya6ggkLTlWpfHmNXFzN9GAABCm3fmFyi5lj\\nJ4Y4t6gxl196VybrICgEErgpeQJqWvOlDby+qNGUTO2cyoAkw7GlUUCyMfdBnuYk\\n67/s6M3kR8K6vGqdPO2usUspeQfLGV1Fweu3/RzWMg0Jk/Z41SJYInzTB/Z1gsNd\\nYPW7V7hgzJ7EvtQh6QiB2t5qy9uTnNa6Mwaxhi6qpVs6J2nKZfsrUcevtLICjVtz\\nxH+N24u+7H6UrwC77FmxMd4Kl91VjAWq0rL/04Q7A0PTsA4THHIADeJaoR4ORvKs\\nsrbBbZ/HlTO1S7FpfFv7tz+xI4ESgvVDYSuVn+vImtC5a2x1ljxgqvGRBkgk4ZrL\\njO9YpfnZUe+IAVYd8Ql7PapSwWC6tTljzIGgTwkHFzDHL33VRYrQfvtsTC/vsrGJ\\nxr4FgYSd/p7GFBu+B2gb\\n=ye9z\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree af3ca3ccd435b2f47139eecb2854c6e6de1294ae\\nparent
        ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\\nauthor Manuel <prodigy7@users.noreply.github.com>
        1708651689 +0100\\ncommitter GitHub <noreply@github.com> 1708651689 +0100\\n\\nUpdate/implement
        skip flag (#2010)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\nCo-authored-by:
        Jayden <23619946+Silverarmor@users.noreply.github.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47cde8309fcd4996b1ad26af1b66374875e04d22\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/47cde8309fcd4996b1ad26af1b66374875e04d22\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47cde8309fcd4996b1ad26af1b66374875e04d22/comments\",\"author\":{\"login\":\"prodigy7\",\"id\":234884,\"node_id\":\"MDQ6VXNlcjIzNDg4NA==\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/234884?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/prodigy7\",\"html_url\":\"https://github.com/prodigy7\",\"followers_url\":\"https://api.github.com/users/prodigy7/followers\",\"following_url\":\"https://api.github.com/users/prodigy7/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/prodigy7/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/prodigy7/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/prodigy7/subscriptions\",\"organizations_url\":\"https://api.github.com/users/prodigy7/orgs\",\"repos_url\":\"https://api.github.com/users/prodigy7/repos\",\"events_url\":\"https://api.github.com/users/prodigy7/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/prodigy7/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ac89a7392bfa12fb4b4d6d89d2d9e3d09d00af0f\"}]},{\"sha\":\"17b1eb07623c526beb1d6e2fcd5482912eb695fd\",\"node_id\":\"C_kwDOA71kIdoAKDE3YjFlYjA3NjIzYzUyNmJlYjFkNmUyZmNkNTQ4MjkxMmViNjk1ZmQ\",\"commit\":{\"author\":{\"name\":\"Bharat
        Nair\",\"email\":\"bharatsnair@gmail.com\",\"date\":\"2024-02-23T01:28:44Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-02-23T01:28:44Z\"},\"message\":\"Fix
        for multiple keywords in `--ignore-albums` option (#2014)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"5df8b3f7e95d291a4070cf41c5247d795a48526f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5df8b3f7e95d291a4070cf41c5247d795a48526f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/17b1eb07623c526beb1d6e2fcd5482912eb695fd\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJl1/TMCRC1aQ7uu5UhlAAA+IMQABW7JhMBZiRLoLE7jqS730qR\\nmhY9w38wg1RHAe8fVLliArn9dtCmkhnY3xRqXwQI0S38MnWZlSJZquryx6lP8Fos\\nfXGVsoepXe7z0d6KLX1Q5nXSwb3kdAK/Tq09kWLdRO6O1STHmtwdTynQ9Fc+fX2t\\n8KDyHNN+klqitPfgyxs16lUsKGvMEO2JkITjNEpDrMQdhXo4XiC9PvdC2/qByxcK\\nw7WQnDy6C3LzkUNZb408/6GiFhppVtBZ8A6gFWcr/W+lOjrT7fg6BIIBEvbwSZK9\\nTVsZsDBc0t0WQZuYSCtkyBCJ4UrYDbjXzLEIEF/STtPNk6sO/lptyScgud82sblh\\nXDVe05Yq1Vl7AF5vMiEktSEKHpZPm2EIH/p//5uoFQVnk1ET7G4Lnj6GwAPKzJIM\\nzVNhHPubTmp/c5ioqxA3sArT1gKK+yNbCLfqpW4eQiylo5jF5/Xt/ejzq7O4+CPT\\nzrwlo0+8r/qifGbhSrlh6L25MM5gfbgivO8ie+oqDHBZRXdNZbedNhqSAp/YFVvb\\nsRLF2qluCDuTHK9HZBaBb+1iVTceeeNgNPDdai4CUSsQCUPTK8wN3GuAdBY6nvuD\\nzQ7/xeK/vudozsqRifKcgZkgIOJ3OHCpvF6gueEmGBEQEpV2V/V4W9NRSIpC7TIW\\nwTIVhm6Udr4M8l99vMR5\\n=+iIX\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 5df8b3f7e95d291a4070cf41c5247d795a48526f\\nparent
        47cde8309fcd4996b1ad26af1b66374875e04d22\\nauthor Bharat Nair <bharatsnair@gmail.com>
        1708651724 +0530\\ncommitter GitHub <noreply@github.com> 1708651724 +0100\\n\\nFix
        for multiple keywords in `--ignore-albums` option (#2014)\\n\\nCo-authored-by:
        kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/17b1eb07623c526beb1d6e2fcd5482912eb695fd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/17b1eb07623c526beb1d6e2fcd5482912eb695fd\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/17b1eb07623c526beb1d6e2fcd5482912eb695fd/comments\",\"author\":{\"login\":\"bharat-nair\",\"id\":10357994,\"node_id\":\"MDQ6VXNlcjEwMzU3OTk0\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/10357994?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/bharat-nair\",\"html_url\":\"https://github.com/bharat-nair\",\"followers_url\":\"https://api.github.com/users/bharat-nair/followers\",\"following_url\":\"https://api.github.com/users/bharat-nair/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/bharat-nair/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/bharat-nair/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/bharat-nair/subscriptions\",\"organizations_url\":\"https://api.github.com/users/bharat-nair/orgs\",\"repos_url\":\"https://api.github.com/users/bharat-nair/repos\",\"events_url\":\"https://api.github.com/users/bharat-nair/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/bharat-nair/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"47cde8309fcd4996b1ad26af1b66374875e04d22\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/47cde8309fcd4996b1ad26af1b66374875e04d22\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/47cde8309fcd4996b1ad26af1b66374875e04d22\"}]},{\"sha\":\"7cb2afcbbbc607360e6a37440c8ea97d897e727c\",\"node_id\":\"C_kwDOA71kIdoAKDdjYjJhZmNiYmJjNjA3MzYwZTZhMzc0NDBjOGVhOTdkODk3ZTcyN2M\",\"commit\":{\"author\":{\"name\":\"Egehan
        Gunduz\",\"email\":\"egehangunduz@gmail.com\",\"date\":\"2024-02-25T00:57:27Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-02-25T00:57:27Z\"},\"message\":\"Add
        Skip Album Art Functionality (#2032)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\",\"tree\":{\"sha\":\"b5f851e8b58bb3611ce5c3bc5950cd47b60ec471\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b5f851e8b58bb3611ce5c3bc5950cd47b60ec471\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/7cb2afcbbbc607360e6a37440c8ea97d897e727c\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJl2pB3CRC1aQ7uu5UhlAAAh+MQAK47ng8N2Fprd7n/Kpexu+tr\\n6TWMn+e71zUl6edo8UwICaY6UMqO78k7RAP/32nO7hEoGN2O52lcyCVYe3I9Fu9R\\nCbS4a8XRwJnckaFhog+fvOIk3d9w1I27fc7Emt7gWRKmnQ5JKYHBz/AH7vFHZc8Q\\n9hGn54nyc8E88kbqvIz9YgyhFj6YQx6zNLNmA5SlJl3BvPGNrYOitqxVQakGNg8i\\n3JomxhqVlY7oudXvfoFuwDjwtqq5woc9qbDzsQ3KS0kxy2+JInBkXiBqzfGarZNL\\nWgK3gVyUtQ+N3fE8rkFr0PyoEPMMin50sTTjt1957BWLPq4XGrogG/W/NdW9amIN\\nTrmWOykLjvzGPxSKIaineKTGqfoBMYSunXVSqaW6p33WcyVgyY24ooT4UwTjOnge\\n91MTUp4DFb8C/0+Nq7pRaj96bZcPQ4wh8KCSqQmqdcWEDRBEHcvCQG5SkmhgCvYq\\nILbJGtbUduu9ndB6G3ZXwO6GzvhW4pbSFboIjwU7vlNJbC4R6m9SLnqg/R9z1ci/\\nqUuWp8pLwZy/J/tg32s9B6ECF0Kk05bBp9JEBDwxtUs3ysoI1FI1dnrKTYnk0f20\\nOqRRpRdnDgKbjXvOAJY8V/ZiRIX7g1mt1P8LJvpxRsl/3Q8iHembUWZC0KIrNlYM\\n2sreLTpGwxU3eyuTCx11\\n=ucWA\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree b5f851e8b58bb3611ce5c3bc5950cd47b60ec471\\nparent
        17b1eb07623c526beb1d6e2fcd5482912eb695fd\\nauthor Egehan Gunduz <egehangunduz@gmail.com>
        1708822647 +0000\\ncommitter GitHub <noreply@github.com> 1708822647 +0100\\n\\nAdd
        Skip Album Art Functionality (#2032)\\n\\nCo-authored-by: kuba <xnetcat.dev@gmail.com>\\r\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7cb2afcbbbc607360e6a37440c8ea97d897e727c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7cb2afcbbbc607360e6a37440c8ea97d897e727c\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7cb2afcbbbc607360e6a37440c8ea97d897e727c/comments\",\"author\":{\"login\":\"egndz\",\"id\":24767895,\"node_id\":\"MDQ6VXNlcjI0NzY3ODk1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/24767895?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/egndz\",\"html_url\":\"https://github.com/egndz\",\"followers_url\":\"https://api.github.com/users/egndz/followers\",\"following_url\":\"https://api.github.com/users/egndz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/egndz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/egndz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/egndz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/egndz/orgs\",\"repos_url\":\"https://api.github.com/users/egndz/repos\",\"events_url\":\"https://api.github.com/users/egndz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/egndz/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"17b1eb07623c526beb1d6e2fcd5482912eb695fd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/17b1eb07623c526beb1d6e2fcd5482912eb695fd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/17b1eb07623c526beb1d6e2fcd5482912eb695fd\"}]},{\"sha\":\"789d0561fd27ec03b2be1a876eb13869f7bd8873\",\"node_id\":\"C_kwDOA71kIdoAKDc4OWQwNTYxZmQyN2VjMDNiMmJlMWE4NzZlYjEzODY5ZjdiZDg4NzM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:03:23Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:03:23Z\"},\"message\":\"improved
        time match\",\"tree\":{\"sha\":\"69b6f9540adcda523e9843fa6245f88c92d8ac19\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/69b6f9540adcda523e9843fa6245f88c92d8ac19\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/789d0561fd27ec03b2be1a876eb13869f7bd8873\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/789d0561fd27ec03b2be1a876eb13869f7bd8873\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/789d0561fd27ec03b2be1a876eb13869f7bd8873\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/789d0561fd27ec03b2be1a876eb13869f7bd8873/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"7cb2afcbbbc607360e6a37440c8ea97d897e727c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/7cb2afcbbbc607360e6a37440c8ea97d897e727c\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/7cb2afcbbbc607360e6a37440c8ea97d897e727c\"}]},{\"sha\":\"149b7a6426c2ab70652f64009ba09ba4169bee16\",\"node_id\":\"C_kwDOA71kIdoAKDE0OWI3YTY0MjZjMmFiNzA2NTJmNjQwMDliYTA5YmE0MTY5YmVlMTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:06:56Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:06:56Z\"},\"message\":\"format
        code\",\"tree\":{\"sha\":\"3993b8074096b177adcc1ba003cef4d73ae98a7f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/3993b8074096b177adcc1ba003cef4d73ae98a7f\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/149b7a6426c2ab70652f64009ba09ba4169bee16\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/149b7a6426c2ab70652f64009ba09ba4169bee16\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/149b7a6426c2ab70652f64009ba09ba4169bee16\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/149b7a6426c2ab70652f64009ba09ba4169bee16/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"789d0561fd27ec03b2be1a876eb13869f7bd8873\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/789d0561fd27ec03b2be1a876eb13869f7bd8873\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/789d0561fd27ec03b2be1a876eb13869f7bd8873\"}]},{\"sha\":\"e4de0318ddf5a92bff0f207317f7a7e5c349adc1\",\"node_id\":\"C_kwDOA71kIdoAKGU0ZGUwMzE4ZGRmNWE5MmJmZjBmMjA3MzE3ZjdhN2U1YzM0OWFkYzE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:33:33Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:33:33Z\"},\"message\":\"improved
        lyrics matching\",\"tree\":{\"sha\":\"98c1ef01c5a9cb13d8b8f70daabb52a644ef89b8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/98c1ef01c5a9cb13d8b8f70daabb52a644ef89b8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e4de0318ddf5a92bff0f207317f7a7e5c349adc1\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4de0318ddf5a92bff0f207317f7a7e5c349adc1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e4de0318ddf5a92bff0f207317f7a7e5c349adc1\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4de0318ddf5a92bff0f207317f7a7e5c349adc1/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"149b7a6426c2ab70652f64009ba09ba4169bee16\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/149b7a6426c2ab70652f64009ba09ba4169bee16\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/149b7a6426c2ab70652f64009ba09ba4169bee16\"}]},{\"sha\":\"42360089ab22755a27601462c57600d5e8be4b16\",\"node_id\":\"C_kwDOA71kIdoAKDQyMzYwMDg5YWIyMjc1NWEyNzYwMTQ2MmM1NzYwMGQ1ZThiZTRiMTY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:33:40Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:33:40Z\"},\"message\":\"format
        code 2\",\"tree\":{\"sha\":\"b888803987362e912af905f002ccd78a7faa4334\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/b888803987362e912af905f002ccd78a7faa4334\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/42360089ab22755a27601462c57600d5e8be4b16\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/42360089ab22755a27601462c57600d5e8be4b16\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/42360089ab22755a27601462c57600d5e8be4b16\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/42360089ab22755a27601462c57600d5e8be4b16/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e4de0318ddf5a92bff0f207317f7a7e5c349adc1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e4de0318ddf5a92bff0f207317f7a7e5c349adc1\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e4de0318ddf5a92bff0f207317f7a7e5c349adc1\"}]},{\"sha\":\"b0c268c39e3d09bc60ee9772e89f6bfc8934afdb\",\"node_id\":\"C_kwDOA71kIdoAKGIwYzI2OGMzOWUzZDA5YmM2MGVlOTc3MmU4OWY2YmZjODkzNGFmZGI\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:33:47Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:33:47Z\"},\"message\":\"fixed
        tests\",\"tree\":{\"sha\":\"5cf81daf72643cae273c8125fa61f62ef2528913\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/5cf81daf72643cae273c8125fa61f62ef2528913\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b0c268c39e3d09bc60ee9772e89f6bfc8934afdb\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0c268c39e3d09bc60ee9772e89f6bfc8934afdb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b0c268c39e3d09bc60ee9772e89f6bfc8934afdb\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0c268c39e3d09bc60ee9772e89f6bfc8934afdb/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"42360089ab22755a27601462c57600d5e8be4b16\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/42360089ab22755a27601462c57600d5e8be4b16\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/42360089ab22755a27601462c57600d5e8be4b16\"}]},{\"sha\":\"de9c2ed4e3341c176d9d7627103a9333db6940a8\",\"node_id\":\"C_kwDOA71kIdoAKGRlOWMyZWQ0ZTMzNDFjMTc2ZDlkNzYyNzEwM2E5MzMzZGI2OTQwYTg\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:37:26Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T04:37:26Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"ec8f2ccd2a001a5f73f271ccecd73e6183fbd083\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/ec8f2ccd2a001a5f73f271ccecd73e6183fbd083\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/de9c2ed4e3341c176d9d7627103a9333db6940a8\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/de9c2ed4e3341c176d9d7627103a9333db6940a8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/de9c2ed4e3341c176d9d7627103a9333db6940a8\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/de9c2ed4e3341c176d9d7627103a9333db6940a8/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b0c268c39e3d09bc60ee9772e89f6bfc8934afdb\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b0c268c39e3d09bc60ee9772e89f6bfc8934afdb\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b0c268c39e3d09bc60ee9772e89f6bfc8934afdb\"}]},{\"sha\":\"35b5596d0c14b366d384b508f5cfc75163605bed\",\"node_id\":\"C_kwDOA71kIdoAKDM1YjU1OTZkMGMxNGIzNjZkMzg0YjUwOGY1Y2ZjNzUxNjM2MDViZWQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T05:01:57Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-02-25T05:01:57Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"bad07ea3e5dcd30b4bb25014f495badd29d4d73a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bad07ea3e5dcd30b4bb25014f495badd29d4d73a\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/35b5596d0c14b366d384b508f5cfc75163605bed\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/35b5596d0c14b366d384b508f5cfc75163605bed\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/35b5596d0c14b366d384b508f5cfc75163605bed\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/35b5596d0c14b366d384b508f5cfc75163605bed/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"de9c2ed4e3341c176d9d7627103a9333db6940a8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/de9c2ed4e3341c176d9d7627103a9333db6940a8\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/de9c2ed4e3341c176d9d7627103a9333db6940a8\"}]},{\"sha\":\"b95b39cb3d398f029a7e39a0b15d97e42789c79a\",\"node_id\":\"C_kwDOA71kIdoAKGI5NWIzOWNiM2QzOThmMDI5YTdlMzlhMGIxNWQ5N2U0Mjc4OWM3OWE\",\"commit\":{\"author\":{\"name\":\"Egehan
        Gunduz\",\"email\":\"egehangunduz@gmail.com\",\"date\":\"2024-02-26T16:45:43Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-02-26T16:45:43Z\"},\"message\":\"Add
        Album Cover Art Check (#2033)\",\"tree\":{\"sha\":\"17915b5ac896bdf29a81aa6de5464e142b9ff467\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/17915b5ac896bdf29a81aa6de5464e142b9ff467\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/b95b39cb3d398f029a7e39a0b15d97e42789c79a\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJl3MA3CRC1aQ7uu5UhlAAAxIcQAAyIWjwkNmC3Vl8sMjWq0mgx\\nKv6j8DQS/UnpxCfEWTEcK6hDOtK3NOklY6BeW8Jvhs5yz/MeMOnROAqpWUdXeZrE\\nD62BzYHgGvWJrZR3S1pv1RMECJycwS7WIde7Rrgm7Zc4mQnStyDBKiewePV2Wovc\\npwm4Zkw3zpHoo33A7Lny7gndzK+AO5gnQS6ESRPZrkCSF3o2D5slqRssrp9flxck\\n66mIDVBGRVctQwvRIw112xrWuyLYxQeUgXJ2S1RTeDJ0hll2ebayHPQ2U2goL/K7\\ndxnZBQZDUZHHmGqzBx81KrZNc8xe9q2m7tLU0j07VpTKSPQVFVauEgkxqVFjc93+\\n1+5Bm6pmrbS6v8FUsO9DPdk01E0V+FW/8C66sjAgV9ek2Fn8Oh1dTeHLXcDX6RbA\\nZ/o3Kj+FsMHNxb9uWl3lWE57bfSRiD8pkhS+LtezQejm9s7KQXfmgKzkQI/Hy0xt\\nx1+hQYtHmQpiAutYFULL319WSym/AiLEC354p9LImmflUKVRQa2MzID+RqgFxo/j\\nUcue8SieBny+aMfe9+Pz85j4X32EOMYBBzTgeHgTTFPQn/2lVzuQii7yYH53JIPk\\nU6qBWP6/DzMRnDHWPAXGWD2tzfh86rbYRzUjbC/TPeHVGPylFF34LKzw7pMplp9A\\n6M8cOGSv9lWuCgwyKSro\\n=4BuT\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 17915b5ac896bdf29a81aa6de5464e142b9ff467\\nparent
        35b5596d0c14b366d384b508f5cfc75163605bed\\nauthor Egehan Gunduz <egehangunduz@gmail.com>
        1708965943 +0000\\ncommitter GitHub <noreply@github.com> 1708965943 +0100\\n\\nAdd
        Album Cover Art Check (#2033)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b95b39cb3d398f029a7e39a0b15d97e42789c79a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b95b39cb3d398f029a7e39a0b15d97e42789c79a\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b95b39cb3d398f029a7e39a0b15d97e42789c79a/comments\",\"author\":{\"login\":\"egndz\",\"id\":24767895,\"node_id\":\"MDQ6VXNlcjI0NzY3ODk1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/24767895?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/egndz\",\"html_url\":\"https://github.com/egndz\",\"followers_url\":\"https://api.github.com/users/egndz/followers\",\"following_url\":\"https://api.github.com/users/egndz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/egndz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/egndz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/egndz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/egndz/orgs\",\"repos_url\":\"https://api.github.com/users/egndz/repos\",\"events_url\":\"https://api.github.com/users/egndz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/egndz/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"35b5596d0c14b366d384b508f5cfc75163605bed\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/35b5596d0c14b366d384b508f5cfc75163605bed\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/35b5596d0c14b366d384b508f5cfc75163605bed\"}]},{\"sha\":\"dc66e0b9b39e819998cab8c5efab303cb48f7cd5\",\"node_id\":\"C_kwDOA71kIdoAKGRjNjZlMGI5YjM5ZTgxOTk5OGNhYjhjNWVmYWIzMDNjYjQ4ZjdjZDU\",\"commit\":{\"author\":{\"name\":\"Rimuru\",\"email\":\"9720969+rimurum@users.noreply.github.com\",\"date\":\"2024-03-09T22:37:27Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-03-09T22:37:27Z\"},\"message\":\"Update
        termux.sh (#2038)\",\"tree\":{\"sha\":\"9668bfb6537cc5e3bdcf5d23ea4fea79b6ffdd13\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9668bfb6537cc5e3bdcf5d23ea4fea79b6ffdd13\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/dc66e0b9b39e819998cab8c5efab303cb48f7cd5\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJl7OSnCRC1aQ7uu5UhlAAALj0QAGdxgDVSHUyAew+nDMzDLo71\\nyV8zGJXjtdkoDLoUAulor1jQUtEb9cswGAzGQ/7/dCqcDpejrZaOvWpEouHkjyMH\\nWTyVNk2BRFWhNYiXTjb5b532TGt+nL8ojVYQO0WMGzVN/6fqbo7TeHSdl9w3zfao\\nZoL4zp1kz3m/PidwxoKvMxYjrEKxJTtLSy1KnWISmNCsdNbhkMwy1mbb3oZJDXMK\\nxGsrRya6X18wjvnTr5FlSQtujPcr5JtgBgR5Pq1A1HqVZC6DKKXt8gOz/Pidu/KG\\n59uxS0gvTe7cTm0rL/GkyrNH4qGhvY3trfYDxFfRYpOEfxDN8Esc61ByEUliUq6q\\nd6g9NGMsM/No6jCbym2gkXO9YFy2sKNJ/m979yw3ZeiBkS5m4otnRWlX8aNKF3yf\\nc6Bp527lI1CB6KIkYvJ9Fsbw7WjDJtvn/iVV6tzD17vbaUSX4fLXDIgulhvUci9s\\ni9UD0+j8aO5VTSHWDw+/UJE064UcXX+FFa2d0OAzorODM8s8NuFD2Ub1110XOHVN\\nFg0rVlok+j2RHSjKxyAQlkm/E01jWoK/fKiRqJzrzokHnBdcV8XySyVLh9w1y7Hf\\nzr2eEWwxJPQU1pceXVc+TbU70TuBLe/BSTRjG9Td6uSDoDC/DDLC8XsJxt8KQaDV\\n0ASnZa/jCjeY03ykkKwy\\n=IB57\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 9668bfb6537cc5e3bdcf5d23ea4fea79b6ffdd13\\nparent
        b95b39cb3d398f029a7e39a0b15d97e42789c79a\\nauthor Rimuru <9720969+rimurum@users.noreply.github.com>
        1710023847 +0200\\ncommitter GitHub <noreply@github.com> 1710023847 +0100\\n\\nUpdate
        termux.sh (#2038)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dc66e0b9b39e819998cab8c5efab303cb48f7cd5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/dc66e0b9b39e819998cab8c5efab303cb48f7cd5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dc66e0b9b39e819998cab8c5efab303cb48f7cd5/comments\",\"author\":{\"login\":\"rimurum\",\"id\":9720969,\"node_id\":\"MDQ6VXNlcjk3MjA5Njk=\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/9720969?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/rimurum\",\"html_url\":\"https://github.com/rimurum\",\"followers_url\":\"https://api.github.com/users/rimurum/followers\",\"following_url\":\"https://api.github.com/users/rimurum/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/rimurum/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/rimurum/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/rimurum/subscriptions\",\"organizations_url\":\"https://api.github.com/users/rimurum/orgs\",\"repos_url\":\"https://api.github.com/users/rimurum/repos\",\"events_url\":\"https://api.github.com/users/rimurum/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/rimurum/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"b95b39cb3d398f029a7e39a0b15d97e42789c79a\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/b95b39cb3d398f029a7e39a0b15d97e42789c79a\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/b95b39cb3d398f029a7e39a0b15d97e42789c79a\"}]},{\"sha\":\"ec3c001ed9735cba2d32fdb392b71e0b5221551f\",\"node_id\":\"C_kwDOA71kIdoAKGVjM2MwMDFlZDk3MzVjYmEyZDMyZmRiMzkyYjcxZTBiNTIyMTU1MWY\",\"commit\":{\"author\":{\"name\":\"Egehan
        Gunduz\",\"email\":\"egehangunduz@gmail.com\",\"date\":\"2024-03-27T22:06:39Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-03-27T22:06:39Z\"},\"message\":\"Add
        filtering by album type (#2048)\",\"tree\":{\"sha\":\"884ba9607bedeee4867fa79176cda847a5ccc187\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/884ba9607bedeee4867fa79176cda847a5ccc187\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ec3c001ed9735cba2d32fdb392b71e0b5221551f\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJmBJhvCRC1aQ7uu5UhlAAAkkIQAAnqcJW8IYA/ZwoeAr1tPFa5\\nLIs7poh4/P2bRXRzBz24wQp3CuWK+HiMO3Id2h5i7Ti5zD2J8w21KglzQ/IUJt3B\\njb4ITsaSAAii8+6Y8vXrqEOYWnSikaq/OCmWqOg69nmrTlaUSbavaWfA4Kyki8Uz\\ny2VrYWNHfRi0gBF5dMLfIJvxe2v9NtuMLWFYLKK3FWEw0VDawLHFl1u/sqeHia2U\\nsOHo33eU/4gozA2aYinLFBJFqgkoObzGWqNVSIk/XzyYtHCE6HQmpIcZjJw/Gvhr\\nNA6vqWe0CdErICD3BbFDbBM4zkXkM2EgyP/Z8wQ8g7e7Ni2PRo0Re8oZQsE5X3+D\\nvcOLDp4APu4iv3LGTrm70eSPJ+JXnwqnBOItf5RoVYeJz6PBMVZqrwu9+YspwpiG\\ncT4IO2Z00N5gUeT1rTxdbNMytom66BvzS3X95SdIHDfP1zIoUk1KVkuvPvtlOC2c\\nqlTLdzsWE0+xrllkC7ZAbQstSnjumARoDAW0h8icocjiKTFj8m9GVGLWLfJcb389\\nl2GgYvSbeuwyAl62DB5QUWdEsXTcXQ31/KVOE9L+eV0SnI7SvASbKLpuLHAQuu5l\\nEPWmU7+iMbJh7dfnjACoyoNApNlLG8aSR9/bgU4hdcwEpsQWP3vFsHwrUce+tM2B\\n2Kd3olRaxLgt96EZi8yq\\n=sZpL\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree 884ba9607bedeee4867fa79176cda847a5ccc187\\nparent
        dc66e0b9b39e819998cab8c5efab303cb48f7cd5\\nauthor Egehan Gunduz <egehangunduz@gmail.com>
        1711577199 +0000\\ncommitter GitHub <noreply@github.com> 1711577199 +0100\\n\\nAdd
        filtering by album type (#2048)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ec3c001ed9735cba2d32fdb392b71e0b5221551f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ec3c001ed9735cba2d32fdb392b71e0b5221551f\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ec3c001ed9735cba2d32fdb392b71e0b5221551f/comments\",\"author\":{\"login\":\"egndz\",\"id\":24767895,\"node_id\":\"MDQ6VXNlcjI0NzY3ODk1\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/24767895?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/egndz\",\"html_url\":\"https://github.com/egndz\",\"followers_url\":\"https://api.github.com/users/egndz/followers\",\"following_url\":\"https://api.github.com/users/egndz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/egndz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/egndz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/egndz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/egndz/orgs\",\"repos_url\":\"https://api.github.com/users/egndz/repos\",\"events_url\":\"https://api.github.com/users/egndz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/egndz/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"dc66e0b9b39e819998cab8c5efab303cb48f7cd5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/dc66e0b9b39e819998cab8c5efab303cb48f7cd5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/dc66e0b9b39e819998cab8c5efab303cb48f7cd5\"}]},{\"sha\":\"ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021\",\"node_id\":\"C_kwDOA71kIdoAKGViZGY5NzBjOTVkNWQ5ZWNiNjVmY2E3YjFjY2QzZmRlMGIxMmUwMjE\",\"commit\":{\"author\":{\"name\":\"Rimuru\",\"email\":\"9720969+rimurum@users.noreply.github.com\",\"date\":\"2024-03-27T22:07:26Z\"},\"committer\":{\"name\":\"GitHub\",\"email\":\"noreply@github.com\",\"date\":\"2024-03-27T22:07:26Z\"},\"message\":\"Fixing
        termux installation (#2042)\",\"tree\":{\"sha\":\"da4fc85aeacdf6535bd5a31dc2dc189d29093faa\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/da4fc85aeacdf6535bd5a31dc2dc189d29093faa\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021\",\"comment_count\":0,\"verification\":{\"verified\":true,\"reason\":\"valid\",\"signature\":\"-----BEGIN
        PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJmBJieCRC1aQ7uu5UhlAAAViQQADeoLgEYitd7p+XBQlw3KZ3E\\nYZORQueTKGy45Exi7GFETx+qB+QZzyPE5YHk4gNXdzskix/9n0mHSR9gOYa8iMRy\\nEb8dZzst9vCVO05BZjhLG+B9xpS7T085wG+VrAvmjnml4coog9CcGzHk5phtKhvD\\n9ulaR+fjDh8rQhhlyQW/fIoFkOsMAd2iwz0YauKjuMYH+q3ORCYh+IgxljKboyyq\\nHog7+UaP8Gk4Y8pwNYCVS6+AQNdSD2IH7ywJo7RhrTZNPD/KZLFqs71oTKC6Aw2M\\nbj7N/dGpN1GSYDIl376qTWQOLh+YkPUyn4Ra0rvSm6aJmmVM69xzp/pEFF+zGez3\\nhYASQWVLBffu49mufAC4A8KQervvW7KuY63avthiC0+xV57gvJG7/EyrOkoQYAtF\\nxI1gAESgEc7baM4axH6EA2ch2e5d1jSNguRFLgiyhMP3zOskEeFp5iGHiiIIC2Fa\\nKnUj7rdyrFw0/bTzNnU+dfo0MCCYNS9Cnf1ZZ04UPOn2nibNyXkVQMOr/i+jbZNw\\nkp2cZuIWHiUTHSlgVfBQEKGiDGkvGa/GDSwRtXapZbJSvuuWnyClfdy2NmuttKt2\\nLcQM9a/pLYopRH1De1XwdSe3AUUOe+1lbrYfG8aDmDi0x31qhlPB96mIS96qs3KE\\n4i3AxfDY4Jno1saFszym\\n=eqaI\\n-----END
        PGP SIGNATURE-----\\n\",\"payload\":\"tree da4fc85aeacdf6535bd5a31dc2dc189d29093faa\\nparent
        ec3c001ed9735cba2d32fdb392b71e0b5221551f\\nauthor Rimuru <9720969+rimurum@users.noreply.github.com>
        1711577246 +0200\\ncommitter GitHub <noreply@github.com> 1711577246 +0100\\n\\nFixing
        termux installation (#2042)\\n\\n\"}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021/comments\",\"author\":{\"login\":\"rimurum\",\"id\":9720969,\"node_id\":\"MDQ6VXNlcjk3MjA5Njk=\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/9720969?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/rimurum\",\"html_url\":\"https://github.com/rimurum\",\"followers_url\":\"https://api.github.com/users/rimurum/followers\",\"following_url\":\"https://api.github.com/users/rimurum/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/rimurum/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/rimurum/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/rimurum/subscriptions\",\"organizations_url\":\"https://api.github.com/users/rimurum/orgs\",\"repos_url\":\"https://api.github.com/users/rimurum/repos\",\"events_url\":\"https://api.github.com/users/rimurum/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/rimurum/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"web-flow\",\"id\":19864447,\"node_id\":\"MDQ6VXNlcjE5ODY0NDQ3\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/19864447?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/web-flow\",\"html_url\":\"https://github.com/web-flow\",\"followers_url\":\"https://api.github.com/users/web-flow/followers\",\"following_url\":\"https://api.github.com/users/web-flow/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/web-flow/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/web-flow/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/web-flow/subscriptions\",\"organizations_url\":\"https://api.github.com/users/web-flow/orgs\",\"repos_url\":\"https://api.github.com/users/web-flow/repos\",\"events_url\":\"https://api.github.com/users/web-flow/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/web-flow/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ec3c001ed9735cba2d32fdb392b71e0b5221551f\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ec3c001ed9735cba2d32fdb392b71e0b5221551f\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ec3c001ed9735cba2d32fdb392b71e0b5221551f\"}]},{\"sha\":\"e485c233d2761f9f94627e4b91e6af45d5683049\",\"node_id\":\"C_kwDOA71kIdoAKGU0ODVjMjMzZDI3NjFmOWY5NDYyN2U0YjkxZTZhZjQ1ZDU2ODMwNDk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:28:33Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:28:33Z\"},\"message\":\"bump
        project requirements\",\"tree\":{\"sha\":\"9f8ad0fedf92f866dab76f4cf040686d195773a8\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/9f8ad0fedf92f866dab76f4cf040686d195773a8\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e485c233d2761f9f94627e4b91e6af45d5683049\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e485c233d2761f9f94627e4b91e6af45d5683049\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e485c233d2761f9f94627e4b91e6af45d5683049\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e485c233d2761f9f94627e4b91e6af45d5683049/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ebdf970c95d5d9ecb65fca7b1ccd3fde0b12e021\"}]},{\"sha\":\"9d0d903a80499e4dab1dc11f3c733f7406615535\",\"node_id\":\"C_kwDOA71kIdoAKDlkMGQ5MDNhODA0OTllNGRhYjFkYzExZjNjNzMzZjc0MDY2MTU1MzU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:28:50Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:28:50Z\"},\"message\":\"change
        download started to processing\",\"tree\":{\"sha\":\"1259b1aca19e30f77d0c490a329ebe67e6a613c0\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/1259b1aca19e30f77d0c490a329ebe67e6a613c0\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/9d0d903a80499e4dab1dc11f3c733f7406615535\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9d0d903a80499e4dab1dc11f3c733f7406615535\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9d0d903a80499e4dab1dc11f3c733f7406615535\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9d0d903a80499e4dab1dc11f3c733f7406615535/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e485c233d2761f9f94627e4b91e6af45d5683049\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e485c233d2761f9f94627e4b91e6af45d5683049\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e485c233d2761f9f94627e4b91e6af45d5683049\"}]},{\"sha\":\"5fdb854f43adef074bf5611bfe198ae01c7ca051\",\"node_id\":\"C_kwDOA71kIdoAKDVmZGI4NTRmNDNhZGVmMDc0YmY1NjExYmZlMTk4YWUwMWM3Y2EwNTE\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:32:43Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:32:43Z\"},\"message\":\"fixed
        pylint warnings\",\"tree\":{\"sha\":\"eb2934fcd9b7c47bdd0e4c7e4759fd35fbd34107\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/eb2934fcd9b7c47bdd0e4c7e4759fd35fbd34107\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/5fdb854f43adef074bf5611bfe198ae01c7ca051\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5fdb854f43adef074bf5611bfe198ae01c7ca051\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5fdb854f43adef074bf5611bfe198ae01c7ca051\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5fdb854f43adef074bf5611bfe198ae01c7ca051/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"9d0d903a80499e4dab1dc11f3c733f7406615535\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/9d0d903a80499e4dab1dc11f3c733f7406615535\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/9d0d903a80499e4dab1dc11f3c733f7406615535\"}]},{\"sha\":\"a6a98ecec680c723f84450752a5d0b799b6ab1f3\",\"node_id\":\"C_kwDOA71kIdoAKGE2YTk4ZWNlYzY4MGM3MjNmODQ0NTA3NTJhNWQwYjc5OWI2YWIxZjM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:54:30Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T14:54:30Z\"},\"message\":\"added
        isrc tag to mp3 files\",\"tree\":{\"sha\":\"15cfd5819a08733be9fd8470cfbd8573abd182c1\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/15cfd5819a08733be9fd8470cfbd8573abd182c1\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/a6a98ecec680c723f84450752a5d0b799b6ab1f3\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a98ecec680c723f84450752a5d0b799b6ab1f3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6a98ecec680c723f84450752a5d0b799b6ab1f3\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a98ecec680c723f84450752a5d0b799b6ab1f3/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"5fdb854f43adef074bf5611bfe198ae01c7ca051\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/5fdb854f43adef074bf5611bfe198ae01c7ca051\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/5fdb854f43adef074bf5611bfe198ae01c7ca051\"}]},{\"sha\":\"ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd\",\"node_id\":\"C_kwDOA71kIdoAKGZmYjlmMmJkZmUyZTA1MGVjZmQ1NmNhZjc0MzZiMmJmMGFjMDcyZmQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:09:43Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:09:43Z\"},\"message\":\"save
        errors when main thread crashes\",\"tree\":{\"sha\":\"c6b16ac60a24775d655036d5d1a0263afaec0205\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/c6b16ac60a24775d655036d5d1a0263afaec0205\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"a6a98ecec680c723f84450752a5d0b799b6ab1f3\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/a6a98ecec680c723f84450752a5d0b799b6ab1f3\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/a6a98ecec680c723f84450752a5d0b799b6ab1f3\"}]},{\"sha\":\"205e1270dc30017d2e00ff77fa526e0aeae23cb5\",\"node_id\":\"C_kwDOA71kIdoAKDIwNWUxMjcwZGMzMDAxN2QyZTAwZmY3N2ZhNTI2ZTBhZWFlMjNjYjU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:33:25Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:33:25Z\"},\"message\":\"update
        the app scope\",\"tree\":{\"sha\":\"160568150ec0a8f90da48bbae01b791ee78e83ea\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/160568150ec0a8f90da48bbae01b791ee78e83ea\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/205e1270dc30017d2e00ff77fa526e0aeae23cb5\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/205e1270dc30017d2e00ff77fa526e0aeae23cb5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/205e1270dc30017d2e00ff77fa526e0aeae23cb5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/205e1270dc30017d2e00ff77fa526e0aeae23cb5/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/ffb9f2bdfe2e050ecfd56caf7436b2bf0ac072fd\"}]},{\"sha\":\"92d333805dd1f8a0a31feefaae309f2a8cd72b50\",\"node_id\":\"C_kwDOA71kIdoAKDkyZDMzMzgwNWRkMWY4YTBhMzFmZWVmYWFlMzA5ZjJhOGNkNzJiNTA\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:33:51Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:33:51Z\"},\"message\":\"split
        get user playlists and get saved playlists to two shortcuts\",\"tree\":{\"sha\":\"0d9348a8047e217c67ef743487445ca04341c2bc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0d9348a8047e217c67ef743487445ca04341c2bc\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/92d333805dd1f8a0a31feefaae309f2a8cd72b50\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/92d333805dd1f8a0a31feefaae309f2a8cd72b50\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/92d333805dd1f8a0a31feefaae309f2a8cd72b50\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/92d333805dd1f8a0a31feefaae309f2a8cd72b50/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"205e1270dc30017d2e00ff77fa526e0aeae23cb5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/205e1270dc30017d2e00ff77fa526e0aeae23cb5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/205e1270dc30017d2e00ff77fa526e0aeae23cb5\"}]},{\"sha\":\"644e4db9e7c6d63c2ba26331342fe21d48ff03a5\",\"node_id\":\"C_kwDOA71kIdoAKDY0NGU0ZGI5ZTdjNmQ2M2MyYmEyNjMzMTM0MmZlMjFkNDhmZjAzYTU\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:34:03Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:34:03Z\"},\"message\":\"black
        .\",\"tree\":{\"sha\":\"492966752391344889f9432cfdf0a86bef0c1bbe\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/492966752391344889f9432cfdf0a86bef0c1bbe\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/644e4db9e7c6d63c2ba26331342fe21d48ff03a5\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/644e4db9e7c6d63c2ba26331342fe21d48ff03a5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/644e4db9e7c6d63c2ba26331342fe21d48ff03a5\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/644e4db9e7c6d63c2ba26331342fe21d48ff03a5/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"92d333805dd1f8a0a31feefaae309f2a8cd72b50\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/92d333805dd1f8a0a31feefaae309f2a8cd72b50\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/92d333805dd1f8a0a31feefaae309f2a8cd72b50\"}]},{\"sha\":\"1e59b569d536338c465032f91a55c18ca1466399\",\"node_id\":\"C_kwDOA71kIdoAKDFlNTliNTY5ZDUzNjMzOGM0NjUwMzJmOTFhNTVjMThjYTE0NjYzOTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:36:32Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:36:32Z\"},\"message\":\"update
        query help msg\",\"tree\":{\"sha\":\"d0714e42a26aed00a43bd1ddcd8cfaa119824869\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d0714e42a26aed00a43bd1ddcd8cfaa119824869\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/1e59b569d536338c465032f91a55c18ca1466399\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e59b569d536338c465032f91a55c18ca1466399\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1e59b569d536338c465032f91a55c18ca1466399\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e59b569d536338c465032f91a55c18ca1466399/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"644e4db9e7c6d63c2ba26331342fe21d48ff03a5\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/644e4db9e7c6d63c2ba26331342fe21d48ff03a5\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/644e4db9e7c6d63c2ba26331342fe21d48ff03a5\"}]},{\"sha\":\"d5416ab9bae8731dbde9084062afc152c9441aac\",\"node_id\":\"C_kwDOA71kIdoAKGQ1NDE2YWI5YmFlODczMWRiZGU5MDg0MDYyYWZjMTUyYzk0NDFhYWM\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:46:39Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T15:46:39Z\"},\"message\":\"added
        artist id to song object\",\"tree\":{\"sha\":\"bf094c3305f6322b9565c5ce26528acd2c6ed9df\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/bf094c3305f6322b9565c5ce26528acd2c6ed9df\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/d5416ab9bae8731dbde9084062afc152c9441aac\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d5416ab9bae8731dbde9084062afc152c9441aac\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d5416ab9bae8731dbde9084062afc152c9441aac\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d5416ab9bae8731dbde9084062afc152c9441aac/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"1e59b569d536338c465032f91a55c18ca1466399\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/1e59b569d536338c465032f91a55c18ca1466399\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/1e59b569d536338c465032f91a55c18ca1466399\"}]},{\"sha\":\"e216fa5f8e76cfa1afe8949fb1400434a63df8c6\",\"node_id\":\"C_kwDOA71kIdoAKGUyMTZmYTVmOGU3NmNmYTFhZmU4OTQ5ZmIxNDAwNDM0YTYzZGY4YzY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T16:35:36Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T16:35:36Z\"},\"message\":\"disable
        lyrics testing\",\"tree\":{\"sha\":\"0a1d3011686d9e6bc7b03c7681dc08f9cc8b8254\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/0a1d3011686d9e6bc7b03c7681dc08f9cc8b8254\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/e216fa5f8e76cfa1afe8949fb1400434a63df8c6\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e216fa5f8e76cfa1afe8949fb1400434a63df8c6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e216fa5f8e76cfa1afe8949fb1400434a63df8c6\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e216fa5f8e76cfa1afe8949fb1400434a63df8c6/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"d5416ab9bae8731dbde9084062afc152c9441aac\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/d5416ab9bae8731dbde9084062afc152c9441aac\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/d5416ab9bae8731dbde9084062afc152c9441aac\"}]},{\"sha\":\"4e231e65df54f4c48608144bd79f1b9f984f3164\",\"node_id\":\"C_kwDOA71kIdoAKDRlMjMxZTY1ZGY1NGY0YzQ4NjA4MTQ0YmQ3OWYxYjlmOTg0ZjMxNjQ\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T16:36:00Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T16:36:00Z\"},\"message\":\"Update
        test_matching.py\",\"tree\":{\"sha\":\"d0a411434a16d0530dc9aa7f4c5ddeaa71b45941\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/d0a411434a16d0530dc9aa7f4c5ddeaa71b45941\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/4e231e65df54f4c48608144bd79f1b9f984f3164\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e231e65df54f4c48608144bd79f1b9f984f3164\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4e231e65df54f4c48608144bd79f1b9f984f3164\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e231e65df54f4c48608144bd79f1b9f984f3164/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"e216fa5f8e76cfa1afe8949fb1400434a63df8c6\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/e216fa5f8e76cfa1afe8949fb1400434a63df8c6\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/e216fa5f8e76cfa1afe8949fb1400434a63df8c6\"}]},{\"sha\":\"83149da5a5b0b25c7c973498f8b2877f64c971ef\",\"node_id\":\"C_kwDOA71kIdoAKDgzMTQ5ZGE1YTViMGIyNWM3Yzk3MzQ5OGY4YjI4NzdmNjRjOTcxZWY\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T17:18:16Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T17:18:16Z\"},\"message\":\"fixing
        tests\",\"tree\":{\"sha\":\"8909601c0b2492a2f11a8600b710bd4d3101082c\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/8909601c0b2492a2f11a8600b710bd4d3101082c\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/83149da5a5b0b25c7c973498f8b2877f64c971ef\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83149da5a5b0b25c7c973498f8b2877f64c971ef\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/83149da5a5b0b25c7c973498f8b2877f64c971ef\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83149da5a5b0b25c7c973498f8b2877f64c971ef/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"4e231e65df54f4c48608144bd79f1b9f984f3164\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/4e231e65df54f4c48608144bd79f1b9f984f3164\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/4e231e65df54f4c48608144bd79f1b9f984f3164\"}]},{\"sha\":\"866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"node_id\":\"C_kwDOA71kIdoAKDg2NmVkMTRmZjM3ZTJmOTFlZDliOWIwZmFlNzUwMTcyMTZmYjA5MTk\",\"commit\":{\"author\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T17:47:29Z\"},\"committer\":{\"name\":\"kuba\",\"email\":\"xnetcat.dev@gmail.com\",\"date\":\"2024-03-28T17:47:29Z\"},\"message\":\"update
        cassettes\",\"tree\":{\"sha\":\"496ead3e0ae66b16c2bcc7394dabc92761ea52bc\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/trees/496ead3e0ae66b16c2bcc7394dabc92761ea52bc\"},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/git/commits/866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"comments_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/866ed14ff37e2f91ed9b9b0fae75017216fb0919/comments\",\"author\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"xnetcat\",\"id\":42355410,\"node_id\":\"MDQ6VXNlcjQyMzU1NDEw\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/42355410?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/xnetcat\",\"html_url\":\"https://github.com/xnetcat\",\"followers_url\":\"https://api.github.com/users/xnetcat/followers\",\"following_url\":\"https://api.github.com/users/xnetcat/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/xnetcat/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/xnetcat/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/xnetcat/subscriptions\",\"organizations_url\":\"https://api.github.com/users/xnetcat/orgs\",\"repos_url\":\"https://api.github.com/users/xnetcat/repos\",\"events_url\":\"https://api.github.com/users/xnetcat/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/xnetcat/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"83149da5a5b0b25c7c973498f8b2877f64c971ef\",\"url\":\"https://api.github.com/repos/spotDL/spotify-downloader/commits/83149da5a5b0b25c7c973498f8b2877f64c971ef\",\"html_url\":\"https://github.com/spotDL/spotify-downloader/commit/83149da5a5b0b25c7c973498f8b2877f64c971ef\"}]}],\"files\":[{\"sha\":\"102e16e9b766fbecb1d7ae8acc2d09f6185720c2\",\"filename\":\".bettercodehub.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":9,\"changes\":9,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.bettercodehub.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.bettercodehub.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.bettercodehub.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,9 +0,0 @@\\n-# Repo languages\\n-languages:\\n-- python\\n-\\n-# Max depth
        is actually 2, we set this to 3 just in case\\n-# max depth increase in the
        future.\\n-#\\n-# Max depth refers to nesting of folders containing code.\\n-component_depth:
        3\"},{\"sha\":\"90c4af1f92db337b8b375efb47ab62fc91a7462a\",\"filename\":\".dockerignore\",\"status\":\"modified\",\"additions\":5,\"deletions\":3,\"changes\":8,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.dockerignore\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.dockerignore\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.dockerignore?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,4 +1,6 @@\\n-Dockerfile\\n-\\n-# Ignore .git folder\\n .git\\n+.github\\n+.vscode\\n+docs\\n+scripts\\n+tests\"},{\"sha\":\"25363234e4ea3764900e07d428fd1801140a90cb\",\"filename\":\".editorconfig\",\"status\":\"modified\",\"additions\":1,\"deletions\":1,\"changes\":2,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.editorconfig\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.editorconfig\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.editorconfig?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -14,7 +14,7 @@ charset = utf-8\\n max_line_length = 100\\n \\n [*.json]\\n-indent_size
        = 2\\n+indent_size = 4\\n \\n [{*.yml, *.yaml}]\\n indent_size = 2\"},{\"sha\":\"71e174718deacb72656f024e0073165c585157ab\",\"filename\":\".gitattributes\",\"status\":\"modified\",\"additions\":20,\"deletions\":20,\"changes\":40,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.gitattributes\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.gitattributes\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.gitattributes?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,36 +1,36 @@\\n # Set the default behavior, in case people don't have core.autocrlf
        set.\\n-*          text=auto eol=lf\\n+* text=auto eol=lf\\n \\n # Explicitly
        declare text files you want to always be normalized and converted\\n # to
        native line endings on checkout.\\n-*.py       text diff=python\\n+*.py text
        diff=python\\n \\n # Documents\\n-*.md       text diff=markdown\\n+*.md text
        diff=markdown\\n \\n # Graphics\\n-*.png      binary\\n-*.jpg      binary\\n-*.jpeg
        \    binary\\n-*.gif      binary\\n-*.svg      text\\n+*.png binary\\n+*.jpg
        binary\\n+*.jpeg binary\\n+*.gif binary\\n+*.svg text\\n \\n # Scripts\\n-*.bash
        \    text eol=lf\\n-*.fish     text eol=lf\\n-*.sh       text eol=lf\\n+*.bash
        text eol=lf\\n+*.fish text eol=lf\\n+*.sh text eol=lf\\n # These are explicitly
        windows files and should use crlf\\n-*.bat      text eol=crlf\\n-*.cmd      text
        eol=crlf\\n+*.bat text eol=crlf\\n+*.cmd text eol=crlf\\n \\n # Serialisation\\n-*.json
        \    text\\n-*.toml     text\\n-*.xml      text\\n-*.yaml     text\\n-*.yml
        \     text\\n+*.json text\\n+*.toml text\\n+*.xml text\\n+*.yaml text\\n+*.yml
        text\\n \\n # Exclude files from exporting\\n .gitattributes export-ignore\\n-.gitignore
        \    export-ignore\\n-.gitkeep       export-ignore\\n+.gitignore export-ignore\\n+.gitkeep
        export-ignore\"},{\"sha\":\"3cf93095a47e8f96055751e437b9f82712e1e77c\",\"filename\":\".github/ISSUE_TEMPLATE/bug_report.yml\",\"status\":\"modified\",\"additions\":12,\"deletions\":11,\"changes\":23,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FISSUE_TEMPLATE%2Fbug_report.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FISSUE_TEMPLATE%2Fbug_report.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Fbug_report.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,23 +1,24 @@\\n-name: Bug Report \\n+name: Bug Report\\n \\n title: Change
        this title, poorly formatted issues will not be handled\\n \\n description:
        Report bugs so we can fix them\\n \\n-labels: bug\\n+labels: Bug\\n \\n body:\\n
        \\n - type: dropdown\\n   attributes:\\n-    label: System Operating System
        (OS)\\n+    label: System OS\\n     description: OS not listed here? Please
        let us know below\\n     options:\\n       - Windows\\n       - MacOS\\n       -
        Linux\\n       - Docker\\n       - Termux (Android)\\n+      - Other\\n   validations:\\n
        \    required: true\\n \\n@@ -32,6 +33,7 @@ body:\\n       - 3.8 (CPython)\\n
        \      - 3.9 (CPython)\\n       - 3.10 (CPython)\\n+      - 3.11 (CPython)\\n
        \  validations:\\n     required: true\\n \\n@@ -44,6 +46,7 @@ body:\\n       -
        GitHub\\n       - Termux Installation Script (spotDL provided)\\n       -
        Arch User Repository (Unofficial)\\n+      - Other\\n   validations:\\n     required:
        true\\n \\n@@ -53,7 +56,7 @@ body:\\n     description: |\\n       Supply version
        if installed from pip, found via `pip show spotdl`\\n       or supply commit
        hash if installed from GitHub\\n-    placeholder: v3.x.x or hash-value\\n+
        \   placeholder: v4.x.x or hash-value\\n   validations:\\n     required: true\\n
        \\n@@ -64,10 +67,7 @@ body:\\n \\n - type: textarea\\n   attributes:\\n-    label:
        Steps to reproduce\\n-    description: |\\n-      Please ensure to include
        Spotify links and the actual command \\n-      you used.\\n+    label: Steps
        to reproduce - Ensure to include actual links!\\n     placeholder: |\\n       1.\\n
        \      2.\\n@@ -79,11 +79,12 @@ body:\\n - type: textarea\\n   attributes:\\n
        \    label: Traceback\\n-    description: Copy and paste the complete error
        message outputted by spotDL\\n+    description: Copy and paste the complete
        output from spotDL\\n     render: text\\n+    placeholder: Do this even if
        there is no error!\\n   validations:\\n     required: true\\n-    \\n+\\n
        \\n - type: textarea\\n   attributes:\\n@@ -92,4 +93,4 @@ body:\\n       Note
        anything else you can provide regarding the issue you're running into.\\n
        \\n       If you didn't include your Python version, OS or installation source
        in the dropdowns\\n-      earlier, note said details here. \\n+      earlier,
        note said details here.\"},{\"sha\":\"a226f91969a87dfd395a758ee1ee24783d5eece3\",\"filename\":\".github/ISSUE_TEMPLATE/config.yml\",\"status\":\"modified\",\"additions\":0,\"deletions\":1,\"changes\":1,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FISSUE_TEMPLATE%2Fconfig.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FISSUE_TEMPLATE%2Fconfig.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Fconfig.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -4,4 +4,3 @@ contact_links:\\n   - name: spotDL Discord Server!\\n     url:
        https://discord.gg/xCa23pwJWY\\n     about: Join the spotDL Discord Server\\n-
        \   \\n\\\\ No newline at end of file\"},{\"sha\":\"cc575aed3fae52815166831149ffd7f687ff4566\",\"filename\":\".github/ISSUE_TEMPLATE/feature_request.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":16,\"changes\":16,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2FISSUE_TEMPLATE%2Ffeature_request.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2FISSUE_TEMPLATE%2Ffeature_request.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Ffeature_request.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,16 +0,0 @@\\n----\\n-about: Request a feature to be added to spotDL!\\n-assignees:
        ''\\n-labels: feature-request\\n-name: Feature Request\\n-title: Change this
        title, Poorly Formatted Requests will not be handled.\\n----\\n-\\n-<!---
        You can join our Discord at https://discord.gg/xCa23pwJWY !!! -->\\n-\\n-===\\n-\\n-WE
        ARE NOT ACCEPTING FEATURE REQUESTS SINCE SPOTDL IS BEING REDESIGNED. \\n-Please
        talk to us on our Discord https://discord.gg/xCa23pwJWY.\\n-\\n-===\"},{\"sha\":\"10e1ccf95e443766a92b484e58a7a87877ab4d5d\",\"filename\":\".github/ISSUE_TEMPLATE/feature_request.yml\",\"status\":\"added\",\"additions\":21,\"deletions\":0,\"changes\":21,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FISSUE_TEMPLATE%2Ffeature_request.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FISSUE_TEMPLATE%2Ffeature_request.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FISSUE_TEMPLATE%2Ffeature_request.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,21 @@\\n+name: Feature Request\\n+\\n+title: Change this title, poorly
        formatted issues will not be handled\\n+\\n+description: Request a new feature\\n+\\n+labels:
        Feature Request\\n+\\n+body:\\n+\\n+- type: textarea\\n+  attributes:\\n+
        \   label: Requested Feature\\n+    placeholder: Describe the feature you
        would like to see implemented!\\n+  validations:\\n+    required: true\\n+\\n+-
        type: textarea\\n+  attributes:\\n+    label: Possible implementation\\n+
        \   placeholder: Describe a potential method of implementing this feature\"},{\"sha\":\"8ef60898ed84e0b32f0f9220e7cd5a3f1dad4615\",\"filename\":\".github/PULL_REQUEST_TEMPLATE.yml\",\"status\":\"renamed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FPULL_REQUEST_TEMPLATE.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2FPULL_REQUEST_TEMPLATE.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2FPULL_REQUEST_TEMPLATE.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"previous_filename\":\".github/PULL_REQUEST_TEMPLATE.md\"},{\"sha\":\"d0b8fd503a39d83ab39bec681ef58964447ca632\",\"filename\":\".github/release-drafter.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":13,\"changes\":13,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Frelease-drafter.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Frelease-drafter.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Frelease-drafter.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,13 +0,0 @@\\n-categories:\\n-  - title: 'Bug Fixes'\\n-    labels:\\n-
        \     - 'bug'\\n-      - 'bugfix'\\n-change-template: '- $TITLE @$AUTHOR (#$NUMBER)'\\n-change-title-escapes:
        '\\\\<*_&' # You can add # and @ to disable mentions, and add ` to disable
        code blocks.\\n-exclude-labels:\\n-  - 'skip-changelog'\\n-template: |\\n-
        \ ## Changes\\n-\\n-  $CHANGES\"},{\"sha\":\"4b5f1bf4f9e6011c065365d1b50ea7a4f9012753\",\"filename\":\".github/stale.yml\",\"status\":\"modified\",\"additions\":1,\"deletions\":1,\"changes\":2,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fstale.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fstale.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fstale.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -10,7 +10,7 @@ exemptLabels:\\n   - High Priority\\n \\n # Label to use when
        marking an issue as stale\\n-staleLabel: stale\\n+staleLabel: Stale\\n \\n
        # Comment to post when marking an issue as stale. Set to `false` to disable\\n
        markComment: >\"},{\"sha\":\"9f54c4c0dd18acce5a665d6f07cc3889f7aab57d\",\"filename\":\".github/workflows/build-docs.yml\",\"status\":\"added\",\"additions\":36,\"deletions\":0,\"changes\":36,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fbuild-docs.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fbuild-docs.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fbuild-docs.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,36 @@\\n+name: Deploy docs to GitHub pages\\n+\\n+on:\\n+  push:\\n+
        \   # branches to consider in the event; optional, defaults to all\\n+    branches:\\n+
        \     - master\\n+\\n+jobs:\\n+  deploy:\\n+    if: \\\"!contains(github.event.commits[0].message,
        '[skip ci]')\\\"\\n+    runs-on: ubuntu-latest\\n+\\n+    steps:\\n+      -
        uses: actions/checkout@v3\\n+        with:\\n+          fetch-depth: 0\\n+
        \         submodules: recursive\\n+\\n+      - name: Install poetry\\n+        run:
        pipx install poetry\\n+\\n+      - name: Set up Python 3.10\\n+        uses:
        actions/setup-python@v4\\n+        with:\\n+          python-version: \\\"3.10\\\"\\n+
        \         cache: 'poetry'\\n+\\n+      - name: Install dependencies\\n+        run:
        |\\n+          poetry env use \\\"3.10\\\"\\n+          poetry install\\n+\\n+
        \     - name: Build and deploy\\n+        run: |\\n+          poetry run mkdocs
        gh-deploy --force\"},{\"sha\":\"1b5eb2e1b8bf8de9a79800790b4e0c5570fdf994\",\"filename\":\".github/workflows/docker-hub-image-publish.yml\",\"status\":\"added\",\"additions\":74,\"deletions\":0,\"changes\":74,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fdocker-hub-image-publish.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fdocker-hub-image-publish.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fdocker-hub-image-publish.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,74 @@\\n+name: Publish Docker Image to DockerHub\\n+\\n+on:\\n+  release:\\n+
        \   types:\\n+      - published\\n+  schedule:\\n+    - cron: \\\"0 0 * *
        *\\\"\\n+  workflow_dispatch:\\n+    inputs:\\n+      wants_production_build:\\n+
        \       description: \\\"Production build instead of nightly?\\\"\\n+        required:
        false\\n+        default: false\\n+        type: boolean\\n+\\n+concurrency:\\n+
        \ group: ${{ github.workflow }}-${{ github.ref }}\\n+  cancel-in-progress:
        true\\n+\\n+env:\\n+  REGISTRY: docker.io\\n+  IMAGE_NAME: ${{ github.repository
        }}\\n+\\n+jobs:\\n+  publish:\\n+    name: Publish Docker Image to DockerHub\\n+
        \   runs-on: ubuntu-latest\\n+    timeout-minutes: 30\\n+\\n+    steps:\\n+
        \     - name: Checkout dev branch for nightly build\\n+        uses: actions/checkout@v3\\n+
        \       if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch'
        && !inputs.wants_production_build) }}\\n+        with:\\n+          ref: \\\"refs/heads/dev\\\"\\n+\\n+
        \     - name: Checkout main branch for production build\\n+        uses: actions/checkout@v3\\n+
        \       if: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch'
        && inputs.wants_production_build) }}\\n+        with:\\n+          ref: \\\"refs/heads/master\\\"\\n+\\n+
        \     - name: Extract metadata (tags, labels) for Docker tags & labels\\n+
        \       id: meta\\n+        uses: docker/metadata-action@v4\\n+        with:\\n+
        \         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\\n+          tags:
        |\\n+            type=raw,value=latest,priority=100,enable=${{ github.event_name
        == 'release' || (github.event_name == 'workflow_dispatch' && inputs.wants_production_build)
        }}\\n+            type=semver,priority=200,pattern={{raw}},enable=${{ github.event_name
        == 'release' || (github.event_name == 'workflow_dispatch' && inputs.wants_production_build)
        }}\\n+            type=raw,value=nightly,priority=300,enable=${{ github.event_name
        == 'schedule' || (github.event_name == 'workflow_dispatch' && !inputs.wants_production_build)
        }}\\n+\\n+      - name: Set up QEMU for multi-arch builds\\n+        uses:
        docker/setup-qemu-action@v2\\n+\\n+      - name: Set up Docker Buildx for
        multi-arch builds\\n+        id: buildx\\n+        uses: docker/setup-buildx-action@v2\\n+\\n+
        \     - name: Login to DockerHub\\n+        uses: docker/login-action@v1\\n+
        \       with:\\n+          username: ${{ secrets.DOCKER_HUB_USERNAME }}\\n+
        \         password: ${{ secrets.DOCKER_HUB_PASSWORD }}\\n+\\n+      - name:
        Build and push Docker image to DockerHub\\n+        uses: docker/build-push-action@v3\\n+
        \       with:\\n+          context: .\\n+          push: true\\n+          platforms:
        linux/amd64, linux/arm64\\n+          tags: ${{ steps.meta.outputs.tags }}\\n+
        \         labels: ${{ steps.meta.outputs.labels }}\"},{\"sha\":\"42814e159b689318fec121bc466f7d976e889232\",\"filename\":\".github/workflows/python-publish.yml\",\"status\":\"modified\",\"additions\":106,\"deletions\":19,\"changes\":125,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fpython-publish.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fpython-publish.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fpython-publish.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -5,28 +5,115 @@ name: Upload Python Package\\n \\n on:\\n   release:\\n-    types:
        \\n+    types:\\n       - published\\n-      \\n+\\n jobs:\\n   deploy:\\n-\\n
        \    runs-on: ubuntu-latest\\n \\n     steps:\\n-    - uses: actions/checkout@v2\\n-
        \   - name: Set up Python\\n-      uses: actions/setup-python@v2\\n-      with:\\n-
        \       python-version: '3.x'\\n-    - name: Install dependencies\\n-      run:
        |\\n-        python -m pip install --upgrade pip\\n-        pip install setuptools
        wheel twine\\n-    - name: Build and publish\\n-      env:\\n-        TWINE_USERNAME:
        ${{ secrets.PYPI_USERNAME }}\\n-        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD
        }}\\n-      run: |\\n-        python setup.py sdist bdist_wheel\\n-        twine
        upload dist/*\\n+      - uses: actions/checkout@v3\\n+        with:\\n+          fetch-depth:
        0\\n+          submodules: recursive\\n+\\n+      - name: Install poetry\\n+
        \       run: pipx install poetry\\n+\\n+      - name: Set up Python 3.10\\n+
        \       uses: actions/setup-python@v4\\n+        with:\\n+          python-version:
        \\\"3.10\\\"\\n+          cache: 'poetry'\\n+\\n+      - name: Install dependencies\\n+
        \       run: |\\n+          poetry env use \\\"3.10\\\"\\n+          poetry
        install\\n+\\n+      - name: Install twine\\n+        run: pip install twine\\n+\\n+
        \     - name: Build\\n+        run: |\\n+          poetry build\\n+\\n+      -
        name: Publish on Pip\\n+        env:\\n+          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME
        }}\\n+          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\\n+        run:
        twine upload dist/*\\n+\\n+  build:\\n+    strategy:\\n+      matrix:\\n+
        \       platform: [ubuntu-latest, macos-latest, windows-latest]\\n+    runs-on:
        ${{ matrix.platform }}\\n+    steps:\\n+      - uses: actions/checkout@v3\\n+\\n+
        \     - name: Install poetry\\n+        run: pipx install poetry\\n+\\n+      -
        name: Set up Python 3.10\\n+        uses: actions/setup-python@v4\\n+        with:\\n+
        \         python-version: \\\"3.10\\\"\\n+          cache: 'poetry'\\n+\\n+
        \     - name: Install dependencies\\n+        run: |\\n+          poetry env
        use \\\"3.10\\\"\\n+          poetry install\\n+\\n+      - name: Build executable\\n+
        \       run: poetry run python ./scripts/build.py\\n+\\n+      - name: Build
        cross-platform binary\\n+        run: |\\n+          chmod u+x ./scripts/make_binzip.sh\\n+
        \         ./scripts/make_binzip.sh\\n+\\n+      - name: Release\\n+        uses:
        softprops/action-gh-release@v1\\n+        with:\\n+          files: |\\n+
        \           dist/*\\n+            spotDL\\n+\\n+  build-arm:\\n+    runs-on:
        ubuntu-latest\\n+    name: Build on ubuntu-latest aarch64\\n+    steps:\\n+
        \     - uses: actions/checkout@v3\\n+      - uses: uraimo/run-on-arch-action@v2\\n+
        \       name: Run commands\\n+        id: runcmd\\n+        with:\\n+          arch:
        aarch64\\n+          distro: ubuntu_latest\\n+\\n+          # Mount the artifacts
        directory as /artifacts in the container\\n+          dockerRunArgs: |\\n+
        \           --volume \\\"${PWD}/:/spotdl\\\"\\n+\\n+          # The shell
        to run commands with in the container\\n+          shell: /bin/sh\\n+\\n+
        \         run: |\\n+            cd /spotdl\\n+            apt update\\n+            apt
        install python3 python3-pip -y\\n+            pip install poetry\\n+            poetry
        install\\n+            rm -rf dist/\\n+            mkdir dist/\\n+            poetry
        run python ./scripts/build.py\\n+            for file in dist/spotdl*; do
        cp \\\"$file\\\" \\\"${file}-aarch64\\\"; done\\n+\\n+      - name: Release\\n+
        \       uses: softprops/action-gh-release@v1\\n+        with:\\n+          files:
        |\\n+            dist/spotdl*-aarch64\"},{\"sha\":\"2c30bcdb18ee5ba658e7b0b212be8fb8616750ef\",\"filename\":\".github/workflows/release-drafter.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":16,\"changes\":16,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Frelease-drafter.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Frelease-drafter.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Frelease-drafter.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,16 +0,0 @@\\n-name: Release Drafter\\n-\\n-on:\\n-  push:\\n-    # branches
        to consider in the event; optional, defaults to all\\n-    branches:\\n-      -
        master\\n-\\n-jobs:\\n-  update_release_draft:\\n-    runs-on: ubuntu-latest\\n-
        \   steps:\\n-      # Drafts your next Release notes as Pull Requests are
        merged into \\\"master\\\"\\n-      - uses: release-drafter/release-drafter@v5\\n-
        \       env:\\n-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\"},{\"sha\":\"e18007aa9f8b107aec60b89bc7a353c2db70b5c7\",\"filename\":\".github/workflows/spotify-downloader-ci.yml\",\"status\":\"removed\",\"additions\":0,\"deletions\":62,\"changes\":62,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Fspotify-downloader-ci.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/.github%2Fworkflows%2Fspotify-downloader-ci.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fspotify-downloader-ci.yml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,62 +0,0 @@\\n-# This workflow will install Python dependencies, run tests
        and lint with a variety of Python versions\\n-# For more information see:
        https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\\n-\\n-name:
        spotify-downloader-ci\\n-\\n-on: [push, pull_request]\\n-\\n-jobs:\\n-  test:\\n-
        \   runs-on: ${{ matrix.platform }}\\n-    strategy:\\n-      matrix:\\n-
        \       platform: [ ubuntu-latest, macos-latest, windows-latest ]\\n-        python-version:
        [ \\\"3.6.7\\\", \\\"3.7\\\", \\\"3.8\\\", \\\"3.9\\\", \\\"3.10\\\" ]\\n-\\n-
        \   steps:\\n-      - uses: actions/checkout@v2\\n-      - name: Set up Python
        ${{ matrix.python-version }}\\n-        uses: actions/setup-python@v2\\n-
        \       with:\\n-          python-version: ${{ matrix.python-version }}\\n-
        \     - name: Install dependencies\\n-        run: |\\n-          python -m
        pip install --upgrade pip\\n-          python -m pip install tox-gh-actions\\n-
        \     - name: Run tests\\n-        run: |\\n-          tox\\n-        env:\\n-
        \         PLATFORM: ${{ matrix.platform }}\\n-\\n-  mypy:\\n-    runs-on:
        ubuntu-latest\\n-\\n-    steps:\\n-      - uses: actions/checkout@v2\\n-      -
        name: Set up Python\\n-        uses: actions/setup-python@v2\\n-        with:\\n-
        \         python-version: 3.8\\n-      - name: Install dependencies\\n-        run:
        |\\n-          python -m pip install tox\\n-      - name: Run mypy\\n-        run:
        |\\n-          tox -e mypy\\n-\\n-  flake8:\\n-    runs-on: ubuntu-latest\\n-\\n-
        \   steps:\\n-      - uses: actions/checkout@v2\\n-      - name: Set up Python\\n-
        \       uses: actions/setup-python@v2\\n-        with:\\n-          python-version:
        3.8\\n-      - name: Install dependencies\\n-        run: |\\n-          python
        -m pip install tox\\n-      - name: Run flake8\\n-        run: |\\n-          tox
        -e flake8\"},{\"sha\":\"4cb0801d0bb581a71c5e0f6c330eaa183bcf9b63\",\"filename\":\".github/workflows/standard-checks.yml\",\"status\":\"added\",\"additions\":45,\"deletions\":0,\"changes\":45,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fstandard-checks.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Fstandard-checks.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Fstandard-checks.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,45 @@\\n+name: Standard code checks (MyPy/Pylint/Black/Isort)\\n+\\n+on:
        [push, pull_request]\\n+\\n+jobs:\\n+  checks:\\n+    if: \\\"!contains(github.event.commits[0].message,
        '[skip ci]')\\\"\\n+    runs-on: ubuntu-latest\\n+\\n+    steps:\\n+      -
        uses: actions/checkout@v3\\n+\\n+      - name: Install poetry\\n+        run:
        pipx install poetry\\n+\\n+      - name: Set up Python 3.11\\n+        uses:
        actions/setup-python@v4\\n+        with:\\n+          python-version: \\\"3.11\\\"\\n+
        \         cache: 'poetry'\\n+\\n+      - name: Install dependencies\\n+        run:
        |\\n+          poetry env use \\\"3.11\\\"\\n+          poetry install\\n+\\n+
        \     - name: Check for docstring's\\n+        run: |\\n+          poetry
        run pylint --limit-inference-results 0 --enable missing-function-docstring
        missing-module-docstring missing-class-docstring empty-docstring --disable=all
        ./spotdl\\n+\\n+      - name: Run Pylint check\\n+        run: |\\n+          poetry
        run pylint --fail-under 10 --limit-inference-results 0 ./spotdl\\n+\\n+      -
        name: Run MyPy check\\n+        run: |\\n+          poetry run mypy --ignore-missing-imports
        --follow-imports silent --install-types --non-interactive ./spotdl\\n+\\n+
        \     - name: Run Black check\\n+        run: |\\n+          poetry run black
        --check ./spotdl\\n+\\n+      - name: Run isort check\\n+        run: |\\n+
        \         poetry run isort --check --diff ./spotdl\"},{\"sha\":\"18457cff3eff0b2947d59b77483b8be3890a144a\",\"filename\":\".github/workflows/tests.yml\",\"status\":\"added\",\"additions\":78,\"deletions\":0,\"changes\":78,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Ftests.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.github%2Fworkflows%2Ftests.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.github%2Fworkflows%2Ftests.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,78 @@\\n+name: Tests (Pytest)\\n+\\n+on: [push, pull_request]\\n+\\n+jobs:\\n+
        \ test-vcr:\\n+    if: \\\"!contains(github.event.commits[0].message, '[skip
        ci]')\\\"\\n+    runs-on: ${{ matrix.platform }}\\n+    strategy:\\n+      max-parallel:
        4\\n+      matrix:\\n+        platform: [ ubuntu-latest, macos-latest, windows-latest
        ]\\n+        python-version: [ \\\"3.8\\\", \\\"3.11\\\" ]\\n+\\n+    steps:\\n+
        \     - uses: actions/checkout@v3\\n+\\n+      - name: Install poetry\\n+
        \       run: pipx install poetry\\n+\\n+      - name: Set up Python ${{ matrix.python-version
        }}\\n+        uses: actions/setup-python@v4\\n+        with:\\n+          python-version:
        ${{ matrix.python-version }}\\n+          cache: 'poetry'\\n+\\n+      - name:
        Install dependencies\\n+        run: |\\n+          poetry env use ${{ matrix.python-version
        }}\\n+          pip install -U pip setuptools\\n+          poetry install\\n+\\n+
        \     - uses: FedericoCarboni/setup-ffmpeg@v2\\n+        id: setup-ffmpeg\\n+
        \       with:\\n+          token: ${{ secrets.GITHUB_TOKEN }}\\n+\\n+      -
        name: Run tests\\n+        run: |\\n+          poetry run pytest -vvv --ignore
        tests/test_matching.py --ignore tests/utils/test_ffmpeg.py --ignore tests/utils/test_metadata.py
        --ignore tests/providers/lyrics/test_azlyrics.py --ignore tests/providers/lyrics/test_musixmatch.py
        \\n+        env:\\n+          PLATFORM: ${{ matrix.platform }}\\n+\\n+  test:\\n+
        \   if: \\\"!contains(github.event.commits[0].message, '[skip ci]')\\\"\\n+
        \   runs-on: ${{ matrix.platform }}\\n+    strategy:\\n+      max-parallel:
        1\\n+      matrix:\\n+        platform: [ ubuntu-latest, macos-latest, windows-latest
        ]\\n+\\n+    steps:\\n+      - uses: actions/checkout@v3\\n+\\n+      - name:
        Install poetry\\n+        run: pipx install poetry\\n+\\n+      - name: Set
        up Python \\\"3.11\\\"\\n+        uses: actions/setup-python@v4\\n+        with:\\n+
        \         python-version: \\\"3.11\\\"\\n+          cache: 'poetry'\\n+\\n+
        \     - name: Install dependencies\\n+        run: |\\n+          poetry env
        use \\\"3.11\\\"\\n+          poetry install\\n+\\n+      - uses: FedericoCarboni/setup-ffmpeg@v1\\n+
        \       id: setup-ffmpeg\\n+        with:\\n+          token: ${{ secrets.GITHUB_TOKEN
        }}\\n+\\n+      - name: Run tests\\n+        run: |\\n+          poetry run
        pytest -vvv --disable-vcr --record-mode=none --disable-recording --ignore
        tests/providers/lyrics --ignore tests/utils/test_github.py --ignore tests/utils/test_ffmpeg.py
        --ignore tests/utils/test_metadata.py\\n+        env:\\n+          PLATFORM:
        ${{ matrix.platform }}\"},{\"sha\":\"189ed2cf308a377a3e93d0522170d04f8d6df97b\",\"filename\":\".gitignore\",\"status\":\"modified\",\"additions\":123,\"deletions\":30,\"changes\":153,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.gitignore\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.gitignore\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.gitignore?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,20 +1,112 @@\\n-# Spotdl dev related testing files\\n-*.log\\n-*.spotdlTrackingFile\\n+#
        Ignore IDE folders\\n+.idea\\n+\\n+# Spotdl stuff\\n+*.skip\\n *.mp3\\n *.m4a\\n+*.wav\\n
        *.flac\\n-*.opus\\n *.ogg\\n-*.wav\\n-spotdl-temp/\\n-*.mp4\\n-.spotdl-cache\\n+*.opus\\n+*.spotdl\\n
        *.m3u\\n+*.m3u8\\n+*.ipynb\\n+*.lrc\\n+.spotdl-cache\\n+\\n+# Docs\\n+docs/source/_build/\\n+html\\n+\\n+#
        Byte-compiled / optimized / DLL files\\n+__pycache__/\\n+*.py[cod]\\n+*$py.class\\n+\\n+#
        C extensions\\n+*.so\\n+\\n+# Distribution / packaging\\n+.Python\\n+build/\\n+develop-eggs/\\n+dist/\\n+downloads/\\n+eggs/\\n+.eggs/\\n+lib/\\n+lib64/\\n+parts/\\n+sdist/\\n+var/\\n+wheels/\\n+*.egg-info/\\n+.installed.cfg\\n+*.egg\\n+MANIFEST\\n+\\n+#
        PyInstaller\\n+#  Usually these files are written by a python script from
        a template\\n+#  before PyInstaller builds the exe, so as to inject date/other
        infos into it.\\n+*.manifest\\n+*.spec\\n+\\n+# Installer logs\\n+pip-log.txt\\n+pip-delete-this-directory.txt\\n+\\n+#
        Unit test / coverage reports\\n+htmlcov/\\n+.tox/\\n+.nox/\\n+.coverage\\n+.coverage.*\\n+.cache\\n+nosetests.xml\\n+coverage.xml\\n+*.cover\\n+.hypothesis/\\n+.pytest_cache/\\n
        \\n-# Python\\n-__pycache__\\n-.mypy_cache\\n+# Translations\\n+*.mo\\n+*.pot\\n+\\n+#
        Django stuff:\\n+*.log\\n+local_settings.py\\n+db.sqlite3\\n+\\n+# Flask stuff:\\n+instance/\\n+.webassets-cache\\n+\\n+#
        Scrapy stuff:\\n+.scrapy\\n+\\n+# Sphinx documentation\\n+docs/_build/\\n+\\n+#
        PyBuilder\\n+target/\\n+\\n+# Jupyter Notebook\\n+.ipynb_checkpoints\\n+\\n+#
        IPython\\n+profile_default/\\n+ipython_config.py\\n+\\n+# pyenv\\n+.python-version\\n+\\n+#
        celery beat schedule file\\n+celerybeat-schedule\\n+\\n+# SageMath parsed
        files\\n+*.sage.py\\n \\n # Environments\\n .env\\n@@ -25,28 +117,29 @@ ENV/\\n
        env.bak/\\n venv.bak/\\n \\n-# vscode\\n-.vscode\\n+# Spyder project settings\\n+.spyderproject\\n+.spyproject\\n
        \\n-# MS Visio Pro\\n-externalTools/*\\n+# Rope project settings\\n+.ropeproject\\n
        \\n-# Getting rid of Hacks (for now, 04/09/2020)\\n-Hacks/*\\n+# mkdocs documentation\\n+/site\\n
        \\n-# setuptools\\n-spotdl.egg-info/*\\n+# mypy\\n+.mypy_cache/\\n+.dmypy.json\\n+dmypy.json\\n
        \\n-# setuptools and PyInstaller\\n-build\\n-dist\\n-*.spec\\n+# Pyre type
        checker\\n+.pyre/\\n \\n-# Jetbrains IDEs; PyCharm/IntelliJ\\n-.idea\\n+#
        Misc\\n+*.temp*\\n+*temp.*\\n+temp/\\n \\n-# Tox\\n-.tox/\\n-\\n-# Test Coverage\\n-.coverage\\n+#
        VS Code\\n+.vscode\\n+*.txt\"},{\"sha\":\"7cfd19e7ac113de94d3ffdcc46101ec21cd9af9e\",\"filename\":\".pylintrc\",\"status\":\"added\",\"additions\":11,\"deletions\":0,\"changes\":11,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.pylintrc\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.pylintrc\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.pylintrc?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,11 @@\\n+[MASTER]\\n+disable=\\n+    R0902, # too-many-instance-attributes\\n+
        \   R0913, # too-many-arguments\\n+    R0915, # too-many-statements\\n+    R0912,
        # too-many-branches\\n+    R0801, # duplicate-code\\n+    R0903, # too-few-public-methods\\n+
        \   R0914, # too-many-locals\\n+    W0703, # broad-except\\n+    W0640, #
        cell-var-from-loop\"},{\"sha\":\"b6d04eb8f72c420f3da7c16254c28e7cbeb322a0\",\"filename\":\".readthedocs.yaml\",\"status\":\"added\",\"additions\":14,\"deletions\":0,\"changes\":14,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.readthedocs.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.readthedocs.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.readthedocs.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,14 @@\\n+# Required\\n+version: 2\\n+\\n+build:\\n+  os: ubuntu-22.04\\n+
        \ tools:\\n+    python: \\\"3.11\\\"\\n+\\n+mkdocs:\\n+  configuration: mkdocs.yml\\n+\\n+python:\\n+
        \ install:\\n+  - requirements: scripts/docs/requirements.txt\"},{\"sha\":\"fe23713f9d98fa0160b0df70070d6212f8b0d84d\",\"filename\":\".vscode/settings.json\",\"status\":\"added\",\"additions\":13,\"deletions\":0,\"changes\":13,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.vscode%2Fsettings.json\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/.vscode%2Fsettings.json\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/.vscode%2Fsettings.json?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,13 @@\\n+{\\n+    \\\"cSpell.words\\\": [\\n+        \\\"isrc\\\",\\n+
        \       \\\"pdoc\\\",\\n+        \\\"spotdl\\\"\\n+    ],\\n+    \\\"python.formatting.provider\\\":
        \\\"black\\\",\\n+    \\\"python.testing.pytestArgs\\\": [\\n+        \\\"tests\\\"\\n+
        \   ],\\n+    \\\"python.testing.unittestEnabled\\\": false,\\n+    \\\"python.testing.pytestEnabled\\\":
        true\\n+}\\n\\\\ No newline at end of file\"},{\"sha\":\"f068fc5a8d389237db8f5e411a3127a6bdb5aea9\",\"filename\":\"Dockerfile\",\"status\":\"modified\",\"additions\":29,\"deletions\":10,\"changes\":39,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/Dockerfile\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/Dockerfile\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/Dockerfile?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,23 +1,42 @@\\n FROM python:3-alpine\\n \\n-# Install ffmpeg and g++\\n-RUN
        apk add --no-cache ffmpeg g++\\n+LABEL maintainer=\\\"xnetcat (Jakub)\\\"\\n
        \\n-# Create project directory\\n-WORKDIR /app\\n+# Install dependencies\\n+RUN
        apk add --no-cache \\\\\\n+    ca-certificates \\\\\\n+    ffmpeg \\\\\\n+
        \   openssl \\\\\\n+    aria2 \\\\\\n+    g++ \\\\\\n+    git \\\\\\n+    py3-cffi
        \\\\\\n+    libffi-dev \\\\\\n+    zlib-dev\\n+\\n+# Install poetry and update
        pip/wheel\\n+RUN pip install --upgrade pip poetry wheel spotipy\\n+\\n+# Copy
        requirements files\\n+COPY poetry.lock pyproject.toml /\\n+\\n+# Install spotdl
        requirements\\n+RUN poetry install\\n \\n # Add source code files to WORKDIR\\n
        ADD . .\\n \\n-# Upgrade pip\\n-RUN python -m pip install --upgrade --no-cache-dir
        pip\\n-\\n-# Install spotdl\\n-RUN pip install --no-cache-dir .\\n+# Install
        spotdl itself\\n+RUN poetry install\\n \\n # Create music directory\\n RUN
        mkdir /music\\n+\\n+# Create a volume for the output directory\\n+VOLUME /music\\n+\\n+#
        Change CWD to /music\\n WORKDIR /music\\n \\n # Entrypoint command\\n-ENTRYPOINT
        [ \\\"spotdl\\\" ]\\n+ENTRYPOINT [\\\"poetry\\\", \\\"run\\\", \\\"spotdl\\\"]\"},{\"sha\":\"6408740d9e4b3f89e17bf8859e28529bd009b872\",\"filename\":\"LICENSE\",\"status\":\"modified\",\"additions\":18,\"deletions\":15,\"changes\":33,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/LICENSE\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/LICENSE\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/LICENSE?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,18 +1,21 @@\\n-The MIT License (MIT)\\n-Copyright (c) 2021 Ritiek Malhotra
        & spotDL Developers\\n+MIT License\\n \\n-Permission is hereby granted, free
        of charge, to any person obtaining a copy of this\\n-software and associated
        documentation files (the \\\"Software\\\"), to deal in the Software\\n-without
        restriction, including without limitation the rights to use, copy, modify,
        merge,\\n-publish, distribute, sublicense, and/or sell copies of the Software,
        and to permit\\n-persons to whom the Software is furnished to do so, subject
        to the following conditions:\\n+Copyright (c) 2021 spotDL Developers\\n \\n-The
        above copyright notice and this permission notice shall be included in all
        copies or\\n-substantial portions of the Software.\\n+Permission is hereby
        granted, free of charge, to any person obtaining a copy\\n+of this software
        and associated documentation files (the \\\"Software\\\"), to deal\\n+in the
        Software without restriction, including without limitation the rights\\n+to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n+copies
        of the Software, and to permit persons to whom the Software is\\n+furnished
        to do so, subject to the following conditions:\\n \\n-THE SOFTWARE IS PROVIDED
        \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\\n-INCLUDING
        BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\\n-PURPOSE
        AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\\n-LIABLE
        FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
        TORT\\n-OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
        OR THE USE OR OTHER\\n-DEALINGS IN THE SOFTWARE.\\n+The above copyright notice
        and this permission notice shall be included in all\\n+copies or substantial
        portions of the Software.\\n+\\n+THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT
        WARRANTY OF ANY KIND, EXPRESS OR\\n+IMPLIED, INCLUDING BUT NOT LIMITED TO
        THE WARRANTIES OF MERCHANTABILITY,\\n+FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE\\n+AUTHORS OR COPYRIGHT HOLDERS BE
        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n+LIABILITY, WHETHER IN AN ACTION
        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n+OUT OF OR IN CONNECTION WITH
        THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n+SOFTWARE.\"},{\"sha\":\"bcdf086b000e639fa9c2ecd28e15ddbac3729842\",\"filename\":\"README.md\",\"status\":\"modified\",\"additions\":104,\"deletions\":277,\"changes\":381,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/README.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/README.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/README.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,340 +1,167 @@\\n+\\n <!--- mdformat-toc start --slug=github --->\\n \\n+<!---\\n+!!!
        IF EDITING THE README, ENSURE TO COPY THE WHOLE FILE TO index.md in `/docs/`
        AND REMOVE THE REFERENCES TO ReadTheDocs THERE.\\n+--->\\n+\\n <div align=\\\"center\\\">\\n
        \\n-<img src=\\\"/docs/static/logo-transparent.png\\\" alt=\\\"spotDL\\\"
        width=\\\"200\\\" />\\n+# spotDL v4\\n \\n-# spotDL\\n+**spotDL** finds songs
        from Spotify playlists on YouTube and downloads them - along with album art,
        lyrics and metadata.\\n \\n-Download your Spotify playlists and songs along
        with album art and metadata\\n \\n-[![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?style=flat-square&color=44CC11)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)\\n-[![pypi
        version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n-![GitHub
        commits since latest release (by date)](https://img.shields.io/github/commits-since/spotDL/spotify-downloader/latest?color=44CC11&style=flat-square)\\n-[![pypi
        downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+[![MIT
        License](https://img.shields.io/github/license/spotdl/spotify-downloader?color=44CC11&style=flat-square)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)\\n+[![PyPI
        version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+[![PyPi
        downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n
        ![Contributors](https://img.shields.io/github/contributors/spotDL/spotify-downloader?style=flat-square)\\n
        [![Discord](https://img.shields.io/discord/771628785447337985?label=discord&logo=discord&style=flat-square)](https://discord.gg/xCa23pwJWY)\\n
        \\n+> spotDL: The fastest, easiest and most accurate command-line music downloader.\\n
        </div>\\n \\n-> The fastest, easiest, and most accurate command-line music
        downloader\\n-\\n-[![asciicast](https://asciinema.org/a/wDNFL5XGhdadUK2EnOkv46YMG.svg)](https://asciinema.org/a/wDNFL5XGhdadUK2EnOkv46YMG)\\n-\\n-##
        What spotDL does\\n-\\n-1. Downloads music from YouTube as an MP3 file\\n-2.
        Applies basic metadata gathered from Spotify such as:\\n-    - Track Name\\n-
        \   - Track Number\\n-    - Album\\n-    - Album Cover\\n-    - Genre\\n-
        \   - and more!\\n+______________________________________________________________________\\n+**[Read
        the documentation on ReadTheDocs!](https://spotdl.readthedocs.io)**\\n+______________________________________________________________________\\n
        \\n-### Redesigned\\n-\\n-spotDL is being redesigned! This means we are currently
        not accepting new feature requests. You can talk to us on [our Discord](https://discord.gg/xCa23pwJWY)
        if there is anything further.\\n-\\n-## Prerequisites\\n-\\n-- Python 3.6.1
        or above (added to PATH)\\n-- FFmpeg 4.2 or above (added to PATH)\\n-\\n->
        **_YouTube Music must be available in your country for spotDL to work. This
        is because we use YouTube Music to filter search results. You can check if
        YouTube Music is available in your country, by visiting [YouTube Music](https://music.youtube.com)._**\\n
        \\n ## Installation\\n \\n-### Installing FFmpeg\\n-\\n-- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n--
        OSX - `brew install ffmpeg`\\n-- Linux - `sudo apt install ffmpeg`\\n-\\n-###
        Installing spotDL\\n-\\n-- Recommended Stable Version:\\n-\\n-    ```bash\\n-
        \   pip install spotdl\\n-    ```\\n-\\n-- Dev Version: **(NOT STABLE)**\\n-\\n-
        \   ```bash\\n-    pip install https://codeload.github.com/spotDL/spotify-downloader/zip/dev\\n-
        \   ```\\n-\\n-If you have trouble installing spotdl take a look at the extended
        installation guide\\n-[here](/docs/INSTALLATION.md) or ask for help in our\\n-[discord
        server](https://discord.gg/xCa23pwJWY)\\n-\\n-#### On Termux\\n-\\n-```bash\\n-curl
        -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/termux/setup_spotdl.sh
        | sh\\n-```\\n-\\n-#### Arch\\n-\\n-There is an Arch User Repository (AUR)
        package for [spotDL](https://aur.archlinux.org/packages/python-spotdl/).\\n-\\n-##
        Usage\\n-\\n-- #### To download a song, run\\n-\\n-    ```bash\\n-    spotdl
        [trackUrl]\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl
        https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b\\n-    ```\\n-\\n--
        #### To download an album, run\\n-\\n-    ```bash\\n-    spotdl [albumUrl]\\n-
        \   ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl https://open.spotify.com/album/4yP0hdKOZPNshxUOjY0cZj\\n-
        \   ```\\n-\\n-- #### To download a playlist, run\\n-\\n-    ```bash\\n-    spotdl
        [playlistUrl]\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl
        https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID\\n-    ```\\n-\\n--
        #### To download all songs from an artist run\\n-\\n-    ```bash\\n-    spotdl
        [artistUrl]\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-    spotdl
        https://open.spotify.com/artist/1fZAAHNWdSM5gqbi9o5iEA\\n-    ```\\n-\\n--
        #### To search for and download a song, run, **with quotation marks**\\n-\\n-
        \   ```bash\\n-    spotdl '[songQuery]'\\n-    ```\\n-\\n-    example:\\n-\\n-
        \   ```bash\\n-    spotdl 'The Weeknd - Blinding Lights'\\n-    ```\\n-\\n-
        \   > _Note: This is not accurate and often causes errors._\\n-\\n-- ####
        To resume a failed/incomplete download, run\\n-\\n-    ```bash\\n-    spotdl
        [pathToTrackingFile]\\n-    ```\\n+Refer to our [Installation Guide](https://spotdl.rtfd.io/en/latest/installation/)
        for more details.\\n \\n-    example:\\n+### Python (Recommended Method)\\n+
        \ - _spotDL_ can be installed by running `pip install spotdl`.\\n+  - To update
        spotDL run `pip install --upgrade spotdl`\\n \\n-    ```bash\\n-    spotdl
        'The Weeknd - Blinding Lights.spotdlTrackingFile'\\n-    ```\\n+  > On some
        systems you might have to change `pip` to `pip3`.\\n \\n-    > _Note: `.spotdlTrackingFile`s
        are automatically created when a download starts and deleted on completion_\\n+<details>\\n+
        \   <summary style=\\\"font-size:1.25em\\\"><strong>Other options</strong></summary>\\n
        \\n-- #### You can queue up multiple download tasks by separating the arguments
        with spaces\\n+- Prebuilt executable\\n+  - You can download the latest version
        from the\\n+    [Releases Tab](https://github.com/spotDL/spotify-downloader/releases)\\n+-
        On Termux\\n+  - `curl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/scripts/termux.sh
        | sh`\\n+- Arch\\n+  - There is an [Arch User Repository (AUR) package](https://aur.archlinux.org/packages/python-spotdl/)
        for\\n+    spotDL.\\n+- Docker\\n+  - Build image:\\n \\n     ```bash\\n-
        \   spotdl [songQuery1] [albumUrl] [songQuery2] ... (order does not matter)\\n+
        \   docker build -t spotdl .\\n     ```\\n \\n-    example:\\n+  - Launch
        container with spotDL parameters (see section below). You need to create mapped\\n+
        \   volume to access song files\\n \\n     ```bash\\n-    spotdl 'The Weeknd
        - Blinding Lights' https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID
        ...\\n+    docker run --rm -v $(pwd):/music spotdl download [trackUrl]\\n
        \    ```\\n \\n-    > _Note: spotDL downloads up to 4 songs in parallel, so
        for a faster experience, download albums and playlist, rather than tracks._\\n-\\n--
        #### To download youtube video with metadata from spotify, run\\n+ - Build
        from source\\n+\\t```bash\\n+\\tgit clone https://github.com/spotDL/spotify-downloader
        && cd spotify-downloader\\n+\\tpip install poetry\\n+\\tpoetry install\\n+\\tpoetry
        run python3 scripts/build.py\\n+\\t```\\n+\\tAn executable is created in `spotify-downloader/dist/`.\\n
        \\n-    ```bash\\n-    spotdl \\\"YouTubeURL|SpotifyURL\\\"\\n-    ```\\n-\\n-
        \   example:\\n+</details>\\n \\n-    ```bash\\n-    spotdl \\\"https://www.youtube.com/watch?v=EO7XnC1YpVo|https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3\\\"\\n-
        \   ```\\n-\\n-    > Note: Urls have to be separated with `|` and quoted properly
        ex. \\\"YouTubeURL|SpotifyUrl\\\"\\n-\\n-- #### To download songs with different
        output format run\\n-\\n-    ```bash\\n-    spotdl [songUrl] --output-format
        mp3/m4a/flac/opus/ogg/wav\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-
        \   spotdl [songUrl] --output-format opus\\n-    ```\\n \\n-- #### To use
        ffmpeg binary that is not on PATH run\\n-\\n-    ```bash\\n-    spotdl [songUrl]
        --ffmpeg path/to/your/ffmpeg.exe\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-
        \   spotdl [songUrl] --ffmpeg C:\\\\ffmpeg\\\\bin\\\\ffmpeg.exe\\n-    ```\\n-\\n--
        #### To generate .m3u file for each playlist run\\n-\\n-    ```bash\\n-    spotdl
        [playlistUrl] --m3u\\n-    ```\\n-\\n-    example:\\n-\\n-    ```bash\\n-
        \     spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID --m3u\\n-
        \   ```\\n-\\n-- #### To use youtube instead of youtube music run\\n-\\n-
        \   ```bash\\n-    spotdl [songUrl] --use-youtube\\n-    ```\\n-\\n-    example:\\n-\\n-
        \   ```bash\\n-      spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --use-youtube\\n-    ```\\n-\\n-- #### To manually choose a lyrics provider,
        run\\n-  \\n-    ```bash\\n-      spotdl [songUrl] --lyrics-provider lyrics_provider\\n-
        \   ```\\n-\\n-    available lyrics providers:\\n-    - genius\\n-    - musixmatch\\n+###
        Installing FFmpeg\\n \\n-    example:\\n+FFmpeg is required for spotDL. If
        using FFmpeg only for spotDL, you can simply install FFmpeg to your spotDL
        installation directory:\\n+`spotdl --download-ffmpeg`\\n \\n-    ```bash\\n-
        \     spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --lyrics-provider
        genius\\n-    ```\\n+We recommend the above option, but if you want to install
        FFmpeg system-wide,\\n+follow these instructions\\n \\n-- #### To change number
        of threads used when downloading songs run\\n+- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n+-
        OSX - `brew install ffmpeg`\\n+- Linux - `sudo apt install ffmpeg` or use
        your distro's package manager\\n \\n-    ```bash\\n-    spotdl [songUrl] --dt
        [number]\\n-    ```\\n+## Usage\\n \\n-    example:\\n+Using SpotDL without
        options::\\n+```sh\\n+spotdl [urls]\\n+```\\n+You can run _spotDL_ as a package
        if running it as a script doesn't work:\\n+```sh\\n+python -m spotdl [urls]\\n+```\\n
        \\n-    ```bash\\n-    spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --dt 8\\n-    ```\\n+General usage:\\n+```sh\\n+spotdl [operation] [options]
        QUERY\\n+```\\n \\n-- #### To change number of threads used when searching
        for songs run\\n+There are different **operations** spotDL can perform. The
        *default* is `download`, which simply downloads the songs from YouTube and
        embeds metadata.\\n \\n-    ```bash\\n-    spotdl [songUrl] --st [number]\\n-
        \   ```\\n+The **query** for spotDL is usually a list of Spotify URLs, but
        for some operations like **sync**, only a single link or file is required.\\n+For
        a list of all **options** use ```spotdl -h```\\n \\n-    example:\\n+<details>\\n+<summary
        style=\\\"font-size:1em\\\"><strong>Supported operations</strong></summary>\\n
        \\n-    ```bash\\n-    spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --st 8\\n-    ```\\n+- `save`: Saves only the metadata from Spotify without
        downloading anything.\\n+    - Usage:\\n+        `spotdl save [query] --save-file
        {filename}.spotdl`\\n \\n-- #### To ignore your ffmpeg version run\\n+- `web`:
        Starts a web interface instead of using the command line. However, it has
        limited features and only supports downloading single songs.\\n \\n-    ```bash\\n-
        \   spotdl [songUrl] --ignore-ffmpeg-version\\n-    ```\\n+- `url`: Get direct
        download link for each song from the query.\\n+    - Usage:\\n+        `spotdl
        url [query]`\\n \\n-- #### To use path template\\n+- `sync`: Updates directories.
        Compares the directory with the current state of the playlist. Newly added
        songs will be downloaded and removed songs will be deleted. No other songs
        will be downloaded and no other files will be deleted.\\n \\n-    ```bash\\n-
        \   spotdl [songUrl] --path-template 'template'\\n-    ```\\n+    - Usage:\\n+
        \       `spotdl sync [query] --save-file {filename}.spotdl`\\n \\n-    example:\\n+
        \       This create a new **sync** file, to update the directory in the future,
        use:\\n \\n-    ```bash\\n-    spotdl https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b
        --path-template '{artist}/{album}/{title} - {artist}.{ext}'\\n-    ```\\n+
        \       `spotdl sync {filename}.spotdl`\\n \\n-    possible values:\\n-    -
        {artist}\\n-    - {artists}\\n-    - {title}\\n-    - {album}\\n-    - {ext}\\n-
        \   - {playlist}\\n+- `meta`: Updates metadata for the provided song files.\\n+</details>\\n
        \\n-## `pipx` Isolated Environment Alternative\\n+## Music Sourcing and Audio
        Quality\\n \\n-For users who are not familiar with `pipx`, it can be used
        to run scripts **without**\\n-installing the spotDL package and all the dependencies
        globally with pip. (Effectively\\n-skipping over the [spotDL Installation](#Installing-spotDL)
        step)\\n+spotDL uses YouTube as a source for music downloads. This method
        is used to avoid any issues related to downloading music from Spotify.\\n
        \\n-First, you will need to install `pipx` by running:\\n+> **Note**\\n+>
        Users are responsible for their actions and potential legal consequences.
        We do not support unauthorized downloading of copyrighted material and take
        no responsibility for user actions.\\n \\n-```bash\\n-python3 -m pip install
        --user pipx\\n-python3 -m pipx ensurepath\\n-```\\n+### Audio Quality\\n \\n-Next,
        you can jump directly to running spotDL with:\\n+spotDL downloads music from
        YouTube and is designed to always download the highest possible bitrate; which
        is 128 kbps for regular users and 256 kbps for YouTube Music premium users.\\n
        \\n-```bash\\n-pipx run spotdl ...\\n-```\\n+Check the [Audio Formats](docs/usage.md#audio-formats-and-quality)
        page for more info.\\n \\n-## Contributor Guide\\n+## Contributing\\n \\n
        Interested in contributing? Check out our [CONTRIBUTING.md](docs/CONTRIBUTING.md)
        to find\\n-resources around contributing along with a guide on how to set
        up a development\\n-environment.\\n+resources around contributing along with
        a guide on how to set up a development environment.\\n \\n-## Contributors\\n+####
        Join our amazing community as a code contributor, and help accelerate\\n+<br><br>\\n+<a
        href=\\\"https://github.com/spotDL/spotify-downloader/graphs/contributors\\\">\\n+
        \ <img class=\\\"dark-light\\\" src=\\\"https://contrib.rocks/image?repo=spotDL/spotify-downloader&anon=0&columns=25&max=100&r=true\\\"
        />\\n+</a>\\n+## Donate\\n \\n-[![contributors](https://contributors-img.web.app/image?repo=spotdl/spotify-downloader)](https://github.com/spotdl/spotify-downloader/graphs/contributors)\\n+help
        support the development and maintenance of the software \u2764\uFE0F\\n \\n-##
        Authors\\n-\\n-1. [@ritiek](https://github.com/ritiek) for creating and maintaining
        spotDL for 4 years\\n-2. [@rocketinventor](https://github.com/rocketinventor)
        for figuring out YouTube Music\\n-   querying\\n-3. [@MikhailZex](https://github.com/MikhailZex)
        for, never mind...\\n+[![paypal](https://img.shields.io/badge/paypal-%2300457C.svg?&style=for-the-badge&logo=paypal&logoColor=white)](https://paypal.me/kko7)\\n+[![kofi](https://img.shields.io/badge/kofi-%23F16061.svg?&style=for-the-badge&logo=ko-fi&logoColor=white)](https://ko-fi.com/xnetcat)\\n
        \\n ## License\\n \\n-[MIT](/LICENSE)\\n+This project is Licensed under the
        [MIT](/LICENSE) License.\\n+\"},{\"sha\":\"18f09306117d359a19a8c9b24389776d4d412315\",\"filename\":\"docker-compose.yml\",\"status\":\"added\",\"additions\":6,\"deletions\":0,\"changes\":6,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docker-compose.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docker-compose.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docker-compose.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,6 @@\\n+version: \\\"3\\\"\\n+services:\\n+  spotdl:\\n+    image:
        \\\"spotdl/spotify-downloader\\\"\\n+    volumes:\\n+      - .:/music\"},{\"sha\":\"1532fbe06353502cb94410507c84b9e32d64cb59\",\"filename\":\"docs/CODE_OF_CONDUCT.md\",\"status\":\"added\",\"additions\":114,\"deletions\":0,\"changes\":114,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2FCODE_OF_CONDUCT.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2FCODE_OF_CONDUCT.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FCODE_OF_CONDUCT.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,114 @@\\n+# Contributor Covenant Code of Conduct\\n+\\n+## Our Pledge\\n+\\n+We
        as members, contributors, and leaders pledge to make participation in our
        community a\\n+harassment-free experience for everyone, regardless of age,
        body size, visible or invisible\\n+disability, ethnicity, sex characteristics,
        gender identity and expression, level of\\n+experience, education, socio-economic
        status, nationality, personal appearance, race, religion,\\n+or sexual identity
        and orientation.\\n+\\n+We pledge to act and interact in ways that contribute
        to an open, welcoming, diverse,\\n+inclusive, and healthy community.\\n+\\n+##
        Our Standards\\n+\\n+Examples of behavior that contributes to a positive environment
        for our community include:\\n+\\n+- Demonstrating empathy and kindness toward
        other people\\n+- Being respectful of differing opinions, viewpoints, and
        experiences\\n+- Giving and gracefully accepting constructive feedback\\n+-
        Accepting responsibility and apologizing to those affected by our mistakes,
        and learning from\\n+  the experience\\n+- Focusing on what is best not just
        for us as individuals, but for the overall community\\n+\\n+Examples of unacceptable
        behavior include:\\n+\\n+- The use of sexualized language or imagery, and
        sexual attention or advances of any kind\\n+- Trolling, insulting or derogatory
        comments, and personal or political attacks\\n+- Public or private harassment\\n+-
        Publishing others' private information, such as a physical or email address,
        without their\\n+  explicit permission\\n+- Other conduct which could reasonably
        be considered inappropriate in a professional setting\\n+\\n+## Enforcement
        Responsibilities\\n+\\n+Community leaders are responsible for clarifying and
        enforcing our standards of acceptable\\n+behavior and will take appropriate
        and fair corrective action in response to any behavior that\\n+they deem inappropriate,
        threatening, offensive, or harmful.\\n+\\n+Community leaders have the right
        and responsibility to remove, edit, or reject comments,\\n+commits, code,
        wiki edits, issues, and other contributions that are not aligned to this Code
        of\\n+Conduct, and will communicate reasons for moderation decisions when
        appropriate.\\n+\\n+## Scope\\n+\\n+This Code of Conduct applies within all
        community spaces, and also applies when an individual\\n+is officially representing
        the community in public spaces. Examples of representing our\\n+community
        include using an official e-mail address, posting via an official social media\\n+account,
        or acting as an appointed representative at an online or offline event.\\n+\\n+##
        Enforcement\\n+\\n+Instances of abusive, harassing, or otherwise unacceptable
        behavior may be reported to the\\n+community leaders responsible for enforcement
        at spotdladmins@googlegroups.com. All complaints\\n+will be reviewed and investigated
        promptly and fairly.\\n+\\n+All community leaders are obligated to respect
        the privacy and security of the reporter of any\\n+incident.\\n+\\n+## Enforcement
        Guidelines\\n+\\n+Community leaders will follow these Community Impact Guidelines
        in determining the consequences\\n+for any action they deem in violation of
        this Code of Conduct:\\n+\\n+### 1. Correction\\n+\\n+**Community Impact**:
        Use of inappropriate language or other behavior deemed unprofessional or\\n+unwelcome
        in the community.\\n+\\n+**Consequence**: A private, written warning from
        community leaders, providing clarity around\\n+the nature of the violation
        and an explanation of why the behavior was inappropriate. A public\\n+apology
        may be requested.\\n+\\n+### 2. Warning\\n+\\n+**Community Impact**: A violation
        through a single incident or series of actions.\\n+\\n+**Consequence**: A
        warning with consequences for continued behavior. No interaction with the\\n+people
        involved, including unsolicited interaction with those enforcing the Code
        of Conduct,\\n+for a specified period of time. This includes avoiding interactions
        in community spaces as well\\n+as external channels like social media. Violating
        these terms may lead to a temporary or\\n+permanent ban.\\n+\\n+### 3. Temporary
        Ban\\n+\\n+**Community Impact**: A serious violation of community standards,
        including sustained\\n+inappropriate behavior.\\n+\\n+**Consequence**: A temporary
        ban from any sort of interaction or public communication with the\\n+community
        for a specified period of time. No public or private interaction with the
        people\\n+involved, including unsolicited interaction with those enforcing
        the Code of Conduct, is\\n+allowed during this period. Violating these terms
        may lead to a permanent ban.\\n+\\n+### 4. Permanent Ban\\n+\\n+**Community
        Impact**: Demonstrating a pattern of violation of community standards, including\\n+sustained
        inappropriate behavior, harassment of an individual, or aggression toward
        or\\n+disparagement of classes of individuals.\\n+\\n+**Consequence**: A permanent
        ban from any sort of public interaction within the community.\\n+\\n+## Attribution\\n+\\n+This
        Code of Conduct is adapted from the [Contributor Covenant][homepage], version
        2.0,\\n+available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\\n+\\n+Community
        Impact Guidelines were inspired by\\n+[Mozilla's code of conduct enforcement
        ladder](https://github.com/mozilla/diversity).\\n+\\n+For answers to common
        questions about this code of conduct, see the FAQ at\\n+https://www.contributor-covenant.org/faq.
        Translations are available at\\n+https://www.contributor-covenant.org/translations.\\n+\\n+[homepage]:
        https://www.contributor-covenant.org\"},{\"sha\":\"8159c61e622db05f0eed4eb98ac7265f8298a64a\",\"filename\":\"docs/CONTRIBUTING.md\",\"status\":\"modified\",\"additions\":293,\"deletions\":157,\"changes\":450,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2FCONTRIBUTING.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2FCONTRIBUTING.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FCONTRIBUTING.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,215 +1,351 @@\\n-<!--- mdformat-toc start --slug=github --->\\n+<!-- omit
        in toc -->\\n+\\n+# Contributing to spotdl\\n+\\n+First off, thanks for taking
        the time to contribute! \u2764\uFE0F\\n+\\n+All types of contributions are
        encouraged and valued. See the\\n+[Table of Contents](#table-of-contents)
        for different ways to help and details about how this\\n+project handles them.
        Please make sure to read the relevant section before making your\\n+contribution.
        It will make it a lot easier for us maintainers and smooth out the experience
        for\\n+everyone involved. The community looks forward to your contributions.
        \U0001F389\\n+\\n+> And if you like the project, but just don't have time
        to contribute, that's fine. There are\\n+> other easy ways to support the
        project and show your appreciation, which we would also be\\n+> very happy
        about:\\n+>\\n+> - Star the project\\n+> - Tweet about it\\n+> - Refer this
        project in your project's readme\\n+> - Mention the project at local meetups
        and tell your friends/colleagues\\n+\\n+<!-- omit in toc -->\\n+\\n+## Table
        of Contents\\n+\\n+- [I Have a Question](#i-have-a-question)\\n+- [I Want
        To Contribute](#i-want-to-contribute)\\n+- [Reporting Bugs](#reporting-bugs)\\n+-
        [Suggesting Enhancements](#suggesting-enhancements)\\n+- [Linting, Formatting
        and Type-checking](#Linting,-Formatting-and-Type-checking)\\n+- [Python Documentation](#Python-Documentation)\\n+-
        [Overview of the Project Structure](#Overview-of-the-Project-Structure)\\n+-
        [Join The Project Team](#Join-The-Project-Team)\\n+\\n+## I Have a Question\\n+\\n+>
        If you want to ask a question, we assume that you have read the available\\n+>
        [Documentation](https://github.com/spotDL/spotify-downloader/).\\n+\\n+Before
        you ask a question, it is best to search for existing\\n+[Issues](https://github.com/spotDL/spotify-downloader/issues)
        that might help you. In case you\\n+have found a suitable issue and still
        need clarification, you can write your question in this\\n+issue. It is also
        advisable to search the internet for answers first.\\n+\\n+If you then still
        feel the need to ask a question and need clarification, we recommend the\\n+following:\\n+\\n+-
        Open an [Issue](https://github.com/spotDL/spotify-downloader/issues/new).\\n+-
        Provide as much context as you can about what you're running into.\\n+- Provide
        project and platform versions (nodejs, npm, etc), depending on what seems
        relevant.\\n+\\n+We will then take care of the issue as soon as possible.\\n+\\n+<!--\\n+You
        might want to create a separate issue tag for questions and include it in
        this description. People should then tag their issues accordingly.\\n+\\n+Depending
        on how large the project is, you may want to outsource the questioning, e.g.
        to Stack Overflow or Gitter. You may add additional contact and information
        possibilities:\\n+- IRC\\n+- Slack\\n+- Gitter\\n+- Stack Overflow tag\\n+-
        Blog\\n+- FAQ\\n+- Roadmap\\n+- E-Mail List\\n+- Forum\\n+-->\\n+\\n+## I
        Want To Contribute\\n+\\n+> ### Legal Notice <!-- omit in toc -->\\n+>\\n+>
        When contributing to this project, you must agree that you have authored 100%
        of the content,\\n+> that you have the necessary rights to the content and
        that the content you contribute may be\\n+> provided under the project license.\\n+\\n+###
        Reporting Bugs\\n+\\n+<!-- omit in toc -->\\n+\\n+#### Before Submitting a
        Bug Report\\n+\\n+A good bug report shouldn't leave others needing to chase
        you up for more information.\\n+Therefore, we ask you to investigate carefully,
        collect information and describe the issue in\\n+detail in your report. Please
        complete the following steps in advance to help us fix any\\n+potential bug
        as fast as possible.\\n+\\n+- Make sure that you are using the latest version.\\n+-
        Determine if your bug is really a bug and not an error on your side e.g. using
        incompatible\\n+  environment components/versions (Make sure that you have
        read the\\n+  [documentation](https://github.com/spotDL/spotify-downloader/).
        If you are looking for\\n+  support, you might want to check [this section](#i-have-a-question)).\\n+-
        To see if other users have experienced (and potentially already solved) the
        same issue you\\n+  are having, check if there is not already a bug report
        existing for your bug or error in the\\n+  [bug tracker](https://github.com/spotDL/spotify-downloader/issues?q=label%3Abug).\\n+-
        Also make sure to search the internet (including Stack Overflow) to see if
        users outside of\\n+  the GitHub community have discussed the issue.\\n+-
        Collect information about the bug:\\n+- Stack trace (Traceback)\\n+- OS, Platform
        and Version (Windows, Linux, macOS, x86, ARM)\\n+- Version of the interpreter,
        compiler, SDK, runtime environment, package manager, depending on\\n+  what
        seems relevant.\\n+- Possibly your input and the output\\n+- Can you reliably
        reproduce the issue? And can you also reproduce it with older versions?\\n+\\n+<!--
        omit in toc -->\\n+\\n+#### How Do I Submit a Good Bug Report?\\n+\\n+> You
        must never report security related issues, vulnerabilities or bugs to the
        issue tracker,\\n+> or elsewhere in public. Instead sensitive bugs must be
        sent by discord to xnetcat#8144.\\n+\\n+<!-- You may add a PGP key to allow
        the messages to be sent encrypted as well. -->\\n+\\n+We use GitHub issues
        to track bugs and errors. If you run into an issue with the project:\\n+\\n+-
        Open an [Issue](https://github.com/spotDL/spotify-downloader/issues/new).
        (Since we can't be\\n+  sure at this point whether it is a bug or not, we
        ask you not to talk about a bug yet and not\\n+  to label the issue.)\\n+-
        Explain the behavior you would expect and the actual behavior.\\n+- Please
        provide as much context as possible and describe the *reproduction steps*
        that someone\\n+  else can follow to recreate the issue on their own. This
        usually includes your code. For good\\n+  bug reports you should isolate the
        problem and create a reduced test case.\\n+- Provide the information you collected
        in the previous section.\\n \\n-# CONTRIBUTING\\n+Once it's filed:\\n \\n-##
        Which contributions get accepted and which ones don't?\\n+- The project team
        will label the issue accordingly.\\n+- A team member will try to reproduce
        the issue with your provided steps. If there are no\\n+  reproduction steps
        or no obvious way to reproduce the issue, the team will ask you for those\\n+
        \ steps and mark the issue as `needs-repro`. Bugs with the `needs-repro` tag
        will not be\\n+  addressed until they are reproduced.\\n+- If the team is
        able to reproduce the issue, it will be marked `needs-fix`, as well as\\n+
        \ possibly other tags (such as `critical`), and the issue will be left to
        be\\n+  [implemented by someone](#your-first-code-contribution).\\n \\n-For
        the sake of maintainability and ease-of-use standards, we are not able to
        accept all\\n-contributions that come to spotDL - don't get us wrong,\\n-**ALL
        CONTRIBUTIONS ARE WELCOME...** So just which contributions get accepted and
        which\\n-ones don't? That's what we're here to answer.\\n+<!-- You might want
        to create an issue template for bugs and errors that can be used as a guide
        and that defines the structure of the information to be included. If you do
        so, reference it here in the description. -->\\n \\n-______________________________________________________________________\\n+###
        Suggesting Enhancements\\n \\n-## A short note to contributors\\n+This section
        guides you through submitting an enhancement suggestion for spotdl, **including\\n+completely
        new features and minor improvements to existing functionality**. Following
        these\\n+guidelines will help maintainers and the community to understand
        your suggestion and find\\n+related suggestions.\\n \\n-1. Further on in this
        document, we use the term 'Users' interchangeably for both people who\\n-
        \  use spotDL as a command line tool and those who use spotDL as a library.\\n+<!--
        omit in toc -->\\n \\n-2. These requirements are aimed at helping future contributors
        (people like you) more than\\n-   its aimed at users, code quality and other
        such things.\\n+#### Before Submitting an Enhancement\\n \\n-3. Most of the
        requirements we need for a contribution to be accepted overlap with each\\n-
        \  other, so our 5-point requirements is more of a 3.5-point requirements.\\n+-
        Make sure that you are using the latest version.\\n+- Read the [documentation](https://github.com/spotDL/spotify-downloader/)
        carefully and find\\n+  out if the functionality is already covered, maybe
        by an individual configuration.\\n+- Perform a [search](https://github.com/spotDL/spotify-downloader/issues)
        to see if the\\n+  enhancement has already been suggested. If it has, add
        a comment to the existing issue\\n+  instead of opening a new one.\\n+- Find
        out whether your idea fits with the scope and aims of the project. It's up
        to you to\\n+  make a strong case to convince the project's developers of
        the merits of this feature. Keep\\n+  in mind that we want features that will
        be useful to the majority of our users and not just a\\n+  small subset. If
        you're just targeting a minority of users, consider writing an add-on/plugin\\n+
        \ library.\\n \\n-4. Yes, there might be times when you can't both improve
        spotDL and stick to the\\n-   requirements, in those rare cases, focus on
        improvement first and do your best ot meet the\\n-   requirements. Sometimes,
        you have to take a step back to take several forward.\\n+<!-- omit in toc
        -->\\n \\n-5. Most of the requirements are subjective to an extent. In your
        view, your code might meet\\n-   the requirements, in reality, from the experience
        handling many, many previous\\n-   contributions, this might not be the case.\\n+####
        How Do I Submit a Good Enhancement Suggestion?\\n \\n-6. The maintainers have
        no obligation to accept your contribution just because you put in a\\n-   lot
        of effort into it, so please feel free to open an issue about what ever it
        is that you\\n-   wish to contribute to get in touch with maintainers before
        you put in all that effort.\\n-   The maintainer will do their best to help
        you with your contributions.\\n+Enhancement suggestions are tracked as\\n+[GitHub
        issues](https://github.com/spotDL/spotify-downloader/issues).\\n \\n-______________________________________________________________________\\n+-
        Use a **clear and descriptive title** for the issue to identify the suggestion.\\n+-
        Provide a **step-by-step description of the suggested enhancement** in as
        many details as\\n+  possible.\\n+- **Describe the current behavior** and
        **explain which behavior you expected to see instead**\\n+  and why. At this
        point you can also tell which alternatives do not work for you.\\n+- You may
        want to **include screenshots and animated GIFs** which help you demonstrate
        the\\n+  steps or point out the part which the suggestion is related to. You
        can use\\n+  [this tool](https://www.cockos.com/licecap/) to record GIFs on
        macOS and Windows, and\\n+  [this tool](https://github.com/colinkeenan/silentcast)
        or\\n+  [this tool](https://github.com/GNOME/byzanz) on Linux.\\n+      <!--
        this should only be included if the project has a GUI -->\\n+- **Explain why
        this enhancement would be useful** to most spotdl users. You may also want
        to\\n+  point out the other projects that solved it better and which could
        serve as inspiration.\\n \\n-## The basic requirements of any contribution\\n+<!--
        You might want to create an issue template for enhancement suggestions that
        can be used as a guide and that defines the structure of the information to
        be included. If you do so, reference it here in the description. -->\\n \\n-1.
        **'Ease-of-use'** and **'minimal user-know-how'**\\n+### Developing\\n \\n-
        \  - *If an application has a steep learning curve, I'd rather not use it*
        - Everybody\\n+Fork the repository on Github and then clone it.\\n \\n-   -
        Your users might not always be fellow programmers, ensure that your contribution
        makes\\n-     spotDL easier to use both as a tool and as a library or at least
        don't make it harder.\\n-     Making it easier to user means shallow learning
        curves and fewer steps as a script and\\n-     'self-contained code' as a
        library, that way users (coders) don't need to peek lower-level\\n-     code
        to understand just what the hell your code does, neither do future contributors
        have\\n-     to peek too - They are the guys who actually need to understand
        your code.\\n+```bash\\n+git clone [your username]/spotify-downloader\\n+cd
        spotify-downloader\\n+```\\n \\n-   - eg.\\n+**Install poetry**\\n \\n-     -
        spotDL v2 used a unix style command-line interface, spotDL v3 uses a much
        simpler command\\n-       line interface that doesn't require any of the unix
        style input flags like `-d` or\\n-       `--download`, for a user, thats less
        stuff to type (easier to use) and also less stuff to\\n-       know - if the
        user is not a programmer, he/she/them don't have to learn to type unix-style\\n-
        \      commands.\\n+```\\n+pip install poetry\\n+```\\n \\n-     - every function
        has a standardized docStrings and type definitions, library users (other\\n-
        \      coders) don't need to look at the source code to either figure out
        the type of inputs to\\n-       be passed or what the function does. Thats
        less things they have to look, refer or figure\\n-       out. As a programmer
        you've probably wished that people wrote code like that, you and I we\\n-
        \      might as well start.\\n+**Then, to install spotDL in-place, run the
        following**\\n \\n-2. **Minimum steps** b/w the user and the end result\\n+```\\n+poetry
        install\\n+```\\n \\n-   - *'Civilization progresses by increasing the number
        of important actions that one can\\n-     perform without thinking'* - Alfred
        North Whitehead\\n+**Then, to activate virtual environment run the following**\\n
        \\n-   - You can put in as many intermediate steps as you require internally
        to get something done\\n-     but, you either decrease the steps b/w the user
        and what the user wants or at least, don't\\n-     increase the number of
        steps.\\n+```\\n+poetry shell\\n+```\\n \\n-   - eg.\\n+All changes will now
        affect the poetry installation of the spotDL cli.\\n \\n-     - In early revisions
        of spotDL, search utilities written to get playlist tracks returned\\n-       spotify
        links which the user (programmer during use as a library) had to then pass
        to a\\n-       `SongObj` constructor and then further pass the song object
        to the downloader. Now, the\\n-       search utilities to get playlist tracks
        directly returns a list of `SongObj` - thereby,\\n-       eliminating 1 step
        b/w the user (programmer) and the end result even though there is the\\n-
        \      additional intermediate step of passing the spotify links to the `SongObj`.\\n+###
        Linting, Formatting and Type-checking\\n \\n-     - In spotDL v2 command line,
        the user (the guy downloading songs) would first have to run\\n-       `spotdl
        --list $playlistLink` to write all songUrl's to a text file and then pass
        the text\\n-       file to the spotDL script in the next step which would
        then re-query spotify for song\\n-       details and proceed to download the
        song. In spotDL v3, all you have to do is run\\n-       `spotdl $thing` where
        'thing' might be a song, album, playlist or a song search query and\\n-       it
        goes about getting the requisite tracks and downloading them eliminating 2-3
        steps b/w\\n-       the user (guy downloading songs) and the end result (downloaded,
        tagged songs)\\n+- We use [`pylint`](https://pypi.org/project/pylint/) for
        linting and expect a score above `9`\\n \\n-3. **Simplicity** and **readability**
        of code\\n+  ```bash\\n+  pylint --limit-inference-results 0 --fail-under
        9 ./spotdl\\n+  ```\\n \\n-   - *The primary job of a programmed is to manage
        complexity* - Code Complete, Steve McConnell\\n+- We use [`black`](https://pypi.org/project/black/)
        for code formatting\\n \\n-   - Look man, seriously, software can get insanely
        complicated. In the real world there are\\n-     physical limits to complexity,
        there is no such limit in software - thing can get as\\n-     complicated
        as you wish but, the human brain is not designed to understand 'systems'.
        We\\n-     have no intuitive feel for 'software systems' like we do for running
        down the stairs (try\\n-     running down the stairs while looking at your
        feet, you'll understand just how intuitively\\n-     you move around), in
        other terms - you can slowly put together complex systems but,\\n-     others
        can't understand them the way you do. Beyond a point even you can't predict
        how\\n-     everything will work together. Every programmer at some point
        of time has fixed a bug only\\n-     to realize that the fix created another
        bug - that your biological incapability to\\n-     understand systems. So,
        make it a point to keep things simple when you code, and simplify\\n-     your
        code later.\\n+  ```bash\\n+  black ./spotdl\\n+  ```\\n \\n-   - Your not
        going to stick around forever, eventually someone else has to take over. Make\\n-
        \    their job easier, write code that is 'easy to understand and contribute
        to'\\n+- We use [`mypy`](https://pypi.org/project/mypy/) for type-checking
        and expect no errors at all\\n \\n-   - eg.\\n+  To install type-stubs the
        first time around\\n \\n-     - spotDL v3 was written from scratch, why? To
        simplify it. The fact that it went from\\n-       approx. 47 files in v2 to
        just around 12 files in v3 with almost no loss of functionality\\n-       is
        a good measure of the effort that went into simplifying spotDL.\\n+  ```bash\\n+
        \ mypy --ignore-missing-imports --follow-imports silent --install-types --non-interactive
        ./spotdl\\n+  ```\\n \\n-     - almost all naming, be it of functions, variables
        or classes in v3 is meant to describe the\\n-       functionality of that
        variable/function/class to some extent. As tempting as it is to\\n-       name
        variables like `x`, they got more descriptive names like `totalSongCount`.
        Most\\n-       function run into a 100+ lines while the actual code is just
        33 lines and with a little\\n-       'smart coding' possibly reducible to
        20 odd lines, why? The code is written to be 'read\\n-       and understood'
        not to 'save disk space' - your writing for the next contributor, not just\\n-
        \      for some feature you want.\\n+  ```bash\\n+  mypy ./spotdl\\n+  ```\\n
        \\n-4. Documentation, Documentation, some\\n-   **more documentation; Write
        documentation into your code.**\\n+- You can install these basic tools with\\n
        \\n-   - *good code is its own best documentation* - Code Complete, Steve
        McConnell\\n+  ```bash\\n+  pip install --force-reinstall --upgrade mypy black
        pylint\\n+  ```\\n \\n-   - In an ideal world, people would write such clear,
        readable, understandable code that there\\n-     would be no need for documentation.
        Have a doubt? Read the source code... We don't live\\n-     in that world.
        You know the code you wrote better than anyone else, write documentation\\n-
        \    for it. It doesn't have to be much - what are the inputs, what is the
        type of each input,\\n-     what does that bit of code do, any special quirky
        behavior to look out for - thats all you\\n-     need to put down. This will
        help users (other programmers using spotDL as a library)\\n+### Python Documentation\\n
        \\n-   - The hardest part of contributing is going through old code and figuring
        out what does\\n-     what, help out future contributors with that - use comments,
        use them as much as possible.\\n-     Put in reminders when your leveraging
        some weird python behavior, put in notes on just\\n-     what a particularly
        important code-block is doing, notes about docString-less functions\\n-     that
        have been imported and used and just about anything that could use additional
        notes\\n-     about it.\\n+Any submitted code is expected to have accompanying
        documentation\\n \\n-   - eg.\\n+#### mkdocs: generating documentation\\n
        \\n-     - every single function in spotDL v3 has a markdown formatted docString
        that describes the\\n-       basics required for documentation.\\n+- We generate
        our documentation with [`mkdocs`](https://www.mkdocs.org/)\\n \\n-     - every
        single place in spotDL v3 where python interpreting `None` as `False` has
        been used,\\n-       has an accompanying comment - `#! python evaluvates 'None'
        as 'False'` - its simple,\\n-       right? WRONG. Not a lot of python programmers
        even know about this 'behavior quirk' of\\n-       python.\\n+  ```bash\\n+
        \ pip install mkdocs\\n+  ```\\n \\n-5. Justified existence\\n+  `mkdocs`
        requires that all development packages are installed\\n \\n-   - *I write/accept
        code for 80% of users, not the 20% with special needs* - A maintainer,\\n-
        \    Vue.js\\n+  ```bash\\n+  poetry install\\n+  ```\\n \\n-   - The bigger
        a program gets, the harder it is to manage, improve, extend and maintain.
        From\\n-     experience the **Pareto principle** applies to code too - 20%
        of the code accounts form\\n-     80% of the functionality - So, in the name
        of maintainability, don't bother writing the\\n-     remaining 80% of code
        that provides only 20% of the functionality. If you are hellbent of\\n-     doing
        so, make a fork of spotDL, well even put up a link to your fork for other
        who\\n-     desperately need that 20% functionality.\\n+  generate docs with\\n
        \\n-   - Subject your code to [Zero-base accounting](/docs/code/CODE_GUIDELINES.md),
        it helps get\\n-     rid of all the 20% features you feel tempted to build
        - it'll also spare you that much\\n-     time and effort.\\n+  ```bash\\n+
        \ mkdocs build --strict\\n+  ```\\n \\n-   - eg.\\n+  view docs live-time
        while editing with\\n \\n-     - spotDL v2 was far more feature rich than
        v3, what did 99% of users use spotDL for? To\\n-       download songs. spotDL
        v3 got rid of all the additional, 'nice-to-have' features and\\n-       focused
        solely on downloading songs. Some might even say that it's under-featured,
        we\\n-       can't really argue with that, but we have no intentions of changing
        that.\\n+  ```bash\\n+  mkdocs serve\\n+  ```\\n \\n-______________________________________________________________________\\n+####
        DocString Formats\\n \\n-## Setup Local Environment for Development\\n+- For
        functions\\n \\n-1. Clone this repository\\n+  ```\\n+  one-liner about functions
        purpose\\n \\n-   ```bash\\n-   git clone https://github.com/spotDL/spotify-downloader.git\\n-
        \  cd spotify-downloader\\n-   ```\\n+  ### Args (optional)\\n+  - arg_name:
        description\\n \\n-2. Setup venv (Optional)\\n+  ### Returns (optional)\\n+
        \ - return value description\\n \\n-   - Windows\\n+  ### Errors (only if
        there are known unhandled Errors/thrown Errors)\\n+  - known errors\\n \\n-
        \    ```bash\\n-     py -3 -m venv env\\n-     .\\\\.venv\\\\Scripts\\\\activate\\n-
        \    ```\\n+  ### Notes (optional)\\n+  - notes if any\\n+  ```\\n \\n-   -
        Linux/macOS\\n+- For Classes\\n \\n-     ```bash\\n-     python3 -m venv .venv\\n-
        \    source .venv/bin/activate\\n-     ```\\n+  ```\\n+  one-liner about class
        purpose\\n \\n-3. Install requirements\\n+  ### Attributes\\n+  - attribute:
        description\\n \\n-   ```bash\\n-   pip install -e .\\n-   ```\\n+  ### Notes
        (optional)\\n+  - notes if any\\n+  ```\\n \\n-4. Use as command (no need
        to re-install after file changes)\\n+- For modules/package `__init__`\\n \\n-
        \  ```bash\\n-   spotdl [ARGUMENTS]\\n-   ```\\n+  ```\\n+  at max 3 lines
        about module/package purpose\\n+\\n+  optional usage example for module/package
        preferably showcasing most commonly used functionality\\n+  ```\\n+\\n+####
        Notes about docstrings\\n+\\n+- DocStrings are Inherited\\n+\\n+  ```\\n+
        \ class A:\\n+      def test(self):\\n+          \\\"\\\"\\\"Docstring for
        A.\\\"\\\"\\\"\\n+          pass\\n+\\n+  class B(A):\\n+      def test(self):\\n+
        \         pass\\n+  ```\\n+\\n+### Overview of the Project Structure\\n+\\n+|
        sub-package | purpose                                                            |\\n+|
        ----------- | ------------------------------------------------------------------
        |\\n+| `utils`     | Contains commonly used functions                                   |\\n+|
        `types`     | Custom data types used in the spotdl project                       |\\n+|
        `providers` | Different Providers to obtain info (like song details) from
        \       |\\n+| `download`  | Download manager                                                   |\\n+|
        `console`   | Different user-facing operations like download, preload and
        web-ui |\\n+| `__init__`  | Contains spotdl class that simplifies the download
        process         |\\n+\\n+### Join The Project Team\\n+\\n+[![Discord Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n+\\n+<!--
        omit in toc -->\\n+\\n+### Attribution\\n+\\n+This guide is based on the **contributing-gen**.\\n+[Make
        your own](https://github.com/bttger/contributing-gen)!\"},{\"sha\":\"7347e2454a9d289357e9c0654aa6a76ebb892e9a\",\"filename\":\"docs/CORE_VALUES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":48,\"changes\":48,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FCORE_VALUES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FCORE_VALUES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FCORE_VALUES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,48 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# CORE
        VALUES\\n-\\n-## What is this file?\\n-\\n-This is where we outline the fundamental
        ideas by which we decide what to do, what to keep\\n-and what to remove from
        spotDL.\\n-\\n-## The Deciding Factors - Our values\\n-\\n-- Simplicity:\\n-
        \ - What can we remove? Is this necessary to most (~80%+) of users?\\n-  -
        Can we make it easier to use? Fewer steps?\\n-- Focused Functionality:\\n-
        \ - spotDL is to download \\\"content\\\" from Spotify. Does this help doing
        that? (very narrow\\n-    focus here people) A.K.A - is this a \\\"need to
        have\\\"?\\n-  - if its a \\\"nice to have\\\", will most of the users use
        it? (note: its \\\"most users **use**\\\",\\n-    not \\\"most users **want**\\\")\\n--
        Users first, provided its maintainable:\\n-  - Will this do good to the users?
        They might have not even thought about it, it might make\\n-    things more
        complex (more understanding of spotdl required to use it) but will it benefit\\n-
        \   the majority (~80%+) of them in the process?\\n-  - Provided it helps
        the users, if it has a big impact on maintainability, its still a no-no.\\n-\\n-If
        a contribution satisfies at least 2 of our deciding values it gets accepted,
        else, it\\n-doesn't.\\n-\\n-## A few general notes\\n-\\n-1. The term 'users'
        is thrown around a lot. For a project like `FFmpeg`, users is that group\\n-
        \  of coders who are unafraid of a command-prompt (it says so on the downloads
        page itself).\\n-   Here, '***users***' refers not to developers but normal
        *homo sapiens* - just about\\n-   anybody who wants to download \\\"content\\\"
        from Spotify.\\n-\\n-2. The term 'maintainability' has also been given significant
        weight. This is used in 2\\n-   senses of the word:\\n-\\n-   - General Simplicity
        - Can I read the code \\\\***once** and understand what is going on?\\n-   -
        Industry standard maintainability measures (the same one outlined on betterCodeHub)\\n-\\n-3.
        The ideas outlined here are still very much a work in progress and is open
        to discussion\\n-   but, we will stick to these. Some of the biggest companies
        & many more ambitious projects\\n-   has all fallen to ruin because of the
        'undisciplined pursuit of more'. That should not\\n-   happen here. This is
        not so much of an outline of what we should do but, an outline of\\n-   what
        '**we should not do**'.\\n-\\n-4. You're encouraged to question each contribution/existing
        functionality as required.\"},{\"sha\":\"59eac58067603d2ede08e20f35f4a9e6ef39e832\",\"filename\":\"docs/INSTALLATION.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":63,\"changes\":63,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FINSTALLATION.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2FINSTALLATION.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2FINSTALLATION.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,63 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# spotDL
        Installation Guide\\n-\\n-spotDL is a free and open source tool that downloads
        your Spotify playlists & music\\n-\\n-> **The fastest, easiest, and most accurate
        command-line music downloader**\\n-\\n-## Prerequisites\\n-\\n-- Python 3.6.1
        or above (added to PATH)\\n-- FFmpeg 4.2 or above (added to PATH)\\n-\\n-###
        Adding Python to PATH\\n-\\n-When installing Python, ensure to select \\\"**Add
        to PATH**\\\".\\n-\\n-![Add to PATH Image](/docs/static/ADD_TO_PATH.png)\\n-\\n-###
        Installing FFmpeg\\n-\\n-- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n--
        OSX - `brew install ffmpeg`\\n-- Linux - `sudo apt install ffmpeg` or use
        your distros package manager\\n-\\n-### Verifying Versions\\n-\\n-`py -V`
        - Should return \\\"Python 3.X.X\\\". Please ensure you have v3.6.1 or greater.\\n-\\n-`FFmpeg
        -version` - Should return starting with \\\"ffmpeg version YYYY-MM-DD\\\"\\n-\\n-##
        Installing spotDL\\n-\\n-You can install spotDL by opening a terminal and
        typing:\\n-\\n-```shell\\n-pip install spotdl\\n-```\\n-\\n-If you require
        further help, ask in our [Discord Server](https://discord.gg/xCa23pwJWY)\\n-\\n-[![Discord
        Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n-\\n-##
        Where does spotDL download songs?\\n-\\n-spotDL downloads files to the folder
        where you ran spotDL from.\\n-\\n-Open pwsh/powershell/cmd/terminal/similar
        in the folder you want files to download to, or\\n-cd to desired folder.\\n-\\n-**Windows
        Shortcut:** Navigate to the folder you want the files to download to.\\n-`SHIFT
        + RIGHT CLICK`, then select \\\"Open PowerShell window here\\\"\\n-\\n-![Windows
        PWSH](/docs/static/POWERSHELL.png)\\n-\\n-## We have a public Discord server
        at **[discord.gg/xCa23pwJWY](https://discord.gg/xCa23pwJWY)!**\\n-\\n-[![Discord
        Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n-\\n-##
        Installation Guide Authors\\n-\\n-- Initial Draft - [@commanderabdu](https://github.com/commanderabdu)
        - NoSubwayzz\\n-- Editing & Updating - [@Silverarmor](https://github.com/Silverarmor)\"},{\"sha\":\"beb89fde156d3640db89eb60a362dba32249da53\",\"filename\":\"docs/code/CODE_GUIDELINES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":250,\"changes\":250,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FCODE_GUIDELINES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FCODE_GUIDELINES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2FCODE_GUIDELINES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,250 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!--
        Coding guidelines to go here, all of them - from the simple to the obscure
        -->\\n-\\n-# Code Guidelines\\n-\\n-Various code guidelines we request you
        to follow through and through your code (at least\\n-the code you contribute
        here). Some will seem important and useful, others dumb and\\n-inconsequential
        but then... Whatever (no fancy reasons here).\\n-\\n-______________________________________________________________________\\n-\\n-#
        Index\\n-\\n-1. Naming of\\n-\\n-   - [Variables](#Variables)\\n-   - [Functions](#Functions)\\n-
        \  - [Classes](#Classes)\\n-   - [General Conventions](#General)\\n-\\n-2.
        [Sizing of Modules/Classes/Functions](#Sizing)\\n-\\n-3. [In-line Documentation](#Documentation)\\n-\\n-4.
        [Zero-base accounting](#Zero-base-accounting)\\n-\\n-5. [Just how much of
        this is compulsory?](#Necessary-conventions)\\n-\\n-______________________________________________________________________\\n-\\n-#
        Naming conventions\\n-\\n-Internal consistency in naming greatly reduces the
        effort in understanding the codebase by\\n-getting rid of cognitive overhead
        allowing you to focus on what matters. This is\\n-especially useful in large
        codebases. The following naming conventions are only for\\n-python.\\n-\\n-##
        Variables\\n-\\n-- Use Camel case naming - Uppercase the first letter of each
        word after the first. eg,\\n-  - `songObject`\\n-  - `randomVariableThatNoOneCaresAbout`\\n-\\n-______________________________________________________________________\\n-\\n-##
        Functions\\n-\\n-- Use snake case - fully lowercase names with underscores
        instead of spaces. eg,\\n-  - `download`\\n-  - `save_to_disk`\\n-  - `songObj.get_contributing_artists`\\n-\\n-______________________________________________________________________\\n-\\n-##
        Classes\\n-\\n-- Capitalize the first letter of each word. eg,\\n-  - `DisplayManager`\\n-
        \ - `SongObj`\\n-  - `Spotdl`\\n-\\n-______________________________________________________________________\\n-\\n-##
        General\\n-\\n-- Use descriptive names - your names should convey the purpose.
        eg,\\n-\\n-  - `car` or `bus` instead of `fourTire` when you are referencing
        a 4-wheeled vehicle\\n-  - `download_song` instead of `get` you might also
        be *'getting'* song metadata - why the\\n-    confuse the reader?\\n-  - `DisplayManager`
        instead of `Manager` - *Was it 'DownloadManager' or just 'Manager'?\\n-    Crappy
        naming...*\\n-\\n-- Avoid abbreviations, if you can't use mnemonic abbreviations
        - stuff you can pronounce.\\n-  eg,\\n-\\n-  - `cLine` instead of `cne`\\n-
        \ - `DlManager` instead of `DlMngr`\\n-  - `download_from_spot` instead of
        `download_fr_spfy`\\n-\\n-______________________________________________________________________\\n-\\n-#
        Sizing\\n-\\n-500 line files are daunting - as someone new to the codebase,
        you don't know if you can\\n-get through all of that code... Sizing limits
        prevent you from writing mammoth code, force\\n-you to ruthlessly simplify
        and ensure proper abstraction (as it forces you to break-up\\n-any unusually
        large classes/functions you might have)\\n-\\n-- Python\\n-\\n-  - Keep python
        lines ***under 90 columns in length***, i.e. 90 characters per line including\\n-
        \   indents\\n-  - Keep python modules ***under 200 lines of code***, excluding
        comments, empty lines,\\n-    docstring's.\\n-  - Keep python classes ***under
        100 lines of code***, excluding comments, empty lines,\\n-    docstring's.\\n-
        \ - Keep python functions ***under 75 lines of code***, excluding comments,
        empty lines,\\n-    docstring's.\\n-\\n-- Markdown\\n-\\n-  - Keep Markdown
        lines ***under 100 columns in length***, i.e. 100 characters including\\n-
        \   spaces\\n-  - Keep Markdown files ***under 750 lines***, including comments
        and empty lines\\n-\\n-Counting lines of python code is arduous, so you can
        use the `totalLNC.py`, `funcLNC.py` &\\n-`classLNC.py` from the `.\\\\dev
        utils\\\\` folder to do the heavy lifting. Run them by passing\\n-them a folder
        name. eg, `python '.\\\\dev Utils\\\\classLNC.py' .\\\\spotdl`, all these
        command\\n-line utils, count 90 characters as a line, so you can't cheat by
        just writing longer but\\n-fewer lines of code.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Documentation\\n-\\n-With modern code editors like VS Code providing markdown-enabled
        docstring display when\\n-you hover over a function or class, referencing
        documentation is easier than ever before -\\n-provided you can write good
        in-line documentation.\\n-\\n-- Docstring's for functions\\n-\\n-  - Start
        with types of arg, arg name and purpose. Use markdown's code-syntax for arg
        type and\\n-    arg name, followed by a colon and description\\n-  - Note
        return type with `RETURNS` and an optional description of the same\\n-  -
        Describe the purpose of the given function, and other quirks\\n-  - Don't
        use coding terms except names of arg passed to function/class\\n-\\n-- Control
        flow comments\\n-\\n-  - Comment out control flow of your code before you
        start coding, use `#` for these comments\\n-  - Indent control flow comments
        as required\\n-  - Now, others who want to read your code don't have to put
        too much effort into figuring out\\n-    the control flow\\n-  - Don't use
        coding terms or reference functions and variables here except the most basic\\n-
        \   ones\\n-\\n-- Notes about the code\\n-\\n-  - Underline quirky behavior
        or details related to your code using comments, differentiate\\n-    these
        from control flow comments by starting them with `#!` instead of `#`\\n-  -
        Explain design decisions here\\n-  - Feel free to reference what ever you
        want\\n-\\n-- Your code itself\\n-\\n-  - Good code is it's own documentation\\n-
        \ - Don't be afraid to visually block out your code using multiple constitutive
        blank lines\\n-\\n-- An Example,\\n-\\n-  ```python\\n-\\n-  def download_img(imageUrl,
        savePath = '.\\\\img.jpg'):\\n-      '''\\n-      `str` `imgUrl` : Url of
        the image to be saved\\n-\\n-      `str` `savePath` : path at which file is
        to be saved\\n-\\n-      RETURNS `bool`\\n-\\n-      downloads image at `imageUrl`
        to `savePath`. Returns `True` if download is successful.\\n-      Folders
        in `savePath` are not created, you'll get an error if they don't exist.\\n-
        \     '''\\n-\\n-      # Setup a python do-while loop equivalent\\n-\\n-      #!
        As users of this library usually have terrible internet connections, we\\n-
        \     #! attempt to download the image up to 10 times on a UrlError\\n-      \\n-
        \     while True:\\n-          try:\\n-              # Attempt to read image
        as binary file\\n-              #! This is the usual cause of errors\\n-              \\n-
        \             imgData = urlopen(imageURL).read()\\n-\\n-\\n-\\n-\\n-              #
        Save image to disk\\n-\\n-              #! Though creating the required directories
        is an easy job, it is intensionally left\\n-              #! out here as this
        lib has to run in highly restricted directory trees environments\\n-              #!
        where the user doesn't necessarily have permissions to create directories.\\n-
        \             #! Assuming the user has no permission to create dirs, this
        code can still be used by\\n-              #! him/her/them to save images
        without having to edit the code themselves.\\n-              #!\\n-              #!
        We return True on success, thereby exiting the function\\n-\\n-              with
        open(savePath, 'wb') as file:\\n-                  file.write(imgData)\\n-\\n-
        \             return True\\n-\\n-\\n-\\n-\\n-          except UrlError or
        FileNotFoundError:\\n-              if errorCount > 10:\\n-\\n-                  #!
        Returns False on failing more than 10 times, exit func...\\n-                  return
        False\\n-              else:\\n-                  errorCount += 1\\n-  ```\\n-\\n-
        \ - There are only 11 lines of code, yet the function is 47 lines long. Is
        it worth it?\\n-    Absolutely. The next guy who comes along won't wonder
        why you attempt to download an image\\n-    10 times and won't get rid of
        the loop thinking it to be pointless, he/she/they wouldn't\\n-    attempt
        to create the necessary file directories as required - something that seems
        like a\\n-    more functional addition to the function than the while loop
        - knowing why that was left\\n-    out in the first place.\\n-\\n-  - The
        doc string allows someone who intends to use this function in their code a
        ready\\n-    reference to what each arg is used for and more importantly,
        just what the return value\\n-    does. On just another random day who would
        have ever thought that a 'download' function\\n-    returning True means that
        to download was successful?\\n-\\n-  - And the weird function structure makes
        sense without major head-whacking.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Zero-base accounting\\n-\\n-Zero-base accounting is a corporate system in
        which every department has to justify a need\\n-for its existence each year.
        If you can't justify the need, the department is dissolved.\\n-It is very
        easy to just add features and functionality to an OSS project, but with every\\n-single
        line of code, it also becomes harder to maintain - it's another piece of\\n-unnecessary
        code, another unneeded complication, anther thing you have to keep in mind\\n-while
        coding.\\n-\\n-Every top level module, class and function has an entry at\\n-[PURPOSES.md](..%5CDesign%20Docs%5CPURPOSES.md),
        if you can't put up a justification for\\n-any bit of top level code, that
        bit gets deleted, if there is any sub-code (think class\\n-methods under a
        class) don't keep in line with the **PURPOSES** file, that bit gets\\n-deleted.
        Essentially, the **PURPOSES** file, helps enforce abstraction, encapsulation
        and\\n-zero-base accounting.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Necessary conventions\\n-\\n-Now, now, you don't expect us to follow all of
        these while writing code do you? Nope we\\n-don't - that's a lot to ask. But
        we absolutely need you to follow\\n-[Naming conventions](#Naming-conventions)
        and\\n-[Zero-base accounting](#Zero-base-accounting). We also ask that you
        do your level best to\\n-comply with other guidelines, but feel free to be
        flexible in that. We have no intention\\n-to accept code that totally disregards
        the conventions.\"},{\"sha\":\"fcdae5bae852e2a9c7c974e9db5c1bc076e20d52\",\"filename\":\"docs/code/MODULES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":77,\"changes\":77,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FMODULES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FMODULES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2FMODULES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,77 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# Modules\\n-\\n-What
        are the various sub-packages and modules in spotDL? What do they do? Use this
        file a\\n-a general look up for what you want to do.\\n-\\n-## Index\\n-\\n-1.
        [search](#The-search-package)\\n-\\n-   - [provider](#provider)\\n-   - [songObj](#songObj)\\n-
        \  - [spotifyClient](#spotifyClient)\\n-   - [utils](#utils)\\n-\\n-2. [download](#The-download-package)\\n-\\n-
        \  - [downloader](#downloader)\\n-   - [ffmpeg](#ffmpeg)\\n-   - [progressHandlers](#progressHandlers)\\n-\\n-##
        The search package\\n-\\n-This is where are the song searching, matching and
        related code is organized. The only two\\n-modules you will ever need to use
        from this package if you intend to use spotDL as a\\n-library would be `spotdl.search.songObj`
        and `spotdl.search.utils`, all the other module's\\n-functionality hook into
        the aforementioned modules.\\n-\\n-### provider\\n-\\n-There are 2 modules
        here that return song details, the 'provider' module is one and\\n-'spotifyClient'
        is the other. The provider module queries YouTube Music and filters the\\n-results.\\n-\\n-###
        songObj\\n-\\n-This module houses the 'SongObj' class - something you will
        use often. The 'songObj'\\n-constitutes the only way to pass around and query
        song details within spotDL. All top\\n-level code within the 'search' package
        returns 'songObjects' and all top level code within\\n-the 'download' package
        take SongObj as inputs.\\n-\\n-### spotifyClient\\n-\\n-The 'spotifyClient'
        module is a wrapper around `spotipy.Spotify` class, it ensures that\\n-there
        is only one instance of the `Spotify` class at runtime and that the same class
        is\\n-shared across multiple 'internal name-spaces' instead of creating new
        clients each time.\\n-Essentially, it implements a 'singleton' pattern.\\n-\\n-###
        utils\\n-\\n-Simple utilities to handle the times when you deal with album/playlist
        Url's and song\\n-queries by name instead of track Url's.\\n-\\n-______________________________________________________________________\\n-\\n-##
        The download package\\n-\\n-This is where are the downloading, converting,
        tagging and related code is organized. The\\n-only two modules you will ever
        need to use from this package if you intend to use spotDL\\n-as a library
        would be `spotdl.download.downloader` and `spotdl.download.ffmpeg`, all the\\n-other
        module's functionality hook into the aforementioned modules.\\n-\\n-### downloader\\n-\\n-The
        downloader module is responsible for downloading the songs (from youtube if
        a match is\\n-found), converting them to mp3 format and applying metadata.\\n-\\n-###
        ffmpeg\\n-\\n-The ffmpeg module contains functions to verify `ffmpeg` version
        and convert downloaded\\n-songs to the `mp3` format.\\n-\\n-### progressHandlers\\n-\\n-The
        progressHandlers module handles the progress bar, download tracking and everything\\n-related
        to what you see in the terminal.\"},{\"sha\":\"a2a9397a2e4eaae9300fc03578d80dfc4527b2d5\",\"filename\":\"docs/code/OOP_REFRESHER.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":322,\"changes\":322,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FOOP_REFRESHER.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2FOOP_REFRESHER.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2FOOP_REFRESHER.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,322 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!--
        refresher on Object Oriented Programing -->\\n-\\n-# Object Oriented Programing
        (*noun.*)\\n-\\n-It's a set of principles to handle complexity invented at
        Xerox Parc alongside the GUI.\\n-Theses principles are more important the
        bigger the codebase.\\n-\\n-We don't go into icky terminology here, just a
        couple of analogies.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Index\\n-\\n-1. [Abstraction](#Abstraction)\\n-2. [Encapsulation](#Encapsulation)\\n-3.
        [Polymorphism](#Polymorphism)\\n-4. [Inheritance](#Inheritance)\\n-5. [A Gist](#Gist)
        (for lazy guys & gals)\\n-\\n-______________________________________________________________________\\n-\\n-#
        The principles\\n-\\n-## Abstraction\\n-\\n-Abstraction is basically simplification
        - a car is not 100 screws of x size, 10032 screws\\n-of y size, 15 metal panels
        of this shape, 30 plastic panels of that shape, a steering\\n-wheel with a
        drive rod, wiring and a horn and a few thousand other parts working in unison\\n-perfectly
        resulting in 4 tires moving so that the whole vehicle moves forwards. A car
        is\\n-a chassis, an engine, a steering system, seats and safety features working
        to move a\\n-vehicle.\\n-\\n-The second, systems based explanation is easier
        to comprehend and manage. In other terms,\\n-abstraction is the ***breaking
        down of a big complex system\\n-into smaller, self-contained and single-purpose
        sub-systems*** and if necessary, even\\n-sub-sub-sub-systems. The key requirements
        here would be 'small', 'single-purpose' and\\n-'self-contained' subsystems.\\n-\\n-```python\\n-#
        An example of bad Abstraction.\\n-\\n-# a class named masterClass should ring
        alarm bells\\n-billingCounter = masterClass()\\n-\\n-# products still in the
        store and how many units are left\\n-inventory = billingCounter.getInventory()\\n-print(inventory)
        \       # {'akja fruit': 15,\\n-                        # 'sambesa': 93,\\n-
        \                       # ...,\\n-                        # 'zabberwokey fry':
        19\\n-                        # }\\n-\\n-# 198 customers had their products
        billed at this counter\\n-totalSales = billingCounter.getNumberOfSales()\\n-print(totalSales)
        \      # 198\\n-\\n-# 19,763u worth profits were made (u --> units, star wars
        currency)\\n-totalProfits = getProfit('today', billingCounter)\\n-print(totalProfits)
        \    # 19,763\\n-```\\n-\\n-Why is the above a bad example of Abstraction?
        It's not single purpose or self-contained.\\n-It's not single purpose because
        inventory has absolutely no relation with number of sales.\\n-It is not self
        contained because lets assume that `masterClass` majorly deals with\\n-finances
        - number of sales, profits, etc... having a function `getProfit` outside or
        the\\n-class breaks its 'self-contained-ness'. Some might argue otherwise
        but then, OOP is a set\\n-of principles, they are still a tiny bit subjective
        in nature.\\n-\\n-```python\\n-# This is a properly abstracted version of
        the previous 'bad' example. I do\\n-# realize that this is an absurd example
        but it serves its purpose so...\\n-#\\n-# The outputs are the same as before\\n-\\n-#
        inventory handling\\n-inventory = inventoryClass()\\n-\\n-currentInventory
        = inventory.getInventory()\\n-print(currentInventory)\\n-\\n-# finance handling\\n-finances
        = financeClass()\\n-\\n-totalSales = finances.getNumberOfSales()\\n-print(totalSales)\\n-\\n-totalProfits
        = finances.getProfits('today')\\n-print(totalProfits)\\n-```\\n-\\n-Yep, this
        is a bit longer, there is an additional class and the class names are absurd,\\n-but
        the above version of the 'bad' example is more descriptive through the code
        itself and\\n-also no one is scratching their heads as to what else the `billingCounter`
        object can dish\\n-out beyond inventory and finances. The perks of proper
        abstraction might not be visible\\n-in this rather silly example, but be rest
        assured, the bigger your codebase gets the more\\n-dangerous lack of abstraction
        becomes.\\n-\\n-______________________________________________________________________\\n-\\n-##
        Encapsulation\\n-\\n-While abstraction is all about simplification, encapsulation
        is about consistent\\n-abstraction. In essence, encapsulation says that if
        'chassis' is a referred to as a\\n-sub-component of a car, you can't go down
        to the details and start talking about some nut\\n-and bolt fitted on the
        door hinge. Encapsulation is about\\n-***ensuring a constant level of abstraction***.
        Not so clear huh? Nothing like a straight\\n-forward coded example.\\n-\\n-```python\\n-#
        An example of bad encapsulation\\n-\\n-# lets say that the inventory class
        provides access to the inventories of all\\n-# star wars superMarkets across
        the galaxy.\\n-inventory = inventoryClass()\\n-\\n-# d4a7 is the code of a
        superMarket on Tatooine, a star wars desert planet\\n-productCategory = inventory.getInventory('d4a7')['akja
        fruit'].details.category\\n-print('category of akja fruit is ' + productCategory)\\n-
        \                                           # category of akja fruit is 'fruit'\\n-```\\n-\\n-Why
        is this bad encapsulation? Because it breaks from a consistent level of abstraction.\\n-The
        `inventoryClass` is meant to simplify complexity, it deals at the level of\\n-inventories/products.
        to pull something like\\n-`getInventory('d4a7')['akja fruit'].details.category`
        means talking about details from a\\n-lower level of abstraction. The problem
        arises when someone tries to read your code, that\\n-person now has to know
        the inner workings of how products are stored in the\\n-`inventoryClass` to
        understand the above code which make to whole point of abstraction\\n-wasteful.\\n-\\n-```python\\n-#
        A better version of the 'bad' example.\\n-#\\n-# Outputs are same as before\\n-\\n-inventory
        = inventoryClass()\\n-\\n-tatooineInventory = inventory.getInventory('d4a7')\\n-productCategory
        = tatooineInventory.getCategory('akja fruit')\\n-print('category of akja fruit
        is ' + productCategory)\\n-```\\n-\\n-There is a lot of freedom to be gained
        by directly referencing details from lower levels\\n-of abstraction but for
        any project over 500 lines, the freedom is not worth the confusion\\n-and
        chaos it will eventually cause. The same extent of functionality can be produced
        with\\n-encapsulation like the example utilized a `getCategory` function,
        but adding function upon\\n-function to provide the same freedom/flexibility
        while ensuring encapsulation goes\\n-against the basic purpose of managing
        complexity (who can keep track of 20 functions\\n-provided by a single class?).
        Eventually you have to tradeoff 'managing of complexity'\\n-against 'freedom/flexibility'.
        In 99% or cases with codebases above 500 lines, it'd be\\n-better to manage
        complexity first and bother about flexibility/freedom later.\\n-\\n-Some coders
        enforce consistent abstraction via 'data hiding'. This author personally\\n-encourages
        such practices.\\n-\\n-______________________________________________________________________\\n-\\n-##
        Polymorphism\\n-\\n-Polymorphism comes from the greek words meaning 'different
        shapes', Polymorphism is a\\n-'generalization' relation - the ability to handle
        different classes/objects the same way\\n-(OR) the capability to use an instance
        without regard for its type. One of the most common\\n-ways of implementing
        polymorphism is via interfaces.\\n-\\n-```python\\n-# A bad example of polymorphism\\n-#\\n-#
        Print the areas of different shapes\\n-\\n-circle = shapeCircle(radius = 7)\\n-area
        = circle.area()\\n-print(area)\\n-\\n-squire = shapeSquire(side = 5)\\n-area
        = squire.sideSquire()\\n-print(area)\\n-\\n-rhombus = shapeRhombus(diagonals
        = (1, 5))\\n-area = rhombus.calculateArea()\\n-print(area)\\n-\\n-triangle
        = shapeTriangle(a = 15, b = 10, c = 13)\\n-area = triangle.halfBaseTimesHeight()\\n-print(area)\\n-\\n-#
        Remake of the 'bad' example using polymorphism\\n-\\n-circle = shapeCircle(radius
        = 7)\\n-squire = shapeSquire(side = 5)\\n-rhombus = shapeRhombus(diagonals
        = (1,5))\\n-triangle = shapeTriangle(a = 15, b = 10, c = 13)\\n-\\n-shapes
        = [circle, squire, rhombus, triangle]\\n-\\n-for shape in shapes:\\n-    area
        = shape.getArea()\\n-    print(area)\\n-```\\n-\\n-What's the difference?
        In the polymorphism based remake, the method to get area is\\n-standardized,
        this means that different shape classes that require deferent calculation
        to\\n-obtain the area can now be treated the exact same way.\\n-\\n-______________________________________________________________________\\n-\\n-##
        Inheritance\\n-\\n-Inheritance works alongside polymorphism just as abstraction
        works with encapsulation.\\n-while polymorphism is a 'generalization' relation.
        Inheritance is a 'specialization'\\n-relation. Don't build everything from
        scratch - leave the common features be, it reduces\\n-the details you have
        to keep in mind while coding.\\n-\\n-```python\\n-# An example without inheritance\\n-\\n-class
        car(object):\\n-    # code goes here\\n-\\n-    def getNumberPlate(self):\\n-
        \       return self.registrationNumber\\n-    \\n-    def getVehicleName(self):\\n-
        \       return self.model\\n-    \\n-    # more code\\n-\\n-class bike(object):\\n-
        \   # code goes here\\n-\\n-    def getNumberPlate(self):\\n-        return
        self.numberPlate\\n-    \\n-    def getVehicleName(self):\\n-        return
        self.bikeName\\n-    \\n-    # more code\\n-\\n-class tractor(object):\\n-
        \   # code goes here\\n-\\n-    def getNumberPlate(self):\\n-        return
        self.companyProvidedNumber\\n-    \\n-    def getVehicleName(self):\\n-        return
        self.modelName\\n-    \\n-    # more code\\n-```\\n-\\n-The polymorphism followed
        here make these objects fairly manageable but for someone\\n-reading all of
        this code, he/she/them will have to read through the same set of code\\n-multiple
        times. This usually causes two problems - ballooning of code and confusion
        that\\n-arises from reading the same set of code again and again in the context
        of different\\n-variables - *was it `self.modelName`\\n-or `self.bikeName`
        or `self.model`? I'm confused...*\\n-\\n-```python\\n-# An inheritance based
        example\\n-\\n-class vehicle(object):\\n-    # code goes here\\n-\\n-    def
        getNumberPlate(self):\\n-        return self.numberPlate\\n-    \\n-    def
        getVehicleName(self):\\n-        return self.name\\n-    \\n-    # more code\\n-\\n-class
        car(vehicle):\\n-    # car specific functions\\n-\\n-class bike(vehicle):\\n-
        \   # bike specific functions\\n-\\n-class tractor(vehicle):\\n-    # tractor
        specific functions\\n-\\n-```\\n-\\n-This example treat's `car`, `bike`, and
        `tractor` as special instances of `vehicle`,\\n-removing a lot of the confusion
        that accompanies the earlier example. Know what a\\n-particular function does
        in a parent class to a large extent allows you to know what a\\n-'child class'
        does. Only one note of warning here, use shallow inheritance, deep\\n-inheritance
        trees will have you searching for which parent/super-parent defines a\\n-particular
        variable/function and which parent/super-parent modifies those same\\n-variables/functions
        leading to a confusing mess.\\n-\\n-______________________________________________________________________\\n-\\n-#
        Gist\\n-\\n-1. Abstraction\\n-\\n-   - breaking down of a big complex system
        into smaller, self-contained and single-purpose\\n-     sub-systems\\n-   -
        emphasis on ***small, self-contained*** and ***single-purpose***\\n-   - extra
        emphasis on ***self-contained*** and ***single-purpose***\\n-   - extra extra
        extra emphasis on ***single-purpose***\\n-   - Now read that ***x3 times***
        over\\n-\\n-2. Encapsulation\\n-\\n-   - consistent level of abstraction (emphasis
        on ***consistent***)\\n-   - A.K.A, no public referencing of internal-attributes,
        ***especially*** if the attributes\\n-     are ***complex objects***\\n-   -
        `knifeCompany = house.kitchen.knife.company.name`, ***DON'T DO THIS!***\\n-
        \  - ***hide as much as possible*** - enforce encapsulation\\n-\\n-3. Polymorphism\\n-\\n-
        \  - generalization relation - the capability to use an instance without regard
        for its type\\n-   - use ***standard interfaces*** for members of a logical
        class (triangles and circles belong\\n-     to the same logical class - 'shapes')
        as far as possible\\n-\\n-4. Inheritance\\n-\\n-   - specialization relation
        - don't build everything from scratch\\n-   - ***beware of deep inheritance***
        - i.e. more than 5 levels of inheritance\"},{\"sha\":\"8db983c58e8fe4001c1c5f095e925c789baeff9e\",\"filename\":\"docs/code/download/downloader.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fdownloader.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fdownloader.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fdownload%2Fdownloader.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of download\\\\downloader -->\"},{\"sha\":\"c1f72ae526a722b9daa44580726c66c9c08b782c\",\"filename\":\"docs/code/download/ffmpeg.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fffmpeg.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2Fffmpeg.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fdownload%2Fffmpeg.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of download\\\\ffmpeg -->\"},{\"sha\":\"5db7e570a11bf88cfda6777ffa36249d3e20d12c\",\"filename\":\"docs/code/download/progressHandlers.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2FprogressHandlers.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fdownload%2FprogressHandlers.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fdownload%2FprogressHandlers.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of download\\\\progressHandlers -->\"},{\"sha\":\"8b73ed1e977e2a6bd06f6a7922c11b873b9c3c5b\",\"filename\":\"docs/code/search/provider.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Fprovider.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Fprovider.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2Fprovider.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\provider -->\"},{\"sha\":\"0e09653a33333b30ed2568614eb0d55e081be165\",\"filename\":\"docs/code/search/songObj.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FsongObj.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FsongObj.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2FsongObj.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\songObj -->\"},{\"sha\":\"ee30c13c74f3b1b035afcebd85802e2206612553\",\"filename\":\"docs/code/search/spotifyClient.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FspotifyClient.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2FspotifyClient.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2FspotifyClient.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\spotifyClient -->\"},{\"sha\":\"e496812cb6978f0b2077e1e1f61b1b8d4b5d4706\",\"filename\":\"docs/code/search/utils.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Futils.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fcode%2Fsearch%2Futils.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fcode%2Fsearch%2Futils.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of search\\\\utils -->\"},{\"sha\":\"2be29b0be52bcdd6c42b7b6a201dd89f0e8e4a70\",\"filename\":\"docs/design/INTERFACES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":3,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FINTERFACES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FINTERFACES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fdesign%2FINTERFACES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,3 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-<!-- docs
        of major spotDL interfaces -->\"},{\"sha\":\"ec8f059df1f5b402be374a382a2fc71b7a40b1b3\",\"filename\":\"docs/design/PURPOSES.md\",\"status\":\"removed\",\"additions\":0,\"deletions\":144,\"changes\":144,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FPURPOSES.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fdesign%2FPURPOSES.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fdesign%2FPURPOSES.md?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,144 +0,0 @@\\n-<!--- mdformat-toc start --slug=github --->\\n-\\n-# PURPOSES\\n-\\n-##
        What is this document?\\n-\\n-v3.0.0 of spotDL was found to be lacking in
        many ways. While it fixed many of the issues\\n-its predecessor had, it brought
        with it, many issues of its own. Primarily, poor\\n-access-control and unnecessary
        functionality.\\n-\\n-To address the issues of mucked-up class's, functions,
        modules and unnecessary\\n-functionality this project here on works on zero-base-accounting
        - if you can't justify\\n-it's need, you don't build it. The purpose of various
        functions, modules and classes will\\n-be listed here and adhered to strictly.
        This document then, represents the primary source\\n-of truth as to the requirement
        and responsibility of each unit of code.\\n-\\n-## Structure\\n-\\n-- module
        name\\n-  - class or function name\\n-    - **PURPOSE** and **REASON**\\n-\\n-Purpose
        and Reason are fairly similar words. By purpose we mean just what that class
        or\\n-function is meant to do, it's functionality. By Reason we mean justification
        as to why\\n-that class/function should exist\\n-\\n-______________________________________________________________________\\n-\\n-##
        songObj\\n-\\n-### songObj class\\n-\\n-**PURPOSE** songObj is meant to serve
        dual purposes - to act as an ***exchange currency***\\n-through out spotDL
        and as a central repository of all known details of a given song.\\n-\\n-**REASON**
        A lot of what spotDL does requires passing around of various details about\\n-songs.
        The songObj serves as a ***single-point-of-access*** to all the various details
        we\\n-might seek. The eliminates the need to query the same info multiple
        times from a server\\n-while eliminating any ambiguity as to code unit return
        types. It also allows a consistent\\n-interface to song details thereby adding
        to simplicity.\\n-\\n-______________________________________________________________________\\n-\\n-##
        spotifyClient\\n-\\n-### get_spotify_client function\\n-\\n-**PURPOSE** ensure
        that only a single instance of spotifyClient exists throughout the\\n-codebase.\\n-\\n-**REASON**
        Having different parts of code having to initialize spotifyClients when\\n-required,
        would make for a lot of duplicate code. Serves as a ***single-point-of-access***\\n-to
        a ***singleton spotifyClient***.\\n-\\n-**SEE ALSO** [initialize](#initialize-function)\\n-\\n-###
        initialize function\\n-\\n-**PURPOSE** To create a cache a SpotifyClient\\n-\\n-**REASON**
        Clubbing of client creation/caching with singleton-access requires passing
        of a\\n-client_id & client_secret the first time but not for subsequent calls.
        This ambiguity as\\n-to passing args is avoided.\\n-\\n-______________________________________________________________________\\n-\\n-##
        provider\\n-\\n-### \\\\_\\\\_query_and_simplify function\\n-\\n-**PURPOSE**
        To query YouTube Music and extract details from their hopelessly nested\\n-responses\\n-\\n-**REASON**
        Compartmentalize YouTube link matching. The whole search providing interface\\n-can
        be jointed into one massive function but then, making changes would be unduly\\n-difficult.\\n-\\n-###
        search_and_order function\\n-\\n-**PURPOSE** To filter, and measure the likelihood
        of available YouTube Music results being\\n-the songs the user is after\\n-\\n-**REASON**
        Although YouTube Music's results are far better than YouTube's, it still relies\\n-on
        an extent upon the user to select the best match according to what ever he/she/them
        is\\n-searching for. A program can not identify the best match like a human
        being who would\\n-identify the song by video thumbnail or album art. So we
        attempt to measure the extent to\\n-which it is the same song as the one provided
        by spotify.\\n-\\n-### search_and_get_best_match function\\n-\\n-**PURPOSE**
        To return the best possible match for a given song from spotify\\n-\\n-**REASON**
        To cater to the most common use case where you only need the best possible\\n-YouTube
        Music match link\\n-\\n-______________________________________________________________________\\n-\\n-##
        utils\\n-\\n-### search_for_song function\\n-\\n-**PURPOSE** Get song details
        from a search query instead of from a URL\\n-\\n-**REASON** The end-user might
        not always attempt to download songs from their URL's. To\\n-always use URL's
        would be a cumbersome process. This bypasses that effort by fetching the\\n-URL
        from a given query.\\n-\\n-### get_album_tracks\\n-\\n-**PURPOSE** Get details
        of all tracks in an album\\n-\\n-**REASON** Having to individually list out
        each track in an album is a pain\\n-\\n-### get_playlist_tracks\\n-\\n-**PURPOSE**
        Get details of all tracks in a playlist\\n-\\n-**REASON** Having to individually
        list out each track in a playlist is a greater pain than\\n-listing out each
        track in an album.\\n-\\n-## downloads\\n-\\n-### downloadManager class\\n-\\n-**PURPOSE**
        To download given songs, singly or in parallel, convert them to MP3 and embed\\n-required
        metadata\\n-\\n-**REASON** Come on, the whole point of spotDL is to download
        stuff\\n-\\n-### downloadTracker class\\n-\\n-**PURPOSE** to track the progress
        of downloads and enable download resuming\\n-\\n-**REASON** considering that
        downloading takes place in parallel, it is much easier to have\\n-tracking
        of downloads progressing live-time in parallel to downloading in a separate\\n-process
        instead of having it tracked in the main python process (its much simpler
        too)\\n-\\n-### displayManager class\\n-\\n-**PURPOSE** To ensure a clean
        UI for users even when downloading stuff in parallel\\n-\\n-**REASON** Using
        print methods in parallel with carriage returns (\\\\\\\\r) for clean updates\\n-will
        print in new lines as the print call is from different processes. THis creates
        a need\\n-for a common point of output. The easiest hi-lv way to do that is
        an autoproxy.\"},{\"sha\":\"cb931a28945c8e237e5a609ae3cc9910c52fa900\",\"filename\":\"docs/images/ADD_TO_PATH.png\",\"status\":\"renamed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fimages%2FADD_TO_PATH.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fimages%2FADD_TO_PATH.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fimages%2FADD_TO_PATH.png?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"previous_filename\":\"docs/static/ADD_TO_PATH.png\"},{\"sha\":\"2811367b09cf3705972e56cf550cd843f409038c\",\"filename\":\"docs/images/POWERSHELL.png\",\"status\":\"renamed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fimages%2FPOWERSHELL.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fimages%2FPOWERSHELL.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fimages%2FPOWERSHELL.png?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"previous_filename\":\"docs/static/POWERSHELL.png\"},{\"sha\":\"6d441ca322a5e30fac555be3434b35456b2a5395\",\"filename\":\"docs/images/WEB_UI.png\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fimages%2FWEB_UI.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fimages%2FWEB_UI.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fimages%2FWEB_UI.png?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"30bb6eaeacc86fdfb0ae424a4dd29170c9a9b4b8\",\"filename\":\"docs/index.md\",\"status\":\"added\",\"additions\":159,\"deletions\":0,\"changes\":159,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Findex.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Findex.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Findex.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,159 @@\\n+\\n+<!--- mdformat-toc start --slug=github --->\\n+\\n+<!---\\n+!!!
        IF EDITING THE README, ENSURE TO COPY THE WHOLE FILE TO index.md in `/docs/`
        AND REMOVE THE REFERENCES TO ReadTheDocs THERE.\\n+--->\\n+\\n+\\n+# spotDL
        v4\\n+\\n+**spotDL** finds songs from Spotify playlists on YouTube and downloads
        them - along with album art, lyrics and metadata.\\n+\\n+\\n+[![MIT License](https://img.shields.io/github/license/spotdl/spotify-downloader?color=44CC11&style=flat-square)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)\\n+[![PyPI
        version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+[![PyPi
        downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/)\\n+![Contributors](https://img.shields.io/github/contributors/spotDL/spotify-downloader?style=flat-square)\\n+[![Discord](https://img.shields.io/discord/771628785447337985?label=discord&logo=discord&style=flat-square)](https://discord.gg/xCa23pwJWY)\\n+\\n+>
        spotDL: The fastest, easiest and most accurate command-line music downloader.\\n+\\n+______________________________________________________________________\\n+**[Read
        the documentation on ReadTheDocs!](https://spotdl.readthedocs.io)**\\n+______________________________________________________________________\\n+\\n+\\n+##
        Installation\\n+\\n+Refer to our [Installation Guide](https://spotdl.rtfd.io/en/latest/installation/)
        for more details.\\n+\\n+### Python (Recommended Method)\\n+  - _spotDL_ can
        be installed by running `pip install spotdl`.\\n+  - To update spotDL run
        `pip install --upgrade spotdl`\\n+  > On some systems you might have to change
        `pip` to `pip3`.\\n+\\n+\\n+### Other options\\n+\\n+- Prebuilt executable\\n+
        \ - You can download the latest version from the\\n+    [Releases Tab](https://github.com/spotDL/spotify-downloader/releases)\\n+-
        On Termux\\n+  - `curl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/scripts/termux.sh
        | sh`\\n+- Arch\\n+  - There is an [Arch User Repository (AUR) package](https://aur.archlinux.org/packages/python-spotdl/)
        for\\n+    spotDL.\\n+- Docker\\n+  - Build image:\\n+\\n+    ```bash\\n+
        \   docker build -t spotdl .\\n+    ```\\n+\\n+  - Launch container with spotDL
        parameters (see section below). You need to create mapped\\n+    volume to
        access song files\\n+\\n+    ```bash\\n+    docker run --rm -v $(pwd):/music
        spotdl download [trackUrl]\\n+    ```\\n+\\n+ - Build from source\\n+\\t```bash\\n+\\tgit
        clone https://github.com/spotDL/spotify-downloader && cd spotify-downloader\\n+\\tpip
        install poetry\\n+\\tpoetry install\\n+\\tpython3 scripts/build.py\\n+\\t```\\n+\\tAn
        executable is created in `spotify-downloader/dist/`.\\n+\\n+\\n+### Installing
        FFmpeg\\n+\\n+FFmpeg is required for spotDL. If using FFmpeg only for spotDL,
        you can simply install FFmpeg to your spotDL installation directory:\\n+`spotdl
        --download-ffmpeg`\\n+\\n+We recommend the above option, but if you want to
        install FFmpeg system-wide,\\n+follow these instructions\\n+\\n+- [Windows
        Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n+- OSX - `brew
        install ffmpeg`\\n+- Linux - `sudo apt install ffmpeg` or use your distro's
        package manager\\n+\\n+## Usage\\n+\\n+Using SpotDL without options::\\n+```sh\\n+spotdl
        [urls]\\n+```\\n+You can run _spotDL_ as a package if running it as a script
        doesn't work:\\n+```sh\\n+python -m spotdl [urls]\\n+```\\n+\\n+General usage:\\n+```sh\\n+spotdl
        [operation] [options] QUERY\\n+```\\n+When downloading songs, the song's Spotify
        Popularity variable [(described here)](https://developer.spotify.com/documentation/web-api/reference/get-track)
        is stored in metadata as a comment, so you can sort your downloaded songs
        by popularity.\\n+\\n+There are different **operations** spotDL can perform.
        The *default* is `download`, which simply downloads the songs from YouTube
        and embeds metadata.\\n+\\n+The **query** for spotDL is usually a list of
        Spotify URLs, but for some operations like **sync**, only a single link or
        file is required.\\n+For a list of all **options** use ```spotdl -h```\\n+\\n+####
        Supported operations\\n+\\n+- `save`: Saves only the metadata from Spotify
        without downloading anything.\\n+    - Usage:\\n+        `spotdl save [query]
        --save-file {filename}.spotdl`\\n+\\n+- `web`: Starts a web interface instead
        of using the command line. However, it has limited features and only supports
        downloading single songs.\\n+    - Usage:\\n+        `spotdl web`\\n+\\n+-
        `url`: Get direct download link for each song from the query.\\n+    - Usage:\\n+
        \       `spotdl url [query]`\\n+\\n+- `sync`: Updates directories. Compares
        the directory with the current state of the playlist. Newly added songs will
        be downloaded and removed songs will be deleted. No other songs will be downloaded
        and no other files will be deleted.\\n+\\n+    - Usage:\\n+        `spotdl
        sync [query] --save-file {filename}.spotdl`\\n+\\n+        This create a new
        **sync** file, to update the directory in the future, use:\\n+\\n+        `spotdl
        sync {filename}.spotdl`\\n+\\n+- `meta`: Updates metadata for the provided
        song files.\\n+</details>\\n+\\n+## Music Sourcing and Audio Quality\\n+\\n+spotDL
        uses YouTube as a source for music downloads. This method is used to avoid
        any issues related to downloading music from Spotify.\\n+\\n+> **Note**\\n+>
        Users are responsible for their actions and potential legal consequences.
        We do not support unauthorized downloading of copyrighted material and take
        no responsibility for user actions.\\n+\\n+### Audio Quality\\n+\\n+spotDL
        downloads music from YouTube and is designed to always download the highest
        possible bitrate; which is 128 kbps for regular users and 256 kbps for YouTube
        Music premium users.\\n+\\n+Check the [Audio Formats](usage#audio-formats-and-quality)
        page for more info.\\n+\\n+## Contributing\\n+\\n+Interested in contributing?
        Check out our [CONTRIBUTING.md](CONTRIBUTING) to find\\n+resources around
        contributing along with a guide on how to set up a development environment.\\n+\\n+##
        Donate\\n+\\n+help support the development and maintenance of the software
        \u2764\uFE0F\\n+\\n+[![paypal](https://img.shields.io/badge/paypal-%2300457C.svg?&style=for-the-badge&logo=paypal&logoColor=white)](https://paypal.me/kko7)\\n+[![kofi](https://img.shields.io/badge/kofi-%23F16061.svg?&style=for-the-badge&logo=ko-fi&logoColor=white)](https://ko-fi.com/xnetcat)\\n+\\n+##
        License\\n+\\n+This project is Licensed under the [MIT](/LICENSE) License.\\n+\"},{\"sha\":\"bbac5026aeef644bfec4c0f5f81d369d6d3bf12e\",\"filename\":\"docs/installation.md\",\"status\":\"added\",\"additions\":142,\"deletions\":0,\"changes\":142,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Finstallation.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Finstallation.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Finstallation.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,142 @@\\n+# spotDL Installation Guide\\n+\\n+spotDL is a free and
        open source tool that downloads your Spotify playlists & music\\n+\\n+> **The
        fastest, easiest, and most accurate command-line music downloader**\\n+\\n+##
        Install via Python\\n+\\n+> This is our recommended installation method.\\n+\\n+If
        you are on Windows, Install Visual C++ Redistributable (link below) and then
        proceed to\\n+install Python & FFmpeg\\n+\\n+### Prerequisites to spotDL\\n+\\n+-
        [Visual C++ 2019 redistributable](https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022)\\n+
        \ (on Windows)\\n+- Python 3.7 or above (added to PATH)\\n+- FFmpeg 4.2 or
        above (added to PATH)\\n+\\n+### Install Python to PATH\\n+\\n+> We recommend
        installing the latest version of Python\\n+\\n+When installing [Python](https://python.org/),
        ensure to select \\\"**Add to PATH**\\\".\\n+\\n+![Add to PATH Image](images/ADD_TO_PATH.png)\\n+\\n+###
        Installing spotDL\\n+\\n+> If you are not on Windows (e.g. OSX/UNIX), replace
        `pip` with `pip3` and `python` with\\n+> `python3` in all commands.\\n+\\n+Firstly,
        open a terminal. On Windows: Command Prompt, OSX: \\\"Terminal\\\", \\\\*UNIX:
        Bash or Zsh.\\n+\\n+Verify you have installed Python correctly via `python
        -V`. Ensure you have v3.7 or greater.\\n+\\n+Next, install spotDL by typing
        the following\\n+\\n+```shell\\n+pip install spotdl\\n+```\\n+\\n+### Installing
        FFmpeg\\n+\\n+If using FFmpeg only for spotDL, you can install FFmpeg to your
        local directory.\\n+`spotdl --download-ffmpeg` will download FFmpeg to your
        spotDL installation directory.\\n+\\n+We recommend the above option, but if
        you want to install FFmpeg system-wide,\\n+\\n+- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\\n+-
        OSX - `brew install ffmpeg`\\n+- Linux - `sudo apt install ffmpeg` or use
        your distro's package manager\\n+\\n+If you require further help, ask in our
        [Discord Server](https://discord.gg/xCa23pwJWY)\\n+\\n+[![Discord Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\\n+\\n+##
        Using Prebuilt Executable\\n+\\n+### Download the executable\\n+\\n+You can
        download the latest version from the\\n+[Releases Tab](https://github.com/spotDL/spotify-downloader/releases)\\n+\\n+###
        Running Web UI\\n+\\n+Web UI will start by default if no arguments are passed
        to the command line (after\\n+double-clicking for example)\\n+\\n+![Web UI](images/WEB_UI.png)\\n+\\n+###
        Running the CLI\\n+\\n+To use the command line interface just open your terminal
        and run\\n+`./spotdl-vX.X.X operation [urls]`\\n+\\n+## Docker Setup\\n+\\n+spotDL
        provides a Docker image.\\n+\\n+Install Docker: <https://docs.docker.com/engine/installation/>\\n+\\n+Install
        Docker Compose: <https://docs.docker.com/compose/install/>\\n+\\n+Docker documentation:
        <https://docs.docker.com/>\\n+\\n+### Built-in Docker Image\\n+\\n+- Build
        docker image `docker build -t spotdl .`\\n+- List spotdl options: `docker
        run --rm spotdl --help`\\n+- Download a song:\\n+  `docker run --rm -v $(pwd):/music
        spotdl download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b`\\n+\\n+###
        Docker Hub Image\\n+\\n+- Pull docker image from Docker hub: `docker pull
        spotdl/spotify-downloader`\\n+\\n+- Download a song using Docker image:\\n+
        \ `docker run --rm -v $(pwd):/music spotdl/spotify-downloader download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b`\\n+\\n+-
        Create a Docker container\\n+\\n+```\\n+docker create \\\\\\n+  --name=spotdl
        \\\\\\n+  -v <path to data>:/music \\\\\\n+  spotdl/spotify-downloader\\n+```\\n+\\n+###
        Docker Compose\\n+\\n+- Create a container using Docker Compose: `docker-compose
        up --no-start`\\n+- Download a song using Docker compose:\\n+  `docker-compose
        run --rm spotdl download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b`\\n+\\n+##
        Other Installation Methods\\n+\\n+### Termux\\n+\\n+We have a dedicated Termux
        installation script\\n+`curl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/scripts/termux.sh
        | sh`\\n+\\n+### Arch User Repository (AUR) package\\n+\\n+[You can find the
        AUR Package here](https://aur.archlinux.org/packages/python-spotdl)\\n+\\n+##
        Where does spotDL download songs?\\n+\\n+spotDL downloads files to the folder
        where you ran spotDL from.\\n+\\n+Open pwsh/powershell/cmd/terminal/similar
        in the folder you want files to download to, or cd to\\n+desired folder.\\n+\\n+**Windows
        Shortcut:** Navigate to the folder you want the files to download to.\\n+`SHIFT
        + RIGHT CLICK`, then select \\\"Open PowerShell window here\\\"\\n+\\n+![Windows
        PWSH](images/POWERSHELL.png)\\n+\\n+## We have a public Discord server at
        **[discord.gg/xCa23pwJWY](https://discord.gg/xCa23pwJWY)!**\\n+\\n+[![Discord
        Server](https://img.shields.io/discord/771628785447337985?color=7289da&label=DISCORD&style=for-the-badge)](https://discord.gg/xCa23pwJWY)\"},{\"sha\":\"fb98c194b347b0afb97ab0a1faa16f84e6b48286\",\"filename\":\"docs/static/logo-transparent.png\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo-transparent.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo-transparent.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fstatic%2Flogo-transparent.png?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"608b23b2c061f15b96d6cc334901edb79bab56ee\",\"filename\":\"docs/static/logo.png\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo.png\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/docs%2Fstatic%2Flogo.png\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fstatic%2Flogo.png?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"56d2a1f6d220f5620412ca103845a2c250906668\",\"filename\":\"docs/troubleshooting.md\",\"status\":\"added\",\"additions\":132,\"deletions\":0,\"changes\":132,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Ftroubleshooting.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Ftroubleshooting.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Ftroubleshooting.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,132 @@\\n+# Troubleshooting / FAQ Guide\\n+\\n+As common issues or
        questions are encountered solutions will be added to this guide.\\n+\\n+???
        \\\"'spotdl' is not recognized\\\"\\n+\\n+    Python/(site packages) is not
        added to PATH correctly. You need to install Python from\\n+    <https://www.python.org/downloads/>\\n+\\n+
        \   Or you are using python from microsoft store. If so uninstall it and restart
        cmd. If this\\n+    doesn't work reinstall python.\\n+\\n+    ### Error message\\n+\\n+
        \   ```\\n+    'spotdl' is not recognized as an internal or external command,\\n+
        \   operable program or batch file.\\n+    ```\\n+\\n+    ### Solution\\n+\\n+
        \   Ensure to add to PATH when installing: ![python install](https://i.imgur.com/jWq5EnV.png)\\n+\\n+???
        \\\"spotdl: command not found\\\"\\n+\\n+    If you see this error after installing
        spotdl, that means that the bin (Binaries) folder is not\\n+    on `$PATH`\\n+\\n+
        \   ### Solution\\n+\\n+    #### `.bashrc`\\n+\\n+    Add `export PATH=~/.local/bin:$PATH`
        at the bottom of `~/.bashrc`\\n+\\n+    Then run `source ~/.bashrc`\\n+\\n+
        \   #### `.zshrc`\\n+\\n+    Add `export PATH=~/.local/bin:$PATH` at the bottom
        of `~/.zshrc` Then run `source ~/.zshrc`\\n+\\n+??? \\\"pkg_resources.DistributionNotFound\\\"\\n+\\n+
        \   Sometimes not all packages are installed but are required by yt-dlp for
        example: `brotli` or\\n+    `websockets`\\n+\\n+    ### Error Message\\n+\\n+
        \   `pkg_resources.DistributionNotFound: The 'websockets' distribution was
        not found and is required by yt-dlp`\\n+\\n+    ### Solution\\n+\\n+    `pip
        install brotli websockets yt-dlp -U`\\n+\\n+??? \\\"HTTP Error 404\\\"\\n+\\n+
        \   <https://github.com/plamere/spotipy/issues/795#issuecomment-1100321148>\\n+\\n+
        \   ### Error Message\\n+\\n+    `HTTP Error for GET to URL with Params: {}
        returned 404 due to None`\\n+\\n+    ### Solution\\n+\\n+    Update spotdl
        to the latest version which contains workaround.\\n+\\n+    `pip install -U
        spotdl`\\n+\\n+??? \\\"ssl.SSLError: \\\\[SSL: CERTIFICATE_VERIFY_FAILED\\\\]\\\"\\n+\\n+
        \   <https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error>\\n+\\n+
        \   ### Error Message\\n+\\n+    `urllib.error.URLError: <urlopen error [SSL:
        CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:847)>`\\n+\\n+
        \   ### Solution\\n+\\n+    <https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error>\\n+\\n+???
        \\\"RecursionError\\\"\\n+\\n+    <https://github.com/spotDL/spotify-downloader/issues/1493>\\n+\\n+
        \   ### Error Message\\n+\\n+    `RecursionError: maximum recursion depth
        exceeded`\\n+\\n+    ### Solution\\n+\\n+    Update spotdl\\n+\\n+    `pip
        install spotdl -U`\\n+\\n+??? \\\"RuntimeWarning\\\"\\n+\\n+    This happens
        when running spotdl using `python -m`.\\n+\\n+    ### Error Message\\n+\\n+
        \   ```\\n+    RuntimeWarning: 'spotdl.__main__' found in sys.modules after
        import of package 'spotdl',\\n+    but prior to execution of 'spotdl.__main__';
        this may result in unpredictable behaviour\\n+    warn(RuntimeWarning(msg))\\n+
        \   ```\\n+\\n+    ### Solution\\n+\\n+    You can ignore this error or just
        run spotdl directly\\n+\\n+??? \\\"Not found '\\\\_raw_ecb.so'\\\"\\n+\\n+
        \   This error is specific for M1 Macs only.\\n+\\n+    https://discord.com/channels/771628785447337985/871006150357823498\\n+
        \   https://discord.com/channels/771628785447337985/939475659238043738\\n+\\n+
        \   ### Error Message\\n+\\n+    ```\\n+    aise OSError(\\\"Cannot load native
        module '%s': %s\\\" % (name, \\\", \\\".join(attempts)))\\n+    OSError: Cannot
        load native module 'Cryptodome.Cipher._raw_ecb': Not found '_raw_ecb.cpython-39-darwin.so',\\n+
        \   Cannot load '_raw_ecb.abi3.so': dlopen(/opt/homebrew/lib/python3.9/site-packages/Cryptodome/Util/../Cipher/_raw_ecb.abi3.so,
        6): no suitable image found.  Did find:\\n+    /opt/homebrew/lib/python3.9/site-packages/Cryptodome/Util/../Cipher/_raw_ecb.abi3.so:
        mach-o, but wrong architecture\\n+    /opt/homebrew/lib/python3.9/site-packages/Cryptodome/Cipher/_raw_ecb.abi3.so:
        mach-o, but wrong architecture, Not found '_raw_ecb.so'\\n+    ```\\n+\\n+
        \   ### Solution\\n+\\n+    Possible solutions:\\n+\\n+    <https://discord.com/channels/771628785447337985/871006150357823498>\\n+
        \   <https://discord.com/channels/771628785447337985/939475659238043738>\"},{\"sha\":\"2a482991736c9f8aa4ddbd980cb63850ea79766e\",\"filename\":\"docs/usage.md\",\"status\":\"added\",\"additions\":491,\"deletions\":0,\"changes\":491,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fusage.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/docs%2Fusage.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/docs%2Fusage.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,491 @@\\n+# spotDL usage examples\\n+\\n+## Downloading\\n+\\n+???
        Song info\\n+    To download a song, run\\n+\\n+    ```bash\\n+    spotdl
        download [trackUrl]\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+
        \   spotdl download https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b\\n+
        \   ```\\n+\\n+??? Album info\\n+    To download an album, run\\n+\\n+    ```bash\\n+
        \   spotdl download [albumUrl]\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+
        \   spotdl download https://open.spotify.com/album/4yP0hdKOZPNshxUOjY0cZj\\n+
        \   ```\\n+\\n+??? Playlist info\\n+    To download a playlist, run\\n+\\n+
        \   ```bash\\n+    spotdl download [playlistUrl]\\n+    ```\\n+\\n+    example:\\n+\\n+
        \   ```bash\\n+    spotdl download https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID\\n+
        \   ```\\n+\\n+??? Artist info\\n+    To download all songs from an artist
        run\\n+\\n+    ```bash\\n+    spotdl download [artistUrl]\\n+    ```\\n+\\n+
        \   example:\\n+\\n+    ```bash\\n+    spotdl download https://open.spotify.com/artist/1Xyo4u8uXC1ZmMpatF05PJ\\n+
        \   ```\\n+\\n+??? Search info\\n+    To search for and download a song, run,
        with quotation marks\\n+\\n+    ```bash\\n+    spotdl download '[songQuery]'\\n+
        \   ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+    spotdl download 'The
        Weeknd - Blinding Lights'\\n+    ```\\n+\\n+??? info \\\"YouTube link with
        Spotify metadata\\\"\\n+    To download YouTube video with metadata from Spotify,
        run\\n+    > Noting the quote `\\\"` are required\\n+\\n+    ```bash\\n+    spotdl
        download \\\"YouTubeURL|SpotifyURL\\\"\\n+    ```\\n+\\n+    example:\\n+\\n+
        \   ```bash\\n+    spotdl download \\\"https://www.youtube.com/watch?v=XXYlFuWEuKI|https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b?si=b5c0790edc8f4904\\\"\\n+
        \   ```\\n+\\n+??? info \\\"Liked songs\\\"\\n+    To download liked Spotify
        songs run\\n+    > `--user-auth` is required\\n+\\n+    ```bash\\n+    spotdl
        download saved --user-auth\\n+    ```\\n+\\n+??? info \\\"All user playlists\\\"\\n+
        \   To download all user playlists run\\n+    > `--user-auth` is required\\n+\\n+
        \   ```bash\\n+    spotdl download all-user-playlists --user-auth\\n+    ```\\n+\\n+???
        info \\\"All user saved albums\\\"\\n+    To download all user saved albums
        run\\n+    > `--user-auth` is required\\n+\\n+    ```bash\\n+    spotdl download
        all-user-saved-albums --user-auth\\n+    ```\\n+\\n+You can queue up multiple
        download tasks by separating the arguments with spaces\\n+\\n+```bash\\n+spotdl
        download [songQuery1] [albumUrl] [songQuery2] ... (order does not matter)\\n+```\\n+\\n+example:\\n+\\n+```bash\\n+spotdl
        download 'The Weeknd - Blinding Lights' https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID
        ...\\n+```\\n+\\n+## Audio Formats and Quality\\n+\\n+Files are downloaded
        in MP3 format for the best compatibility across different platforms/players,
        but spotDL also supports other output formats like M4A and OPUS.\\n+\\n+>
        Note: spotDL never downloads songs in a bitrate higher than 128kbps, except
        for those with YTMusic Premium, where 256 kbps is available for M4A format.\\n+\\n+Note
        that using the `--bitrate` flag will convert the file to the specified bitrate,
        so it may result in larger file sizes with no significant change in quality.
        If you prefer smaller file sizes, consider using the default bitrate or a
        lower value.\\n+\\n+Converting files might not be ideal for some users who
        prefer the files in their original quality.\\n+\\n+Alternatively, you can
        use the `--bitrate disable` option to skip the conversion step for certain
        file formats such as **M4A**/**OPUS**.\\n+\\n+### YouTube Music Premium\\n+\\n+YouTube
        Music Premium users can use their account to download songs with a higher
        bitrate (256kbps).\\n+\\n+To download music in higher quality follow the steps
        below:\\n+\\n+1. Change quality in YouTube Music settings to highest possible.\\n+\\n+2.
        Get cookies.txt for https://music.youtube.com.\\n+> You can use [Get cookies.txt
        extension](https://chrome.google.com/webstore/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc)
        or [cookies.txt](https://addons.mozilla.org/en-US/firefox/addon/cookies-txt/)
        for this. More info [here](https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp)\\n+\\n+3.
        Add `--cookie-file cookies.txt` option to your spotDL command line options\\n+>
        Replace cookies.txt with the actual name of your cookies file\\n+\\n+4. Change
        the audio format to either **M4A** or **OPUS** to get the raw HQ file\\n+\\n+>
        **Note**\\n+> To get the best audio possible you should use **M4A**/**OPUS**
        audio format\\n+> with `--bitrate disable`\\n+\\n+\\n+\\n+\\n+## Syncing\\n+\\n+Sync
        function for the console. Keep local files up to date with playlists/albums/etc.\\n+This
        will download new songs and remove the ones that are no longer present in
        the playlists/albums/etc\\n+\\n+??? info \\\"Initialize Synchronization\\\"\\n+
        \   To create the sync file run\\n+\\n+    ```bash\\n+    spotdl sync [query]
        --save-file [fileName]\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+
        \   spotdl sync https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID --save-file
        \\\"the-weeknd.sync.spotdl\\\"\\n+    ```\\n+\\n+    > Note: The sync file
        has to end with .spotdl\\n+\\n+??? info \\\"Syncing\\\"\\n+    To sync the
        songs run\\n+\\n+    ```bash\\n+    spotdl sync [fileName]\\n+    ```\\n+\\n+
        \   example:\\n+\\n+    ```bash\\n+    spotdl sync \\\"the-weeknd.sync.spotdl\\\"\\n+
        \   ```\\n+\\n+## Saving\\n+\\n+Saves the songs metadata to a file for further
        use.\\n+\\n+```bash\\n+spotdl save [query] --save-file [fileName]\\n+```\\n+\\n+example:\\n+\\n+```bash\\n+spotdl
        save 'The Weeknd - Blinding Lights' --save-file 'the-weeknd.spotdl'\\n+```\\n+\\n+???
        info \\\"Preloading\\\"\\n+    Preload the download url to speed up the download
        process.\\n+\\n+    ```bash\\n+    spotdl save [query] --save-file [fileName]
        --preload\\n+    ```\\n+\\n+    example:\\n+\\n+    ```bash\\n+    spotdl
        save 'The Weeknd - Blinding Lights' --save-file 'the-weeknd.spotdl' --preload\\n+
        \   ```\\n+\\n+## Web UI (User Interface)\\n+\\n+To start the web UI, run\\n+\\n+```bash\\n+spotdl
        web\\n+```\\n+\\n+### Download Location\\n+\\n+By default, the web UI downloads
        files to a special directory, to overwrite this behavior\\n+add option `--web-use-output-dir`,
        which will make output directory follow `--output`\\n+\\n+## Config file\\n+\\n+###
        Config file location\\n+\\n+The config file is located at `C:\\\\Users\\\\user\\\\.spotdl\\\\config.json`\\n+or
        `~/.spotdl/config.json` under linux\\n+\\n+> Note: If you want to use XDG_DATA_HOME
        directory, run `mkdir $XDG_DATA_HOME/spotdl`, next time you run spotdl it
        will be automatically used.\\n+\\n+### Generate a config file\\n+\\n+To generate
        a config file, run\\n+\\n+```bash\\n+spotdl --generate-config\\n+```\\n+\\n+>
        Note: This will overwrite the existing config file.\\n+\\n+### Loading config\\n+\\n+Config
        file gets loaded automatically if it already exists, or if you've passed `--config`
        flag\\n+\\n+If you don't want config to load automatically change `load_config`
        option in config file to false\\n+\\n+```json\\n+{\\n+    \\\"load_config\\\":
        false\\n+}\\n+```\\n+\\n+### Default config\\n+\\n+```json\\n+{\\n+    \\\"client_id\\\":
        \\\"5f573c9620494bae87890c0f08a60293\\\",\\n+    \\\"client_secret\\\": \\\"212476d9b0f3472eaa762d90b19b0ba8\\\",\\n+
        \   \\\"auth_token\\\": null,\\n+    \\\"user_auth\\\": false,\\n+    \\\"headless\\\":
        false,\\n+    \\\"cache_path\\\": \\\"/Users/username/.spotdl/.spotipy\\\",\\n+
        \   \\\"no_cache\\\": false,\\n+    \\\"max_retries\\\": 3,\\n+    \\\"audio_providers\\\":
        [\\n+        \\\"youtube-music\\\"\\n+    ],\\n+    \\\"lyrics_providers\\\":
        [\\n+        \\\"genius\\\",\\n+        \\\"azlyrics\\\",\\n+        \\\"musixmatch\\\"\\n+
        \   ],\\n+    \\\"playlist_numbering\\\": false,\\n+    \\\"scan_for_songs\\\":
        false,\\n+    \\\"m3u\\\": null,\\n+    \\\"output\\\": \\\"{artists} - {title}.{output-ext}\\\",\\n+
        \   \\\"overwrite\\\": \\\"skip\\\",\\n+    \\\"search_query\\\": null,\\n+
        \   \\\"ffmpeg\\\": \\\"ffmpeg\\\",\\n+    \\\"bitrate\\\": null,\\n+    \\\"ffmpeg_args\\\":
        null,\\n+    \\\"format\\\": \\\"mp3\\\",\\n+    \\\"save_file\\\": null,\\n+
        \   \\\"filter_results\\\": true,\\n+    \\\"album_type\\\": null,\\n+    \\\"threads\\\":
        4,\\n+    \\\"cookie_file\\\": null,\\n+    \\\"restrict\\\": null,\\n+    \\\"print_errors\\\":
        false,\\n+    \\\"sponsor_block\\\": false,\\n+    \\\"preload\\\": false,\\n+
        \   \\\"archive\\\": null,\\n+    \\\"load_config\\\": true,\\n+    \\\"log_level\\\":
        \\\"INFO\\\",\\n+    \\\"simple_tui\\\": false,\\n+    \\\"fetch_albums\\\":
        false,\\n+    \\\"id3_separator\\\": \\\"/\\\",\\n+    \\\"ytm_data\\\": false,\\n+
        \   \\\"add_unavailable\\\": false,\\n+    \\\"generate_lrc\\\": false,\\n+
        \   \\\"force_update_metadata\\\": false,\\n+    \\\"web_use_output_dir\\\":
        false,\\n+    \\\"port\\\": 8800,\\n+    \\\"host\\\": \\\"localhost\\\",\\n+
        \   \\\"keep_alive\\\": false,\\n+    \\\"allowed_origins\\\": null,\\n+    \\\"keep_sessions\\\":
        false,\\n+    \\\"only_verified_results\\\": false,\\n+    \\\"skip_album_art\\\":
        false\\n+}\\n+```\\n+\\n+#### `output` variables\\n+\\n+The `output` key supports
        several variables:\\n+\\n+| Variable | Explanation | Example |\\n+|----------|-------------|---------|\\n+|
        `{title}` | Song title | Dark Horse |\\n+| `{artists}` | Song artists | Katy
        Perry, Juicy J |\\n+| `{artist}` | Primary artist | Katy Perry |\\n+| `{album}`
        | Album name | PRISM |\\n+| `{album-artist}` | Primary artist of the album
        | Katy Perry |\\n+| `{genre}` | Genre | dance pop |\\n+| `{disc-number}` |
        Useful for multi-disc releases | 1 |\\n+| `{disc-count}` | Total number of
        discs in the album | 1 |\\n+| `{duration}` | Duration of the song in seconds
        | 215.672 |\\n+| `{year}` | Year of release | 2013 |\\n+| `{original-date}`
        | Date of original release | 2013-01-01 |\\n+| `{track-number}` | Track number
        in the album | 06 |\\n+| `{tracks-count}` | Total number of tracks in the
        album | 13 |\\n+| `{isrc} `| International Standard Recording Code | USUM71311296
        |\\n+| `{track-id}` | Spotify song ID | 4jbmgIyjGoXjY01XxatOx6 |\\n+| `{publisher}
        `| Record label | Capitol Records (CAP) |\\n+| `{list-length}` | Number of
        items in a playlist | 10 |\\n+| `{list-position}` | Position of the song in
        a playlist | 1 |\\n+| `{list-name}` | Name of the playlist | Saved |\\n+|
        `{output-ext}` | File extension | mp3 |\\n+\\n+## CLI (Command Line Interface)\\n+\\n+###
        Command line options\\n+\\n+```\\n+options:\\n+  -h, --help            show
        this help message and exit\\n+\\n+Main options:\\n+  {download,save,web,sync,meta,url}\\n+
        \                       The operation to perform.\\n+                        download:
        Download the songs to the disk and embed metadata.\\n+                        save:
        Saves the songs metadata to a file for further use.\\n+                        web:
        Starts a web interface to simplify the download process.\\n+                        sync:
        Removes songs that are no longer present, downloads new ones\\n+                        meta:
        Update your audio files with metadata\\n+                        url: Get
        the download URL for songs\\n+\\n+  query                 Spotify/YouTube
        URL for a song/playlist/album/artist/etc. to download.\\n+\\n+                        For
        album/playlist/artist searching, include 'album:', 'playlist:', 'artist:'\\n+
        \                       (ie. 'album:the album name' you can mix these options
        to get more accurate results).\\n+\\n+                        To download
        liked songs use 'saved' as the query, to download all user playlists\\n+                        use
        'all-user-playlists, to download all songs from all followed artists use 'all-user-followed-artists',
        to download all user saved albums use 'all-user-saved-albums'\\n+\\n+                        For
        manual audio matching, you can use the format 'YouTubeURL|SpotifyURL'\\n+
        \                       You can only use album/playlist/tracks urls when downloading/matching
        youtube urls.\\n+                        When using youtube url without spotify
        url, you won't be able to use `--fetch-albums` option.\\n+\\n+  --audio [{youtube,youtube-music,slider-kz,soundcloud,bandcamp,piped}
        ...]\\n+                        The audio provider to use. You can provide
        more than one for fallback.\\n+  --lyrics [{genius,musixmatch,azlyrics,synced}
        ...]\\n+                        The lyrics provider to use. You can provide
        more than one for fallback. Synced lyrics might not work correctly with some
        music players. For such cases it's better to use `--generate-lrc`\\n+                        option.\\n+
        \ --config              Use the config file to download songs. It's located
        under C:\\\\Users\\\\user\\\\.spotdl\\\\config.json or ~/.spotdl/config.json
        under linux\\n+  --search-query SEARCH_QUERY\\n+                        The
        search query to use, available variables: {title}, {artists}, {artist}, {album},
        {album-artist}, {genre}, {disc-number}, {disc-count}, {duration}, {year},
        {original-date}, {track-number},\\n+                        {tracks-count},
        {isrc}, {track-id}, {publisher}, {list-length}, {list-position}, {list-name},
        {output-ext}\\n+  --dont-filter-results\\n+                        Disable
        filtering results.\\n+  --album-type {single, album}\\n+                        Type
        of the album to filter the songs\\n+  --only-verified-results\\n+                        Use
        only verified results. (Not all providers support this)\\n+\\n+Spotify options:\\n+
        \ --user-auth           Login to Spotify using OAuth.\\n+  --client-id CLIENT_ID\\n+
        \                       The client id to use when logging in to Spotify.\\n+
        \ --client-secret CLIENT_SECRET\\n+                        The client secret
        to use when logging in to Spotify.\\n+  --auth-token AUTH_TOKEN\\n+                        The
        authorization token to use directly to log in to Spotify.\\n+  --cache-path
        CACHE_PATH\\n+                        The path where spotipy cache file will
        be stored.\\n+  --no-cache            Disable caching (both requests and token).\\n+
        \ --max-retries MAX_RETRIES\\n+                        The maximum number
        of retries to perform when getting metadata.\\n+  --headless            Run
        in headless mode.\\n+  --use-cache-file      Use the cache file to get metadata.
        It's located under C:\\\\Users\\\\user\\\\.spotdl\\\\.spotify_cache or ~/.spotdl/.spotify_cache
        under linux. It only caches tracks and gets updated whenever spotDL gets\\n+
        \                       metadata from Spotify. (It may provide outdated metadata
        use with caution)\\n+\\n+FFmpeg options:\\n+  --ffmpeg FFMPEG       The ffmpeg
        executable to use.\\n+  --threads THREADS     The number of threads to use
        when downloading songs.\\n+  --bitrate {auto,disable,8k,16k,24k,32k,40k,48k,64k,80k,96k,112k,128k,160k,192k,224k,256k,320k,0,1,2,3,4,5,6,7,8,9}\\n+
        \                       The constant/variable bitrate to use for the output
        file. Values from 0 to 9 are variable bitrates. Auto will use the bitrate
        of the original file. Disable will disable the bitrate option. (In\\n+                        case
        of m4a and opus files, auto and disable will skip the conversion)\\n+  --ffmpeg-args
        FFMPEG_ARGS\\n+                        Additional ffmpeg arguments passed
        as a string.\\n+\\n+Output options:\\n+  --format {mp3,flac,ogg,opus,m4a,wav}\\n+
        \                       The format to download the song in.\\n+  --save-file
        SAVE_FILE\\n+                        The file to save/load the songs data
        from/to. It has to end with .spotdl. If combined with the download operation,
        it will save the songs data to the file. Required for save/sync (use - to\\n+
        \                       print to stdout when using save).\\n+  --preload             Preload
        the download url to speed up the download process.\\n+  --output OUTPUT       Specify
        the downloaded file name format, available variables: {title}, {artists},
        {artist}, {album}, {album-artist}, {genre}, {disc-number}, {disc-count}, {duration},
        {year}, {original-date},\\n+                        {track-number}, {tracks-count},
        {isrc}, {track-id}, {publisher}, {list-length}, {list-position}, {list-name},
        {output-ext}\\n+  --m3u [M3U]           Name of the m3u file to save the songs
        to. Defaults to {list[0]}.m3u8 If you want to generate a m3u for each list
        in the query use {list}, If you want to generate a m3u file based on the first\\n+
        \                       list in the query use {list[0]}, (0 is the first list
        in the query, 1 is the second, etc. songs don't count towards the list number)\\n+
        \ --cookie-file COOKIE_FILE\\n+                        Path to cookies file.\\n+
        \ --overwrite {skip,force,metadata}\\n+                        How to handle
        existing/duplicate files. (When combined with --scan-for-songs force will
        remove all duplicates, and metadata will only apply metadata to the latest
        song and will remove the\\n+                        rest. )\\n+  --restrict
        [{ascii,strict,none}]\\n+                        Restrict filenames to a sanitized
        set of characters for better compatibility\\n+  --print-errors        Print
        errors (wrong songs, failed downloads etc) on exit, useful for long playlist\\n+
        \ --save-errors SAVE_ERRORS\\n+                        Save errors (wrong
        songs, failed downloads etc) to a file\\n+  --sponsor-block       Use the
        sponsor block to download songs from yt/ytm.\\n+  --archive ARCHIVE     Specify
        the file name for an archive of already downloaded songs\\n+  --playlist-numbering
        \ Sets each track in a playlist to have the playlist's name as its album,
        and album art as the playlist's icon\\n+  --scan-for-songs      Scan the output
        directory for existing files. This option should be combined with the --overwrite
        option to control how existing files are handled. (Output directory is the
        last directory that\\n+                        is not a template variable
        in the output template)\\n+  --fetch-albums        Fetch all albums from songs
        in query\\n+  --id3-separator ID3_SEPARATOR\\n+                        Change
        the separator used in the id3 tags. Only supported for mp3 files.\\n+  --ytm-data
        \           Use ytm data instead of spotify data when downloading using ytm
        link.\\n+  --add-unavailable     Add unavailable songs to the m3u/archive
        files when downloading\\n+  --generate-lrc        Generate lrc files for downloaded
        songs. Requires `synced` provider to be present in the lyrics providers list.\\n+
        \ --force-update-metadata\\n+                        Force update metadata
        for songs that already have metadata.\\n+  --sync-without-deleting\\n+                        Sync
        without deleting songs that are not in the query.\\n+  --max-filename-length
        MAX_FILENAME_LENGTH\\n+                        Max file name length. (This
        won't override the max file name length enforced by the OS)\\n+  --yt-dlp-args
        YT_DLP_ARGS\\n+                        Arguments to pass to yt-dlp\\n+  --detect-formats
        [{mp3,flac,ogg,opus,m4a,wav} ...]\\n+                        Detect already
        downloaded songs with file format different from the --format option (When
        combined with --m3u option, only first detected format will be added to m3u
        file)\\n+  --redownload          to redownload the local song in diffrent
        format using --format for meta operation\\n+  --skip-album-art      Skip downloading
        album art for meta operation\\n+  --ignore-albums [IGNORE_ALBUMS ...]\\n+
        \                       ignores the song of the given albums\\n+  --skip-explicit
        \      Skip explicit songs\\n+  --proxy PROXY         Http(s) proxy server
        for download song. Example: http://host:port\\n+  --create-skip-file    Create
        skip file for successfully downloaded file\\n+  --respect-skip-file   If a
        file with the extension .skip exists, skip download\\n+\\n+Web options:\\n+
        \ --host HOST           The host to use for the web server.\\n+  --port PORT
        \          The port to run the web server on.\\n+  --keep-alive          Keep
        the web server alive even when no clients are connected.\\n+  --allowed-origins
        [ALLOWED_ORIGINS ...]\\n+                        The allowed origins for the
        web server.\\n+  --web-use-output-dir  Use the output directory instead of
        the session directory for downloads. (This might cause issues if you have
        multiple users using the web-ui at the same time)\\n+  --keep-sessions       Keep
        the session directory after the web server is closed.\\n+\\n+Misc options:\\n+
        \ --log-level {CRITICAL,FATAL,ERROR,WARN,WARNING,INFO,MATCH,DEBUG,NOTSET}\\n+
        \                       Select log level.\\n+  --simple-tui          Use a
        simple tui.\\n+  --log-format LOG_FORMAT\\n+                        Custom
        logging format to use. More info: https://docs.python.org/3/library/logging.html#logrecord-attributes\\n+\\n+Other
        options:\\n+  --download-ffmpeg     Download ffmpeg to spotdl directory.\\n+
        \ --generate-config     Generate a config file. This will overwrite current
        config if present.\\n+  --check-for-updates   Check for new version.\\n+  --profile
        \            Run in profile mode. Useful for debugging.\\n+  --version, -v
        \        Show the version number and exit.\\n+```\"},{\"sha\":\"75c098de4a56174a0f63774ff81e75879aaad71e\",\"filename\":\"mkdocs.yml\",\"status\":\"added\",\"additions\":79,\"deletions\":0,\"changes\":79,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/mkdocs.yml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/mkdocs.yml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/mkdocs.yml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,79 @@\\n+site_name: spotDL\\n+site_description: Download your Spotify
        playlists and songs along with album art and metadata\\n+site_author: xnetcat\\n+site_url:
        \\\"https://spotdl.github.io/spotify-downloader\\\"\\n+repo_url: \\\"https://github.com/spotDL/spotify-downloader\\\"\\n+repo_name:
        \\\"spotdl/spotify-downloader\\\"\\n+site_dir: \\\"site\\\"\\n+\\n+nav:\\n+-
        Home: index.md\\n+- Installation: installation.md\\n+- Usage:\\n+  - Usage
        examples: usage.md\\n+  - Troubleshooting: troubleshooting.md\\n+- Development:\\n+
        \ - Code Of Conduct: CODE_OF_CONDUCT.md\\n+  - Contributing: CONTRIBUTING.md\\n+-
        Code Reference: reference/\\n+\\n+theme:\\n+  name: material\\n+  features:\\n+
        \   - content.code.annotate\\n+    - navigation.tabs\\n+    - navigation.top\\n+
        \   - toc.integrate\\n+\\n+  palette:\\n+  - media: \\\"(prefers-color-scheme:
        light)\\\"\\n+    scheme: default\\n+    primary: teal\\n+    accent: purple\\n+
        \   toggle:\\n+      icon: material/weather-sunny\\n+      name: Switch to
        dark mode\\n+  - media: \\\"(prefers-color-scheme: dark)\\\"\\n+    scheme:
        slate\\n+    primary: black\\n+    accent: lime\\n+    toggle:\\n+      icon:
        material/weather-night\\n+      name: Switch to light mode\\n+\\n+plugins:\\n+-
        gen-files:\\n+    scripts:\\n+    - scripts/docs/gen_ref_nav.py\\n+- search\\n+-
        literate-nav:\\n+    nav_file: SUMMARY.md\\n+- section-index\\n+- mkdocstrings:\\n+
        \   handlers:\\n+      python:\\n+        options:\\n+          docstring_options:\\n+
        \           ignore_init_summary: yes\\n+          merge_init_into_class: yes\\n+
        \         show_submodules: no\\n+\\n+markdown_extensions:\\n+- admonition\\n+-
        pymdownx.details\\n+- pymdownx.emoji\\n+- pymdownx.magiclink\\n+- pymdownx.tasklist\\n+-
        pymdownx.superfences\\n+- pymdownx.snippets:\\n+    check_paths: true\\n+-
        pymdownx.tabbed:\\n+    alternate_style: true\\n+- pymdownx.highlight:\\n+
        \   use_pygments: true\\n+    pygments_lang_class: true\\n+- toc:\\n+    permalink:
        \\\"\xA4\\\"\\n+\\n+watch:\\n+- spotdl\"},{\"sha\":\"5db6ef5a2a09a76d7e4936abdb124828a87614c8\",\"filename\":\"poetry.lock\",\"status\":\"added\",\"additions\":2976,\"deletions\":0,\"changes\":2976,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/poetry.lock\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/poetry.lock\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/poetry.lock?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"9a20e5fefc08bbed8ed00bf05c6f7f81885b25a9\",\"filename\":\"pyproject.toml\",\"status\":\"added\",\"additions\":103,\"deletions\":0,\"changes\":103,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/pyproject.toml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/pyproject.toml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/pyproject.toml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,103 @@\\n+[tool.poetry]\\n+name = \\\"spotdl\\\"\\n+version = \\\"4.2.5\\\"\\n+description
        = \\\"Download your Spotify playlists and songs along with album art and metadata\\\"\\n+license
        = \\\"MIT\\\"\\n+authors = [\\\"spotDL Team <spotdladmins@googlegroups.com>\\\"]\\n+maintainers
        = [\\\"xnetcat <xnetcat.dev@gmail.com>\\\"]\\n+readme = \\\"README.md\\\"\\n+repository
        = \\\"https://github.com/spotDL/spotify-downloader.git\\\"\\n+homepage = \\\"https://github.com/spotDL/spotify-downloader/\\\"\\n+documentation
        = \\\"https://spotdl.rtfd.io/en/latest/\\\"\\n+keywords = [\\\"spotify\\\",
        \\\"downloader\\\", \\\"spotdl\\\", \\\"music\\\"]\\n+classifiers = [\\n+
        \   \\\"Intended Audience :: End Users/Desktop\\\",\\n+    \\\"License ::
        OSI Approved :: MIT License\\\",\\n+    \\\"Programming Language :: Python\\\",\\n+
        \   \\\"Programming Language :: Python :: 3\\\",\\n+    \\\"Programming Language
        :: Python :: 3 :: Only\\\",\\n+    \\\"Programming Language :: Python :: 3.8\\\",\\n+
        \   \\\"Programming Language :: Python :: 3.9\\\",\\n+    \\\"Programming
        Language :: Python :: 3.10\\\",\\n+    \\\"Programming Language :: Python
        :: 3.11\\\",\\n+    \\\"Programming Language :: Python :: 3.12\\\",\\n+    \\\"Topic
        :: Multimedia\\\",\\n+    \\\"Topic :: Multimedia :: Sound/Audio\\\",\\n+
        \   \\\"Topic :: Utilities\\\",\\n+]\\n+\\n+[tool.poetry.dependencies]\\n+python
        = \\\">=3.8,<3.13\\\"\\n+\\n+spotipy = \\\"^2.23.0\\\"\\n+ytmusicapi = [\\n+
        \   {version = \\\"^1.3.2\\\", python = \\\"<3.10\\\"},\\n+    {version =
        \\\"^1.4.1\\\", python = \\\">=3.10\\\"},\\n+]\\n+pytube = \\\"^15.0.0\\\"\\n+yt-dlp
        = \\\"^2024.3.10\\\"\\n+mutagen = \\\"^1.47.0\\\"\\n+rich = \\\"^13.7.1\\\"\\n+beautifulsoup4
        = \\\"^4.12.3\\\"\\n+requests = \\\"^2.31.0\\\"\\n+rapidfuzz = \\\"^3.7.0\\\"\\n+python-slugify
        = {extras = [\\\"unidecode\\\"], version = \\\"^8.0.4\\\"}\\n+uvicorn = \\\"^0.23.2\\\"\\n+pydantic
        = \\\"^2.6.4\\\"\\n+fastapi = \\\"^0.103.0\\\"\\n+platformdirs = \\\"^4.2.0\\\"\\n+pykakasi
        = \\\"^2.2.1\\\"\\n+syncedlyrics = \\\"^0.7.0\\\"\\n+soundcloud-v2 = \\\"^1.3.7\\\"\\n+setuptools
        = \\\"^69.2.0\\\"\\n+\\n+[tool.poetry.group.dev.dependencies]\\n+pytest =
        \\\"^8.1.1\\\"\\n+pytest-mock = \\\"^3.14.0\\\"\\n+pyfakefs = \\\"^5.3.5\\\"\\n+pytest-cov
        = \\\"^5.0.0\\\"\\n+pytest-subprocess = \\\"^1.5.0\\\"\\n+pytest-asyncio =
        \\\"^0.21.1\\\"\\n+mypy = \\\"^1.9.0\\\"\\n+pylint = \\\"^3.1.0\\\"\\n+black
        = \\\"^24.3.0\\\"\\n+mdformat-gfm = \\\"^0.3.5\\\"\\n+types-orjson = \\\"^3.6.2\\\"\\n+types-python-slugify
        = \\\"^8.0.2.20240310\\\"\\n+types-requests = \\\"==2.31.0.6\\\"\\n+types-setuptools
        = \\\"^69.2.0.20240317\\\"\\n+types-toml = \\\"^0.10.8.7\\\"\\n+types-ujson
        = \\\"^5.9.0.0\\\"\\n+pyinstaller = \\\"^6.5.0\\\"\\n+mkdocs = \\\"^1.5.3\\\"\\n+isort
        = \\\"^5.13.2\\\"\\n+dill = \\\"^0.3.7\\\"\\n+mkdocs-material = \\\"^9.5.15\\\"\\n+mkdocstrings
        = \\\"^0.22.0\\\"\\n+mkdocstrings-python = \\\"^1.9.0\\\"\\n+pymdown-extensions
        = \\\"^10.7.1\\\"\\n+mkdocs-gen-files = \\\"^0.5.0\\\"\\n+mkdocs-literate-nav
        = \\\"^0.6.0\\\"\\n+mkdocs-section-index = \\\"^0.3.5\\\"\\n+vcrpy = \\\"^6.0.1\\\"\\n+pytest-recording
        = \\\"^0.13.1\\\"\\n+\\n+[tool.poetry.scripts]\\n+spotdl = \\\"spotdl:console_entry_point\\\"\\n+\\n+[tool.isort]\\n+profile
        = \\\"black\\\"\\n+\\n+[build-system]\\n+requires = [\\\"poetry-core>=1.0.0\\\"]\\n+build-backend
        = \\\"poetry.core.masonry.api\\\"\\n+\\n+[tool.pylint.format]\\n+limit-inference-results
        = 0\\n+fail-under = 9\\n+\\n+[tool.pytest.ini_options]\\n+asyncio_mode = \\\"auto\\\"\\n+markers
        = [\\n+    \\\"vcr\\\",\\n+]\"},{\"sha\":\"1a4eb51a957c9991f582d8431b30e582586f64da\",\"filename\":\"scripts/build.py\",\"status\":\"added\",\"additions\":29,\"deletions\":0,\"changes\":29,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fbuild.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fbuild.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fbuild.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,29 @@\\n+import os\\n+import sys\\n+from pathlib import Path\\n+\\n+import
        PyInstaller.__main__  # type: ignore\\n+import pykakasi\\n+import yt_dlp\\n+import
        ytmusicapi\\n+\\n+from spotdl._version import __version__\\n+\\n+LOCALES_PATH
        = str((Path(ytmusicapi.__file__).parent / \\\"locales\\\"))\\n+PYKAKASI_PATH
        = str((Path(pykakasi.__file__).parent / \\\"data\\\"))\\n+YTDLP_PATH = str(Path(yt_dlp.__file__).parent
        / \\\"__pyinstaller\\\")\\n+\\n+PyInstaller.__main__.run(\\n+    [\\n+        \\\"spotdl/__main__.py\\\",\\n+
        \       \\\"--onefile\\\",\\n+        \\\"--add-data\\\",\\n+        f\\\"{LOCALES_PATH}{os.pathsep}ytmusicapi/locales\\\",\\n+
        \       \\\"--add-data\\\",\\n+        f\\\"{PYKAKASI_PATH}{os.pathsep}pykakasi/data\\\",\\n+
        \       f\\\"--additional-hooks-dir={YTDLP_PATH}\\\",\\n+        \\\"--name\\\",\\n+
        \       f\\\"spotdl-{__version__}-{sys.platform}\\\",\\n+        \\\"--console\\\",\\n+
        \   ]\\n+)\"},{\"sha\":\"4d08f4ad1b89106a5812bb53ce0cab4f4bb11404\",\"filename\":\"scripts/docs/gen_ref_nav.py\",\"status\":\"added\",\"additions\":46,\"deletions\":0,\"changes\":46,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fdocs%2Fgen_ref_nav.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fdocs%2Fgen_ref_nav.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fdocs%2Fgen_ref_nav.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,46 @@\\n+\\\"\\\"\\\"Generate the code reference pages and navigation.\\\"\\\"\\\"\\n+\\n+from
        pathlib import Path\\n+\\n+import mkdocs_gen_files\\n+\\n+nav = mkdocs_gen_files.Nav()
        \ # type: ignore\\n+\\n+IGNORE = (\\n+    (\\\"_version\\\",),\\n+    # ('__init__',)\\n+)\\n+\\n+for
        path in Path(\\\"spotdl\\\").glob(\\\"**/*.py\\\"):\\n+    module_path = path.relative_to(\\\"spotdl\\\").with_suffix(\\\"\\\")\\n+
        \   doc_path = path.relative_to(\\\"spotdl\\\").with_suffix(\\\".md\\\")\\n+
        \   full_doc_path = Path(\\\"reference\\\", doc_path)\\n+\\n+    if module_path.parts
        in IGNORE:\\n+        continue\\n+\\n+    parts = tuple(module_path.parts)\\n+\\n+
        \   if parts[-1] == \\\"__init__\\\":\\n+        if len(parts) != 1:\\n+            parts
        = parts[:-1]\\n+\\n+        doc_path = doc_path.with_name(\\\"index.md\\\")\\n+
        \       full_doc_path = full_doc_path.with_name(\\\"index.md\\\")\\n+    elif
        parts[-1] == \\\"__main__\\\":\\n+        continue\\n+\\n+    nav[parts] =
        doc_path.as_posix()\\n+\\n+    with mkdocs_gen_files.open(full_doc_path, \\\"w\\\")
        as fd:\\n+        if parts == (\\\"__init__\\\",):\\n+            fd.write(\\\":::
        spotdl\\\")\\n+            continue\\n+\\n+        IDENT = \\\"spotdl.\\\"
        + \\\".\\\".join(parts)\\n+        fd.write(f\\\"::: {IDENT}\\\")\\n+\\n+
        \   mkdocs_gen_files.set_edit_path(full_doc_path, path)\\n+\\n+with mkdocs_gen_files.open(\\\"reference/SUMMARY.md\\\",
        \\\"w\\\") as nav_file:\\n+    nav_file.writelines(nav.build_literate_nav())\"},{\"sha\":\"fb86e49e0ce33b4ece4880f05bfadf624ebf358f\",\"filename\":\"scripts/docs/requirements.txt\",\"status\":\"added\",\"additions\":8,\"deletions\":0,\"changes\":8,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fdocs%2Frequirements.txt\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fdocs%2Frequirements.txt\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fdocs%2Frequirements.txt?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,8 @@\\n+mkdocs\\n+mkdocs-material\\n+mkdocstrings\\n+mkdocstrings-python\\n+mkdocs-gen-files\\n+mkdocs-literate-nav\\n+mkdocs-section-index\\n+pymdown-extensions\"},{\"sha\":\"9e49a0d4f2084e89e1b9154a954227ee9a6ec43f\",\"filename\":\"scripts/make_binzip.sh\",\"status\":\"added\",\"additions\":24,\"deletions\":0,\"changes\":24,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fmake_binzip.sh\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Fmake_binzip.sh\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Fmake_binzip.sh?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,24 @@\\n+#!/bin/bash\\n+\\n+CODE_FOLDERS=\\\"spotdl spotdl/console
        spotdl/download spotdl/providers spotdl/providers/audio spotdl/providers/lyrics
        spotdl/types spotdl/utils\\\"\\n+PYTHON=\\\"/usr/bin/env python3\\\"\\n+\\n+mkdir
        -p zip\\n+\\n+for d in $CODE_FOLDERS; do\\n+    mkdir -p \\\"zip/$d\\\"\\n+
        \   cp -pPR \\\"$d\\\"/*.py \\\"zip/$d/\\\"\\n+done\\n+\\n+touch -t 200001010101
        zip/spotdl/*.py zip/spotdl/**/*.py\\n+mv zip/spotdl/__main__.py zip/\\n+cd
        zip\\n+zip -q -r spotdl spotdl/**.py spotdl/**/* spotdl/**/*.py __main__.py\\n+mv
        spotdl.zip ../spotdl.zip\\n+cd ..\\n+rm -rf zip\\n+\\n+echo '#!'\\\"$PYTHON\\\"
        > spotDL\\n+cat spotdl.zip >> spotDL\\n+rm spotdl.zip\\n+chmod a+x spotDL\"},{\"sha\":\"1734e5adc25c6eb32965192a9da9182383571581\",\"filename\":\"scripts/termux.sh\",\"status\":\"added\",\"additions\":33,\"deletions\":0,\"changes\":33,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Ftermux.sh\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/scripts%2Ftermux.sh\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/scripts%2Ftermux.sh?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,33 @@\\n+# setup-storage\\n+termux-setup-storage\\n+\\n+# update packages\\n+pkg
        update -y\\n+\\n+# install python and ffmpeg\\n+pkg install -y python ffmpeg
        rust binutils\\n+\\n+# install spotdl\\n+pip install -U spotdl\\n+\\n+if [
        ! -d \\\"$HOME/bin\\\" ]; then\\n+    mkdir \\\"$HOME/bin\\\"\\n+fi\\n+\\n+if
        [ ! -f \\\"$HOME/bin/termux-url-opener\\\" ]; then\\n+    touch $HOME/bin/termux-url-opener\\n+fi\\n+\\n+cat
        > $HOME/bin/termux-url-opener <<EOL\\n+#!/data/data/com.termux/files/usr/bin/bash\\n+SONGS=\\\"$HOME/storage/shared/songs\\\"\\n+SPOTDL=\\\"/data/data/com.termux/files/usr/bin/spotdl\\\"\\n+if
        [[ $1 == *\\\"open.spotify.com\\\"* ]]; then\\n+    if [[ ! -d $SONGS ]];
        then\\n+        mkdir $SONGS\\n+    fi\\n+    cd $SONGS\\n+    $SPOTDL \\\"$1\\\"\\n+
        \   read -n 1 -s -p \\\"Press Any Key To Exit.\\\"\\n+fi\\n+EOL\"},{\"sha\":\"b719b266c9654488feb9d4ef8c978d1e647986c1\",\"filename\":\"setup.cfg\",\"status\":\"removed\",\"additions\":0,\"deletions\":66,\"changes\":66,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.cfg\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.cfg\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/setup.cfg?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,66 +0,0 @@\\n-[metadata]\\n-version = 3.9.4\\n-\\n-name = spotdl\\n-url
        = https://github.com/spotDL/spotify-downloader\\n-download_url = https://pypi.org/project/spotdl/\\n-author
        = spotDL Team\\n-author_email = spotdladmins@googlegroups.com\\n-license =
        MIT\\n-description = Download your Spotify playlists and songs along with
        album art and metadata\\n-long_description = file:README.md\\n-long_description_content_type
        = text/markdown\\n-keywords = spotify downloader download music youtube mp3
        album metadata\\n-classifiers =\\n-    Intended Audience :: End Users/Desktop\\n-
        \   License :: OSI Approved :: MIT License\\n-    Programming Language ::
        Python\\n-    Programming Language :: Python :: 3\\n-    Programming Language
        :: Python :: 3 :: Only\\n-    Programming Language :: Python :: 3.6\\n-    Programming
        Language :: Python :: 3.7\\n-    Programming Language :: Python :: 3.8\\n-
        \   Programming Language :: Python :: 3.9\\n-    Topic :: Multimedia\\n-    Topic
        :: Multimedia :: Sound/Audio\\n-    Topic :: Utilities\\n-\\n-[options]\\n-include_package_data
        = true\\n-install_requires =\\n-    spotipy >= 2.19.0\\n-    pytube >= 11.0.0\\n-
        \   rich\\n-    rapidfuzz\\n-    mutagen\\n-    ytmusicapi\\n-    yt-dlp\\n-
        \   beautifulsoup4\\n-    requests\\n-    Unidecode\\n-python_requires = >=3.6.1\\n-packages
        = find:\\n-\\n-[options.extras_require]\\n-test =\\n-    pytest >= 6.0\\n-
        \   pytest-mock >= 3.3.1\\n-    pytest-vcr >= 1.0.2\\n-    pyfakefs >= 4.3.0\\n-
        \   pytest-cov >= 2.10.1\\n-    pytest-subprocess\\n-dev =\\n-    tox\\n-
        \   mypy==0.790\\n-    flake8==3.8.4\\n-\\n-[options.entry_points]\\n-console_scripts=\\n-
        \   spotdl = spotdl:console_entry_point\\n-\\n-[mypy]\\n-ignore_missing_imports
        = True\\n-\\n-[flake8]\\n-max-line-length = 100\\n-ignore = E301,W605\"},{\"sha\":\"7f1a1763ca9cebc7bc16576d353d3284ee5d3c7d\",\"filename\":\"setup.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":4,\"changes\":4,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/setup.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/setup.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,4 +0,0 @@\\n-from setuptools import setup\\n-\\n-if __name__ == \\\"__main__\\\":\\n-
        \   setup()\"},{\"sha\":\"38094fc00a9eab3d9ac9c6d1243acc6d8b886f5a\",\"filename\":\"spotdl/__init__.py\",\"status\":\"modified\",\"additions\":165,\"deletions\":1,\"changes\":166,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1 +1,165 @@\\n-from .__main__ import console_entry_point\\n+\\\"\\\"\\\"\\n+Init
        module for spotdl. This module contains the main entry point for spotdl.\\n+And
        Spotdl class\\n+\\\"\\\"\\\"\\n+\\n+import asyncio\\n+import concurrent.futures\\n+import
        logging\\n+from pathlib import Path\\n+from typing import List, Optional,
        Tuple, Union\\n+\\n+from spotdl._version import __version__\\n+from spotdl.console
        import console_entry_point\\n+from spotdl.download.downloader import Downloader\\n+from
        spotdl.types.options import DownloaderOptionalOptions, DownloaderOptions\\n+from
        spotdl.types.song import Song\\n+from spotdl.utils.search import parse_query\\n+from
        spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__ = [\\\"Spotdl\\\",
        \\\"console_entry_point\\\", \\\"__version__\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        Spotdl:\\n+    \\\"\\\"\\\"\\n+    Spotdl class, which simplifies the process
        of downloading songs from Spotify.\\n+\\n+    ```python\\n+    from spotdl
        import Spotdl\\n+\\n+    spotdl = Spotdl(client_id='your-client-id', client_secret='your-client-secret')\\n+\\n+
        \   songs = spotdl.search(['joji - test drive',\\n+        'https://open.spotify.com/track/4cOdK2wGLETKBW3PvgPWqT'])\\n+\\n+
        \   results = spotdl.download_songs(songs)\\n+    song, path = spotdl.download(songs[0])\\n+
        \   ```\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+
        \       client_id: str,\\n+        client_secret: str,\\n+        user_auth:
        bool = False,\\n+        cache_path: Optional[str] = None,\\n+        no_cache:
        bool = False,\\n+        headless: bool = False,\\n+        downloader_settings:
        Optional[\\n+            Union[DownloaderOptionalOptions, DownloaderOptions]\\n+
        \       ] = None,\\n+        loop: Optional[asyncio.AbstractEventLoop] = None,\\n+
        \   ):\\n+        \\\"\\\"\\\"\\n+        Initialize the Spotdl class\\n+\\n+
        \       ### Arguments\\n+        - client_id: Spotify client id\\n+        -
        client_secret: Spotify client secret\\n+        - user_auth: If true, user
        will be prompted to authenticate\\n+        - cache_path: Path to cache directory\\n+
        \       - no_cache: If true, no cache will be used\\n+        - headless:
        If true, no browser will be opened\\n+        - downloader_settings: Settings
        for the downloader\\n+        - loop: Event loop to use\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if downloader_settings is None:\\n+            downloader_settings
        = {}\\n+\\n+        # Initialize spotify client\\n+        SpotifyClient.init(\\n+
        \           client_id=client_id,\\n+            client_secret=client_secret,\\n+
        \           user_auth=user_auth,\\n+            cache_path=cache_path,\\n+
        \           no_cache=no_cache,\\n+            headless=headless,\\n+        )\\n+\\n+
        \       # Initialize downloader\\n+        self.downloader = Downloader(\\n+
        \           settings=downloader_settings,\\n+            loop=loop,\\n+        )\\n+\\n+
        \   def search(self, query: List[str]) -> List[Song]:\\n+        \\\"\\\"\\\"\\n+
        \       Search for songs.\\n+\\n+        ### Arguments\\n+        - query:
        List of search queries\\n+\\n+        ### Returns\\n+        - A list of Song
        objects\\n+\\n+        ### Notes\\n+        - query can be a list of song
        titles, urls, uris\\n+        \\\"\\\"\\\"\\n+\\n+        return parse_query(\\n+
        \           query=query,\\n+            threads=self.downloader.settings[\\\"threads\\\"],\\n+
        \           use_ytm_data=self.downloader.settings[\\\"ytm_data\\\"],\\n+            playlist_numbering=self.downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \           album_type=self.downloader.settings[\\\"album_type\\\"],\\n+        )\\n+\\n+
        \   def get_download_urls(self, songs: List[Song]) -> List[Optional[str]]:\\n+
        \       \\\"\\\"\\\"\\n+        Get the download urls for a list of songs.\\n+\\n+
        \       ### Arguments\\n+        - songs: List of Song objects\\n+\\n+        ###
        Returns\\n+        - A list of urls if successful.\\n+\\n+        ### Notes\\n+
        \       - This function is multi-threaded.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       urls: List[Optional[str]] = []\\n+        with concurrent.futures.ThreadPoolExecutor(\\n+
        \           max_workers=self.downloader.settings[\\\"threads\\\"]\\n+        )
        as executor:\\n+            future_to_song = {\\n+                executor.submit(self.downloader.search,
        song): song for song in songs\\n+            }\\n+            for future in
        concurrent.futures.as_completed(future_to_song):\\n+                song =
        future_to_song[future]\\n+                try:\\n+                    data
        = future.result()\\n+                    urls.append(data)\\n+                except
        Exception as exc:\\n+                    logger.error(\\\"%s generated an
        exception: %s\\\", song, exc)\\n+\\n+        return urls\\n+\\n+    def download(self,
        song: Song) -> Tuple[Song, Optional[Path]]:\\n+        \\\"\\\"\\\"\\n+        Download
        and convert song to the output format.\\n+\\n+        ### Arguments\\n+        -
        song: Song object\\n+\\n+        ### Returns\\n+        - A tuple containing
        the song and the path to the downloaded file if successful.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return self.downloader.download_song(song)\\n+\\n+    def download_songs(self,
        songs: List[Song]) -> List[Tuple[Song, Optional[Path]]]:\\n+        \\\"\\\"\\\"\\n+
        \       Download and convert songs to the output format.\\n+\\n+        ###
        Arguments\\n+        - songs: List of Song objects\\n+\\n+        ### Returns\\n+
        \       - A list of tuples containing the song and the path to the downloaded
        file if successful.\\n+        \\\"\\\"\\\"\\n+\\n+        return self.downloader.download_multiple_songs(songs)\"},{\"sha\":\"19805064d34314b68b82dc42ca4e6103e0a538c1\",\"filename\":\"spotdl/__main__.py\",\"status\":\"modified\",\"additions\":5,\"deletions\":0,\"changes\":5,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2F__main__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2F__main__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2F__main__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,3 +1,8 @@\\n+\\\"\\\"\\\"\\n+Main module for spotdl. Exports version and
        main function.\\n+\\\"\\\"\\\"\\n+\\n+from spotdl._version import __version__\\n
        from spotdl.console import console_entry_point\\n \\n if __name__ == \\\"__main__\\\":\"},{\"sha\":\"7562ab4676f686e2d74560a4a45bad173c4cbb14\",\"filename\":\"spotdl/_version.py\",\"status\":\"added\",\"additions\":5,\"deletions\":0,\"changes\":5,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2F_version.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2F_version.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2F_version.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,5 @@\\n+\\\"\\\"\\\"\\n+Version module for spotdl.\\n+\\\"\\\"\\\"\\n+\\n+__version__
        = \\\"4.2.5\\\"\"},{\"sha\":\"39361721bc8763fbe77d8fab33352ec14fcd9768\",\"filename\":\"spotdl/console/__init__.py\",\"status\":\"modified\",\"additions\":7,\"deletions\":88,\"changes\":95,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,90 +1,9 @@\\n-import os\\n-import sys\\n-from pathlib import Path\\n-import
        signal\\n+\\\"\\\"\\\"\\n+Console module, contains the console entry point
        and different subcommands.\\n+\\\"\\\"\\\"\\n \\n-from spotdl.download import
        ffmpeg, DownloadManager\\n-from spotdl.parsers import parse_arguments, parse_query\\n-from
        spotdl.search import SpotifyClient\\n+from spotdl.console.entry_point import
        console_entry_point\\n \\n-\\n-def console_entry_point():\\n-    \\\"\\\"\\\"\\n-
        \   This is where all the console processing magic happens.\\n-    Its super
        simple, rudimentary even but, it's dead simple & it works.\\n-    \\\"\\\"\\\"\\n-\\n-
        \   # Parse arguments\\n-    arguments = parse_arguments()\\n-\\n-    # Convert
        arguments to dict\\n-    args_dict = vars(arguments)\\n-\\n-    if arguments.ffmpeg:\\n-
        \       args_dict[\\\"ffmpeg\\\"] = str(Path(arguments.ffmpeg).absolute())\\n-
        \   else:\\n-        args_dict[\\\"ffmpeg\\\"] = \\\"ffmpeg\\\"\\n-\\n-    #
        Check if ffmpeg has correct version, if not exit\\n-    if (\\n-        ffmpeg.has_correct_version(arguments.ignore_ffmpeg_version,
        args_dict[\\\"ffmpeg\\\"])\\n-        is False\\n-    ):\\n-        sys.exit(1)\\n-\\n-
        \   if \\\"saved\\\" in arguments.query and not arguments.user_auth:\\n-        arguments.user_auth
        = True\\n-        print(\\n-            \\\"Detected 'saved' in command line,
        but no --user-auth flag. Enabling Anyways.\\\"\\n-        )\\n-        print(\\\"Please
        Log In...\\\")\\n-\\n-    # Initialize spotify client\\n-    SpotifyClient.init(\\n-
        \       client_id=\\\"5f573c9620494bae87890c0f08a60293\\\",\\n-        client_secret=\\\"212476d9b0f3472eaa762d90b19b0ba8\\\",\\n-
        \       user_auth=arguments.user_auth,\\n-    )\\n-\\n-    # Change directory
        if user specified correct output path\\n-    if arguments.output:\\n-        if
        not os.path.isdir(arguments.output):\\n-            sys.exit(\\\"The output
        directory doesn't exist.\\\")\\n-        print(f\\\"Will download to: {os.path.abspath(arguments.output)}\\\")\\n-
        \       os.chdir(arguments.output)\\n-\\n-    # Start download manager\\n-
        \   with DownloadManager(args_dict) as downloader:\\n-        if not arguments.debug_termination:\\n-\\n-
        \           def graceful_exit(signal, frame):\\n-                downloader.display_manager.close()\\n-
        \               sys.exit(0)\\n-\\n-            signal.signal(signal.SIGINT,
        graceful_exit)\\n-            signal.signal(signal.SIGTERM, graceful_exit)\\n-\\n-
        \       # Find tracking files in queries\\n-        tracking_files = [\\n-
        \           query for query in arguments.query if query.endswith(\\\".spotdlTrackingFile\\\")\\n-
        \       ]\\n-\\n-        # Restart downloads\\n-        for tracking_file
        in tracking_files:\\n-            print(\\\"Preparing to resume download...\\\")\\n-
        \           downloader.resume_download_from_tracking_file(tracking_file)\\n-\\n-
        \       # Get songs\\n-        song_list = parse_query(\\n-            arguments.query,\\n-
        \           arguments.output_format,\\n-            arguments.use_youtube,\\n-
        \           arguments.generate_m3u,\\n-            arguments.lyrics_provider,\\n-
        \           arguments.search_threads,\\n-            arguments.path_template,\\n-
        \       )\\n-\\n-        # Start downloading\\n-        if len(song_list)
        > 0:\\n-            downloader.download_multiple_songs(song_list)\\n+__all__
        = [\\n+    \\\"console_entry_point\\\",\\n+]\"},{\"sha\":\"63ffe4ad162cb380ab23f52fd8e031ae60103c1a\",\"filename\":\"spotdl/console/download.py\",\"status\":\"added\",\"additions\":34,\"deletions\":0,\"changes\":34,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fdownload.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fdownload.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fdownload.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,34 @@\\n+\\\"\\\"\\\"\\n+Download module for the console.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import List\\n+\\n+from spotdl.download.downloader import Downloader\\n+from
        spotdl.utils.search import get_simple_songs\\n+\\n+__all__ = [\\\"download\\\"]\\n+\\n+\\n+def
        download(\\n+    query: List[str],\\n+    downloader: Downloader,\\n+) ->
        None:\\n+    \\\"\\\"\\\"\\n+    Find songs with the provided audio provider
        and save them to the disk.\\n+\\n+    ### Arguments\\n+    - query: list of
        strings to search for.\\n+    \\\"\\\"\\\"\\n+\\n+    # Parse the query\\n+
        \   songs = get_simple_songs(\\n+        query,\\n+        use_ytm_data=downloader.settings[\\\"ytm_data\\\"],\\n+
        \       playlist_numbering=downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       albums_to_ignore=downloader.settings[\\\"ignore_albums\\\"],\\n+        album_type=downloader.settings[\\\"album_type\\\"],\\n+
        \   )\\n+\\n+    # Download the songs\\n+    downloader.download_multiple_songs(songs)\"},{\"sha\":\"6c7283f6fb0b6ad5212f36bfad8516907f464471\",\"filename\":\"spotdl/console/entry_point.py\",\"status\":\"added\",\"additions\":171,\"deletions\":0,\"changes\":171,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fentry_point.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fentry_point.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fentry_point.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,171 @@\\n+\\\"\\\"\\\"\\n+Module that holds the entry point for the
        console.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+import signal\\n+import
        sys\\n+import time\\n+\\n+from spotdl.console.download import download\\n+from
        spotdl.console.meta import meta\\n+from spotdl.console.save import save\\n+from
        spotdl.console.sync import sync\\n+from spotdl.console.url import url\\n+from
        spotdl.console.web import web\\n+from spotdl.download.downloader import Downloader,
        DownloaderError\\n+from spotdl.utils.arguments import parse_arguments\\n+from
        spotdl.utils.config import create_settings\\n+from spotdl.utils.console import
        ACTIONS, generate_initial_config, is_executable\\n+from spotdl.utils.downloader
        import check_ytmusic_connection\\n+from spotdl.utils.ffmpeg import FFmpegError,
        download_ffmpeg, is_ffmpeg_installed\\n+from spotdl.utils.logging import init_logging\\n+from
        spotdl.utils.spotify import SpotifyClient, SpotifyError, save_spotify_cache\\n+\\n+__all__
        = [\\\"console_entry_point\\\", \\\"OPERATIONS\\\"]\\n+\\n+OPERATIONS = {\\n+
        \   \\\"download\\\": download,\\n+    \\\"sync\\\": sync,\\n+    \\\"save\\\":
        save,\\n+    \\\"meta\\\": meta,\\n+    \\\"url\\\": url,\\n+}\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def console_entry_point():\\n+    \\\"\\\"\\\"\\n+
        \   Console entry point for spotdl. This is where the magic happens.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Create config file if it doesn't exist\\n+    generate_initial_config()\\n+\\n+
        \   # Check if sys.argv contains an action\\n+    # If it does, we run the
        action and exit\\n+    try:\\n+        action_to_run = next(\\n+            action
        for action_name, action in ACTIONS.items() if action_name in sys.argv\\n+
        \       )\\n+    except StopIteration:\\n+        action_to_run = None\\n+\\n+
        \   if action_to_run:\\n+        action_to_run()\\n+        return None\\n+\\n+
        \   # Parse the arguments\\n+    arguments = parse_arguments()\\n+\\n+    #
        Create settings dicts\\n+    spotify_settings, downloader_settings, web_settings
        = create_settings(arguments)\\n+\\n+    init_logging(downloader_settings[\\\"log_level\\\"],
        downloader_settings[\\\"log_format\\\"])\\n+\\n+    # If the application is
        frozen, we check for ffmpeg\\n+    # if it's not present download it create
        config file\\n+    if is_executable():\\n+        if is_ffmpeg_installed()
        is False:\\n+            download_ffmpeg()\\n+\\n+    # Check if ffmpeg is
        installed\\n+    if is_ffmpeg_installed(downloader_settings[\\\"ffmpeg\\\"])
        is False:\\n+        raise FFmpegError(\\n+            \\\"FFmpeg is not installed.
        Please run `spotdl --download-ffmpeg` to install it, \\\"\\n+            \\\"or
        `spotdl --ffmpeg /path/to/ffmpeg` to specify the path to ffmpeg.\\\"\\n+        )\\n+\\n+
        \   # Check if we are not blocked by ytm\\n+    if \\\"youtube-music\\\" in
        downloader_settings[\\\"audio_providers\\\"]:\\n+        if not check_ytmusic_connection():\\n+
        \           raise DownloaderError(\\n+                \\\"You are blocked
        by YouTube Music. \\\"\\n+                \\\"Please use a VPN, change youtube-music
        to piped, or use other audio providers\\\"\\n+            )\\n+\\n+    # Initialize
        spotify client\\n+    SpotifyClient.init(**spotify_settings)\\n+    spotify_client
        = SpotifyClient()\\n+\\n+    # If the application is frozen start web ui\\n+
        \   # or if the operation is `web`\\n+    if is_executable() or arguments.operation
        == \\\"web\\\":\\n+\\n+        # Default to the current directory when running
        a frozen application\\n+        if is_executable():\\n+            web_settings[\\\"web_use_output_dir\\\"]
        = True\\n+\\n+        # Start web ui\\n+        web(web_settings, downloader_settings)\\n+\\n+
        \       return None\\n+\\n+    # Check if save file is present and if it's
        valid\\n+    if isinstance(downloader_settings[\\\"save_file\\\"], str) and
        (\\n+        not downloader_settings[\\\"save_file\\\"].endswith(\\\".spotdl\\\")\\n+
        \       and not downloader_settings[\\\"save_file\\\"] == \\\"-\\\"\\n+    ):\\n+
        \       raise DownloaderError(\\\"Save file has to end with .spotdl\\\")\\n+\\n+
        \   # Check if the user is logged in\\n+    if (\\n+        arguments.query\\n+
        \       and \\\"saved\\\" in arguments.query\\n+        and not spotify_settings[\\\"user_auth\\\"]\\n+
        \   ):\\n+        raise SpotifyError(\\n+            \\\"You must be logged
        in to use the saved query. \\\"\\n+            \\\"Log in by adding the --user-auth
        flag\\\"\\n+        )\\n+\\n+    # Initialize the downloader\\n+    # for
        download, load and preload operations\\n+    downloader = Downloader(downloader_settings)\\n+\\n+
        \   def graceful_exit(_signal, _frame):\\n+        if spotify_settings[\\\"use_cache_file\\\"]:\\n+
        \           save_spotify_cache(spotify_client.cache)\\n+\\n+        downloader.progress_handler.close()\\n+
        \       sys.exit(0)\\n+\\n+    signal.signal(signal.SIGINT, graceful_exit)\\n+
        \   signal.signal(signal.SIGTERM, graceful_exit)\\n+\\n+    start_time = time.perf_counter()\\n+\\n+
        \   try:\\n+        # Pick the operation to perform\\n+        # based on
        the name and run it!\\n+        OPERATIONS[arguments.operation](\\n+            query=arguments.query,\\n+
        \           downloader=downloader,\\n+        )\\n+    except Exception as
        exc:\\n+        if downloader_settings[\\\"save_errors\\\"]:\\n+            with
        open(\\n+                downloader_settings[\\\"save_errors\\\"], \\\"a\\\",
        encoding=\\\"utf-8\\\"\\n+            ) as error_file:\\n+                error_file.write(\\\"\\\\n\\\".join([exc
        + \\\"\\\\n\\\" for exc in exc.args]))\\n+\\n+            logger.debug(\\\"Saved
        errors to %s\\\", downloader_settings[\\\"save_errors\\\"])\\n+\\n+        end_time
        = time.perf_counter()\\n+        logger.debug(\\\"Took %d seconds\\\", end_time
        - start_time)\\n+\\n+        downloader.progress_handler.close()\\n+        logger.exception(\\\"An
        error occurred\\\")\\n+\\n+        sys.exit(1)\\n+\\n+    end_time = time.perf_counter()\\n+
        \   logger.debug(\\\"Took %d seconds\\\", end_time - start_time)\\n+\\n+    if
        spotify_settings[\\\"use_cache_file\\\"]:\\n+        save_spotify_cache(spotify_client.cache)\\n+\\n+
        \   downloader.progress_handler.close()\\n+\\n+    return None\"},{\"sha\":\"69035c3f0ae93c1e41eed4dbf036c499e6d56c78\",\"filename\":\"spotdl/console/meta.py\",\"status\":\"added\",\"additions\":181,\"deletions\":0,\"changes\":181,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fmeta.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fmeta.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fmeta.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,181 @@\\n+\\\"\\\"\\\"\\n+Sync Lyrics module for the console\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import logging\\n+from pathlib import Path\\n+from typing import
        List\\n+\\n+from spotdl.download.downloader import Downloader\\n+from spotdl.types.song
        import Song\\n+from spotdl.utils.ffmpeg import FFMPEG_FORMATS\\n+from spotdl.utils.lrc
        import generate_lrc\\n+from spotdl.utils.metadata import embed_metadata, get_file_metadata\\n+from
        spotdl.utils.search import QueryError, get_search_results, parse_query, reinit_song\\n+\\n+__all__
        = [\\\"meta\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+def
        meta(query: List[str], downloader: Downloader) -> None:\\n+    \\\"\\\"\\\"\\n+
        \   This function applies metadata to the selected songs\\n+    based on the
        file name.\\n+    If song already has metadata, missing metadata is added\\n+\\n+
        \   ### Arguments\\n+    - query: list of strings to search for.\\n+    -
        downloader: Already initialized downloader instance.\\n+\\n+    ### Notes\\n+
        \   - This function is multi-threaded.\\n+    \\\"\\\"\\\"\\n+\\n+    # Create
        a list of all songs from all paths in query\\n+    paths: List[Path] = []\\n+
        \   for path in query:\\n+        test_path = Path(path)\\n+        if not
        test_path.exists():\\n+            logger.error(\\\"Path does not exist: %s\\\",
        path)\\n+            continue\\n+\\n+        if test_path.is_dir():\\n+            for
        out_format in FFMPEG_FORMATS:\\n+                paths.extend(test_path.glob(f\\\"*.{out_format}\\\"))\\n+
        \       elif test_path.is_file():\\n+            if test_path.suffix.split(\\\".\\\")[-1]
        not in FFMPEG_FORMATS:\\n+                logger.error(\\\"File is not a supported
        audio format: %s\\\", path)\\n+                continue\\n+\\n+            paths.append(test_path)\\n+\\n+
        \   def process_file(file: Path):\\n+        # metadata of the file, url is
        present in the file.\\n+        song_meta = get_file_metadata(file, downloader.settings[\\\"id3_separator\\\"])\\n+\\n+
        \       # Check if song has metadata\\n+        # and if it has all the required
        fields\\n+        # if it has all of these fields, we can assume that the
        metadata is correct\\n+        if song_meta and not downloader.settings[\\\"force_update_metadata\\\"]:\\n+
        \           if (\\n+                song_meta.get(\\\"artist\\\")\\n+                and
        song_meta.get(\\\"artists\\\")\\n+                and song_meta.get(\\\"name\\\")\\n+
        \               and song_meta.get(\\\"lyrics\\\")\\n+                and song_meta.get(\\\"album_art\\\")\\n+
        \           ):\\n+                logger.info(\\\"Song already has metadata:
        %s\\\", file.name)\\n+                if downloader.settings[\\\"generate_lrc\\\"]:\\n+
        \                   lrc_file = file.with_suffix(\\\".lrc\\\")\\n+                    if
        lrc_file.exists():\\n+                        logger.info(\\\"Lrc file already
        exists for %s\\\", file.name)\\n+                        return None\\n+\\n+
        \                   song = Song.from_missing_data(\\n+                        name=song_meta[\\\"name\\\"],\\n+
        \                       artists=song_meta[\\\"artists\\\"],\\n+                        artist=song_meta[\\\"artist\\\"],\\n+
        \                   )\\n+\\n+                    generate_lrc(song, file)\\n+
        \                   if lrc_file.exists():\\n+                        logger.info(\\\"Saved
        lrc file for %s\\\", song.display_name)\\n+                    else:\\n+                        logger.info(\\\"Could
        not find lrc file for %s\\\", song.display_name)\\n+\\n+                return
        None\\n+\\n+        # Same as above\\n+        if (\\n+            not song_meta\\n+
        \           or None\\n+            in [\\n+                song_meta.get(\\\"name\\\"),\\n+
        \               song_meta.get(\\\"album_art\\\"),\\n+                song_meta.get(\\\"artist\\\"),\\n+
        \               song_meta.get(\\\"artists\\\"),\\n+                song_meta.get(\\\"track_number\\\"),\\n+
        \           ]\\n+            or downloader.settings[\\\"force_update_metadata\\\"]\\n+
        \       ):\\n+            # Song does not have metadata, or it is missing
        some fields\\n+            # or we are forcing update of metadata\\n+            #
        so we search for it\\n+            logger.debug(\\\"Searching metadata for
        %s\\\", file.name)\\n+            search_results = get_search_results(file.stem)\\n+
        \           if not search_results:\\n+                logger.error(\\\"Could
        not find metadata for %s\\\", file.name)\\n+                return None\\n+\\n+
        \           song = search_results[0]\\n+        else:\\n+            # Song
        has metadata, so we use it to reinitialize the song object\\n+            #
        and fill in the missing metadata\\n+            try:\\n+                song
        = reinit_song(Song.from_missing_data(**song_meta))\\n+            except QueryError:\\n+
        \               logger.error(\\\"Could not find metadata for %s\\\", file.name)\\n+
        \               return None\\n+\\n+        # Check if the song has lyric\\n+
        \       # if not use downloader to find lyrics\\n+        if song_meta is
        None or song_meta.get(\\\"lyrics\\\") is None:\\n+            logger.debug(\\\"Fetching
        lyrics for %s\\\", song.display_name)\\n+            song.lyrics = downloader.search_lyrics(song)\\n+
        \           if song.lyrics:\\n+                logger.info(\\\"Found lyrics
        for song: %s\\\", song.display_name)\\n+        else:\\n+            song.lyrics
        = song_meta.get(\\\"lyrics\\\")\\n+\\n+        # Apply metadata to the song\\n+
        \       embed_metadata(file, song, skip_album_art=downloader.settings[\\\"skip_album_art\\\"])\\n+\\n+
        \       logger.info(\\\"Applied metadata to %s\\\", file.name)\\n+\\n+        if
        downloader.settings[\\\"generate_lrc\\\"]:\\n+            lrc_file = file.with_suffix(\\\".lrc\\\")\\n+
        \           if lrc_file.exists():\\n+                logger.info(\\\"Lrc file
        already exists for %s\\\", file.name)\\n+                return None\\n+\\n+
        \           generate_lrc(song, file)\\n+            if lrc_file.exists():\\n+
        \               logger.info(\\\"Saved lrc file for %s\\\", song.display_name)\\n+
        \           else:\\n+                logger.info(\\\"Could not find lrc file
        for %s\\\", song.display_name)\\n+        return None\\n+\\n+    async def
        pool_worker(file_path: Path) -> None:\\n+        async with downloader.semaphore:\\n+
        \           # The following function calls blocking code, which would block
        whole event loop.\\n+            # Therefore it has to be called in a separate
        thread via ThreadPoolExecutor. This\\n+            # is not a problem, since
        GIL is released for the I/O operations, so it shouldn't\\n+            # hurt
        performance.\\n+            await downloader.loop.run_in_executor(None, process_file,
        file_path)\\n+\\n+    tasks = [pool_worker(path) for path in paths]\\n+\\n+
        \   # call all task asynchronously, and wait until all are finished\\n+    downloader.loop.run_until_complete(asyncio.gather(*tasks))\\n+\\n+
        \   # to re-download the local songs\\n+    if downloader.settings[\\\"redownload\\\"]:\\n+
        \       songs_url: List[str] = []\\n+        for file in paths:\\n+            meta_data
        = get_file_metadata(\\n+                Path(file), downloader.settings[\\\"id3_separator\\\"]\\n+
        \           )\\n+            if meta_data and meta_data[\\\"url\\\"]:\\n+
        \               songs_url.append(meta_data[\\\"url\\\"])\\n+\\n+        songs_list
        = parse_query(\\n+            query=songs_url,\\n+            threads=downloader.settings[\\\"threads\\\"],\\n+
        \           use_ytm_data=downloader.settings[\\\"ytm_data\\\"],\\n+            playlist_numbering=downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \           album_type=downloader.settings[\\\"album_type\\\"],\\n+        )\\n+\\n+
        \       downloader.download_multiple_songs(songs_list)\"},{\"sha\":\"578b12ec5ec96fc26cef2ab5ff0fef5e90946127\",\"filename\":\"spotdl/console/save.py\",\"status\":\"added\",\"additions\":107,\"deletions\":0,\"changes\":107,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fsave.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fsave.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fsave.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,107 @@\\n+\\\"\\\"\\\"\\n+Save module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import json\\n+import logging\\n+from typing import List\\n+\\n+from
        spotdl.download.downloader import Downloader, DownloaderError\\n+from spotdl.types.song
        import Song\\n+from spotdl.utils.m3u import gen_m3u_files\\n+from spotdl.utils.search
        import parse_query\\n+\\n+__all__ = [\\\"save\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+def
        save(\\n+    query: List[str],\\n+    downloader: Downloader,\\n+) -> None:\\n+
        \   \\\"\\\"\\\"\\n+    Save metadata from spotify to the disk.\\n+\\n+    ###
        Arguments\\n+    - query: list of strings to search for.\\n+    - downloader:
        Already initialized downloader instance.\\n+\\n+    ### Notes\\n+    - This
        function is multi-threaded.\\n+    \\\"\\\"\\\"\\n+\\n+    save_path = downloader.settings[\\\"save_file\\\"]\\n+
        \   m3u_file = downloader.settings[\\\"m3u\\\"]\\n+\\n+    to_stdout = save_path
        == \\\"-\\\"\\n+\\n+    if save_path is None and not to_stdout:\\n+        raise
        DownloaderError(\\\"Save file is not specified\\\")\\n+\\n+    # Parse the
        query\\n+    songs = parse_query(\\n+        query=query,\\n+        threads=downloader.settings[\\\"threads\\\"],\\n+
        \       use_ytm_data=downloader.settings[\\\"ytm_data\\\"],\\n+        playlist_numbering=downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       album_type=downloader.settings[\\\"album_type\\\"],\\n+    )\\n+    save_data
        = [song.json for song in songs]\\n+\\n+    def process_song(song: Song):\\n+
        \       try:\\n+            data = downloader.search(song)\\n+            if
        data is None:\\n+                logger.error(\\\"Could not find a match for
        %s\\\", song.display_name)\\n+\\n+                return None\\n+\\n+            logger.info(\\\"Found
        url for %s: %s\\\", song.display_name, data)\\n+\\n+            return {**song.json,
        \\\"download_url\\\": data}\\n+        except Exception as exception:\\n+
        \           logger.error(\\\"%s generated an exception: %s\\\", song.display_name,
        exception)\\n+\\n+        return None\\n+\\n+    async def pool_worker(song:
        Song):\\n+        async with downloader.semaphore:\\n+            # The following
        function calls blocking code, which would block whole event loop.\\n+            #
        Therefore it has to be called in a separate thread via ThreadPoolExecutor.
        This\\n+            # is not a problem, since GIL is released for the I/O
        operations, so it shouldn't\\n+            # hurt performance.\\n+            return
        await downloader.loop.run_in_executor(None, process_song, song)\\n+\\n+    if
        downloader.settings[\\\"preload\\\"]:\\n+        tasks = [pool_worker(song)
        for song in songs]\\n+\\n+        # call all task asynchronously, and wait
        until all are finished\\n+        save_data = list(downloader.loop.run_until_complete(asyncio.gather(*tasks)))\\n+\\n+
        \   if to_stdout:\\n+        # Print the songs to stdout\\n+        print(json.dumps(save_data,
        indent=4, ensure_ascii=False))\\n+    elif save_path:\\n+        # Save the
        songs to a file\\n+        with open(save_path, \\\"w\\\", encoding=\\\"utf-8\\\")
        as save_file:\\n+            json.dump(save_data, save_file, indent=4, ensure_ascii=False)\\n+\\n+
        \   if m3u_file:\\n+        gen_m3u_files(\\n+            songs,\\n+            m3u_file,\\n+
        \           downloader.settings[\\\"output\\\"],\\n+            downloader.settings[\\\"format\\\"],\\n+
        \           downloader.settings[\\\"restrict\\\"],\\n+            False,\\n+
        \       )\\n+\\n+    if not to_stdout:\\n+        logger.info(\\n+            \\\"Saved
        %s song%s to %s\\\",\\n+            len(save_data),\\n+            \\\"s\\\"
        if len(save_data) > 1 else \\\"\\\",\\n+            save_path,\\n+        )\"},{\"sha\":\"a44de3efd3afedcc38245f4ed274d4dd20e41531\",\"filename\":\"spotdl/console/sync.py\",\"status\":\"added\",\"additions\":176,\"deletions\":0,\"changes\":176,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fsync.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fsync.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fsync.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,176 @@\\n+\\\"\\\"\\\"\\n+Sync module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import logging\\n+from typing import List\\n+\\n+from spotdl.download.downloader
        import Downloader\\n+from spotdl.types.song import Song\\n+from spotdl.utils.formatter
        import create_file_name\\n+from spotdl.utils.m3u import gen_m3u_files\\n+from
        spotdl.utils.search import parse_query\\n+\\n+__all__ = [\\\"sync\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def sync(\\n+    query: List[str],\\n+
        \   downloader: Downloader,\\n+) -> None:\\n+    \\\"\\\"\\\"\\n+    Sync
        function for the console.\\n+    It will download the songs and remove the
        ones that are no longer\\n+    present in the playlists/albums/etc\\n+\\n+\\n+
        \   ### Arguments\\n+    - query: list of strings to search for.\\n+    -
        downloader: Already initialized downloader instance.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   save_path = downloader.settings[\\\"save_file\\\"]\\n+    downloader.settings[\\\"save_file\\\"]
        = None\\n+\\n+    m3u_file = downloader.settings[\\\"m3u\\\"]\\n+    downloader.settings[\\\"m3u\\\"]
        = None\\n+\\n+    # Query and save file\\n+    # Create initial sync file\\n+
        \   if query and save_path:\\n+        if any(req for req in query if req.endswith(\\\".spotdl\\\")):\\n+
        \           # If the query contains a .spotdl file, and we are about to create\\n+
        \           # .spotdl file, raise an error.\\n+            raise ValueError(\\n+
        \               \\\"Cannot create a sync file with a .spotdl file in the query.\\\"\\n+
        \           )\\n+\\n+        # Parse the query\\n+        songs_list = parse_query(\\n+
        \           query=query,\\n+            threads=downloader.settings[\\\"threads\\\"],\\n+
        \           use_ytm_data=downloader.settings[\\\"ytm_data\\\"],\\n+            playlist_numbering=downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \           album_type=downloader.settings[\\\"album_type\\\"],\\n+        )\\n+\\n+
        \       # Create sync file\\n+        with open(save_path, \\\"w\\\", encoding=\\\"utf-8\\\")
        as save_file:\\n+            json.dump(\\n+                {\\n+                    \\\"type\\\":
        \\\"sync\\\",\\n+                    \\\"query\\\": query,\\n+                    \\\"songs\\\":
        [song.json for song in songs_list],\\n+                },\\n+                save_file,\\n+
        \               indent=4,\\n+                ensure_ascii=False,\\n+            )\\n+\\n+
        \       # Perform initial download\\n+        downloader.download_multiple_songs(songs_list)\\n+\\n+
        \       # Create m3u file\\n+        if m3u_file:\\n+            gen_m3u_files(\\n+
        \               songs_list,\\n+                m3u_file,\\n+                downloader.settings[\\\"output\\\"],\\n+
        \               downloader.settings[\\\"format\\\"],\\n+                downloader.settings[\\\"restrict\\\"],\\n+
        \               False,\\n+            )\\n+\\n+        return None\\n+\\n+
        \   # If the query is a single file, download it\\n+    if len(query) == 1
        and query[0].endswith(\\\".spotdl\\\") and not save_path:\\n+        # Load
        the sync file\\n+        with open(query[0], \\\"r\\\", encoding=\\\"utf-8\\\")
        as sync_file:\\n+            sync_data = json.load(sync_file)\\n+\\n+        #
        Verify the sync file\\n+        if (\\n+            not isinstance(sync_data,
        dict)\\n+            or sync_data.get(\\\"type\\\") != \\\"sync\\\"\\n+            or
        sync_data.get(\\\"songs\\\") is None\\n+        ):\\n+            raise ValueError(\\\"Sync
        file is not a valid sync file.\\\")\\n+\\n+        # Parse the query\\n+        songs_playlist
        = parse_query(\\n+            query=sync_data[\\\"query\\\"],\\n+            threads=downloader.settings[\\\"threads\\\"],\\n+
        \           use_ytm_data=downloader.settings[\\\"ytm_data\\\"],\\n+            playlist_numbering=downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \           album_type=downloader.settings[\\\"album_type\\\"],\\n+        )\\n+\\n+
        \       # Get the names and URLs of previously downloaded songs from the sync
        file\\n+        old_files = []\\n+        for entry in sync_data[\\\"songs\\\"]:\\n+
        \           file_name = create_file_name(\\n+                Song.from_dict(entry),\\n+
        \               downloader.settings[\\\"output\\\"],\\n+                downloader.settings[\\\"format\\\"],\\n+
        \               downloader.settings[\\\"restrict\\\"],\\n+            )\\n+
        \           old_files.append((file_name, entry[\\\"url\\\"]))\\n+\\n+        new_urls
        = [song.url for song in songs_playlist]\\n+\\n+        # Delete all song files
        whose URL is no longer part of the latest playlist\\n+        if not downloader.settings[\\\"sync_without_deleting\\\"]:\\n+
        \           to_delete = [path for (path, url) in old_files if url not in new_urls]\\n+\\n+
        \           for file in to_delete:\\n+                if file.exists():\\n+
        \                   logger.info(\\\"Deleting %s\\\", file)\\n+                    try:\\n+
        \                       file.unlink()\\n+                    except (PermissionError,
        OSError) as exc:\\n+                        logger.debug(\\n+                            \\\"Could
        not remove temp file: %s, error: %s\\\", file, exc\\n+                        )\\n+
        \               else:\\n+                    logger.debug(\\\"%s does not
        exist.\\\", file)\\n+\\n+            if len(to_delete) == 0:\\n+                logger.info(\\\"Nothing
        to delete...\\\")\\n+            else:\\n+                logger.info(\\\"%s
        old songs were deleted.\\\", len(to_delete))\\n+\\n+        if m3u_file:\\n+
        \           gen_m3u_files(\\n+                songs_playlist,\\n+                m3u_file,\\n+
        \               downloader.settings[\\\"output\\\"],\\n+                downloader.settings[\\\"format\\\"],\\n+
        \               downloader.settings[\\\"restrict\\\"],\\n+                False,\\n+
        \           )\\n+\\n+        # Write the new sync file\\n+        with open(query[0],
        \\\"w\\\", encoding=\\\"utf-8\\\") as save_file:\\n+            json.dump(\\n+
        \               {\\n+                    \\\"type\\\": \\\"sync\\\",\\n+                    \\\"query\\\":
        sync_data[\\\"query\\\"],\\n+                    \\\"songs\\\": [song.json
        for song in songs_playlist],\\n+                },\\n+                save_file,\\n+
        \               indent=4,\\n+                ensure_ascii=False,\\n+            )\\n+\\n+
        \       downloader.download_multiple_songs(songs_playlist)\\n+\\n+        return
        None\\n+\\n+    raise ValueError(\\n+        \\\"Wrong combination of arguments.
        \\\"\\n+        \\\"Either provide a query and a save path. Or a single sync
        file in the query\\\"\\n+    )\"},{\"sha\":\"466a57f5200239db137cb5750c3d112d47643267\",\"filename\":\"spotdl/console/url.py\",\"status\":\"added\",\"additions\":64,\"deletions\":0,\"changes\":64,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Furl.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Furl.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Furl.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,64 @@\\n+\\\"\\\"\\\"\\n+Url module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import logging\\n+from typing import List\\n+\\n+from spotdl.download.downloader
        import Downloader\\n+from spotdl.types.song import Song\\n+from spotdl.utils.search
        import parse_query\\n+\\n+__all__ = [\\\"url\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+def
        url(\\n+    query: List[str],\\n+    downloader: Downloader,\\n+) -> None:\\n+
        \   \\\"\\\"\\\"\\n+    Print download url for the provided songs.\\n+\\n+
        \   ### Arguments\\n+    - query: list of strings to search for.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Parse the query\\n+    songs = parse_query(\\n+        query=query,\\n+
        \       threads=downloader.settings[\\\"threads\\\"],\\n+        use_ytm_data=downloader.settings[\\\"ytm_data\\\"],\\n+
        \       playlist_numbering=downloader.settings[\\\"playlist_numbering\\\"],\\n+
        \       album_type=downloader.settings[\\\"album_type\\\"],\\n+    )\\n+\\n+
        \   def process_song(song: Song):\\n+        try:\\n+            data = downloader.search(song)\\n+
        \           if data is None:\\n+                logger.error(\\\"Could not
        find a match for %s\\\", song.display_name)\\n+\\n+                return
        None\\n+\\n+            audio_provider = downloader.audio_providers[0]\\n+
        \           download_url = audio_provider.get_download_metadata(data)[\\\"url\\\"]\\n+\\n+
        \           print(download_url)\\n+        except Exception as exception:\\n+
        \           logger.error(\\\"%s generated an exception: %s\\\", song.display_name,
        exception)\\n+\\n+        return None\\n+\\n+    async def pool_worker(song:
        Song):\\n+        async with downloader.semaphore:\\n+            # The following
        function calls blocking code, which would block whole event loop.\\n+            #
        Therefore it has to be called in a separate thread via ThreadPoolExecutor.
        This\\n+            # is not a problem, since GIL is released for the I/O
        operations, so it shouldn't\\n+            # hurt performance.\\n+            return
        await downloader.loop.run_in_executor(None, process_song, song)\\n+\\n+    tasks
        = [pool_worker(song) for song in songs]\\n+    downloader.loop.run_until_complete(asyncio.gather(*tasks))\"},{\"sha\":\"0696d1374ba035cc68a6f80399937d795569d666\",\"filename\":\"spotdl/console/web.py\",\"status\":\"added\",\"additions\":135,\"deletions\":0,\"changes\":135,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fweb.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fconsole%2Fweb.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fconsole%2Fweb.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,135 @@\\n+\\\"\\\"\\\"\\n+Web module for the console.\\n+\\\"\\\"\\\"\\n+\\n+import
        asyncio\\n+import logging\\n+import sys\\n+import webbrowser\\n+\\n+from fastapi
        import Depends, FastAPI\\n+from fastapi.middleware.cors import CORSMiddleware\\n+from
        uvicorn import Config, Server\\n+\\n+from spotdl._version import __version__\\n+from
        spotdl.types.options import DownloaderOptions, WebOptions\\n+from spotdl.utils.config
        import get_spotdl_path\\n+from spotdl.utils.github import download_github_dir\\n+from
        spotdl.utils.logging import NAME_TO_LEVEL\\n+from spotdl.utils.web import
        (\\n+    ALLOWED_ORIGINS,\\n+    SPAStaticFiles,\\n+    app_state,\\n+    fix_mime_types,\\n+
        \   get_current_state,\\n+    router,\\n+)\\n+\\n+__all__ = [\\\"web\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def web(web_settings: WebOptions,
        downloader_settings: DownloaderOptions):\\n+    \\\"\\\"\\\"\\n+    Run the
        web server.\\n+\\n+    ### Arguments\\n+    - web_settings: Web server settings.\\n+
        \   - downloader_settings: Downloader settings.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Apply the fix for mime types\\n+    fix_mime_types()\\n+\\n+    # Set
        up the app loggers\\n+    uvicorn_logger = logging.getLogger(\\\"uvicorn\\\")\\n+
        \   uvicorn_logger.propagate = False\\n+\\n+    spotipy_logger = logging.getLogger(\\\"spotipy\\\")\\n+
        \   spotipy_logger.setLevel(logging.NOTSET)\\n+\\n+    # Initialize the web
        server settings\\n+    app_state.web_settings = web_settings\\n+    app_state.logger
        = uvicorn_logger\\n+\\n+    # Create the event loop\\n+    app_state.loop
        = (\\n+        asyncio.new_event_loop()\\n+        if sys.platform != \\\"win32\\\"\\n+
        \       else asyncio.ProactorEventLoop()  # type: ignore\\n+    )\\n+\\n+
        \   downloader_settings[\\\"simple_tui\\\"] = True\\n+\\n+    # Download web
        app from GitHub\\n+    logger.info(\\\"Updating web app \\\\n\\\")\\n+    web_app_dir
        = str(get_spotdl_path().absolute())\\n+    download_github_dir(\\n+        \\\"https://github.com/spotdl/web-ui/tree/master/dist\\\",\\n+
        \       output_dir=web_app_dir,\\n+    )\\n+\\n+    app_state.api = FastAPI(\\n+
        \       title=\\\"spotDL\\\",\\n+        description=\\\"Download music from
        Spotify\\\",\\n+        version=__version__,\\n+        dependencies=[Depends(get_current_state)],\\n+
        \   )\\n+\\n+    app_state.api.include_router(router)\\n+\\n+    # Add the
        CORS middleware\\n+    app_state.api.add_middleware(\\n+        CORSMiddleware,\\n+
        \       allow_origins=(\\n+            ALLOWED_ORIGINS + web_settings[\\\"allowed_origins\\\"]\\n+
        \           if web_settings[\\\"allowed_origins\\\"]\\n+            else ALLOWED_ORIGINS\\n+
        \       ),\\n+        allow_credentials=True,\\n+        allow_methods=[\\\"*\\\"],\\n+
        \       allow_headers=[\\\"*\\\"],\\n+    )\\n+\\n+    # Add the static files\\n+
        \   app_state.api.mount(\\n+        \\\"/\\\",\\n+        SPAStaticFiles(directory=web_app_dir
        + \\\"/dist\\\", html=True),\\n+        name=\\\"static\\\",\\n+    )\\n+\\n+
        \   config = Config(\\n+        app=app_state.api,\\n+        host=web_settings[\\\"host\\\"],\\n+
        \       port=web_settings[\\\"port\\\"],\\n+        workers=1,\\n+        log_level=NAME_TO_LEVEL[downloader_settings[\\\"log_level\\\"]],\\n+
        \       loop=app_state.loop,  # type: ignore\\n+    )\\n+\\n+    app_state.server
        = Server(config)\\n+\\n+    app_state.downloader_settings = downloader_settings\\n+\\n+
        \   # Open the web browser\\n+    webbrowser.open(f\\\"http://{web_settings['host']}:{web_settings['port']}/\\\")\\n+\\n+
        \   if not web_settings[\\\"web_use_output_dir\\\"]:\\n+        logger.info(\\n+
        \           \\\"Files are stored in temporary directory \\\"\\n+            \\\"and
        will be deleted after the program exits \\\"\\n+            \\\"to save them
        to current directory permanently \\\"\\n+            \\\"enable the `web_use_output_dir`
        option \\\"\\n+        )\\n+    else:\\n+        logger.info(\\n+            \\\"Files
        are stored in current directory \\\"\\n+            \\\"to save them to temporary
        directory \\\"\\n+            \\\"disable the `web_use_output_dir` option
        \\\"\\n+        )\\n+\\n+    logger.info(\\\"Starting web server \\\\n\\\")\\n+\\n+
        \   # Start the web server\\n+    app_state.loop.run_until_complete(app_state.server.serve())\"},{\"sha\":\"ce8f55dfbee8e16f15116bb9facc29da1409ec7c\",\"filename\":\"spotdl/download/__init__.py\",\"status\":\"modified\",\"additions\":3,\"deletions\":5,\"changes\":8,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fdownload%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fdownload%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,5 +1,3 @@\\n-from spotdl.download.tracking_file_handler import DownloadTracker\\n-from
        spotdl.download.progress_ui_handler import DisplayManager\\n-from spotdl.download.ffmpeg
        import convert, has_correct_version\\n-from spotdl.download.embed_metadata
        import set_id3_data\\n-from spotdl.download.downloader import DownloadManager\\n+\\\"\\\"\\\"\\n+Download
        module that holds the downloader and progress handler modules.\\n+\\\"\\\"\\\"\"},{\"sha\":\"be9f1a9d3a1ea21cf8691394bd25c0875ab98734\",\"filename\":\"spotdl/download/downloader.py\",\"status\":\"modified\",\"additions\":760,\"deletions\":211,\"changes\":971,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fdownload%2Fdownloader.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fdownload%2Fdownloader.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fdownloader.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,297 +1,846 @@\\n-import sys\\n-import shutil\\n+\\\"\\\"\\\"\\n+Downloader
        module, this is where all the downloading pre/post processing happens etc.\\n+\\\"\\\"\\\"\\n+\\n
        import asyncio\\n+import datetime\\n+import json\\n+import logging\\n+import
        re\\n+import shutil\\n+import sys\\n import traceback\\n-import concurrent.futures\\n-\\n+from
        argparse import Namespace\\n from pathlib import Path\\n-from yt_dlp import
        YoutubeDL\\n-from typing import List, Optional\\n-\\n-from spotdl.search import
        SongObject\\n-from spotdl.download.progress_ui_handler import YTDLLogger\\n-from
        spotdl.download import ffmpeg, set_id3_data, DisplayManager, DownloadTracker\\n-from
        spotdl.providers.provider_utils import (\\n-    _get_converted_file_path,\\n-
        \   _parse_path_template,\\n+from typing import Dict, List, Optional, Tuple,
        Type, Union\\n+\\n+from yt_dlp.postprocessor.modify_chapters import ModifyChaptersPP\\n+from
        yt_dlp.postprocessor.sponsorblock import SponsorBlockPP\\n+\\n+from spotdl.download.progress_handler
        import ProgressHandler\\n+from spotdl.providers.audio import (\\n+    AudioProvider,\\n+
        \   BandCamp,\\n+    Piped,\\n+    SliderKZ,\\n+    SoundCloud,\\n+    YouTube,\\n+
        \   YouTubeMusic,\\n )\\n+from spotdl.providers.lyrics import AzLyrics, Genius,
        LyricsProvider, MusixMatch, Synced\\n+from spotdl.types.options import DownloaderOptionalOptions,
        DownloaderOptions\\n+from spotdl.types.song import Song\\n+from spotdl.utils.archive
        import Archive\\n+from spotdl.utils.config import (\\n+    DOWNLOADER_OPTIONS,\\n+
        \   GlobalConfig,\\n+    create_settings_type,\\n+    get_errors_path,\\n+
        \   get_temp_path,\\n+    modernize_settings,\\n+)\\n+from spotdl.utils.ffmpeg
        import FFmpegError, convert, get_ffmpeg_path\\n+from spotdl.utils.formatter
        import create_file_name\\n+from spotdl.utils.lrc import generate_lrc\\n+from
        spotdl.utils.m3u import gen_m3u_files\\n+from spotdl.utils.metadata import
        MetadataError, embed_metadata\\n+from spotdl.utils.search import gather_known_songs,
        reinit_song, songs_from_albums\\n+\\n+__all__ = [\\n+    \\\"AUDIO_PROVIDERS\\\",\\n+
        \   \\\"LYRICS_PROVIDERS\\\",\\n+    \\\"Downloader\\\",\\n+    \\\"DownloaderError\\\",\\n+
        \   \\\"SPONSOR_BLOCK_CATEGORIES\\\",\\n+]\\n+\\n+AUDIO_PROVIDERS: Dict[str,
        Type[AudioProvider]] = {\\n+    \\\"youtube\\\": YouTube,\\n+    \\\"youtube-music\\\":
        YouTubeMusic,\\n+    \\\"slider-kz\\\": SliderKZ,\\n+    \\\"soundcloud\\\":
        SoundCloud,\\n+    \\\"bandcamp\\\": BandCamp,\\n+    \\\"piped\\\": Piped,\\n+}\\n+\\n+LYRICS_PROVIDERS:
        Dict[str, Type[LyricsProvider]] = {\\n+    \\\"genius\\\": Genius,\\n+    \\\"musixmatch\\\":
        MusixMatch,\\n+    \\\"azlyrics\\\": AzLyrics,\\n+    \\\"synced\\\": Synced,\\n+}\\n+\\n+SPONSOR_BLOCK_CATEGORIES
        = {\\n+    \\\"sponsor\\\": \\\"Sponsor\\\",\\n+    \\\"intro\\\": \\\"Intermission/Intro
        Animation\\\",\\n+    \\\"outro\\\": \\\"Endcards/Credits\\\",\\n+    \\\"selfpromo\\\":
        \\\"Unpaid/Self Promotion\\\",\\n+    \\\"preview\\\": \\\"Preview/Recap\\\",\\n+
        \   \\\"filler\\\": \\\"Filler Tangent\\\",\\n+    \\\"interaction\\\": \\\"Interaction
        Reminder\\\",\\n+    \\\"music_offtopic\\\": \\\"Non-Music Section\\\",\\n+}\\n+\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class DownloaderError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to downloaders.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class Downloader:\\n+    \\\"\\\"\\\"\\n+    Downloader
        class, this is where all the downloading pre/post processing happens etc.\\n+
        \   It handles the downloading/moving songs, multithreading, metadata embedding
        etc.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+        settings:
        Optional[Union[DownloaderOptionalOptions, DownloaderOptions]] = None,\\n+
        \       loop: Optional[asyncio.AbstractEventLoop] = None,\\n+    ):\\n+        \\\"\\\"\\\"\\n+
        \       Initialize the Downloader class.\\n+\\n+        ### Arguments\\n+
        \       - settings: The settings to use.\\n+        - loop: The event loop
        to use.\\n \\n+        ### Notes\\n+        - `search-query` uses the same
        format as `output`.\\n+        - if `audio_provider` or `lyrics_provider`
        is a list, then if no match is found,\\n+            the next provider in
        the list will be used.\\n+        \\\"\\\"\\\"\\n \\n-class DownloadManager:\\n-
        \   def __init__(self, arguments: Optional[dict] = None):\\n-        # start
        a server for objects shared across processes\\n-        self.display_manager
        = DisplayManager()\\n-        self.download_tracker = DownloadTracker()\\n+
        \       if settings is None:\\n+            settings = {}\\n \\n-        if
        arguments is None:\\n-            arguments = {}\\n+        # Create settings
        dictionary, fill in missing values with defaults\\n+        # from spotdl.types.options.DOWNLOADER_OPTIONS\\n+
        \       self.settings: DownloaderOptions = DownloaderOptions(\\n+            **create_settings_type(\\n+
        \               Namespace(config=False), dict(settings), DOWNLOADER_OPTIONS\\n+
        \           )  # type: ignore\\n+        )\\n+\\n+        # Handle deprecated
        values in config file\\n+        modernize_settings(self.settings)\\n+        logger.debug(\\\"Downloader
        settings: %s\\\", self.settings)\\n+\\n+        # If no audio providers specified,
        raise an error\\n+        if len(self.settings[\\\"audio_providers\\\"]) ==
        0:\\n+            raise DownloaderError(\\n+                \\\"No audio providers
        specified. Please specify at least one.\\\"\\n+            )\\n \\n-        arguments.setdefault(\\\"ffmpeg\\\",
        \\\"ffmpeg\\\")\\n-        arguments.setdefault(\\\"output_format\\\", \\\"mp3\\\")\\n-
        \       arguments.setdefault(\\\"download_threads\\\", 4)\\n-        arguments.setdefault(\\\"path_template\\\",
        None)\\n+        # If ffmpeg is the default value and it's not installed\\n+
        \       # try to use the spotdl's ffmpeg\\n+        self.ffmpeg = self.settings[\\\"ffmpeg\\\"]\\n+
        \       if self.ffmpeg == \\\"ffmpeg\\\" and shutil.which(\\\"ffmpeg\\\")
        is None:\\n+            ffmpeg_exec = get_ffmpeg_path()\\n+            if
        ffmpeg_exec is None:\\n+                raise DownloaderError(\\\"ffmpeg is
        not installed\\\")\\n \\n-        if sys.platform == \\\"win32\\\":\\n-            #
        ! ProactorEventLoop is required on Windows to run subprocess asynchronously\\n-
        \           # ! it is default since Python 3.8 but has to be changed for previous
        versions\\n-            loop = asyncio.ProactorEventLoop()\\n-            asyncio.set_event_loop(loop)\\n+
        \           self.ffmpeg = str(ffmpeg_exec.absolute())\\n \\n-        self.loop
        = asyncio.get_event_loop()\\n-        # ! semaphore is required to limit concurrent
        asyncio executions\\n-        self.semaphore = asyncio.Semaphore(arguments[\\\"download_threads\\\"])\\n+
        \       logger.debug(\\\"FFmpeg path: %s\\\", self.ffmpeg)\\n \\n-        #
        ! thread pool executor is used to run blocking (CPU-bound) code from a thread\\n-
        \       self.thread_executor = concurrent.futures.ThreadPoolExecutor(\\n-
        \           max_workers=arguments[\\\"download_threads\\\"]\\n+        self.loop
        = loop or (\\n+            asyncio.new_event_loop()\\n+            if sys.platform
        != \\\"win32\\\"\\n+            else asyncio.ProactorEventLoop()  # type:
        ignore\\n         )\\n \\n-        self.arguments = arguments\\n+        if
        loop is None:\\n+            asyncio.set_event_loop(self.loop)\\n+\\n+        #
        semaphore is required to limit concurrent asyncio executions\\n+        self.semaphore
        = asyncio.Semaphore(self.settings[\\\"threads\\\"])\\n+\\n+        self.progress_handler
        = ProgressHandler(self.settings[\\\"simple_tui\\\"])\\n+\\n+        # Gather
        already present songs\\n+        self.scan_formats = self.settings[\\\"detect_formats\\\"]
        or [self.settings[\\\"format\\\"]]\\n+        self.known_songs: Dict[str,
        List[Path]] = {}\\n+        if self.settings[\\\"scan_for_songs\\\"]:\\n+
        \           logger.info(\\\"Scanning for known songs, this might take a while...\\\")\\n+
        \           for scan_format in self.scan_formats:\\n+                logger.debug(\\\"Scanning
        for %s files\\\", scan_format)\\n+\\n+                found_files = gather_known_songs(self.settings[\\\"output\\\"],
        scan_format)\\n+\\n+                logger.debug(\\\"Found %s %s files\\\",
        len(found_files), scan_format)\\n+\\n+                for song_url, song_paths
        in found_files.items():\\n+                    known_paths = self.known_songs.get(song_url)\\n+
        \                   if known_paths is None:\\n+                        self.known_songs[song_url]
        = song_paths\\n+                    else:\\n+                        self.known_songs[song_url].extend(song_paths)\\n+\\n+
        \       logger.debug(\\\"Found %s known songs\\\", len(self.known_songs))\\n+\\n+
        \       # Initialize lyrics providers\\n+        self.lyrics_providers: List[LyricsProvider]
        = []\\n+        for lyrics_provider in self.settings[\\\"lyrics_providers\\\"]:\\n+
        \           lyrics_class = LYRICS_PROVIDERS.get(lyrics_provider)\\n+            if
        lyrics_class is None:\\n+                raise DownloaderError(f\\\"Invalid
        lyrics provider: {lyrics_provider}\\\")\\n+\\n+            self.lyrics_providers.append(lyrics_class())\\n+\\n+
        \       # Initialize audio providers\\n+        self.audio_providers: List[AudioProvider]
        = []\\n+        for audio_provider in self.settings[\\\"audio_providers\\\"]:\\n+
        \           audio_class = AUDIO_PROVIDERS.get(audio_provider)\\n+            if
        audio_class is None:\\n+                raise DownloaderError(f\\\"Invalid
        audio provider: {audio_provider}\\\")\\n+\\n+            self.audio_providers.append(\\n+
        \               audio_class(\\n+                    output_format=self.settings[\\\"format\\\"],\\n+
        \                   cookie_file=self.settings[\\\"cookie_file\\\"],\\n+                    search_query=self.settings[\\\"search_query\\\"],\\n+
        \                   filter_results=self.settings[\\\"filter_results\\\"],\\n+
        \                   yt_dlp_args=self.settings[\\\"yt_dlp_args\\\"],\\n+                )\\n+
        \           )\\n+\\n+        # Initialize list of errors\\n+        self.errors:
        List[str] = []\\n+\\n+        # Initialize proxy server\\n+        proxy =
        self.settings[\\\"proxy\\\"]\\n+        proxies = None\\n+        if proxy:\\n+
        \           if not re.match(pattern=r\\\"(http|https)://\\\\d{1,5}\\\", string=proxy):\\n+
        \               raise DownloaderError(f\\\"Invalid proxy server: {proxy}\\\")\\n+
        \           proxies = {\\\"http\\\": proxy, \\\"https\\\": proxy}\\n+            logger.info(\\\"Setting
        proxy server: %s\\\", proxy)\\n \\n-    def __enter__(self):\\n-        return
        self\\n+        GlobalConfig.set_parameter(\\\"proxies\\\", proxies)\\n \\n-
        \   def __exit__(self, type, value, traceback):\\n-        self.display_manager.close()\\n+
        \       # Initialize archive\\n+        self.url_archive = Archive()\\n+        if
        self.settings[\\\"archive\\\"]:\\n+            self.url_archive.load(self.settings[\\\"archive\\\"])\\n
        \\n-        temp_folder = Path(\\\"spotdl-temp\\\")\\n+        logger.debug(\\\"Archive:
        %d urls\\\", len(self.url_archive))\\n \\n-        if temp_folder.exists():\\n-
        \           shutil.rmtree(temp_folder)\\n+        logger.debug(\\\"Downloader
        initialized\\\")\\n \\n-    def download_single_song(self, song_object: SongObject)
        -> None:\\n+    def download_song(self, song: Song) -> Tuple[Song, Optional[Path]]:\\n
        \        \\\"\\\"\\\"\\n-        `song_object` `song` : song to be downloaded\\n+
        \       Download a single song.\\n \\n-        RETURNS `~`\\n+        ###
        Arguments\\n+        - song: The song to download.\\n \\n-        downloads
        the given song\\n+        ### Returns\\n+        - tuple with the song and
        the path to the downloaded file if successful.\\n         \\\"\\\"\\\"\\n
        \\n-        self.download_tracker.clear()\\n-        self.download_tracker.load_song_list([song_object])\\n+
        \       self.progress_handler.set_song_count(1)\\n \\n-        self.display_manager.set_song_count_to(1)\\n+
        \       results = self.download_multiple_songs([song])\\n \\n-        self._download_asynchronously([song_object])\\n+
        \       return results[0]\\n \\n-    def download_multiple_songs(self, song_list:
        List[SongObject]) -> None:\\n+    def download_multiple_songs(\\n+        self,
        songs: List[Song]\\n+    ) -> List[Tuple[Song, Optional[Path]]]:\\n         \\\"\\\"\\\"\\n-
        \       `list<song_object>` `song_list` : list of songs to be downloaded\\n+
        \       Download multiple songs to the temp directory.\\n \\n-        RETURNS
        `~`\\n+        ### Arguments\\n+        - songs: The songs to download.\\n
        \\n-        downloads the given songs in parallel\\n+        ### Returns\\n+
        \       - list of tuples with the song and the path to the downloaded file
        if successful.\\n         \\\"\\\"\\\"\\n \\n-        self.download_tracker.clear()\\n-
        \       self.download_tracker.load_song_list(song_list)\\n+        if self.settings[\\\"fetch_albums\\\"]:\\n+
        \           albums = set(song.album_id for song in songs if song.album_id
        is not None)\\n+            logger.info(\\n+                \\\"Fetching %d
        album%s\\\", len(albums), \\\"s\\\" if len(albums) > 1 else \\\"\\\"\\n+            )\\n
        \\n-        self.display_manager.set_song_count_to(len(song_list))\\n+            songs.extend(songs_from_albums(list(albums)))\\n
        \\n-        self._download_asynchronously(song_list)\\n+            # Remove
        duplicates\\n+            return_obj = {}\\n+            for song in songs:\\n+
        \               return_obj[song.url] = song\\n \\n-    def resume_download_from_tracking_file(self,
        tracking_file_path: str) -> None:\\n-        \\\"\\\"\\\"\\n-        `str`
        `tracking_file_path` : path to a .spotdlTrackingFile\\n+            songs
        = list(return_obj.values())\\n \\n-        RETURNS `~`\\n+        logger.debug(\\\"Downloading
        %d songs\\\", len(songs))\\n \\n-        downloads songs present on the .spotdlTrackingFile
        in parallel\\n-        \\\"\\\"\\\"\\n+        if self.settings[\\\"archive\\\"]:\\n+
        \           songs = [song for song in songs if song.url not in self.url_archive]\\n+
        \           logger.debug(\\\"Filtered %d songs with archive\\\", len(songs))\\n+\\n+
        \       self.progress_handler.set_song_count(len(songs))\\n+\\n+        #
        Create tasks list\\n+        tasks = [self.pool_download(song) for song in
        songs]\\n+\\n+        # Call all task asynchronously, and wait until all are
        finished\\n+        results = list(self.loop.run_until_complete(asyncio.gather(*tasks)))\\n+\\n+
        \       # Print errors\\n+        if self.settings[\\\"print_errors\\\"]:\\n+
        \           for error in self.errors:\\n+                logger.error(error)\\n+\\n+
        \       if self.settings[\\\"save_errors\\\"]:\\n+            with open(\\n+
        \               self.settings[\\\"save_errors\\\"], \\\"w\\\", encoding=\\\"utf-8\\\"\\n+
        \           ) as error_file:\\n+                error_file.write(\\\"\\\\n\\\".join(self.errors))\\n+\\n+
        \           logger.info(\\\"Saved errors to %s\\\", self.settings[\\\"save_errors\\\"])\\n+\\n+
        \       # Save archive\\n+        if self.settings[\\\"archive\\\"]:\\n+            for
        result in results:\\n+                if result[1] or self.settings[\\\"add_unavailable\\\"]:\\n+
        \                   self.url_archive.add(result[0].url)\\n \\n-        self.download_tracker.clear()\\n-
        \       self.download_tracker.load_tracking_file(tracking_file_path)\\n+            self.url_archive.save(self.settings[\\\"archive\\\"])\\n+
        \           logger.info(\\n+                \\\"Saved archive with %d urls
        to %s\\\",\\n+                len(self.url_archive),\\n+                self.settings[\\\"archive\\\"],\\n+
        \           )\\n+\\n+        # Create m3u playlist\\n+        if self.settings[\\\"m3u\\\"]:\\n+
        \           song_list = [\\n+                song\\n+                for song,
        path in results\\n+                if path or self.settings[\\\"add_unavailable\\\"]\\n+
        \           ]\\n+\\n+            gen_m3u_files(\\n+                song_list,\\n+
        \               self.settings[\\\"m3u\\\"],\\n+                self.settings[\\\"output\\\"],\\n+
        \               self.settings[\\\"format\\\"],\\n+                self.settings[\\\"restrict\\\"],\\n+
        \               False,\\n+                self.settings[\\\"detect_formats\\\"],\\n+
        \           )\\n+\\n+        # Save results to a file\\n+        if self.settings[\\\"save_file\\\"]:\\n+
        \           with open(self.settings[\\\"save_file\\\"], \\\"w\\\", encoding=\\\"utf-8\\\")
        as save_file:\\n+                json.dump([song.json for song, _ in results],
        save_file, indent=4)\\n \\n-        song_list = self.download_tracker.get_song_list()\\n+
        \           logger.info(\\\"Saved results to %s\\\", self.settings[\\\"save_file\\\"])\\n
        \\n-        self.display_manager.set_song_count_to(len(song_list))\\n+        return
        results\\n \\n-        self._download_asynchronously(song_list)\\n+    async
        def pool_download(self, song: Song) -> Tuple[Song, Optional[Path]]:\\n+        \\\"\\\"\\\"\\n+
        \       Run asynchronous task in a pool to make sure that all processes.\\n+\\n+
        \       ### Arguments\\n+        - song: The song to download.\\n \\n-    def
        _download_asynchronously(self, song_obj_list):\\n-        tasks = [self._pool_download(song)
        for song in song_obj_list]\\n-        # call all task asynchronously, and
        wait until all are finished\\n-        self.loop.run_until_complete(asyncio.gather(*tasks))\\n+
        \       ### Returns\\n+        - tuple with the song and the path to the downloaded
        file if successful.\\n \\n-    async def _pool_download(self, song_obj: SongObject):\\n-
        \       # ! Run asynchronous task in a pool to make sure that all processes\\n-
        \       # ! don't run at once.\\n+        ### Notes\\n+        - This method
        calls `self.search_and_download` in a new thread.\\n+        \\\"\\\"\\\"\\n
        \\n         # tasks that cannot acquire semaphore will wait here until it's
        free\\n         # only certain amount of tasks can acquire the semaphore at
        the same time\\n         async with self.semaphore:\\n-            return
        await self.download_song(song_obj)\\n+            return await self.loop.run_in_executor(None,
        self.search_and_download, song)\\n \\n-    async def download_song(self, song_object:
        SongObject) -> None:\\n+    def search(self, song: Song) -> str:\\n         \\\"\\\"\\\"\\n-
        \       `song_object` `song_object` : song to be downloaded\\n+        Search
        for a song using all available providers.\\n \\n-        RETURNS `~`\\n+        ###
        Arguments\\n+        - song: The song to search for.\\n \\n-        Downloads,
        Converts, Normalizes song & embeds metadata as ID3 tags.\\n+        ### Returns\\n+
        \       - tuple with download url and audio provider if successful.\\n         \\\"\\\"\\\"\\n
        \\n-        display_progress_tracker = self.display_manager.new_progress_tracker(\\n-
        \           song_object\\n-        )\\n+        for audio_provider in self.audio_providers:\\n+
        \           url = audio_provider.search(song, self.settings[\\\"only_verified_results\\\"])\\n+
        \           if url:\\n+                return url\\n+\\n+            logger.debug(\\\"%s
        failed to find %s\\\", audio_provider.name, song.display_name)\\n+\\n+        raise
        LookupError(f\\\"No results found for song: {song.display_name}\\\")\\n+\\n+
        \   def search_lyrics(self, song: Song) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+
        \       Search for lyrics using all available providers.\\n+\\n+        ###
        Arguments\\n+        - song: The song to search for.\\n+\\n+        ### Returns\\n+
        \       - lyrics if successful else None.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       for lyrics_provider in self.lyrics_providers:\\n+            lyrics
        = lyrics_provider.get_lyrics(song.name, song.artists)\\n+            if lyrics:\\n+
        \               logger.debug(\\n+                    \\\"Found lyrics for
        %s on %s\\\", song.display_name, lyrics_provider.name\\n+                )\\n+\\n+
        \               return lyrics\\n+\\n+            logger.debug(\\n+                \\\"%s
        failed to find lyrics for %s\\\",\\n+                lyrics_provider.name,\\n+
        \               song.display_name,\\n+            )\\n+\\n+        return
        None\\n+\\n+    def search_and_download(self, song: Song) -> Tuple[Song, Optional[Path]]:\\n+
        \       \\\"\\\"\\\"\\n+        Search for the song and download it.\\n+\\n+
        \       ### Arguments\\n+        - song: The song to download.\\n+\\n+        ###
        Returns\\n+        - tuple with the song and the path to the downloaded file
        if successful.\\n+\\n+        ### Notes\\n+        - This function is synchronous.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # Check if song has name/artist and url/song_id\\n+
        \       if not (song.name and (song.artists or song.artist)) and not (\\n+
        \           song.url or song.song_id\\n+        ):\\n+            logger.error(\\\"Song
        is missing required fields: %s\\\", song.display_name)\\n+            self.errors.append(f\\\"Song
        is missing required fields: {song.display_name}\\\")\\n+\\n+            return
        song, None\\n \\n-        # ! since most errors are expected to happen within
        this function, we wrap in\\n-        # ! exception catcher to prevent blocking
        on multiple downloads\\n+        reinitialized = False\\n         try:\\n+
        \           # Create the output file path\\n+            output_file = create_file_name(\\n+
        \               song=song,\\n+                template=self.settings[\\\"output\\\"],\\n+
        \               file_extension=self.settings[\\\"format\\\"],\\n+                restrict=self.settings[\\\"restrict\\\"],\\n+
        \               file_name_length=self.settings[\\\"max_filename_length\\\"],\\n+
        \           )\\n+        except Exception:\\n+            song = reinit_song(song)\\n+\\n+
        \           output_file = create_file_name(\\n+                song=song,\\n+
        \               template=self.settings[\\\"output\\\"],\\n+                file_extension=self.settings[\\\"format\\\"],\\n+
        \               restrict=self.settings[\\\"restrict\\\"],\\n+                file_name_length=self.settings[\\\"max_filename_length\\\"],\\n+
        \           )\\n \\n-            # ! all YouTube downloads are to .\\\\Temp;
        they are then converted and put into .\\\\ and\\n-            # ! finally
        followed up with ID3 metadata tags\\n+            reinitialized = True\\n
        \\n-            # ! we explicitly use the os.path.join function here to ensure
        download is\\n-            # ! platform agnostic\\n+        if song.explicit
        is True and self.settings[\\\"skip_explicit\\\"] is True:\\n+            logger.info(\\\"Skipping
        explicit song: %s\\\", song.display_name)\\n+            return song, None\\n
        \\n-            # Create a spotdl-temp folder if not present\\n-            temp_folder
        = Path(\\\"spotdl-temp\\\")\\n+        # Initalize the progress tracker\\n+
        \       display_progress_tracker = self.progress_handler.get_new_tracker(song)\\n
        \\n-            if not temp_folder.exists():\\n-                temp_folder.mkdir()\\n+
        \       try:\\n+            # Create the temp folder path\\n+            temp_folder
        = get_temp_path()\\n+\\n+            # Check if there is an already existing
        song file, with the same spotify URL in its\\n+            # metadata, but
        saved under a different name. If so, save its path.\\n+            dup_song_paths:
        List[Path] = self.known_songs.get(song.url, [])\\n+\\n+            # Remove
        files from the list that have the same path as the output file\\n+            dup_song_paths
        = [\\n+                dup_song_path\\n+                for dup_song_path
        in dup_song_paths\\n+                if (dup_song_path.absolute() != output_file.absolute())\\n+
        \               and dup_song_path.exists()\\n+            ]\\n+\\n+            file_exists
        = output_file.exists() or dup_song_paths\\n+            if not self.settings[\\\"scan_for_songs\\\"]:\\n+
        \               for file_extension in self.scan_formats:\\n+                    ext_path
        = output_file.with_suffix(f\\\".{file_extension}\\\")\\n+                    if
        ext_path.exists():\\n+                        dup_song_paths.append(ext_path)\\n+\\n+
        \           if dup_song_paths:\\n+                logger.debug(\\n+                    \\\"Found
        duplicate songs for %s at %s\\\",\\n+                    song.display_name,\\n+
        \                   dup_song_paths,\\n+                )\\n \\n-            if
        self.arguments[\\\"path_template\\\"] is not None:\\n-                converted_file_path
        = _parse_path_template(\\n-                    self.arguments[\\\"path_template\\\"],\\n-
        \                   song_object,\\n-                    self.arguments[\\\"output_format\\\"],\\n+
        \           # If the file already exists and we don't want to overwrite it,\\n+
        \           # we can skip the download\\n+            if (\\n+                Path(str(output_file.absolute())
        + \\\".skip\\\").is_file()\\n+                and self.settings[\\\"respect_skip_file\\\"]\\n+
        \           ):\\n+                logger.info(\\n+                    \\\"Skipping
        %s (skip file found) %s\\\",\\n+                    song.display_name,\\n+
        \                   \\\"\\\",\\n                 )\\n-            else:\\n-
        \               converted_file_path = _get_converted_file_path(\\n-                    song_object,
        self.arguments[\\\"output_format\\\"]\\n+\\n+            elif file_exists
        and self.settings[\\\"overwrite\\\"] == \\\"skip\\\":\\n+                logger.info(\\n+
        \                   \\\"Skipping %s (file already exists) %s\\\",\\n+                    song.display_name,\\n+
        \                   \\\"(duplicate)\\\" if dup_song_paths else \\\"\\\",\\n
        \                )\\n \\n-            # if a song is already downloaded skip
        it\\n-            if converted_file_path.is_file():\\n-                if
        self.display_manager:\\n-                    display_progress_tracker.notify_download_skip()\\n-
        \               if self.download_tracker:\\n-                    self.download_tracker.notify_download_completion(song_object)\\n+
        \               display_progress_tracker.notify_download_skip()\\n+                return
        song, output_file\\n \\n-                # ! None is the default return value
        of all functions, we just explicitly define\\n-                # ! it here
        as a continent way to avoid executing the rest of the function.\\n-                return
        None\\n+            # Check if we have all the metadata\\n+            # and
        that the song object is not a placeholder\\n+            # If it's None extract
        the current metadata\\n+            # And reinitialize the song object\\n+
        \           # Force song reinitialization if we are fetching albums\\n+            #
        they have most metadata but not all\\n+            if (\\n+                (song.name
        is None and song.url)\\n+                or (self.settings[\\\"fetch_albums\\\"]
        and reinitialized is False)\\n+                or None\\n+                in
        [\\n+                    song.genres,\\n+                    song.disc_count,\\n+
        \                   song.tracks_count,\\n+                    song.track_number,\\n+
        \                   song.album_id,\\n+                    song.album_artist,\\n+
        \               ]\\n+            ):\\n+                song = reinit_song(song)\\n+
        \               reinitialized = True\\n+\\n+            # Don't skip if the
        file exists and overwrite is set to force\\n+            if file_exists and
        self.settings[\\\"overwrite\\\"] == \\\"force\\\":\\n+                logger.info(\\n+
        \                   \\\"Overwriting %s %s\\\",\\n+                    song.display_name,\\n+
        \                   \\\" (duplicate)\\\" if dup_song_paths else \\\"\\\",\\n+
        \               )\\n \\n-            converted_file_path.parent.mkdir(parents=True,
        exist_ok=True)\\n+                # If the duplicate song path is not None,
        we can delete the old file\\n+                for dup_song_path in dup_song_paths:\\n+
        \                   try:\\n+                        logger.info(\\\"Removing
        duplicate file: %s\\\", dup_song_path)\\n \\n-            if self.arguments[\\\"output_format\\\"]
        == \\\"m4a\\\":\\n-                ytdl_format = \\\"bestaudio[ext=m4a]/bestaudio/best\\\"\\n-
        \           elif self.arguments[\\\"output_format\\\"] == \\\"opus\\\":\\n-
        \               ytdl_format = \\\"bestaudio[ext=webm]/bestaudio/best\\\"\\n-
        \           else:\\n-                ytdl_format = \\\"bestaudio\\\"\\n-\\n-
        \           # download Audio from YouTube\\n-            audio_handler = YoutubeDL(\\n-
        \               {\\n-                    \\\"format\\\": ytdl_format,\\n-
        \                   \\\"outtmpl\\\": f\\\"{temp_folder}/%(id)s.%(ext)s\\\",\\n-
        \                   \\\"quiet\\\": True,\\n-                    \\\"no_warnings\\\":
        True,\\n-                    \\\"encoding\\\": \\\"UTF-8\\\",\\n-                    \\\"logger\\\":
        YTDLLogger(),\\n-                    \\\"progress_hooks\\\": [display_progress_tracker.ytdl_progress_hook]\\n-
        \                   if display_progress_tracker\\n-                    else
        [],\\n-                }\\n-            )\\n+                        dup_song_path.unlink()\\n+
        \                   except (PermissionError, OSError) as exc:\\n+                        logger.debug(\\n+
        \                           \\\"Could not remove duplicate file: %s, error:
        %s\\\",\\n+                            dup_song_path,\\n+                            exc,\\n+
        \                       )\\n \\n+            # Find song lyrics and add them
        to the song object\\n             try:\\n-                downloaded_file_path_string
        = await self._perform_audio_download_async(\\n-                    converted_file_path.name.rsplit(\\\".\\\",
        1)[0],\\n-                    temp_folder,\\n-                    audio_handler,\\n-
        \                   song_object.youtube_link,\\n+                lyrics =
        self.search_lyrics(song)\\n+                if lyrics is None:\\n+                    logger.debug(\\n+
        \                       \\\"No lyrics found for %s, lyrics providers: %s\\\",\\n+
        \                       song.display_name,\\n+                        \\\",
        \\\".join(\\n+                            [lprovider.name for lprovider in
        self.lyrics_providers]\\n+                        ),\\n+                    )\\n+
        \               else:\\n+                    song.lyrics = lyrics\\n+            except
        Exception as exc:\\n+                logger.debug(\\\"Could not search for
        lyrics: %s\\\", exc)\\n+\\n+            # If the file already exists and we
        want to overwrite the metadata,\\n+            # we can skip the download\\n+
        \           if file_exists and self.settings[\\\"overwrite\\\"] == \\\"metadata\\\":\\n+
        \               most_recent_duplicate: Optional[Path] = None\\n+                if
        dup_song_paths:\\n+                    # Get the most recent duplicate song
        path and remove the rest\\n+                    most_recent_duplicate = max(\\n+
        \                       dup_song_paths,\\n+                        key=lambda
        dup_song_path: dup_song_path.stat().st_mtime,\\n+                    )\\n+\\n+
        \                   # Remove the rest of the duplicate song paths\\n+                    for
        old_song_path in dup_song_paths:\\n+                        if most_recent_duplicate
        == old_song_path:\\n+                            continue\\n+\\n+                        try:\\n+
        \                           logger.info(\\\"Removing duplicate file: %s\\\",
        old_song_path)\\n+                            old_song_path.unlink()\\n+                        except
        (PermissionError, OSError) as exc:\\n+                            logger.debug(\\n+
        \                               \\\"Could not remove duplicate file: %s, error:
        %s\\\",\\n+                                old_song_path,\\n+                                exc,\\n+
        \                           )\\n+\\n+                    # Move the old file
        to the new location\\n+                    if most_recent_duplicate:\\n+                        most_recent_duplicate.replace(\\n+
        \                           output_file.with_suffix(f\\\".{self.settings['format']}\\\")\\n+
        \                       )\\n+\\n+                # Update the metadata\\n+
        \               embed_metadata(\\n+                    output_file=output_file,\\n+
        \                   song=song,\\n+                    skip_album_art=self.settings[\\\"skip_album_art\\\"],\\n
        \                )\\n-            except Exception:\\n-                print(\\n-
        \                   f'Unable to get audio stream for \\\"{song_object.song_name}\\\"
        '\\n-                    f'by \\\"{song_object.contributing_artists[0]}\\\"
        '\\n-                    f'from video \\\"{song_object.youtube_link}\\\"'\\n+\\n+
        \               logger.info(\\n+                    f\\\"Updated metadata
        for {song.display_name}\\\"\\n+                    f\\\", moved to new location:
        {output_file}\\\"\\n+                    if most_recent_duplicate\\n+                    else
        \\\"\\\"\\n                 )\\n-                return None\\n \\n-            if
        downloaded_file_path_string is None:\\n-                return None\\n+                display_progress_tracker.notify_complete()\\n
        \\n-            if display_progress_tracker:\\n-                display_progress_tracker.notify_youtube_download_completion()\\n+
        \               return song, output_file\\n \\n-            downloaded_file_path
        = Path(downloaded_file_path_string)\\n+            # Create the output directory
        if it doesn't exist\\n+            output_file.parent.mkdir(parents=True,
        exist_ok=True)\\n+            if song.download_url is None:\\n+                download_url
        = self.search(song)\\n+            else:\\n+                download_url =
        song.download_url\\n+\\n+            # Initialize audio downloader\\n+            audio_downloader:
        Union[AudioProvider, Piped]\\n+            if self.settings[\\\"audio_providers\\\"][0]
        == \\\"piped\\\":\\n+                audio_downloader = Piped(\\n+                    output_format=self.settings[\\\"format\\\"],\\n+
        \                   cookie_file=self.settings[\\\"cookie_file\\\"],\\n+                    search_query=self.settings[\\\"search_query\\\"],\\n+
        \                   filter_results=self.settings[\\\"filter_results\\\"],\\n+
        \                   yt_dlp_args=self.settings[\\\"yt_dlp_args\\\"],\\n+                )\\n+
        \           else:\\n+                audio_downloader = AudioProvider(\\n+
        \                   output_format=self.settings[\\\"format\\\"],\\n+                    cookie_file=self.settings[\\\"cookie_file\\\"],\\n+
        \                   search_query=self.settings[\\\"search_query\\\"],\\n+
        \                   filter_results=self.settings[\\\"filter_results\\\"],\\n+
        \                   yt_dlp_args=self.settings[\\\"yt_dlp_args\\\"],\\n+                )\\n+\\n+
        \           logger.debug(\\\"Downloading %s using %s\\\", song.display_name,
        download_url)\\n+\\n+            # Add progress hook to the audio provider\\n+
        \           audio_downloader.audio_handler.add_progress_hook(\\n+                display_progress_tracker.yt_dlp_progress_hook\\n+
        \           )\\n+\\n+            download_info = audio_downloader.get_download_metadata(\\n+
        \               download_url, download=True\\n+            )\\n+\\n+            temp_file
        = Path(\\n+                temp_folder / f\\\"{download_info['id']}.{download_info['ext']}\\\"\\n+
        \           )\\n+\\n+            if download_info is None:\\n+                logger.debug(\\n+
        \                   \\\"No download info found for %s, url: %s\\\",\\n+                    song.display_name,\\n+
        \                   download_url,\\n+                )\\n+\\n+                raise
        DownloaderError(\\n+                    f\\\"yt-dlp failed to get metadata
        for: {song.name} - {song.artist}\\\"\\n+                )\\n \\n+            display_progress_tracker.notify_download_complete()\\n+\\n+
        \           # Copy the downloaded file to the output file\\n+            #
        if the temp file and output file have the same extension\\n+            #
        and the bitrate is set to auto or disable\\n+            # Don't copy if the
        audio provider is piped\\n+            # unless the bitrate is set to disable\\n
        \            if (\\n-                downloaded_file_path.suffix == \\\".m4a\\\"\\n-
        \               and self.arguments[\\\"output_format\\\"] == \\\"m4a\\\"\\n+
        \               self.settings[\\\"bitrate\\\"] in [\\\"auto\\\", \\\"disable\\\",
        None]\\n+                and temp_file.suffix == output_file.suffix\\n+            )
        and not (\\n+                self.settings[\\\"audio_providers\\\"][0] ==
        \\\"piped\\\"\\n+                and self.settings[\\\"bitrate\\\"] != \\\"disable\\\"\\n
        \            ):\\n-                downloaded_file_path.rename(converted_file_path)\\n-
        \               ffmpeg_success = True\\n+                shutil.move(str(temp_file),
        output_file)\\n+                success = True\\n+                result =
        None\\n             else:\\n-                ffmpeg_success = await ffmpeg.convert(\\n-
        \                   downloaded_file_path=downloaded_file_path,\\n-                    converted_file_path=converted_file_path,\\n-
        \                   output_format=self.arguments[\\\"output_format\\\"],\\n-
        \                   ffmpeg_path=self.arguments[\\\"ffmpeg\\\"],\\n+                if
        self.settings[\\\"bitrate\\\"] in [\\\"auto\\\", None]:\\n+                    #
        Use the bitrate from the download info if it exists\\n+                    #
        otherwise use `copy`\\n+                    bitrate = (\\n+                        f\\\"{int(download_info['abr'])}k\\\"\\n+
        \                       if download_info.get(\\\"abr\\\")\\n+                        else
        \\\"copy\\\"\\n+                    )\\n+                elif self.settings[\\\"bitrate\\\"]
        == \\\"disable\\\":\\n+                    bitrate = None\\n+                else:\\n+
        \                   bitrate = str(self.settings[\\\"bitrate\\\"])\\n+\\n+
        \               # Convert the downloaded file to the output format\\n+                success,
        result = convert(\\n+                    input_file=temp_file,\\n+                    output_file=output_file,\\n+
        \                   ffmpeg=self.ffmpeg,\\n+                    output_format=self.settings[\\\"format\\\"],\\n+
        \                   bitrate=bitrate,\\n+                    ffmpeg_args=self.settings[\\\"ffmpeg_args\\\"],\\n+
        \                   progress_handler=display_progress_tracker.ffmpeg_progress_hook,\\n+
        \               )\\n+\\n+                if self.settings[\\\"create_skip_file\\\"]:\\n+
        \                   with open(\\n+                        str(output_file)
        + \\\".skip\\\", mode=\\\"w\\\", encoding=\\\"utf-8\\\"\\n+                    )
        as _:\\n+                        pass\\n+\\n+            # Remove the temp
        file\\n+            if temp_file.exists():\\n+                try:\\n+                    temp_file.unlink()\\n+
        \               except (PermissionError, OSError) as exc:\\n+                    logger.debug(\\n+
        \                       \\\"Could not remove temp file: %s, error: %s\\\",
        temp_file, exc\\n+                    )\\n+\\n+                    raise DownloaderError(\\n+
        \                       f\\\"Could not remove temp file: {temp_file}, possible
        duplicate song\\\"\\n+                    ) from exc\\n+\\n+            if
        not success and result:\\n+                # If the conversion failed and
        there is an error message\\n+                # create a file with the error
        message\\n+                # and save it in the errors directory\\n+                #
        raise an exception with file path\\n+                file_name = (\\n+                    get_errors_path()\\n+
        \                   / f\\\"ffmpeg_error_{datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}.txt\\\"\\n
        \                )\\n \\n-            if display_progress_tracker:\\n-                display_progress_tracker.notify_conversion_completion()\\n+
        \               error_message = \\\"\\\"\\n+                for key, value
        in result.items():\\n+                    error_message += f\\\"### {key}:\\\\n{str(value).strip()}\\\\n\\\\n\\\"\\n
        \\n-            if ffmpeg_success is False:\\n-                # delete the
        file that wasn't successfully converted\\n-                converted_file_path.unlink()\\n-
        \           else:\\n-                # if a file was successfully downloaded,
        tag it\\n-                set_id3_data(\\n-                    converted_file_path,
        song_object, self.arguments[\\\"output_format\\\"]\\n+                with
        open(file_name, \\\"w\\\", encoding=\\\"utf-8\\\") as error_path:\\n+                    error_path.write(error_message)\\n+\\n+
        \               # Remove the file that failed to convert\\n+                if
        output_file.exists():\\n+                    output_file.unlink()\\n+\\n+
        \               raise FFmpegError(\\n+                    f\\\"Failed to convert
        {song.display_name}, \\\"\\n+                    f\\\"you can find error here:
        {str(file_name.absolute())}\\\"\\n                 )\\n \\n-            #
        Do the necessary cleanup\\n-            if display_progress_tracker:\\n-                display_progress_tracker.notify_download_completion()\\n+
        \           download_info[\\\"filepath\\\"] = str(output_file)\\n \\n-            if
        self.download_tracker:\\n-                self.download_tracker.notify_download_completion(song_object)\\n+
        \           # Set the song's download url\\n+            if song.download_url
        is None:\\n+                song.download_url = download_url\\n \\n-            #
        delete the unnecessary YouTube download File\\n-            if downloaded_file_path
        and downloaded_file_path.is_file():\\n-                downloaded_file_path.unlink()\\n+
        \           display_progress_tracker.notify_conversion_complete()\\n \\n-
        \       except Exception as e:\\n-            tb = traceback.format_exc()\\n-
        \           if display_progress_tracker:\\n-                display_progress_tracker.notify_error(e,
        tb)\\n-            else:\\n-                raise e\\n+            # SponsorBlock
        post processor\\n+            if self.settings[\\\"sponsor_block\\\"]:\\n+
        \               # Initialize the sponsorblock post processor\\n+                post_processor
        = SponsorBlockPP(\\n+                    audio_downloader.audio_handler, SPONSOR_BLOCK_CATEGORIES\\n+
        \               )\\n \\n-    async def _perform_audio_download_async(\\n-
        \       self, converted_file_name, temp_folder, track_audio_stream, youtube_link\\n-
        \   ):\\n-        # ! The following function calls blocking code, which would
        block whole event loop.\\n-        # ! Therefore it has to be called in a
        separate thread via ThreadPoolExecutor. This\\n-        # ! is not a problem,
        since GIL is released for the I/O operations, so it shouldn't\\n-        #
        ! hurt performance.\\n-        return await self.loop.run_in_executor(\\n-
        \           self.thread_executor,\\n-            self._perform_audio_download,\\n-
        \           converted_file_name,\\n-            temp_folder,\\n-            track_audio_stream,\\n-
        \           youtube_link,\\n-        )\\n+                # Run the post processor
        to get the sponsor segments\\n+                _, download_info = post_processor.run(download_info)\\n+
        \               chapters = download_info[\\\"sponsorblock_chapters\\\"]\\n
        \\n-    def _perform_audio_download(\\n-        self, converted_file_name,
        temp_folder, audio_handler, youtube_link\\n-    ):\\n-        # ! The actual
        download, if there is any error, it'll be here,\\n-        try:\\n-            data
        = audio_handler.extract_info(youtube_link)\\n-            # ! This is equivalent
        to a failed download, we do nothing, the song remains on\\n-            #
        ! download_trackers download queue and all is well...\\n-            return
        Path(temp_folder / f\\\"{data['id']}.{data['ext']}\\\")\\n-        except
        Exception as e:\\n-            temp_files = Path(temp_folder).glob(f\\\"{converted_file_name}.*\\\")\\n-
        \           for temp_file in temp_files:\\n-                temp_file.unlink()\\n-
        \           raise e\\n+                # If there are sponsor segments, remove
        them\\n+                if len(chapters) > 0:\\n+                    logger.info(\\n+
        \                       \\\"Removing %s sponsor segments for %s\\\",\\n+                        len(chapters),\\n+
        \                       song.display_name,\\n+                    )\\n+\\n+
        \                   # Initialize the modify chapters post processor\\n+                    modify_chapters
        = ModifyChaptersPP(\\n+                        downloader=audio_downloader.audio_handler,\\n+
        \                       remove_sponsor_segments=SPONSOR_BLOCK_CATEGORIES,\\n+
        \                   )\\n+\\n+                    # Run the post processor
        to remove the sponsor segments\\n+                    # this returns a list
        of files to delete\\n+                    files_to_delete, download_info =
        modify_chapters.run(download_info)\\n+\\n+                    # Delete the
        files that were created by the post processor\\n+                    for file_to_delete
        in files_to_delete:\\n+                        Path(file_to_delete).unlink()\\n+\\n+
        \           try:\\n+                embed_metadata(\\n+                    output_file,\\n+
        \                   song,\\n+                    id3_separator=self.settings[\\\"id3_separator\\\"],\\n+
        \                   skip_album_art=self.settings[\\\"skip_album_art\\\"],\\n+
        \               )\\n+            except Exception as exception:\\n+                raise
        MetadataError(\\n+                    \\\"Failed to embed metadata to the
        song\\\"\\n+                ) from exception\\n+\\n+            if self.settings[\\\"generate_lrc\\\"]:\\n+
        \               generate_lrc(song, output_file)\\n+\\n+            display_progress_tracker.notify_complete()\\n+\\n+
        \           # Add the song to the known songs\\n+            self.known_songs.get(song.url,
        []).append(output_file)\\n+\\n+            logger.info('Downloaded \\\"%s\\\":
        %s', song.display_name, song.download_url)\\n+\\n+            return song,
        output_file\\n+        except (Exception, UnicodeEncodeError) as exception:\\n+
        \           if isinstance(exception, UnicodeEncodeError):\\n+                exception_cause
        = exception\\n+                exception = DownloaderError(\\n+                    \\\"You
        may need to add PYTHONIOENCODING=utf-8 to your environment\\\"\\n+                )\\n+\\n+
        \               exception.__cause__ = exception_cause\\n+\\n+            display_progress_tracker.notify_error(\\n+
        \               traceback.format_exc(), exception, True\\n+            )\\n+
        \           self.errors.append(\\n+                f\\\"{song.url} - {exception.__class__.__name__}:
        {exception}\\\"\\n+            )\\n+            return song, None\"},{\"sha\":\"2555113e3d24b7c86ae1aee49a249d703002b386\",\"filename\":\"spotdl/download/embed_metadata.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":301,\"changes\":301,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fembed_metadata.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fembed_metadata.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fembed_metadata.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,301 +0,0 @@\\n-import base64\\n-from pathlib import Path\\n-\\n-from urllib.request
        import urlopen\\n-from mutagen.oggopus import OggOpus\\n-from mutagen.mp4
        import MP4, MP4Cover\\n-from mutagen.flac import Picture, FLAC\\n-from mutagen.oggvorbis
        import OggVorbis\\n-from mutagen.easyid3 import EasyID3, ID3\\n-from mutagen.id3
        import APIC as AlbumCover, USLT, COMM as Comment\\n-\\n-from spotdl.search
        import SongObject\\n-\\n-\\n-# Apple has specific tags - see mutagen docs
        -\\n-# http://mutagen.readthedocs.io/en/latest/api/mp4.html\\n-M4A_TAG_PRESET
        = {\\n-    \\\"album\\\": \\\"\\\\xa9alb\\\",\\n-    \\\"artist\\\": \\\"\\\\xa9ART\\\",\\n-
        \   \\\"date\\\": \\\"\\\\xa9day\\\",\\n-    \\\"title\\\": \\\"\\\\xa9nam\\\",\\n-
        \   \\\"year\\\": \\\"\\\\xa9day\\\",\\n-    \\\"originaldate\\\": \\\"purd\\\",\\n-
        \   \\\"comment\\\": \\\"\\\\xa9cmt\\\",\\n-    \\\"group\\\": \\\"\\\\xa9grp\\\",\\n-
        \   \\\"writer\\\": \\\"\\\\xa9wrt\\\",\\n-    \\\"genre\\\": \\\"\\\\xa9gen\\\",\\n-
        \   \\\"tracknumber\\\": \\\"trkn\\\",\\n-    \\\"albumartist\\\": \\\"aART\\\",\\n-
        \   \\\"discnumber\\\": \\\"disk\\\",\\n-    \\\"cpil\\\": \\\"cpil\\\",\\n-
        \   \\\"albumart\\\": \\\"covr\\\",\\n-    \\\"copyright\\\": \\\"cprt\\\",\\n-
        \   \\\"tempo\\\": \\\"tmpo\\\",\\n-    \\\"lyrics\\\": \\\"\\\\xa9lyr\\\",\\n-
        \   \\\"explicit\\\": \\\"rtng\\\",\\n-}\\n-\\n-TAG_PRESET = {key: key for
        key in M4A_TAG_PRESET}\\n-\\n-\\n-def _set_id3_mp3(converted_file_path: str,
        song_object: SongObject):\\n-    # embed song details\\n-    # ! we save tags
        as both ID3 v2.3 and v2.4\\n-    # ! The simple ID3 tags\\n-    audio_file
        = EasyID3(converted_file_path)\\n-\\n-    audio_file = _embed_mp3_metadata(audio_file,
        song_object)\\n-\\n-    # ! save as both ID3 v2.3 & v2.4 as v2.3 isn't fully
        features and\\n-    # ! windows doesn't support v2.4 until later versions
        of Win10\\n-    audio_file.save(v2_version=3)\\n-\\n-    audio_file = _embed_mp3_cover(audio_file,
        song_object, converted_file_path)\\n-    audio_file = _embed_mp3_lyrics(audio_file,
        song_object)\\n-    # ! setting song links as comment (helpful for devs)\\n-
        \   audio_file.add(Comment(encoding=3, text=song_object.youtube_link))\\n-\\n-
        \   audio_file.save(v2_version=3)\\n-\\n-\\n-def _set_id3_m4a(converted_file_path:
        str, song_object: SongObject):\\n-    # embed song details\\n-    # ! we save
        tags as both ID3 v2.3 and v2.4\\n-    # ! The simple ID3 tags\\n-    audio_file
        = MP4(converted_file_path)\\n-\\n-    audio_file = _embed_basic_metadata(audio_file,
        song_object, \\\"m4a\\\", M4A_TAG_PRESET)\\n-    audio_file = _embed_m4a_metadata(audio_file,
        song_object)\\n-\\n-    audio_file.save()\\n-\\n-\\n-def _set_id3_flac(converted_file_path:
        str, song_object: SongObject):\\n-    audio_file = FLAC(converted_file_path)\\n-\\n-
        \   audio_file = _embed_basic_metadata(audio_file, song_object, \\\"flac\\\")\\n-
        \   audio_file = _embed_ogg_metadata(audio_file, song_object)\\n-    audio_file
        = _embed_cover(audio_file, song_object, \\\"flac\\\")\\n-\\n-    audio_file.save()\\n-\\n-\\n-def
        _set_id3_opus(converted_file_path: str, song_object: SongObject):\\n-    audio_file
        = OggOpus(converted_file_path)\\n-\\n-    audio_file = _embed_basic_metadata(audio_file,
        song_object, \\\"opus\\\")\\n-    audio_file = _embed_ogg_metadata(audio_file,
        song_object)\\n-    audio_file = _embed_cover(audio_file, song_object, \\\"opus\\\")\\n-\\n-
        \   audio_file.save()\\n-\\n-\\n-def _set_id3_ogg(converted_file_path: str,
        song_object: SongObject):\\n-    audio_file = OggVorbis(converted_file_path)\\n-\\n-
        \   audio_file = _embed_basic_metadata(audio_file, song_object, \\\"ogg\\\")\\n-
        \   audio_file = _embed_ogg_metadata(audio_file, song_object)\\n-    audio_file
        = _embed_cover(audio_file, song_object, \\\"ogg\\\")\\n-\\n-    audio_file.save()\\n-\\n-\\n-def
        _embed_mp3_metadata(audio_file, song_object: SongObject):\\n-\\n-    # ! Get
        rid of all existing ID3 tags (if any exist)\\n-    audio_file.delete()\\n-\\n-
        \   # ! song name\\n-    audio_file[\\\"title\\\"] = song_object.song_name\\n-
        \   audio_file[\\\"titlesort\\\"] = song_object.song_name\\n-\\n-    # ! track
        number\\n-    audio_file[\\\"tracknumber\\\"] = str(song_object.track_number)\\n-\\n-
        \   # ! disc number\\n-    audio_file[\\\"discnumber\\\"] = str(song_object.disc_number)\\n-\\n-
        \   # ! genres (pretty pointless if you ask me)\\n-    # ! we only apply the
        first available genre as ID3 v2.3 doesn't support multiple\\n-    # ! genres
        and ~80% of the world PC's run Windows - an OS with no ID3 v2.4 support\\n-
        \   genres = song_object.genres\\n-    if len(genres) > 0:\\n-        audio_file[\\\"genre\\\"]
        = genres[0]\\n-\\n-    # ! all involved artists\\n-    audio_file[\\\"artist\\\"]
        = song_object.contributing_artists\\n-\\n-    # ! album name\\n-    audio_file[\\\"album\\\"]
        = song_object.album_name\\n-\\n-    # ! album artist (all of 'em)\\n-    audio_file[\\\"albumartist\\\"]
        = song_object.album_artists\\n-\\n-    # ! album release date (to what ever
        precision available)\\n-    audio_file[\\\"date\\\"] = song_object.album_release\\n-
        \   audio_file[\\\"originaldate\\\"] = song_object.album_release\\n-\\n-    return
        audio_file\\n-\\n-\\n-def _embed_mp3_cover(audio_file, song_object, converted_file_path):\\n-
        \   # ! setting the album art\\n-    audio_file = ID3(converted_file_path)\\n-
        \   if song_object.album_cover_url:\\n-        rawAlbumArt = urlopen(song_object.album_cover_url).read()\\n-
        \       audio_file[\\\"APIC\\\"] = AlbumCover(\\n-            encoding=3,
        mime=\\\"image/jpeg\\\", type=3, desc=\\\"Cover\\\", data=rawAlbumArt\\n-
        \       )\\n-\\n-    return audio_file\\n-\\n-\\n-def _embed_mp3_lyrics(audio_file,
        song_object):\\n-    # ! setting the lyrics\\n-    lyrics = song_object.lyrics\\n-
        \   if not lyrics:\\n-        return audio_file\\n-\\n-    USLTOutput = USLT(encoding=3,
        lang=\\\"eng\\\", desc=\\\"desc\\\", text=lyrics)\\n-    audio_file[\\\"USLT::'eng'\\\"]
        = USLTOutput\\n-\\n-    return audio_file\\n-\\n-\\n-def _embed_m4a_metadata(audio_file,
        song_object: SongObject):\\n-    # set year\\n-    years = song_object.album_release.split(\\\"-\\\")\\n-
        \   if len(years) >= 1:\\n-        audio_file[M4A_TAG_PRESET[\\\"year\\\"]]
        = years[0]\\n-\\n-    # set youtube link as comment\\n-    youtube_link =
        song_object.youtube_link\\n-    if youtube_link:\\n-        audio_file[M4A_TAG_PRESET[\\\"comment\\\"]]
        = youtube_link\\n-\\n-    # set lyrics\\n-    lyrics = song_object.lyrics\\n-
        \   if lyrics:\\n-        audio_file[M4A_TAG_PRESET[\\\"lyrics\\\"]] = lyrics\\n-\\n-
        \   # Explicit values: Dirty: 4, Clean: 2, None: 0\\n-    audio_file[M4A_TAG_PRESET[\\\"explicit\\\"]]
        = (0,)\\n-    if song_object.album_cover_url:\\n-        try:\\n-            audio_file[M4A_TAG_PRESET[\\\"albumart\\\"]]
        = [\\n-                MP4Cover(\\n-                    urlopen(song_object.album_cover_url).read(),\\n-
        \                   imageformat=MP4Cover.FORMAT_JPEG,\\n-                )\\n-
        \           ]\\n-        except IndexError:\\n-            pass\\n-\\n-    return
        audio_file\\n-\\n-\\n-def _embed_basic_metadata(\\n-    audio_file, song_object:
        SongObject, encoding, preset=TAG_PRESET\\n-):\\n-\\n-    # set main artist\\n-
        \   artists = song_object.contributing_artists\\n-    if len(artists):\\n-
        \       audio_file[preset[\\\"artist\\\"]] = artists[0]\\n-        audio_file[preset[\\\"albumartist\\\"]]
        = artists[0]\\n-\\n-    # set song title\\n-    song_title = song_object.song_name\\n-
        \   if song_title:\\n-        audio_file[preset[\\\"title\\\"]] = song_title\\n-\\n-
        \   # set album name\\n-    album_name = song_object.album_name\\n-    if
        album_name:\\n-        audio_file[preset[\\\"album\\\"]] = album_name\\n-\\n-
        \   # set release data\\n-    release_data = song_object.album_release\\n-
        \   if release_data:\\n-        audio_file[preset[\\\"date\\\"]] = release_data\\n-
        \       audio_file[preset[\\\"originaldate\\\"]] = release_data\\n-\\n-    #
        set genre\\n-    genres = song_object.genres\\n-    if len(genres) >= 1:\\n-
        \       audio_file[preset[\\\"genre\\\"]] = genres[0]\\n-\\n-    # set disc
        number\\n-    disc_number = song_object.disc_number\\n-    if disc_number:\\n-
        \       if encoding in [\\\"flac\\\", \\\"ogg\\\", \\\"opus\\\"]:\\n-            audio_file[preset[\\\"discnumber\\\"]]
        = str(disc_number)\\n-        else:\\n-            audio_file[preset[\\\"discnumber\\\"]]
        = [(disc_number, 0)]\\n-\\n-    # set track number\\n-    track_number = song_object.track_number\\n-
        \   if track_number:\\n-        if encoding in [\\\"flac\\\", \\\"ogg\\\",
        \\\"opus\\\"]:\\n-            audio_file[preset[\\\"tracknumber\\\"]] = str(track_number)\\n-
        \       else:\\n-            audio_file[preset[\\\"tracknumber\\\"]] = [(track_number,
        0)]\\n-\\n-    return audio_file\\n-\\n-\\n-def _embed_ogg_metadata(audio_file,
        song_object: SongObject):\\n-    # set year\\n-    years = song_object.album_release.split(\\\"-\\\")\\n-
        \   if len(years) >= 1:\\n-        audio_file[\\\"year\\\"] = years[0]\\n-\\n-
        \   # set youtube link as comment\\n-    youtube_link = song_object.youtube_link\\n-
        \   if youtube_link:\\n-        audio_file[\\\"comment\\\"] = youtube_link\\n-\\n-
        \   # set lyrics\\n-    lyrics = song_object.lyrics\\n-    if lyrics:\\n-
        \       audio_file[\\\"lyrics\\\"] = lyrics\\n-\\n-    return audio_file\\n-\\n-\\n-def
        _embed_cover(audio_file, song_object, encoding):\\n-    if song_object.album_cover_url
        is None:\\n-        return audio_file\\n-\\n-    image = Picture()\\n-    image.type
        = 3\\n-    image.desc = \\\"Cover\\\"\\n-    image.mime = \\\"image/jpeg\\\"\\n-
        \   image.data = urlopen(song_object.album_cover_url).read()\\n-\\n-    if
        encoding == \\\"flac\\\":\\n-        audio_file.add_picture(image)\\n-    elif
        encoding in [\\\"ogg\\\", \\\"opus\\\"]:\\n-        # From the Mutagen docs
        (https://mutagen.readthedocs.io/en/latest/user/vcomment.html)\\n-        image_data
        = image.write()\\n-        encoded_data = base64.b64encode(image_data)\\n-
        \       vcomment_value = encoded_data.decode(\\\"ascii\\\")\\n-        audio_file[\\\"metadata_block_picture\\\"]
        = [vcomment_value]\\n-\\n-    return audio_file\\n-\\n-\\n-SET_ID3_FUNCTIONS
        = {\\n-    \\\"mp3\\\": _set_id3_mp3,\\n-    \\\"flac\\\": _set_id3_flac,\\n-
        \   \\\"opus\\\": _set_id3_opus,\\n-    \\\"ogg\\\": _set_id3_ogg,\\n-    \\\"m4a\\\":
        _set_id3_m4a,\\n-}\\n-\\n-\\n-def set_id3_data(converted_file_path, song_object,
        output_format):\\n-    function = SET_ID3_FUNCTIONS.get(output_format)\\n-
        \   if function:\\n-        function(converted_file_path, song_object)\"},{\"sha\":\"ea391a0a4578075fb264486f446aba19abf74349\",\"filename\":\"spotdl/download/ffmpeg.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":136,\"changes\":136,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fffmpeg.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,136 +0,0 @@\\n-import asyncio\\n-import subprocess\\n-import sys\\n-import
        re\\n-\\n-\\n-def has_correct_version(\\n-    skip_version_check: bool = False,
        ffmpeg_path: str = \\\"ffmpeg\\\"\\n-) -> bool:\\n-    try:\\n-        process
        = subprocess.Popen(\\n-            [ffmpeg_path, \\\"-version\\\"],\\n-            stdout=subprocess.PIPE,\\n-
        \           stderr=subprocess.PIPE,\\n-            encoding=\\\"utf-8\\\",\\n-
        \       )\\n-    except FileNotFoundError:\\n-        print(\\\"FFmpeg was
        not found, spotDL cannot continue.\\\", file=sys.stderr)\\n-        return
        False\\n-\\n-    output = \\\"\\\".join(process.communicate())\\n-\\n-    #
        remove all non numeric characters from string example: n4.3\\n-    if skip_version_check:\\n-
        \       return True\\n-\\n-    result = re.search(r\\\"ffmpeg version \\\\w?(\\\\d+\\\\.)?(\\\\d+)\\\",
        output)\\n-\\n-    # fallback to copyright date check\\n-    if result is
        not None:\\n-        version_str = result.group(0)\\n-\\n-        # remove
        all non numeric characters from string example: n4.3\\n-        version_str
        = re.sub(r\\\"[a-zA-Z]\\\", \\\"\\\", version_str)\\n-        version = float(version_str)\\n-\\n-
        \       if version < 4.2:\\n-            print(\\n-                f\\\"Your
        FFmpeg installation is too old ({version}), please update to 4.2+\\\\n\\\",\\n-
        \               file=sys.stderr,\\n-            )\\n-            return False\\n-\\n-
        \       return True\\n-    else:\\n-        # fallback to copyright date check\\n-
        \       date_result = re.search(r\\\"Copyright \\\\(c\\\\) \\\\d\\\\d\\\\d\\\\d\\\\-202\\\\d\\\",
        output)\\n-\\n-        if date_result is not None:\\n-            return True\\n-\\n-
        \       print(\\\"Your FFmpeg version couldn't be detected\\\", file=sys.stderr)\\n-
        \       return False\\n-\\n-\\n-async def convert(\\n-    downloaded_file_path,
        converted_file_path, ffmpeg_path, output_format\\n-) -> bool:\\n-    # ! '-abr
        true' automatically determines and passes the\\n-    # ! audio encoding bitrate
        to the filters and encoder. This ensures that the\\n-    # ! sampled length
        of songs matches the actual length (i.e. a 5 min song won't display\\n-    #
        ! as 47 seconds long in your music player, yeah that was an issue earlier.)\\n-\\n-
        \   downloaded_file_path = str(downloaded_file_path.absolute())\\n-    converted_file_path
        = str(converted_file_path.absolute())\\n-\\n-    formats = {\\n-        \\\"mp3\\\":
        [\\\"-codec:a\\\", \\\"libmp3lame\\\"],\\n-        \\\"flac\\\": [\\\"-codec:a\\\",
        \\\"flac\\\"],\\n-        \\\"ogg\\\": [\\\"-codec:a\\\", \\\"libvorbis\\\"],\\n-
        \       \\\"opus\\\": [\\\"-vn\\\", \\\"-c:a\\\", \\\"copy\\\"]\\n-        if
        downloaded_file_path.endswith(\\\".webm\\\")\\n-        else [\\\"-c:a\\\",
        \\\"libopus\\\"],\\n-        \\\"m4a\\\": [\\\"-codec:a\\\", \\\"aac\\\",
        \\\"-vn\\\"],\\n-        \\\"wav\\\": [],\\n-    }\\n-\\n-    bitrates = {\\n-
        \       \\\"mp3\\\": [\\\"-q:a\\\", \\\"0\\\"],\\n-        \\\"flac\\\": [],\\n-
        \       \\\"ogg\\\": [\\\"-q:a\\\", \\\"5\\\"],\\n-        \\\"opus\\\": []
        if downloaded_file_path.endswith(\\\".webm\\\") else [\\\"-b:a\\\", \\\"160K\\\"],\\n-
        \       \\\"m4a\\\": [] if downloaded_file_path.endswith(\\\".m4a\\\") else
        [\\\"-b:a\\\", \\\"160K\\\"],\\n-        \\\"wav\\\": [],\\n-    }\\n-\\n-
        \   if output_format is None:\\n-        output_format_command = formats[\\\"mp3\\\"]\\n-
        \       output_bitrate = bitrates[\\\"mp3\\\"]\\n-    else:\\n-        output_format_command
        = formats[output_format]\\n-        output_bitrate = bitrates[output_format]\\n-\\n-
        \   if ffmpeg_path is None:\\n-        ffmpeg_path = \\\"ffmpeg\\\"\\n-\\n-
        \   arguments = [  # type: ignore\\n-        \\\"-i\\\",\\n-        downloaded_file_path,\\n-
        \       *output_format_command,\\n-        \\\"-abr\\\",\\n-        \\\"true\\\",\\n-
        \       *output_bitrate,\\n-        \\\"-v\\\",\\n-        \\\"debug\\\",\\n-
        \       converted_file_path,\\n-    ]\\n-\\n-    process = await asyncio.subprocess.create_subprocess_exec(\\n-
        \       ffmpeg_path,\\n-        *arguments,\\n-        stdout=asyncio.subprocess.PIPE,\\n-
        \       stderr=asyncio.subprocess.PIPE,\\n-    )\\n-\\n-    proc_out = await
        process.communicate()\\n-\\n-    if proc_out[0] or proc_out[1]:\\n-        out
        = str(b\\\"\\\".join(proc_out))\\n-    else:\\n-        out = \\\"\\\"\\n-\\n-
        \   if process.returncode != 0:\\n-        message = (\\n-            f\\\"ffmpeg
        returned an error ({process.returncode})\\\"\\n-            f'\\\\nffmpeg
        arguments: \\\"{\\\" \\\".join(arguments)}\\\"'\\n-            \\\"\\\\nffmpeg
        gave this output:\\\"\\n-            \\\"\\\\n=====\\\\n\\\"\\n-            f\\\"{out}\\\"\\n-
        \           \\\"\\\\n=====\\\\n\\\"\\n-        )\\n-\\n-        print(message,
        file=sys.stderr)\\n-        return False\\n-\\n-    return True\"},{\"sha\":\"9c3cca67a8b7fcb8400db24b991c04136cb69110\",\"filename\":\"spotdl/download/progress_handler.py\",\"status\":\"added\",\"additions\":440,\"deletions\":0,\"changes\":440,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fdownload%2Fprogress_handler.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fdownload%2Fprogress_handler.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fprogress_handler.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,440 @@\\n+\\\"\\\"\\\"\\n+Module that holds the ProgressHandler class
        and Song Tracker class.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from typing
        import Any, Callable, Dict, List, Optional\\n+\\n+from rich import get_console\\n+from
        rich.console import JustifyMethod, OverflowMethod\\n+from rich.highlighter
        import Highlighter\\n+from rich.markup import escape\\n+from rich.progress
        import (\\n+    BarColumn,\\n+    Progress,\\n+    ProgressColumn,\\n+    Task,\\n+
        \   TaskID,\\n+    TimeRemainingColumn,\\n+)\\n+from rich.style import StyleType\\n+from
        rich.text import Text\\n+\\n+from spotdl.types.song import Song\\n+from spotdl.utils.static
        import BAD_CHARS\\n+\\n+__all__ = [\\n+    \\\"ProgressHandler\\\",\\n+    \\\"SongTracker\\\",\\n+
        \   \\\"ProgressHandlerError\\\",\\n+    \\\"SizedTextColumn\\\",\\n+]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class ProgressHandlerError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions raised by ProgressHandler
        subclasses.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+class SizedTextColumn(ProgressColumn):\\n+
        \   \\\"\\\"\\\"\\n+    Custom sized text column based on the Rich library.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+        text_format:
        str,\\n+        style: StyleType = \\\"none\\\",\\n+        justify: JustifyMethod
        = \\\"left\\\",\\n+        markup: bool = True,\\n+        highlighter: Optional[Highlighter]
        = None,\\n+        overflow: Optional[OverflowMethod] = None,\\n+        width:
        int = 20,\\n+    ) -> None:\\n+        \\\"\\\"\\\"\\n+        A column containing
        text.\\n+\\n+        ### Arguments\\n+        - text_format: The format string
        to use for the text.\\n+        - style: The style to use for the text.\\n+
        \       - justify: The justification to use for the text.\\n+        - markup:
        Whether or not the text should be rendered as markup.\\n+        - highlighter:
        A Highlighter to use for highlighting the text.\\n+        - overflow: The
        overflow method to use for truncating the text.\\n+        - width: The maximum
        width of the text.\\n+        \\\"\\\"\\\"\\n+\\n+        self.text_format
        = text_format\\n+        self.justify: JustifyMethod = justify\\n+        self.style
        = style\\n+        self.markup = markup\\n+        self.highlighter = highlighter\\n+
        \       self.overflow: Optional[OverflowMethod] = overflow\\n+        self.width
        = width\\n+        super().__init__()\\n+\\n+    def render(self, task: Task)
        -> Text:\\n+        \\\"\\\"\\\"\\n+        Render the Column.\\n+\\n+        ###
        Arguments\\n+        - task: The Task to render.\\n+\\n+        ### Returns\\n+
        \       - A Text object.\\n+        \\\"\\\"\\\"\\n+\\n+        _text = self.text_format.format(task=task)\\n+
        \       if self.markup:\\n+            text = Text.from_markup(_text, style=self.style,
        justify=self.justify)\\n+        else:\\n+            text = Text(_text, style=self.style,
        justify=self.justify)\\n+        if self.highlighter:\\n+            self.highlighter.highlight(text)\\n+\\n+
        \       text.truncate(max_width=self.width, overflow=self.overflow, pad=True)\\n+
        \       return text\\n+\\n+\\n+class ProgressHandler:\\n+    \\\"\\\"\\\"\\n+
        \   Class for handling the progress of a download, including the progress
        bar.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(\\n+        self,\\n+        simple_tui:
        bool = False,\\n+        update_callback: Optional[Callable[[Any, str], None]]
        = None,\\n+        web_ui: bool = False,\\n+    ):\\n+        \\\"\\\"\\\"\\n+
        \       Initialize the progress handler.\\n+\\n+        ### Arguments\\n+
        \       - simple_tui: Whether or not to use the simple TUI.\\n+        - update_callback:
        A callback to call when the progress bar is updated.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.songs: List[Song] = []\\n+        self.song_count: int = 0\\n+
        \       self.overall_progress = 0\\n+        self.overall_total = 100\\n+
        \       self.overall_completed_tasks = 0\\n+        self.update_callback =
        update_callback\\n+        self.previous_overall = self.overall_completed_tasks\\n+\\n+
        \       self.simple_tui = simple_tui\\n+        self.web_ui = web_ui\\n+        self.quiet
        = logger.getEffectiveLevel() < 10\\n+        self.overall_task_id: Optional[TaskID]
        = None\\n+\\n+        if not self.simple_tui:\\n+            console = get_console()\\n+\\n+
        \           self.rich_progress_bar = Progress(\\n+                SizedTextColumn(\\n+
        \                   \\\"[white]{task.description}\\\",\\n+                    overflow=\\\"ellipsis\\\",\\n+
        \                   width=int(console.width / 3),\\n+                ),\\n+
        \               SizedTextColumn(\\n+                    \\\"{task.fields[message]}\\\",
        width=18, style=\\\"nonimportant\\\"\\n+                ),\\n+                BarColumn(bar_width=None,
        finished_style=\\\"green\\\"),\\n+                \\\"[progress.percentage]{task.percentage:>3.0f}%\\\",\\n+
        \               TimeRemainingColumn(),\\n+                # Normally when
        you exit the progress context manager (or call stop())\\n+                #
        the last refreshed display remains in the terminal with the cursor on\\n+
        \               # the following line. You can also make the progress display
        disappear on\\n+                # exit by setting transient=True on the Progress
        constructor\\n+                transient=True,\\n+            )\\n+\\n+            #
        Basically a wrapper for rich's: with ... as ...\\n+            self.rich_progress_bar.__enter__()\\n+\\n+
        \   def add_song(self, song: Song) -> None:\\n+        \\\"\\\"\\\"\\n+        Adds
        a song to the list of songs.\\n+\\n+        ### Arguments\\n+        - song:
        The song to add.\\n+        \\\"\\\"\\\"\\n+\\n+        self.songs.append(song)\\n+
        \       self.set_song_count(len(self.songs))\\n+\\n+    def set_songs(self,
        songs: List[Song]) -> None:\\n+        \\\"\\\"\\\"\\n+        Sets the list
        of songs to be downloaded.\\n+\\n+        ### Arguments\\n+        - songs:
        The list of songs to download.\\n+        \\\"\\\"\\\"\\n+\\n+        self.songs
        = songs\\n+        self.set_song_count(len(songs))\\n+\\n+    def set_song_count(self,
        count: int) -> None:\\n+        \\\"\\\"\\\"\\n+        Set the number of
        songs to download.\\n+\\n+        ### Arguments\\n+        - count: The number
        of songs to download.\\n+        \\\"\\\"\\\"\\n+\\n+        self.song_count
        = count\\n+        self.overall_total = 100 * count\\n+\\n+        if not
        self.simple_tui:\\n+            if self.song_count > 4:\\n+                self.overall_task_id
        = self.rich_progress_bar.add_task(\\n+                    description=\\\"Total\\\",\\n+
        \                   message=(\\n+                        f\\\"{self.overall_completed_tasks}/{int(self.overall_total
        / 100)} \\\"\\n+                        \\\"complete\\\"\\n+                    ),\\n+
        \                   total=self.overall_total,\\n+                    visible=(not
        self.quiet),\\n+                )\\n+\\n+    def update_overall(self) -> None:\\n+
        \       \\\"\\\"\\\"\\n+        Update the overall progress bar.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if not self.simple_tui:\\n+            # If the overall progress bar
        exists\\n+            if self.overall_task_id is not None:\\n+                self.rich_progress_bar.update(\\n+
        \                   self.overall_task_id,\\n+                    message=f\\\"{self.overall_completed_tasks}/\\\"\\n+
        \                   f\\\"{int(self.overall_total / 100)} \\\"\\n+                    \\\"complete\\\",\\n+
        \                   completed=self.overall_progress,\\n+                )\\n+
        \       else:\\n+            if self.previous_overall != self.overall_completed_tasks:\\n+
        \               logger.info(\\n+                    \\\"%s/%s complete\\\",
        self.overall_completed_tasks, self.song_count\\n+                )\\n+                self.previous_overall
        = self.overall_completed_tasks\\n+\\n+    def get_new_tracker(self, song:
        Song) -> \\\"SongTracker\\\":\\n+        \\\"\\\"\\\"\\n+        Get a new
        progress tracker.\\n+\\n+        ### Arguments\\n+        - song: The song
        to track.\\n+\\n+        ### Returns\\n+        - A new progress tracker.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        return SongTracker(self, song)\\n+\\n+
        \   def close(self) -> None:\\n+        \\\"\\\"\\\"\\n+        Close the
        Tui Progress Handler.\\n+        \\\"\\\"\\\"\\n+\\n+        if not self.simple_tui:\\n+
        \           self.rich_progress_bar.stop()\\n+\\n+        logging.shutdown()\\n+\\n+\\n+class
        SongTracker:\\n+    \\\"\\\"\\\"\\n+    Class to track the progress of a song.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    def __init__(self, parent, song: Song) -> None:\\n+
        \       \\\"\\\"\\\"\\n+        Initialize the Tui Song Tracker.\\n+\\n+        ###
        Arguments\\n+        - parent: The parent Tui Progress Handler.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.parent: \\\"ProgressHandler\\\" = parent\\n+        self.song
        = song\\n+\\n+        # Clean up the song name\\n+        # from weird unicode
        characters\\n+        self.song_name = \\\"\\\".join(\\n+            char\\n+
        \           for char in self.song.display_name\\n+            if char not
        in [chr(i) for i in BAD_CHARS]\\n+        )\\n+\\n+        self.progress:
        int = 0\\n+        self.old_progress: int = 0\\n+        self.status = \\\"\\\"\\n+\\n+
        \       if not self.parent.simple_tui:\\n+            self.task_id = self.parent.rich_progress_bar.add_task(\\n+
        \               description=escape(self.song_name),\\n+                message=\\\"Processing\\\",\\n+
        \               total=100,\\n+                completed=self.progress,\\n+
        \               start=False,\\n+                visible=(not self.parent.quiet),\\n+
        \           )\\n+\\n+    def update(self, message=\\\"\\\"):\\n+        \\\"\\\"\\\"\\n+
        \       Called at every event.\\n+\\n+        ### Arguments\\n+        - message:
        The message to display.\\n+        \\\"\\\"\\\"\\n+\\n+        old_message
        = self.status\\n+        self.status = message\\n+\\n+        # The change
        in progress since last update\\n+        delta = self.progress - self.old_progress\\n+\\n+
        \       if not self.parent.simple_tui:\\n+            # Update the progress
        bar\\n+            # `start_task` called everytime to ensure progress is remove
        from indeterminate state\\n+            self.parent.rich_progress_bar.start_task(self.task_id)\\n+
        \           self.parent.rich_progress_bar.update(\\n+                self.task_id,\\n+
        \               description=escape(self.song_name),\\n+                message=message,\\n+
        \               completed=self.progress,\\n+            )\\n+\\n+            #
        If task is complete\\n+            if self.progress == 100 or message == \\\"Error\\\":\\n+
        \               self.parent.overall_completed_tasks += 1\\n+                self.parent.rich_progress_bar.remove_task(self.task_id)\\n+
        \       else:\\n+            # If task is complete\\n+            if self.progress
        == 100 or message == \\\"Error\\\":\\n+                self.parent.overall_completed_tasks
        += 1\\n+\\n+            # When running web ui print progress\\n+            #
        only one time when downloading/converting/embedding\\n+            if self.parent.web_ui
        and old_message != self.status:\\n+                logger.info(\\\"%s: %s\\\",
        self.song_name, message)\\n+            elif not self.parent.web_ui and delta:\\n+
        \               logger.info(\\\"%s: %s\\\", self.song_name, message)\\n+\\n+
        \       # Update the overall progress bar\\n+        if self.parent.song_count
        == self.parent.overall_completed_tasks:\\n+            self.parent.overall_progress
        = self.parent.song_count * 100\\n+        else:\\n+            self.parent.overall_progress
        += delta\\n+\\n+        self.parent.update_overall()\\n+        self.old_progress
        = self.progress\\n+\\n+        if self.parent.update_callback:\\n+            self.parent.update_callback(self,
        message)\\n+\\n+    def notify_error(\\n+        self, message: str, traceback:
        Exception, finish: bool = False\\n+    ) -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Logs an error message.\\n+\\n+        ### Arguments\\n+        - message:
        The message to log.\\n+        - traceback: The traceback of the error.\\n+
        \       - finish: Whether to finish the task.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.update(\\\"Error\\\")\\n+        if finish:\\n+            self.progress
        = 100\\n+\\n+        if logger.getEffectiveLevel() == logging.DEBUG:\\n+            logger.exception(message)\\n+
        \       else:\\n+            logger.error(\\\"%s: %s\\\", traceback.__class__.__name__,
        traceback)\\n+\\n+    def notify_download_complete(self, status=\\\"Converting\\\")
        -> None:\\n+        \\\"\\\"\\\"\\n+        Notifies the progress handler
        that the song has been downloaded.\\n+\\n+        ### Arguments\\n+        -
        status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+        self.progress
        = 50\\n+        self.update(status)\\n+\\n+    def notify_conversion_complete(self,
        status=\\\"Embedding metadata\\\") -> None:\\n+        \\\"\\\"\\\"\\n+        Notifies
        the progress handler that the song has been converted.\\n+\\n+        ###
        Arguments\\n+        - status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.progress = 95\\n+        self.update(status)\\n+\\n+    def notify_complete(self,
        status=\\\"Done\\\") -> None:\\n+        \\\"\\\"\\\"\\n+        Notifies
        the progress handler that the song has been downloaded and converted.\\n+\\n+
        \       ### Arguments\\n+        - status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.progress = 100\\n+        self.update(status)\\n+\\n+    def
        notify_download_skip(self, status=\\\"Skipped\\\") -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Notifies the progress handler that the song has been skipped.\\n+\\n+
        \       ### Arguments\\n+        - status: The status to display.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.progress = 100\\n+        self.update(status)\\n+\\n+    def
        ffmpeg_progress_hook(self, progress: int) -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Updates the progress.\\n+\\n+        ### Arguments\\n+        - progress:
        The progress to update to.\\n+        \\\"\\\"\\\"\\n+\\n+        if self.parent.simple_tui
        and not self.parent.web_ui:\\n+            self.progress = 50\\n+        else:\\n+
        \           self.progress = 50 + int(progress * 0.45)\\n+\\n+        self.update(\\\"Converting\\\")\\n+\\n+
        \   def yt_dlp_progress_hook(self, data: Dict[str, Any]) -> None:\\n+        \\\"\\\"\\\"\\n+
        \       Updates the progress.\\n+\\n+        ### Arguments\\n+        - progress:
        The progress to update to.\\n+        \\\"\\\"\\\"\\n+\\n+        if data[\\\"status\\\"]
        == \\\"downloading\\\":\\n+            file_bytes = data.get(\\\"total_bytes\\\")\\n+
        \           if file_bytes is None:\\n+                file_bytes = data.get(\\\"total_bytes_estimate\\\")\\n+\\n+
        \           downloaded_bytes = data.get(\\\"downloaded_bytes\\\")\\n+            if
        self.parent.simple_tui and not self.parent.web_ui:\\n+                self.progress
        = 50\\n+            elif file_bytes and downloaded_bytes:\\n+                self.progress
        = downloaded_bytes / file_bytes * 50\\n+\\n+            self.update(\\\"Downloading\\\")\"},{\"sha\":\"f9d718a82ef21232687b7caa519bda1a8e7a0088\",\"filename\":\"spotdl/download/progress_ui_handler.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":308,\"changes\":308,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fprogress_ui_handler.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Fprogress_ui_handler.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Fprogress_ui_handler.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,308 +0,0 @@\\n-from typing import Optional\\n-\\n-from rich.text import
        Text\\n-from rich.theme import Theme\\n-from rich.progress import Task\\n-from
        rich.console import Console\\n-from rich.style import StyleType\\n-from rich.highlighter
        import Highlighter\\n-from rich.progress import BarColumn, TimeRemainingColumn,
        Progress, ProgressColumn\\n-from rich.console import (\\n-    JustifyMethod,\\n-
        \   detect_legacy_windows,\\n-    OverflowMethod,\\n-)\\n-\\n-from spotdl.search
        import SongObject\\n-\\n-custom_theme = Theme(\\n-    {\\n-        \\\"bar.back\\\":
        \\\"grey23\\\",\\n-        \\\"bar.complete\\\": \\\"rgb(165,66,129)\\\",\\n-
        \       \\\"bar.finished\\\": \\\"rgb(114,156,31)\\\",\\n-        \\\"bar.pulse\\\":
        \\\"rgb(165,66,129)\\\",\\n-        \\\"general\\\": \\\"green\\\",\\n-        \\\"nonimportant\\\":
        \\\"rgb(40,100,40)\\\",\\n-        \\\"progress.data.speed\\\": \\\"red\\\",\\n-
        \       \\\"progress.description\\\": \\\"none\\\",\\n-        \\\"progress.download\\\":
        \\\"green\\\",\\n-        \\\"progress.filesize\\\": \\\"green\\\",\\n-        \\\"progress.filesize.total\\\":
        \\\"green\\\",\\n-        \\\"progress.percentage\\\": \\\"green\\\",\\n-
        \       \\\"progress.remaining\\\": \\\"rgb(40,100,40)\\\",\\n-    }\\n-)\\n-\\n-\\n-class
        YTDLLogger(object):\\n-    def debug(self, msg):\\n-        pass\\n-\\n-    def
        warning(self, msg):\\n-        pass\\n-\\n-    def error(self, msg):\\n-        raise
        Exception(msg)\\n-\\n-\\n-class SizedTextColumn(ProgressColumn):\\n-    \\\"\\\"\\\"A
        column containing text.\\\"\\\"\\\"\\n-\\n-    def __init__(\\n-        self,\\n-
        \       text_format: str,\\n-        style: StyleType = \\\"none\\\",\\n-
        \       justify: JustifyMethod = \\\"left\\\",\\n-        markup: bool = True,\\n-
        \       highlighter: Highlighter = None,\\n-        overflow: Optional[OverflowMethod]
        = None,\\n-        width: int = 20,\\n-    ) -> None:\\n-        self.text_format
        = text_format\\n-        self.justify: JustifyMethod = justify\\n-        self.style
        = style\\n-        self.markup = markup\\n-        self.highlighter = highlighter\\n-
        \       self.overflow: Optional[OverflowMethod] = overflow\\n-        self.width
        = width\\n-        super().__init__()\\n-\\n-    def render(self, task: \\\"Task\\\")
        -> Text:\\n-        _text = self.text_format.format(task=task)\\n-        if
        self.markup:\\n-            text = Text.from_markup(_text, style=self.style,
        justify=self.justify)\\n-        else:\\n-            text = Text(_text, style=self.style,
        justify=self.justify)\\n-        if self.highlighter:\\n-            self.highlighter.highlight(text)\\n-\\n-
        \       text.truncate(max_width=self.width, overflow=self.overflow, pad=True)\\n-
        \       return text\\n-\\n-\\n-class DisplayManager:\\n-    def __init__(self):\\n-\\n-
        \       # ! Change color system if \\\"legacy\\\" windows terminal to prevent
        wrong colors displaying\\n-        self.is_legacy = detect_legacy_windows()\\n-\\n-
        \       # ! dumb_terminals automatically handled by rich. Color system is
        too but it is incorrect\\n-        # ! for legacy windows ... so no color
        for y'all.\\n-        self.console = Console(\\n-            theme=custom_theme,
        color_system=\\\"truecolor\\\" if not self.is_legacy else None\\n-        )\\n-\\n-
        \       self._rich_progress_bar = Progress(\\n-            SizedTextColumn(\\n-
        \               \\\"[white]{task.description}\\\",\\n-                overflow=\\\"ellipsis\\\",\\n-
        \               width=int(self.console.width / 3),\\n-            ),\\n-            SizedTextColumn(\\\"{task.fields[message]}\\\",
        width=18, style=\\\"nonimportant\\\"),\\n-            BarColumn(bar_width=None,
        finished_style=\\\"green\\\"),\\n-            \\\"[progress.percentage]{task.percentage:>3.0f}%\\\",\\n-
        \           TimeRemainingColumn(),\\n-            console=self.console,\\n-
        \           # ! Normally when you exit the progress context manager (or call
        stop())\\n-            # ! the last refreshed display remains in the terminal
        with the cursor on\\n-            # ! the following line. You can also make
        the progress display disappear on\\n-            # ! exit by setting transient=True
        on the Progress constructor\\n-            transient=self.is_legacy,\\n-        )\\n-\\n-
        \       self.song_count = 0\\n-        self.overall_task_id = None\\n-        self.overall_progress
        = 0\\n-        self.overall_total = 100\\n-        self.overall_completed_tasks
        = 0\\n-        self.quiet = False\\n-\\n-        # ! Basically a wrapper for
        rich's: with ... as ...\\n-        self._rich_progress_bar.__enter__()\\n-\\n-
        \   def print(self, *text, color=\\\"green\\\"):\\n-        \\\"\\\"\\\"\\n-
        \       `text` : `any`  Text to be printed to screen\\n-        Use this self.print
        to replace default print().\\n-        \\\"\\\"\\\"\\n-\\n-        if self.quiet:\\n-
        \           return\\n-\\n-        line = \\\" \\\".join(str(item) for item
        in text)\\n-        if color:\\n-            self._rich_progress_bar.console.print(f\\\"[{color}]{line}\\\")\\n-
        \       else:\\n-            self._rich_progress_bar.console.print(line)\\n-\\n-
        \   def set_song_count_to(self, song_count: int) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `int` `song_count` : number of songs being downloaded\\n-        RETURNS
        `~`\\n-        sets the size of the progressbar based on the number of songs
        in the current\\n-        download set\\n-        \\\"\\\"\\\"\\n-\\n-        #
        ! all calculations are based of the arbitrary choice that 1 song consists
        of\\n-        # ! 100 steps/points/iterations\\n-        self.song_count =
        song_count\\n-\\n-        self.overall_total = 100 * song_count\\n-\\n-        if
        self.song_count > 4:\\n-            self.overall_task_id = self._rich_progress_bar.add_task(\\n-
        \               description=\\\"Total\\\",\\n-                process_id=\\\"0\\\",\\n-
        \               message=f\\\"{self.overall_completed_tasks}/{int(self.overall_total
        / 100)} complete\\\",\\n-                total=self.overall_total,\\n-                visible=(not
        self.quiet),\\n-            )\\n-\\n-    def update_overall(self):\\n-        \\\"\\\"\\\"\\n-
        \       Updates the overall progress bar.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       # If the overall progress bar exists\\n-        if self.overall_task_id
        is not None:\\n-            self._rich_progress_bar.update(\\n-                self.overall_task_id,\\n-
        \               message=f\\\"{self.overall_completed_tasks}/{int(self.overall_total
        / 100)} complete\\\",\\n-                completed=self.overall_progress,\\n-
        \           )\\n-\\n-    def new_progress_tracker(self, songObj):\\n-        \\\"\\\"\\\"\\n-
        \       returns new instance of `_ProgressTracker` that follows the `songObj`
        download subprocess\\n-        \\\"\\\"\\\"\\n-        return _ProgressTracker(self,
        songObj)\\n-\\n-    def close(self) -> None:\\n-        \\\"\\\"\\\"\\n-        clean
        up rich\\n-        \\\"\\\"\\\"\\n-\\n-        self._rich_progress_bar.stop()\\n-\\n-\\n-#
        ========================\\n-# === Progress Tracker ===\\n-# ========================\\n-\\n-\\n-class
        _ProgressTracker:\\n-    def __init__(self, parent, song_object: SongObject):\\n-
        \       self.parent = parent\\n-        self.song_object = song_object\\n-\\n-
        \       self.progress = 0\\n-        self.old_progress = 0\\n-        self.download_id
        = 0\\n-        self.status = \\\"\\\"\\n-\\n-        self.task_id = self.parent._rich_progress_bar.add_task(\\n-
        \           description=song_object.display_name,\\n-            process_id=str(self.download_id),\\n-
        \           message=\\\"Download Started\\\",\\n-            total=100,\\n-
        \           completed=self.progress,\\n-            start=False,\\n-            visible=(not
        self.parent.quiet),\\n-        )\\n-\\n-    def notify_download_skip(self)
        -> None:\\n-        \\\"\\\"\\\"\\n-        updates progress bar to reflect
        a song being skipped\\n-        \\\"\\\"\\\"\\n-\\n-        self.progress
        = 100\\n-        self.update(\\\"Skipping\\\")\\n-\\n-    def ytdl_progress_hook(self,
        data) -> None:\\n-        \\\"\\\"\\\"\\n-        Progress hook for youtube-dl.
        It is called each time\\n-        bytes are read from youtube.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       # ! This will be called until download is complete, i.e we get an
        overall\\n-\\n-        if data[\\\"status\\\"] == \\\"downloading\\\":\\n-
        \           file_bytes = data[\\\"total_bytes\\\"]\\n-            downloaded_bytes
        = data[\\\"downloaded_bytes\\\"]\\n-\\n-            if file_bytes and downloaded_bytes:\\n-
        \               self.progress = downloaded_bytes / file_bytes * 90\\n-\\n-
        \           self.update(\\\"Downloading\\\")\\n-\\n-    def notify_youtube_download_completion(self)
        -> None:\\n-        \\\"\\\"\\\"\\n-        updates progresbar to reflect
        a audio conversion being completed\\n-        \\\"\\\"\\\"\\n-\\n-        self.progress
        = 90  # self.progress + 5\\n-        self.update(\\\"Converting\\\")\\n-\\n-
        \   def notify_conversion_completion(self) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       updates progresbar to reflect a audio conversion being completed\\n-
        \       \\\"\\\"\\\"\\n-\\n-        self.progress = 95  # self.progress +
        5\\n-        self.update(\\\"Tagging\\\")\\n-\\n-    def notify_download_completion(self)
        -> None:\\n-        \\\"\\\"\\\"\\n-        updates progresbar to reflect
        a download being completed\\n-        \\\"\\\"\\\"\\n-\\n-        # ! Download
        completion implie ID# tag embedding was just finished\\n-        self.progress
        = 100  # self.progress + 5\\n-        self.update(\\\"Done\\\")\\n-\\n-    def
        notify_error(self, e, tb):\\n-        \\\"\\\"\\\"\\n-        `e` : error
        message\\n-        `tb` : traceback\\n-        Freezes the progress bar and
        prints the traceback received\\n-        \\\"\\\"\\\"\\n-        self.update(message=\\\"Error
        \\\" + self.status)\\n-\\n-        message = (\\n-            f\\\"Error:
        {e}\\\\tWhile {self.status}: {self.song_object.display_name}\\\\n {tb}\\\"\\n-
        \       )\\n-\\n-        self.parent.print(message, color=\\\"red\\\")\\n-\\n-
        \   def update(self, message=\\\"\\\"):\\n-        \\\"\\\"\\\"\\n-        Called
        at every event.\\n-        \\\"\\\"\\\"\\n-\\n-        self.status = message\\n-\\n-
        \       # The change in progress since last update\\n-        delta = self.progress
        - self.old_progress\\n-\\n-        # Update the progress bar\\n-        #
        ! `start_task` called everytime to ensure progress is remove from indeterminate
        state\\n-        self.parent._rich_progress_bar.start_task(self.task_id)\\n-
        \       self.parent._rich_progress_bar.update(\\n-            self.task_id,\\n-
        \           description=self.song_object.display_name,\\n-            process_id=str(self.download_id),\\n-
        \           message=message,\\n-            completed=self.progress,\\n-        )\\n-\\n-
        \       # If task is complete\\n-        if self.progress == 100 or message
        == \\\"Error\\\":\\n-            self.parent.overall_completed_tasks += 1\\n-
        \           if self.parent.is_legacy:\\n-                self.parent._rich_progress_bar.remove_task(self.task_id)\\n-\\n-
        \       # Update the overall progress bar\\n-        self.parent.overall_progress
        += delta\\n-        self.parent.update_overall()\\n-\\n-        self.old_progress
        = self.progress\"},{\"sha\":\"c98a4096a02326198dce513edf32137bc69455ea\",\"filename\":\"spotdl/download/tracking_file_handler.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":107,\"changes\":107,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Ftracking_file_handler.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fdownload%2Ftracking_file_handler.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fdownload%2Ftracking_file_handler.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,107 +0,0 @@\\n-from pathlib import Path\\n-from typing import Optional,
        List\\n-\\n-from spotdl.search import SongObject, song_gatherer\\n-from spotdl.utils.song_name_utils
        import format_name\\n-\\n-\\n-class DownloadTracker:\\n-    def __init__(self):\\n-
        \       self.song_list = []\\n-        self.save_file: Optional[Path] = None\\n-\\n-
        \   def load_tracking_file(self, tracking_file_path: str) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `str` `tracking_file_path` : path to a .spotdlTrackingFile\\n-\\n-
        \       RETURNS `~`\\n-\\n-        reads songsObj's from disk and prepares
        to track their download\\n-        \\\"\\\"\\\"\\n-\\n-        # Attempt to
        read .spotdlTrackingFile, raise exception if file can't be read\\n-        tracking_file
        = Path(tracking_file_path).resolve()\\n-        if not tracking_file.is_file():\\n-
        \           raise FileNotFoundError(\\n-                f\\\"no such tracking
        file found: {tracking_file_path}\\\"\\n-            )\\n-\\n-        with
        tracking_file.open(\\\"rb\\\") as file_handle:\\n-            song_data_dumps
        = eval(file_handle.read().decode())\\n-\\n-        # Save path to .spotdlTrackingFile\\n-
        \       self.save_file = tracking_file\\n-\\n-        # convert song data
        dumps to songObj's\\n-        # ! see, songGatherer.get_data_dump and songGatherer.from_dump
        for more details\\n-        for dump in song_data_dumps:\\n-            self.song_list.append(song_gatherer.from_dump(dump))\\n-\\n-
        \   def load_song_list(self, song_list: List[SongObject]) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `list<songOjb>` `song_list` : songObj's being downloaded\\n-\\n-        RETURNS
        `~`\\n-\\n-        prepares to track download of provided songObj's\\n-        \\\"\\\"\\\"\\n-\\n-
        \       self.song_list = song_list\\n-\\n-        self.backup_to_disk()\\n-\\n-
        \   def get_song_list(self) -> List[SongObject]:\\n-        \\\"\\\"\\\"\\n-
        \       RETURNS `list<songObj>\\n-\\n-        get songObj's representing songs
        yet to be downloaded\\n-        \\\"\\\"\\\"\\n-        return self.song_list\\n-\\n-
        \   def backup_to_disk(self):\\n-        \\\"\\\"\\\"\\n-        RETURNS `~`\\n-\\n-
        \       backs up details of songObj's yet to be downloaded to a .spotdlTrackingFile\\n-
        \       \\\"\\\"\\\"\\n-        # remove tracking file if no songs left in
        queue\\n-        # ! we use 'return None' as a convenient exit point\\n-        if
        len(self.song_list) == 0:\\n-            if self.save_file and self.save_file.is_file():\\n-
        \               self.save_file.unlink()\\n-\\n-            return None\\n-\\n-
        \       # prepare datadumps of all songObj's yet to be downloaded\\n-        song_data_dumps
        = [song.data_dump for song in self.song_list]\\n-\\n-        # ! the default
        naming of a tracking file is $nameOfFirstSOng.spotdlTrackingFile,\\n-        #
        ! it needs a little fixing because of disallowed characters in file naming\\n-
        \       if not self.save_file:\\n-            song_name = self.song_list[0].song_name\\n-\\n-
        \           song_name = format_name(song_name)\\n-\\n-            self.save_file
        = Path(song_name + \\\".spotdlTrackingFile\\\")\\n-\\n-        # save encoded
        string to a file\\n-        with open(self.save_file, \\\"wb\\\") as file_handle:\\n-
        \           file_handle.write(str(song_data_dumps).encode())\\n-\\n-    def
        notify_download_completion(self, song_object: SongObject) -> None:\\n-        \\\"\\\"\\\"\\n-
        \       `songObj` `songObj` : songObj representing song that has been downloaded\\n-\\n-
        \       RETURNS `~`\\n-\\n-        removes given songObj from download queue
        and updates .spotdlTrackingFile\\n-        \\\"\\\"\\\"\\n-\\n-        if
        song_object in self.song_list:\\n-            self.song_list.remove(song_object)\\n-\\n-
        \       self.backup_to_disk()\\n-\\n-    def clear(self):\\n-        self.song_list
        = []\\n-        self.save_file = None\"},{\"sha\":\"f9bf42453dfcb0bf0db444ea09d5ca21f63126f7\",\"filename\":\"spotdl/parsers/__init__.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":2,\"changes\":2,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fparsers%2F__init__.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,2 +0,0 @@\\n-from spotdl.parsers.argument_parser import parse_arguments
        \ # noqa: F401\\n-from spotdl.parsers.query_parser import parse_query  # noqa:
        F401\"},{\"sha\":\"3a35eff6b3e92fd1528add903bafcf0d64eabd5f\",\"filename\":\"spotdl/parsers/argument_parser.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":178,\"changes\":178,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fargument_parser.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fargument_parser.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fparsers%2Fargument_parser.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,178 +0,0 @@\\n-from argparse import ArgumentParser, RawDescriptionHelpFormatter\\n-\\n-import
        pkg_resources\\n-\\n-help_notice = r\\\"\\\"\\\"\\n-To download a song run,\\n-
        \   spotdl [trackUrl]\\n-    ex. spotdl https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b\\n-\\n-To
        download a album run,\\n-    spotdl [albumUrl]\\n-    ex. spotdl https://open.spotify.com/album/4yP0hdKOZPNshxUOjY0cZj\\n-\\n-To
        download a playlist, run:\\n-    spotdl [playlistUrl]\\n-    ex. spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID\\n-\\n-To
        download your saved songs, run:\\n-    spotdl --user-auth saved\\n-\\n-To
        download all songs from an artist run:\\n-    spotdl [artistUrl]\\n-    ex.
        spotdl https://open.spotify.com/artist/1fZAAHNWdSM5gqbi9o5iEA\\n-\\n-To download
        youtube video with metadata from spotify run:\\n-    spotdl \\\"YouTubeURL|SpotifyURL\\\"\\n-
        \   ex. spotdl \\\"https://www.youtube.com/watch?v=EO7XnC1YpVo|https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3\\\"\\n-
        \   Note: urls that you pass have to be quoted properly ex. \\\"YouTubeURL|SpotifyUrl\\\"\\n-\\n-To
        change output format run:\\n-    spotdl [songUrl] --output-format mp3/m4a/flac/opus/ogg/wav\\n-
        \   ex. spotdl [songUrl] --output-format opus\\n-\\n-To specifiy path template
        run:\\n-    spotdl [songUrl] -p 'template'\\n-    ex. spotdl [songUrl] -p
        \\\"{playlist}/{artists}/{album} - {title} {artist}.{ext}\\\"\\n-\\n-To use
        FFmpeg binary that is not on PATH run:\\n-    spotdl [songUrl] --ffmpeg path/to/your/ffmpeg.exe\\n-
        \   ex. spotdl [songUrl] --ffmpeg C:\\\\ffmpeg\\\\bin\\\\ffmpeg.exe\\n-\\n-To
        generate .m3u file for each playlist run:\\n-    spotdl [playlistUrl] --m3u\\n-
        \   ex. spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID --m3u\\n-\\n-To
        use Youtube instead of YouTube Music run:\\n-    spotdl [songUrl] --use-youtube\\n-
        \   ex. spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --use-youtube\\n-\\n-To
        change number of threads used when downloading songs run:\\n-    spotdl [songUrl]
        --dt [number]\\n-    ex. spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --dt 8\\n-\\n-To change number of threads used when searching for songs run:\\n-
        \   spotdl [songUrl] --st [number]\\n-    ex. spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3
        --st 8\\n-\\n-To ignore your ffmpeg version run:\\n-    spotdl --ignore-ffmpeg-version\\n-\\n-To
        search for and download a song, run, with quotation marks:\\n-Note: This is
        not accurate and often causes errors.\\n-    spotdl [songQuery]\\n-    ex.
        spotdl 'The Weeknd - Blinding Lights'\\n-\\n-To resume a failed/incomplete
        download, run:\\n-    spotdl [pathToTrackingFile]\\n-    ex. spotdl 'The Weeknd
        - Blinding Lights.spotdlTrackingFile'\\n-\\n-    .spotdlTrackingFiles are
        automatically created when a download starts and deleted on completion\\n-\\n-You
        can queue up multiple download tasks by separating the arguments with spaces:\\n-
        \   spotdl [songQuery1] [albumUrl] [songQuery2] ... (order does not matter)\\n-
        \   ex. spotdl 'The Weeknd - Blinding Lights'\\n-            https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID
        ...\\n-\\n-You can use the --debug-termination flag to figure out where in
        the code spotdl got stuck.\\n-\\n-spotDL downloads up to 4 songs in parallel,
        so for a faster experience,\\n-download albums and playlist, rather than tracks.\\n-\\\"\\\"\\\"
        \ # noqa: E501\\n-\\n-\\n-def parse_arguments():\\n-    # Initialize argument
        parser\\n-    parser = ArgumentParser(\\n-        prog=\\\"spotdl\\\",\\n-
        \       description=help_notice,\\n-        formatter_class=RawDescriptionHelpFormatter,\\n-
        \   )\\n-\\n-    # Search query\\n-    parser.add_argument(\\n-        \\\"query\\\",
        type=str, nargs=\\\"+\\\", help=\\\"URL/String for a song/album/playlist/artist\\\"\\n-
        \   )\\n-\\n-    # Version\\n-    version = pkg_resources.require(\\\"spotdl\\\")[0].version\\n-
        \   parser.add_argument(\\\"--version\\\", \\\"-v\\\", action=\\\"version\\\",
        version=version)\\n-\\n-    # Option to enable debug termination\\n-    parser.add_argument(\\\"--debug-termination\\\",
        action=\\\"store_true\\\")\\n-\\n-    # Option to specify output directory\\n-
        \   parser.add_argument(\\\"--output\\\", \\\"-o\\\", help=\\\"Output directory
        path\\\")\\n-\\n-    # Option to specify output format\\n-    parser.add_argument(\\n-
        \       \\\"--output-format\\\",\\n-        \\\"--of\\\",\\n-        help=\\\"Output
        format\\\",\\n-        choices={\\\"mp3\\\", \\\"m4a\\\", \\\"flac\\\", \\\"ogg\\\",
        \\\"opus\\\", \\\"wav\\\"},\\n-        default=\\\"mp3\\\",\\n-    )\\n-\\n-
        \   # Option to enable user auth\\n-    parser.add_argument(\\n-        \\\"--user-auth\\\",
        help=\\\"Use User Authentication\\\", action=\\\"store_true\\\"\\n-    )\\n-\\n-
        \   # Option to use youtube instead of youtube music\\n-    parser.add_argument(\\n-
        \       \\\"--use-youtube\\\", help=\\\"Use youtube instead of YTM\\\", action=\\\"store_true\\\"\\n-
        \   )\\n-\\n-    # Option to select a lyrics provider\\n-    parser.add_argument(\\n-
        \       \\\"--lyrics-provider\\\",\\n-        help=\\\"Select a lyrics provider\\\",\\n-
        \       type=str,\\n-        choices=[\\\"genius\\\", \\\"musixmatch\\\"],\\n-
        \       default=\\\"musixmatch\\\",\\n-    )\\n-\\n-    # Option to provide
        path template for downloaded files\\n-    parser.add_argument(\\n-        \\\"-p\\\",\\n-
        \       \\\"--path-template\\\",\\n-        help=\\\"Path template for downloaded
        files\\\",\\n-        type=str,\\n-        default=None,\\n-    )\\n-\\n-
        \   # Option to specify path to local ffmpeg\\n-    parser.add_argument(\\\"-f\\\",
        \\\"--ffmpeg\\\", help=\\\"Path to ffmpeg\\\", dest=\\\"ffmpeg\\\")\\n-\\n-
        \   # Option to ignore ffmpeg version\\n-    parser.add_argument(\\n-        \\\"--ignore-ffmpeg-version\\\",
        help=\\\"Ignore ffmpeg version\\\", action=\\\"store_true\\\"\\n-    )\\n-\\n-
        \   # Option to specify number of threads to use when downloading songs\\n-
        \   parser.add_argument(\\n-        \\\"--download-threads\\\",\\n-        \\\"--dt\\\",\\n-
        \       help=\\\"Number of threads used when downloading songs\\\",\\n-        type=int,\\n-
        \       default=4,\\n-    )\\n-\\n-    # Option to specify number of threads
        to use when searching for songs\\n-    parser.add_argument(\\n-        \\\"--search-threads\\\",\\n-
        \       \\\"--st\\\",\\n-        help=\\\"Number of threads used when searching
        for songs\\\",\\n-        type=int,\\n-        default=4,\\n-    )\\n-\\n-
        \   # Option to generate .m3u\\n-    parser.add_argument(\\n-        \\\"--generate-m3u\\\",\\n-
        \       \\\"--m3u\\\",\\n-        help=\\\"Generate .m3u file for each playlist\\\",\\n-
        \       action=\\\"store_true\\\",\\n-    )\\n-\\n-    return parser.parse_args()\"},{\"sha\":\"684ad1097b56be543e0074b679ce39f47e18101b\",\"filename\":\"spotdl/parsers/query_parser.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":180,\"changes\":180,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fquery_parser.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fparsers%2Fquery_parser.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fparsers%2Fquery_parser.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,180 +0,0 @@\\n-from typing import List\\n-from pathlib import Path\\n-\\n-from
        spotdl.search import SongObject, song_gatherer\\n-from spotdl.providers import
        lyrics_providers, metadata_provider\\n-\\n-\\n-def parse_query(\\n-    query:
        List[str],\\n-    format,\\n-    use_youtube,\\n-    generate_m3u,\\n-    lyrics_provider,\\n-
        \   threads,\\n-    path_template,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-
        \   Parse query and return list containing song object\\n-    \\\"\\\"\\\"\\n-\\n-
        \   songs_list = []\\n-\\n-    # Iterate over all search queries and add them
        to songs_list\\n-    for request in query:\\n-        if request.endswith(\\\".spotdlTrackingFile\\\"):\\n-
        \           continue\\n-\\n-        songs_list.extend(\\n-            parse_request(\\n-
        \               request,\\n-                format,\\n-                use_youtube,\\n-
        \               generate_m3u,\\n-                lyrics_provider,\\n-                threads,\\n-
        \               path_template,\\n-            )\\n-        )\\n-\\n-        #
        linefeed to visually separate output for each query\\n-        print()\\n-\\n-
        \   # remove duplicates\\n-    seen_songs = set()\\n-    songs = []\\n-    for
        song in songs_list:\\n-        if song.file_name not in seen_songs:\\n-            songs.append(song)\\n-
        \           seen_songs.add(song.file_name)\\n-\\n-    return songs\\n-\\n-\\n-def
        parse_request(\\n-    request: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    generate_m3u: bool = False,\\n-    lyrics_provider:
        str = None,\\n-    threads: int = 1,\\n-    path_template: str = None,\\n-)
        -> List[SongObject]:\\n-    song_list: List[SongObject] = []\\n-    if (\\n-
        \       (\\\"youtube.com/watch?v=\\\" in request or \\\"youtu.be/\\\" in request)\\n-
        \       and \\\"open.spotify.com\\\" in request\\n-        and \\\"track\\\"
        in request\\n-        and \\\"|\\\" in request\\n-    ):\\n-        urls =
        request.split(\\\"|\\\")\\n-\\n-        if len(urls) <= 1 or \\\"youtu\\\"
        not in urls[0] or \\\"spotify\\\" not in urls[1]:\\n-            print(\\\"Incorrect
        format used, please use YouTubeURL|SpotifyURL\\\")\\n-        else:\\n-            print(\\\"Fetching
        YouTube video with spotify metadata\\\")\\n-            song_list = [\\n-
        \               song\\n-                for song in [\\n-                    get_youtube_meta_track(\\n-
        \                       urls[0], urls[1], output_format, lyrics_provider\\n-
        \                   )\\n-                ]\\n-                if song is not
        None\\n-            ]\\n-    elif \\\"open.spotify.com\\\" in request and
        \\\"track\\\" in request:\\n-        print(\\\"Fetching Song...\\\")\\n-        song
        = song_gatherer.from_spotify_url(\\n-            request, output_format, use_youtube,
        lyrics_provider\\n-        )\\n-        try:\\n-            song_list = [song]
        if song.youtube_link is not None else []\\n-        except (OSError, ValueError,
        LookupError):\\n-            song_list = []\\n-    elif \\\"open.spotify.com\\\"
        in request and \\\"album\\\" in request:\\n-        print(\\\"Fetching Album...\\\")\\n-
        \       song_list = song_gatherer.from_album(\\n-            request,\\n-
        \           output_format,\\n-            use_youtube,\\n-            lyrics_provider,\\n-
        \           generate_m3u,\\n-            threads,\\n-            path_template,\\n-
        \       )\\n-    elif \\\"open.spotify.com\\\" in request and \\\"playlist\\\"
        in request:\\n-        print(\\\"Fetching Playlist...\\\")\\n-        song_list
        = song_gatherer.from_playlist(\\n-            request,\\n-            output_format,\\n-
        \           use_youtube,\\n-            lyrics_provider,\\n-            generate_m3u,\\n-
        \           threads,\\n-            path_template,\\n-        )\\n-    elif
        \\\"open.spotify.com\\\" in request and \\\"artist\\\" in request:\\n-        print(\\\"Fetching
        artist...\\\")\\n-        song_list = song_gatherer.from_artist(\\n-            request,
        output_format, use_youtube, lyrics_provider, threads\\n-        )\\n-    elif
        request == \\\"saved\\\":\\n-        print(\\\"Fetching Saved Songs...\\\")\\n-
        \       song_list = song_gatherer.from_saved_tracks(\\n-            output_format,
        use_youtube, lyrics_provider, threads\\n-        )\\n-    else:\\n-        print('Searching
        Spotify for song named \\\"%s\\\"...' % request)\\n-        try:\\n-            song_list
        = song_gatherer.from_search_term(\\n-                request, output_format,
        use_youtube, lyrics_provider\\n-            )\\n-        except Exception
        as e:\\n-            print(e)\\n-\\n-    # filter out NONE songObj items (already
        downloaded)\\n-    song_list = [song_object for song_object in song_list if
        song_object is not None]\\n-\\n-    return song_list\\n-\\n-\\n-def get_youtube_meta_track(\\n-
        \   youtube_url: str,\\n-    spotify_url: str,\\n-    output_format: str =
        None,\\n-    lyrics_provider: str = None,\\n-):\\n-    # check if URL is a
        playlist, user, artist or album, if yes raise an Exception,\\n-    # else
        procede\\n-\\n-    # Get the Song Metadata\\n-    raw_track_meta, raw_artist_meta,
        raw_album_meta = metadata_provider.from_url(\\n-        spotify_url\\n-    )\\n-\\n-
        \   song_name = raw_track_meta[\\\"name\\\"]\\n-    contributing_artist =
        [artist[\\\"name\\\"] for artist in raw_track_meta[\\\"artists\\\"]]\\n-    converted_file_name
        = SongObject.create_file_name(\\n-        song_name, [artist[\\\"name\\\"]
        for artist in raw_track_meta[\\\"artists\\\"]]\\n-    )\\n-\\n-    if output_format
        is None:\\n-        output_format = \\\"mp3\\\"\\n-\\n-    converted_file_path
        = Path(\\\".\\\", f\\\"{converted_file_name}.{output_format}\\\")\\n-\\n-
        \   # if a song is already downloaded skip it\\n-    if converted_file_path.is_file():\\n-
        \       print(f'Skipping \\\"{converted_file_name}\\\" as it\\\\'s already
        downloaded')\\n-        return None\\n-\\n-    # (try to) Get lyrics from
        musixmatch/genius\\n-    # use musixmatch as the default provider\\n-    if
        lyrics_provider == \\\"genius\\\":\\n-        lyrics = lyrics_providers.get_lyrics_genius(song_name,
        contributing_artist)\\n-    else:\\n-        lyrics = lyrics_providers.get_lyrics_musixmatch(song_name,
        contributing_artist)\\n-\\n-    return SongObject(\\n-        raw_track_meta,
        raw_album_meta, raw_artist_meta, youtube_url, lyrics, None\\n-    )\"},{\"sha\":\"8476a7bc3444b321b2187588b34bd9d81a5271bc\",\"filename\":\"spotdl/providers/__init__.py\",\"status\":\"modified\",\"additions\":3,\"deletions\":9,\"changes\":12,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -1,9 +1,3 @@\\n-from spotdl.providers.metadata_provider import from_url\\n-from
        spotdl.providers import ytm_provider as youtube_music\\n-from spotdl.providers
        import lyrics_providers\\n-from spotdl.providers.provider_utils import (\\n-
        \   _create_song_title,\\n-    _match_percentage,\\n-    _parse_duration,\\n-)\\n-from
        spotdl.utils.song_name_utils import format_name\\n+\\\"\\\"\\\"\\n+Different
        types of data providers for spotdl.\\n+\\\"\\\"\\\"\"},{\"sha\":\"2b6dddae03b7804a08410cd8d15016a083148159\",\"filename\":\"spotdl/providers/audio/__init__.py\",\"status\":\"added\",\"additions\":29,\"deletions\":0,\"changes\":29,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,29 @@\\n+\\\"\\\"\\\"\\n+Audio providers for spotdl.\\n+\\\"\\\"\\\"\\n+\\n+from
        spotdl.providers.audio.bandcamp import BandCamp\\n+from spotdl.providers.audio.base
        import (\\n+    ISRC_REGEX,\\n+    AudioProvider,\\n+    AudioProviderError,\\n+
        \   YTDLLogger,\\n+)\\n+from spotdl.providers.audio.piped import Piped\\n+from
        spotdl.providers.audio.sliderkz import SliderKZ\\n+from spotdl.providers.audio.soundcloud
        import SoundCloud\\n+from spotdl.providers.audio.youtube import YouTube\\n+from
        spotdl.providers.audio.ytmusic import YouTubeMusic\\n+\\n+__all__ = [\\n+
        \   \\\"YouTube\\\",\\n+    \\\"YouTubeMusic\\\",\\n+    \\\"SliderKZ\\\",\\n+
        \   \\\"SoundCloud\\\",\\n+    \\\"BandCamp\\\",\\n+    \\\"Piped\\\",\\n+
        \   \\\"AudioProvider\\\",\\n+    \\\"AudioProviderError\\\",\\n+    \\\"YTDLLogger\\\",\\n+
        \   \\\"ISRC_REGEX\\\",\\n+]\"},{\"sha\":\"114ddee8f999e8204c031c1032d7d1f80f8c410b\",\"filename\":\"spotdl/providers/audio/bandcamp.py\",\"status\":\"added\",\"additions\":211,\"deletions\":0,\"changes\":211,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fbandcamp.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fbandcamp.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fbandcamp.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,211 @@\\n+\\\"\\\"\\\"\\n+BandCamp module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from typing import Any, Dict,
        List, Optional, Tuple\\n+\\n+import requests\\n+\\n+from spotdl.providers.audio.base
        import AudioProvider\\n+from spotdl.types.result import Result\\n+from spotdl.utils.config
        import GlobalConfig\\n+\\n+__all__ = [\\\"BandCamp\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        BandCampTrack:\\n+    \\\"\\\"\\\"\\n+    BandCamp track class based on the
        bandcamp_api library\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(self, artist_id:
        int, track_id: int):\\n+        # object info\\n+        self.type = \\\"track\\\"\\n+\\n+
        \       # track information\\n+        self.track_id: int = 0\\n+        self.track_title:
        str = \\\"\\\"\\n+        self.track_number: int = 0\\n+        self.track_duration_seconds:
        float = 0.00\\n+        self.track_streamable: Optional[bool] = None\\n+        self.has_lyrics:
        Optional[bool] = None\\n+        self.lyrics: str = \\\"\\\"\\n+        self.is_price_set:
        Optional[bool] = None\\n+        self.price: dict = {}\\n+        self.require_email:
        Optional[bool] = None\\n+        self.is_purchasable: Optional[bool] = None\\n+
        \       self.is_free: Optional[bool] = None\\n+        self.is_preorder: Optional[bool]
        = None\\n+        self.tags: list = []\\n+        self.track_url: str = \\\"\\\"\\n+\\n+
        \       # art\\n+        self.art_id: int = 0\\n+        self.art_url: str
        = \\\"\\\"\\n+\\n+        # artist information\\n+        self.artist_id:
        int = 0\\n+        self.artist_title: str = \\\"\\\"\\n+\\n+        # album
        information\\n+        self.album_id: int = 0\\n+        self.album_title:
        str = \\\"\\\"\\n+\\n+        # label\\n+        self.label_id: int = 0\\n+
        \       self.label_title: str = \\\"\\\"\\n+\\n+        # about\\n+        self.about:
        str = \\\"\\\"\\n+        self.credits: str = \\\"\\\"\\n+        self.date_released_unix:
        int = 0\\n+\\n+        # advanced\\n+        self.date_last_modified_unix:
        int = 0\\n+        self.date_published_unix: int = 0\\n+        self.supporters:
        list = []\\n+\\n+        response = requests.get(\\n+            url=\\\"https://bandcamp.com/api/mobile/25/tralbum_details?band_id=\\\"\\n+
        \           + str(artist_id)\\n+            + \\\"&tralbum_id=\\\"\\n+            +
        str(track_id)\\n+            + \\\"&tralbum_type=t\\\",\\n+            timeout=10,\\n+
        \           proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+        )\\n+
        \       result = response.json()\\n+        self.track_id = result[\\\"id\\\"]\\n+
        \       self.track_title = result[\\\"title\\\"]\\n+        self.track_number
        = result[\\\"tracks\\\"][0][\\\"track_num\\\"]\\n+        self.track_duration_seconds
        = result[\\\"tracks\\\"][0][\\\"duration\\\"]\\n+        self.track_streamable
        = result[\\\"tracks\\\"][0][\\\"is_streamable\\\"]\\n+        self.has_lyrics
        = result[\\\"tracks\\\"][0][\\\"has_lyrics\\\"]\\n+\\n+        # getting lyrics,
        if there is any\\n+        if self.has_lyrics is True:\\n+            resp
        = requests.get(\\n+                \\\"https://bandcamp.com/api/mobile/25/tralbum_lyrics?tralbum_id=\\\"\\n+
        \               + str(self.track_id)\\n+                + \\\"&tralbum_type=t\\\",\\n+
        \               timeout=10,\\n+                proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \           )\\n+            rjson = resp.json()\\n+            self.lyrics
        = rjson[\\\"lyrics\\\"][str(self.track_id)]\\n+\\n+        self.is_price_set
        = result[\\\"is_set_price\\\"]\\n+        self.price = {\\\"currency\\\":
        result[\\\"currency\\\"], \\\"amount\\\": result[\\\"price\\\"]}\\n+        self.require_email
        = result[\\\"require_email\\\"]\\n+        self.is_purchasable = result[\\\"is_purchasable\\\"]\\n+
        \       self.is_free = result[\\\"free_download\\\"]\\n+        self.is_preorder
        = result[\\\"is_preorder\\\"]\\n+\\n+        for tag in result[\\\"tags\\\"]:\\n+
        \           self.tags.append(tag[\\\"name\\\"])\\n+\\n+        self.art_id
        = result[\\\"art_id\\\"]\\n+        self.art_url = \\\"https://f4.bcbits.com/img/a\\\"
        + str(self.art_id) + \\\"_0.jpg\\\"\\n+\\n+        self.artist_id = result[\\\"band\\\"][\\\"band_id\\\"]\\n+
        \       self.artist_title = result[\\\"band\\\"][\\\"name\\\"]\\n+\\n+        self.album_id
        = result[\\\"album_id\\\"]\\n+        self.album_title = result[\\\"album_title\\\"]\\n+\\n+
        \       self.label_id = result[\\\"label_id\\\"]\\n+        self.label_title
        = result[\\\"label\\\"]\\n+\\n+        self.about = result[\\\"about\\\"]\\n+
        \       self.credits = result[\\\"credits\\\"]\\n+\\n+        self.date_released_unix
        = result[\\\"release_date\\\"]\\n+\\n+        self.track_url = result[\\\"bandcamp_url\\\"]\\n+\\n+\\n+def
        search(search_string: str = \\\"\\\"):\\n+    \\\"\\\"\\\"\\n+    I got this
        api url from the iOS app\\n+    needs a way of removing characters\\n+    that
        will screw up an url\\n+    keep url safe characters\\n+\\n+    ### Arguments\\n+
        \   - search_string: The search term to search for.\\n+\\n+    ### Returns\\n+
        \   - A list of artist and track ids if found\\n+    \\\"\\\"\\\"\\n+\\n+
        \   response = requests.get(\\n+        \\\"https://bandcamp.com/api/fuzzysearch/2/app_autocomplete?q=\\\"\\n+
        \       + search_string\\n+        + \\\"&param_with_locations=true\\\",\\n+
        \       timeout=10,\\n+        proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \   )\\n+\\n+    results = response.json()[\\\"results\\\"]\\n+\\n+    return_results:
        List[Tuple[str, str]] = []\\n+\\n+    for item in results:\\n+        if item[\\\"type\\\"]
        == \\\"t\\\":\\n+            return_results.append((item[\\\"band_id\\\"],
        item[\\\"id\\\"]))\\n+\\n+    return return_results\\n+\\n+\\n+class BandCamp(AudioProvider):\\n+
        \   \\\"\\\"\\\"\\n+    SoundCloud audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+
        \   SUPPORTS_ISRC = False\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] =
        [{}]\\n+\\n+    def get_results(self, search_term: str, *_args, **_kwargs)
        -> List[Result]:\\n+        \\\"\\\"\\\"\\n+        Get results from slider.kz\\n+\\n+
        \       ### Arguments\\n+        - search_term: The search term to search
        for.\\n+        - args: Unused.\\n+        - kwargs: Unused.\\n+\\n+        ###
        Returns\\n+        - A list of slider.kz results if found, None otherwise.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        try:\\n+            results = search(search_term)\\n+
        \       except KeyError:\\n+            return []\\n+        except Exception
        as exc:\\n+            logger.error(\\\"Failed to get results from BandCamp\\\",
        exc_info=exc)\\n+            return []\\n+\\n+        simplified_results:
        List[Result] = []\\n+        for result in results:\\n+            track =
        BandCampTrack(int(result[0]), int(result[1]))\\n+\\n+            simplified_results.append(\\n+
        \               Result(\\n+                    source=\\\"bandcamp\\\",\\n+
        \                   url=track.track_url,\\n+                    verified=False,\\n+
        \                   name=track.track_title,\\n+                    duration=track.track_duration_seconds,\\n+
        \                   author=track.artist_title,\\n+                    result_id=track.track_url,\\n+
        \                   search_query=search_term,\\n+                    album=track.album_title,\\n+
        \                   artists=tuple(track.artist_title.split(\\\", \\\")),\\n+
        \               )\\n+            )\\n+\\n+        return simplified_results\"},{\"sha\":\"36e18f43ade8f356a6adf23604d742fc62987748\",\"filename\":\"spotdl/providers/audio/base.py\",\"status\":\"added\",\"additions\":388,\"deletions\":0,\"changes\":388,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fbase.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fbase.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fbase.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,388 @@\\n+\\\"\\\"\\\"\\n+Base audio provider module.\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+import re\\n+import shlex\\n+from typing import Any, Dict, List,
        Optional, Tuple\\n+\\n+from yt_dlp import YoutubeDL\\n+\\n+from spotdl.types.result
        import Result\\n+from spotdl.types.song import Song\\n+from spotdl.utils.config
        import get_temp_path\\n+from spotdl.utils.formatter import (\\n+    args_to_ytdlp_options,\\n+
        \   create_search_query,\\n+    create_song_title,\\n+)\\n+from spotdl.utils.matching
        import get_best_matches, order_results\\n+\\n+__all__ = [\\\"AudioProviderError\\\",
        \\\"AudioProvider\\\", \\\"ISRC_REGEX\\\", \\\"YTDLLogger\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class AudioProviderError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to audio searching/downloading.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class YTDLLogger:\\n+    \\\"\\\"\\\"\\n+    Custom
        YT-dlp logger.\\n+    \\\"\\\"\\\"\\n+\\n+    def debug(self, msg):\\n+        \\\"\\\"\\\"\\n+
        \       YTDL uses this to print debug messages.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       pass  # pylint: disable=W0107\\n+\\n+    def warning(self, msg):\\n+
        \       \\\"\\\"\\\"\\n+        YTDL uses this to print warnings.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       pass  # pylint: disable=W0107\\n+\\n+    def error(self, msg):\\n+
        \       \\\"\\\"\\\"\\n+        YTDL uses this to print errors.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise AudioProviderError(msg)\\n+\\n+\\n+ISRC_REGEX = re.compile(r\\\"^[A-Z]{2}-?\\\\w{3}-?\\\\d{2}-?\\\\d{5}$\\\")\\n+\\n+\\n+class
        AudioProvider:\\n+    \\\"\\\"\\\"\\n+    Base class for all other providers.
        Provides some common functionality.\\n+    Handles the yt-dlp audio handler.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC: bool\\n+    GET_RESULTS_OPTS: List[Dict[str,
        Any]]\\n+\\n+    def __init__(\\n+        self,\\n+        output_format:
        str = \\\"mp3\\\",\\n+        cookie_file: Optional[str] = None,\\n+        search_query:
        Optional[str] = None,\\n+        filter_results: bool = True,\\n+        yt_dlp_args:
        Optional[str] = None,\\n+    ) -> None:\\n+        \\\"\\\"\\\"\\n+        Base
        class for audio providers.\\n+\\n+        ### Arguments\\n+        - output_directory:
        The directory to save the downloaded songs to.\\n+        - output_format:
        The format to save the downloaded songs in.\\n+        - cookie_file: The
        path to a file containing cookies to be used by YTDL.\\n+        - search_query:
        The query to use when searching for songs.\\n+        - filter_results: Whether
        to filter results.\\n+        \\\"\\\"\\\"\\n+\\n+        self.output_format
        = output_format\\n+        self.cookie_file = cookie_file\\n+        self.search_query
        = search_query\\n+        self.filter_results = filter_results\\n+\\n+        if
        self.output_format == \\\"m4a\\\":\\n+            ytdl_format = \\\"bestaudio[ext=m4a]/bestaudio/best\\\"\\n+
        \       elif self.output_format == \\\"opus\\\":\\n+            ytdl_format
        = \\\"bestaudio[ext=webm]/bestaudio/best\\\"\\n+        else:\\n+            ytdl_format
        = \\\"bestaudio\\\"\\n+\\n+        yt_dlp_options = {\\n+            \\\"format\\\":
        ytdl_format,\\n+            \\\"quiet\\\": True,\\n+            \\\"no_warnings\\\":
        True,\\n+            \\\"encoding\\\": \\\"UTF-8\\\",\\n+            \\\"logger\\\":
        YTDLLogger(),\\n+            \\\"cookiefile\\\": self.cookie_file,\\n+            \\\"outtmpl\\\":
        f\\\"{get_temp_path()}/%(id)s.%(ext)s\\\",\\n+            \\\"retries\\\":
        5,\\n+        }\\n+\\n+        if yt_dlp_args:\\n+            user_options
        = args_to_ytdlp_options(shlex.split(yt_dlp_args))\\n+            yt_dlp_options.update(user_options)\\n+\\n+
        \       self.audio_handler = YoutubeDL(yt_dlp_options)\\n+\\n+    def get_results(self,
        search_term: str, **kwargs) -> List[Result]:\\n+        \\\"\\\"\\\"\\n+        Get
        results from audio provider.\\n+\\n+        ### Arguments\\n+        - search_term:
        The search term to use.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - A list of results.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise NotImplementedError\\n+\\n+    def get_views(self, url: str)
        -> int:\\n+        \\\"\\\"\\\"\\n+        Get the number of views for a video.\\n+\\n+
        \       ### Arguments\\n+        - url: The url of the video.\\n+\\n+        ###
        Returns\\n+        - The number of views.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       data = self.get_download_metadata(url)\\n+\\n+        return data[\\\"view_count\\\"]\\n+\\n+
        \   def search(self, song: Song, only_verified: bool = False) -> Optional[str]:\\n+
        \       \\\"\\\"\\\"\\n+        Search for a song and return best match.\\n+\\n+
        \       ### Arguments\\n+        - song: The song to search for.\\n+\\n+        ###
        Returns\\n+        - The url of the best match or None if no match was found.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # Create initial search query\\n+        search_query
        = create_song_title(song.name, song.artists).lower()\\n+        if self.search_query:\\n+
        \           search_query = create_search_query(\\n+                song, self.search_query,
        False, None, True\\n+            )\\n+\\n+        logger.debug(\\\"[%s] Searching
        for %s\\\", song.song_id, search_query)\\n+\\n+        isrc_urls: List[str]
        = []\\n+\\n+        # search for song using isrc if it's available\\n+        if
        song.isrc and self.SUPPORTS_ISRC and not self.search_query:\\n+            isrc_results
        = self.get_results(song.isrc, **self.GET_RESULTS_OPTS[0])\\n+\\n+            if
        only_verified:\\n+                isrc_results = [result for result in isrc_results
        if result.verified]\\n+\\n+            isrc_urls = [result.url for result
        in isrc_results]\\n+            sorted_isrc_results = order_results(isrc_results,
        song, self.search_query)\\n+            logger.debug(\\n+                \\\"[%s]
        Found %s results for ISRC %s\\\",\\n+                song.song_id,\\n+                len(isrc_results),\\n+
        \               song.isrc,\\n+            )\\n+\\n+            if len(isrc_results)
        > 0:\\n+                # get the best result, if the score is above 80 return
        it\\n+                best_isrc_results = sorted(\\n+                    sorted_isrc_results.items(),
        key=lambda x: x[1], reverse=True\\n+                )\\n+                logger.debug(\\n+
        \                   \\\"[%s] Filtered to %s ISRC results\\\",\\n+                    song.song_id,\\n+
        \                   len(best_isrc_results),\\n+                )\\n+\\n+                if
        len(best_isrc_results) > 0:\\n+                    best_isrc = best_isrc_results[0]\\n+
        \                   if best_isrc[1] > 80.0:\\n+                        logger.debug(\\n+
        \                           \\\"[%s] Best ISRC result is %s with score %s\\\",\\n+
        \                           song.song_id,\\n+                            best_isrc[0].url,\\n+
        \                           best_isrc[1],\\n+                        )\\n+\\n+
        \                       return best_isrc[0].url\\n+\\n+        results: Dict[Result,
        float] = {}\\n+        for options in self.GET_RESULTS_OPTS:\\n+            #
        Query YTM by songs only first, this way if we get correct result on the first
        try\\n+            # we don't have to make another request\\n+            search_results
        = self.get_results(search_query, **options)\\n+\\n+            if only_verified:\\n+
        \               search_results = [\\n+                    result for result
        in search_results if result.verified\\n+                ]\\n+\\n+            logger.debug(\\n+
        \               \\\"[%s] Found %s results for search query %s with options
        %s\\\",\\n+                song.song_id,\\n+                len(search_results),\\n+
        \               search_query,\\n+                options,\\n+            )\\n+\\n+
        \           # Check if any of the search results is in the\\n+            #
        first isrc results, since they are not hashable we have to check\\n+            #
        by name\\n+            isrc_result = next(\\n+                (result for
        result in search_results if result.url in isrc_urls),\\n+                None,\\n+
        \           )\\n+\\n+            if isrc_result:\\n+                logger.debug(\\n+
        \                   \\\"[%s] Best ISRC result is %s\\\", song.song_id, isrc_result.url\\n+
        \               )\\n+\\n+                return isrc_result.url\\n+\\n+            logger.debug(\\n+
        \               \\\"[%s] Have to filter results: %s\\\", song.song_id, self.filter_results\\n+
        \           )\\n+\\n+            if self.filter_results:\\n+                #
        Order results\\n+                new_results = order_results(search_results,
        song, self.search_query)\\n+            else:\\n+                new_results
        = {}\\n+                if len(search_results) > 0:\\n+                    new_results
        = {search_results[0]: 100.0}\\n+\\n+            logger.debug(\\\"[%s] Filtered
        to %s results\\\", song.song_id, len(new_results))\\n+\\n+            # song
        type results are always more accurate than video type,\\n+            # so
        if we get score of 80 or above\\n+            # we are almost 100% sure that
        this is the correct link\\n+            if len(new_results) != 0:\\n+                #
        get the result with highest score\\n+                best_result, best_score
        = self.get_best_result(new_results)\\n+                logger.debug(\\n+                    \\\"[%s]
        Best result is %s with score %s\\\",\\n+                    song.song_id,\\n+
        \                   best_result.url,\\n+                    best_score,\\n+
        \               )\\n+\\n+                if best_score >= 80 and best_result.verified:\\n+
        \                   logger.debug(\\n+                        \\\"[%s] Returning
        verified best result %s with score %s\\\",\\n+                        song.song_id,\\n+
        \                       best_result.url,\\n+                        best_score,\\n+
        \                   )\\n+\\n+                    return best_result.url\\n+\\n+
        \               # Update final results with new results\\n+                results.update(new_results)\\n+\\n+
        \       # No matches found\\n+        if not results:\\n+            logger.debug(\\\"[%s]
        No results found\\\", song.song_id)\\n+            return None\\n+\\n+        #
        get the result with highest score\\n+        best_result, best_score = self.get_best_result(results)\\n+
        \       logger.debug(\\n+            \\\"[%s] Returning best result %s with
        score %s\\\",\\n+            song.song_id,\\n+            best_result.url,\\n+
        \           best_score,\\n+        )\\n+\\n+        return best_result.url\\n+\\n+
        \   def get_best_result(self, results: Dict[Result, float]) -> Tuple[Result,
        float]:\\n+        \\\"\\\"\\\"\\n+        Get the best match from the results\\n+
        \       using views and average match\\n+\\n+        ### Arguments\\n+        -
        results: A dictionary of results and their scores\\n+\\n+        ### Returns\\n+
        \       - The best match URL and its score\\n+        \\\"\\\"\\\"\\n+\\n+
        \       best_results = get_best_matches(results, 8)\\n+\\n+        # If we
        have only one result, return it\\n+        if len(best_results) == 1:\\n+
        \           return best_results[0][0], best_results[0][1]\\n+\\n+        #
        Initial best result based on the average match\\n+        best_result = best_results[0]\\n+\\n+
        \       # If the best result has a score higher than 80%\\n+        # and
        it's a isrc search, return it\\n+        if best_result[1] > 80 and best_result[0].isrc_search:\\n+
        \           return best_result[0], best_result[1]\\n+\\n+        # If we have
        more than one result,\\n+        # return the one with the highest score\\n+
        \       # and most views\\n+        if len(best_results) > 1:\\n+            views:
        List[int] = []\\n+            for best_result in best_results:\\n+                if
        best_result[0].views:\\n+                    views.append(best_result[0].views)\\n+
        \               else:\\n+                    views.append(self.get_views(best_result[0].url))\\n+\\n+
        \           highest_views = max(views)\\n+            lowest_views = min(views)\\n+\\n+
        \           if highest_views in (0, lowest_views):\\n+                return
        best_result[0], best_result[1]\\n+\\n+            weighted_results: List[Tuple[Result,
        float]] = []\\n+            for index, best_result in enumerate(best_results):\\n+
        \               result_views = views[index]\\n+                views_score
        = (\\n+                    (result_views - lowest_views) / (highest_views
        - lowest_views)\\n+                ) * 15\\n+                score = min(best_result[1]
        + views_score, 100)\\n+                weighted_results.append((best_result[0],
        score))\\n+\\n+            # Now we return the result with the highest score\\n+
        \           return max(weighted_results, key=lambda x: x[1])\\n+\\n+        return
        best_result[0], best_result[1]\\n+\\n+    def get_download_metadata(self,
        url: str, download: bool = False) -> Dict:\\n+        \\\"\\\"\\\"\\n+        Get
        metadata for a download using yt-dlp.\\n+\\n+        ### Arguments\\n+        -
        url: The url to get metadata for.\\n+\\n+        ### Returns\\n+        -
        A dictionary containing the metadata.\\n+        \\\"\\\"\\\"\\n+\\n+        try:\\n+
        \           data = self.audio_handler.extract_info(url, download=download)\\n+\\n+
        \           if data:\\n+                return data\\n+        except Exception
        as exception:\\n+            logger.debug(exception)\\n+            raise
        AudioProviderError(f\\\"YT-DLP download error - {url}\\\") from exception\\n+\\n+
        \       raise AudioProviderError(f\\\"No metadata found for the provided url
        {url}\\\")\\n+\\n+    @property\\n+    def name(self) -> str:\\n+        \\\"\\\"\\\"\\n+
        \       Get the name of the provider.\\n+\\n+        ### Returns\\n+        -
        The name of the provider.\\n+        \\\"\\\"\\\"\\n+\\n+        return self.__class__.__name__\"},{\"sha\":\"4727912c302374d126c73bca2915350a5308099f\",\"filename\":\"spotdl/providers/audio/piped.py\",\"status\":\"added\",\"additions\":173,\"deletions\":0,\"changes\":173,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fpiped.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fpiped.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fpiped.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,173 @@\\n+\\\"\\\"\\\"\\n+Piped module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+import shlex\\n+from typing
        import Any, Dict, List, Optional\\n+\\n+import requests\\n+from yt_dlp import
        YoutubeDL\\n+\\n+from spotdl.providers.audio.base import ISRC_REGEX, AudioProvider,
        YTDLLogger\\n+from spotdl.types.result import Result\\n+from spotdl.utils.config
        import GlobalConfig, get_temp_path\\n+from spotdl.utils.formatter import args_to_ytdlp_options\\n+\\n+__all__
        = [\\\"Piped\\\"]\\n+logger = logging.getLogger(__name__)\\n+\\n+HEADERS =
        {\\n+    \\\"accept\\\": \\\"*/*\\\",\\n+}\\n+\\n+\\n+class Piped(AudioProvider):\\n+
        \   \\\"\\\"\\\"\\n+    YouTube Music audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+
        \   SUPPORTS_ISRC = True\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] = [\\n+
        \       {\\\"filter\\\": \\\"music_songs\\\"},\\n+        {\\\"filter\\\":
        \\\"music_videos\\\"},\\n+    ]\\n+\\n+    def __init__(  # pylint: disable=super-init-not-called\\n+
        \       self,\\n+        output_format: str = \\\"mp3\\\",\\n+        cookie_file:
        Optional[str] = None,\\n+        search_query: Optional[str] = None,\\n+        filter_results:
        bool = True,\\n+        yt_dlp_args: Optional[str] = None,\\n+    ) -> None:\\n+
        \       \\\"\\\"\\\"\\n+        Pipe audio provider class\\n+\\n+        ###
        Arguments\\n+        - output_directory: The directory to save the downloaded
        songs to.\\n+        - output_format: The format to save the downloaded songs
        in.\\n+        - cookie_file: The path to a file containing cookies to be
        used by YTDL.\\n+        - search_query: The query to use when searching for
        songs.\\n+        - filter_results: Whether to filter results.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.output_format = output_format\\n+        self.cookie_file = cookie_file\\n+
        \       self.search_query = search_query\\n+        self.filter_results =
        filter_results\\n+\\n+        if self.output_format == \\\"m4a\\\":\\n+            ytdl_format
        = \\\"best[ext=m4a]/best\\\"\\n+        elif self.output_format == \\\"opus\\\":\\n+
        \           ytdl_format = \\\"best[ext=webm]/best\\\"\\n+        else:\\n+
        \           ytdl_format = \\\"best\\\"\\n+\\n+        yt_dlp_options = {\\n+
        \           \\\"format\\\": ytdl_format,\\n+            \\\"quiet\\\": True,\\n+
        \           \\\"no_warnings\\\": True,\\n+            \\\"encoding\\\": \\\"UTF-8\\\",\\n+
        \           \\\"logger\\\": YTDLLogger(),\\n+            \\\"cookiefile\\\":
        self.cookie_file,\\n+            \\\"outtmpl\\\": f\\\"{get_temp_path()}/%(id)s.%(ext)s\\\",\\n+
        \           \\\"retries\\\": 5,\\n+        }\\n+\\n+        if yt_dlp_args:\\n+
        \           user_options = args_to_ytdlp_options(shlex.split(yt_dlp_args))\\n+
        \           yt_dlp_options.update(user_options)\\n+\\n+        self.audio_handler
        = YoutubeDL(yt_dlp_options)\\n+        self.session = requests.Session()\\n+\\n+
        \   def get_results(self, search_term: str, **kwargs) -> List[Result]:\\n+
        \       \\\"\\\"\\\"\\n+        Get results from YouTube Music API and simplify
        them\\n+\\n+        ### Arguments\\n+        - search_term: The search term
        to search for.\\n+        - kwargs: other keyword arguments passed to the
        `YTMusic.search` method.\\n+\\n+        ### Returns\\n+        - A list of
        simplified results (dicts)\\n+        \\\"\\\"\\\"\\n+\\n+        if kwargs
        is None:\\n+            kwargs = {}\\n+\\n+        params = {\\\"q\\\": search_term,
        **kwargs}\\n+\\n+        response = self.session.get(\\n+            \\\"https://pipedapi.kavin.rocks/search\\\",\\n+
        \           params=params,\\n+            headers=HEADERS,\\n+            timeout=20,\\n+
        \       )\\n+\\n+        search_results = response.json()\\n+\\n+        #
        Simplify results\\n+        results = []\\n+        for result in search_results[\\\"items\\\"]:\\n+
        \           isrc_result = ISRC_REGEX.search(search_term)\\n+\\n+            results.append(\\n+
        \               Result(\\n+                    source=\\\"piped\\\",\\n+                    url=f\\\"https://piped.video{result['url']}\\\",\\n+
        \                   verified=kwargs.get(\\\"filter\\\") == \\\"music_songs\\\",\\n+
        \                   name=result[\\\"title\\\"],\\n+                    duration=result[\\\"duration\\\"],\\n+
        \                   author=result[\\\"uploaderName\\\"],\\n+                    result_id=result[\\\"url\\\"].split(\\\"?v=\\\")[1],\\n+
        \                   artists=(\\n+                        (result[\\\"uploaderName\\\"],)\\n+
        \                       if kwargs.get(\\\"filter\\\") == \\\"music_songs\\\"\\n+
        \                       else None\\n+                    ),\\n+                    isrc_search=isrc_result
        is not None,\\n+                    search_query=search_term,\\n+                )\\n+
        \           )\\n+\\n+        return results\\n+\\n+    def get_download_metadata(self,
        url: str, download: bool = False) -> Dict:\\n+        \\\"\\\"\\\"\\n+        Get
        metadata for a download using yt-dlp.\\n+\\n+        ### Arguments\\n+        -
        url: The url to get metadata for.\\n+\\n+        ### Returns\\n+        -
        A dictionary containing the metadata.\\n+        \\\"\\\"\\\"\\n+\\n+        url_id
        = url.split(\\\"?v=\\\")[1]\\n+        piped_data = requests.get(\\n+            f\\\"https://pipedapi.kavin.rocks/streams/{url_id}\\\",\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       ).json()\\n+\\n+        yt_dlp_json = {\\n+            \\\"title\\\":
        piped_data[\\\"title\\\"],\\n+            \\\"id\\\": url_id,\\n+            \\\"view_count\\\":
        piped_data[\\\"views\\\"],\\n+            \\\"extractor\\\": \\\"Generic\\\",\\n+
        \           \\\"formats\\\": [],\\n+        }\\n+\\n+        for audio_stream
        in piped_data[\\\"audioStreams\\\"]:\\n+            yt_dlp_json[\\\"formats\\\"].append(\\n+
        \               {\\n+                    \\\"url\\\": audio_stream[\\\"url\\\"],\\n+
        \                   \\\"ext\\\": \\\"webm\\\" if audio_stream[\\\"codec\\\"]
        == \\\"opus\\\" else \\\"m4a\\\",\\n+                    \\\"abr\\\": audio_stream[\\\"quality\\\"].split(\\\"
        \\\")[0],\\n+                    \\\"filesize\\\": audio_stream[\\\"contentLength\\\"],\\n+
        \               }\\n+            )\\n+\\n+        return self.audio_handler.process_video_result(yt_dlp_json,
        download=download)\"},{\"sha\":\"657cc7501b1ac003b9e8da766394292425c7af21\",\"filename\":\"spotdl/providers/audio/sliderkz.py\",\"status\":\"added\",\"additions\":94,\"deletions\":0,\"changes\":94,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fsliderkz.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fsliderkz.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fsliderkz.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,94 @@\\n+\\\"\\\"\\\"\\n+SliderKZ module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from typing import Any, Dict,
        List\\n+\\n+import requests\\n+\\n+from spotdl.providers.audio.base import
        AudioProvider\\n+from spotdl.types.result import Result\\n+from spotdl.utils.config
        import GlobalConfig\\n+\\n+__all__ = [\\\"SliderKZ\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+HEADERS
        = {\\n+    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64;
        rv:109.0) Gecko/20100101 Firefox/111.0\\\"\\n+}\\n+\\n+\\n+class SliderKZ(AudioProvider):\\n+
        \   \\\"\\\"\\\"\\n+    Slider.kz audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+
        \   SUPPORTS_ISRC = False\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] =
        [{}]\\n+\\n+    def get_results(self, search_term: str, *_args, **_kwargs)
        -> List[Result]:\\n+        \\\"\\\"\\\"\\n+        Get results from slider.kz\\n+\\n+
        \       ### Arguments\\n+        - search_term: The search term to search
        for.\\n+        - args: Unused.\\n+        - kwargs: Unused.\\n+\\n+        ###
        Returns\\n+        - A list of slider.kz results if found, None otherwise.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        search_results = None\\n+        max_retries
        = 0\\n+\\n+        while not search_results and max_retries < 3:\\n+            try:\\n+
        \               search_response = requests.get(\\n+                    url=\\\"https://slider.kz/vk_auth.php?q=\\\"
        + search_term,\\n+                    headers=HEADERS,\\n+                    timeout=5,\\n+
        \                   proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \               )\\n+\\n+                # Check if the response is valid\\n+
        \               if len(search_response.text) > 30:\\n+                    #
        Set the search results to the json response\\n+                    # effectively
        breaking out of the loop\\n+                    search_results = search_response.json()\\n+\\n+
        \           except Exception as exc:\\n+                logger.debug(\\n+
        \                   \\\"Slider.kz search failed for query %s with error: %s.
        Retrying...\\\",\\n+                    search_term,\\n+                    exc,\\n+
        \               )\\n+\\n+            max_retries += 1\\n+\\n+        if not
        search_results:\\n+            logger.debug(\\\"Slider.kz search failed for
        query %s\\\", search_term)\\n+            return []\\n+\\n+        results
        = []\\n+        for result in search_results[\\\"audios\\\"][\\\"\\\"]:\\n+
        \           # urls from slider.kz sometimes are relative, so we need to add
        the domain\\n+            if \\\"https://\\\" not in result[\\\"url\\\"]:\\n+
        \               result[\\\"url\\\"] = \\\"https://slider.kz/\\\" + result[\\\"url\\\"]\\n+\\n+
        \           results.append(\\n+                Result(\\n+                    source=\\\"slider.kz\\\",\\n+
        \                   url=result.get(\\\"url\\\"),\\n+                    verified=False,\\n+
        \                   name=result.get(\\\"tit_art\\\"),\\n+                    duration=int(result.get(\\\"duration\\\",
        -9999)),\\n+                    author=\\\"slider.kz\\\",\\n+                    result_id=result.get(\\\"id\\\"),\\n+
        \                   views=1,\\n+                )\\n+            )\\n+\\n+
        \       return results\"},{\"sha\":\"8a317b116ddc9c3927312e0a7abd1630cd5ba696\",\"filename\":\"spotdl/providers/audio/soundcloud.py\",\"status\":\"added\",\"additions\":94,\"deletions\":0,\"changes\":94,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fsoundcloud.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fsoundcloud.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fsoundcloud.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,94 @@\\n+\\\"\\\"\\\"\\n+SoundCloud module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+import re\\n+from itertools
        import islice\\n+from typing import Any, Dict, List\\n+\\n+from soundcloud
        import SoundCloud as SoundCloudClient\\n+\\n+from spotdl.providers.audio.base
        import AudioProvider\\n+from spotdl.types.result import Result\\n+\\n+__all__
        = [\\\"SoundCloud\\\"]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        SoundCloud(AudioProvider):\\n+    \\\"\\\"\\\"\\n+    SoundCloud audio provider
        class\\n+    \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC = False\\n+    GET_RESULTS_OPTS:
        List[Dict[str, Any]] = [{}]\\n+\\n+    def __init__(self, *args: Any, **kwargs:
        Any) -> None:\\n+        \\\"\\\"\\\"\\n+        Initialize the SoundCloud
        API\\n+\\n+        ### Arguments\\n+        - args: Arguments passed to the
        `AudioProvider` class.\\n+        - kwargs: Keyword arguments passed to the
        `AudioProvider` class.\\n+        \\\"\\\"\\\"\\n+\\n+        super().__init__(*args,
        **kwargs)\\n+        self.client = SoundCloudClient()\\n+\\n+    def get_results(self,
        search_term: str, *_args, **_kwargs) -> List[Result]:\\n+        \\\"\\\"\\\"\\n+
        \       Get results from slider.kz\\n+\\n+        ### Arguments\\n+        -
        search_term: The search term to search for.\\n+        - args: Unused.\\n+
        \       - kwargs: Unused.\\n+\\n+        ### Returns\\n+        - A list of
        slider.kz results if found, None otherwise.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       results = list(islice(self.client.search(search_term), 20))\\n+        regex
        = r\\\"^(.+?)-|(\\\\(\\\\w+[\\\\s\\\\S]*\\\\))\\\"\\n+        # Because anyone
        can post on soundcloud, we do another search with an edited search\\n+        #
        The regex removes anything in brackets and the artist(s)'s name(s) if in the
        name\\n+        edited_search_term = re.sub(regex, \\\"\\\", search_term)\\n+
        \       results.extend(list(islice(self.client.search(edited_search_term),
        20)))\\n+\\n+        # Simplify results\\n+        simplified_results = []\\n+
        \       for result in results:\\n+            if result.kind != \\\"track\\\":\\n+
        \               continue\\n+\\n+            # Ignore results that are not
        playable\\n+            if \\\"/preview/\\\" in result.media.transcodings[0].url:\\n+
        \               continue\\n+\\n+            album = self.client.get_track_albums(result.id)\\n+\\n+
        \           try:\\n+                album_name = next(album).title\\n+            except
        StopIteration:\\n+                album_name = None\\n+\\n+            simplified_results.append(\\n+
        \               Result(\\n+                    source=\\\"soundcloud\\\",\\n+
        \                   url=result.permalink_url,\\n+                    name=result.title,\\n+
        \                   verified=result.user.verified,\\n+                    duration=result.full_duration,\\n+
        \                   author=result.user.username,\\n+                    result_id=result.id,\\n+
        \                   isrc_search=False,\\n+                    search_query=search_term,\\n+
        \                   views=result.playback_count,\\n+                    explicit=False,\\n+
        \                   album=album_name,\\n+                )\\n+            )\\n+\\n+
        \       return simplified_results\"},{\"sha\":\"817fccdd6e8c32e586aa3bb81835d77b5a3e1ee9\",\"filename\":\"spotdl/providers/audio/youtube.py\",\"status\":\"added\",\"additions\":71,\"deletions\":0,\"changes\":71,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fyoutube.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fyoutube.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fyoutube.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,71 @@\\n+\\\"\\\"\\\"\\n+Youtube module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+from typing import Any, Dict, List, Optional\\n+\\n+from
        pytube import Search\\n+from pytube import YouTube as PyTube\\n+\\n+from spotdl.providers.audio.base
        import AudioProvider\\n+from spotdl.types.result import Result\\n+\\n+__all__
        = [\\\"YouTube\\\"]\\n+\\n+\\n+class YouTube(AudioProvider):\\n+    \\\"\\\"\\\"\\n+
        \   YouTube audio provider class\\n+    \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC
        = False\\n+    GET_RESULTS_OPTS: List[Dict[str, Any]] = [{}]\\n+\\n+    def
        get_results(\\n+        self, search_term: str, *_args, **_kwargs\\n+    )
        -> List[Result]:  # pylint: disable=W0221\\n+        \\\"\\\"\\\"\\n+        Get
        results from YouTube\\n+\\n+        ### Arguments\\n+        - search_term:
        The search term to search for.\\n+        - args: Unused.\\n+        - kwargs:
        Unused.\\n+\\n+        ### Returns\\n+        - A list of YouTube results
        if found, None otherwise.\\n+        \\\"\\\"\\\"\\n+\\n+        search_results:
        Optional[List[PyTube]] = Search(search_term).results\\n+\\n+        if not
        search_results:\\n+            return []\\n+\\n+        results = []\\n+        for
        result in search_results:\\n+            if result.watch_url:\\n+                try:\\n+
        \                   duration = result.length\\n+                except Exception:\\n+
        \                   duration = 0\\n+\\n+                try:\\n+                    views
        = result.views\\n+                except Exception:\\n+                    views
        = 0\\n+\\n+                results.append(\\n+                    Result(\\n+
        \                       source=self.name,\\n+                        url=result.watch_url,\\n+
        \                       verified=False,\\n+                        name=result.title,\\n+
        \                       duration=duration,\\n+                        author=result.author,\\n+
        \                       search_query=search_term,\\n+                        views=views,\\n+
        \                       result_id=result.video_id,\\n+                    )\\n+
        \               )\\n+\\n+        return results\"},{\"sha\":\"bde402f99a8d4861219ffdd5f9cfa32d2054add9\",\"filename\":\"spotdl/providers/audio/ytmusic.py\",\"status\":\"added\",\"additions\":90,\"deletions\":0,\"changes\":90,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fytmusic.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Faudio%2Fytmusic.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Faudio%2Fytmusic.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,90 @@\\n+\\\"\\\"\\\"\\n+YTMusic module for downloading and searching
        songs.\\n+\\\"\\\"\\\"\\n+\\n+from typing import Any, Dict, List\\n+\\n+from
        ytmusicapi import YTMusic\\n+\\n+from spotdl.providers.audio.base import ISRC_REGEX,
        AudioProvider\\n+from spotdl.types.result import Result\\n+from spotdl.utils.formatter
        import parse_duration\\n+\\n+__all__ = [\\\"YouTubeMusic\\\"]\\n+\\n+\\n+class
        YouTubeMusic(AudioProvider):\\n+    \\\"\\\"\\\"\\n+    YouTube Music audio
        provider class\\n+    \\\"\\\"\\\"\\n+\\n+    SUPPORTS_ISRC = True\\n+    GET_RESULTS_OPTS:
        List[Dict[str, Any]] = [\\n+        {\\\"filter\\\": \\\"songs\\\", \\\"ignore_spelling\\\":
        True, \\\"limit\\\": 50},\\n+        {\\\"filter\\\": \\\"videos\\\", \\\"ignore_spelling\\\":
        True, \\\"limit\\\": 50},\\n+    ]\\n+\\n+    def __init__(self, *args: Any,
        **kwargs: Any) -> None:\\n+        \\\"\\\"\\\"\\n+        Initialize the
        YouTube Music API\\n+\\n+        ### Arguments\\n+        - args: Arguments
        passed to the `AudioProvider` class.\\n+        - kwargs: Keyword arguments
        passed to the `AudioProvider` class.\\n+        \\\"\\\"\\\"\\n+\\n+        super().__init__(*args,
        **kwargs)\\n+\\n+        self.client = YTMusic(language=\\\"de\\\")\\n+\\n+
        \   def get_results(self, search_term: str, **kwargs) -> List[Result]:\\n+
        \       \\\"\\\"\\\"\\n+        Get results from YouTube Music API and simplify
        them\\n+\\n+        ### Arguments\\n+        - search_term: The search term
        to search for.\\n+        - kwargs: other keyword arguments passed to the
        `YTMusic.search` method.\\n+\\n+        ### Returns\\n+        - A list of
        simplified results (dicts)\\n+        \\\"\\\"\\\"\\n+\\n+        search_results
        = self.client.search(search_term, **kwargs)\\n+\\n+        # Simplify results\\n+
        \       results = []\\n+        for result in search_results:\\n+            if
        (\\n+                result is None\\n+                or result.get(\\\"videoId\\\")
        is None\\n+                or result.get(\\\"artists\\\") in [[], None]\\n+
        \           ):\\n+                continue\\n+\\n+            isrc_result
        = ISRC_REGEX.search(search_term)\\n+\\n+            results.append(\\n+                Result(\\n+
        \                   source=self.name,\\n+                    url=(\\n+                        f'https://{\\\"music\\\"
        if result[\\\"resultType\\\"] == \\\"song\\\" else \\\"www\\\"}'\\n+                        f\\\".youtube.com/watch?v={result['videoId']}\\\"\\n+
        \                   ),\\n+                    verified=result.get(\\\"resultType\\\")
        == \\\"song\\\",\\n+                    name=result[\\\"title\\\"],\\n+                    result_id=result[\\\"videoId\\\"],\\n+
        \                   author=result[\\\"artists\\\"][0][\\\"name\\\"],\\n+                    artists=tuple(map(lambda
        a: a[\\\"name\\\"], result[\\\"artists\\\"])),\\n+                    duration=parse_duration(result.get(\\\"duration\\\")),\\n+
        \                   isrc_search=isrc_result is not None,\\n+                    search_query=search_term,\\n+
        \                   explicit=result.get(\\\"isExplicit\\\"),\\n+                    album=(\\n+
        \                       result.get(\\\"album\\\", {}).get(\\\"name\\\")\\n+
        \                       if result.get(\\\"album\\\")\\n+                        else
        None\\n+                    ),\\n+                )\\n+            )\\n+\\n+
        \       return results\"},{\"sha\":\"e46a3bb80e890ec43b8f8205113e1aa995c79966\",\"filename\":\"spotdl/providers/lyrics/__init__.py\",\"status\":\"added\",\"additions\":11,\"deletions\":0,\"changes\":11,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,11 @@\\n+\\\"\\\"\\\"\\n+Lyrics providers for spotdl.\\n+\\\"\\\"\\\"\\n+\\n+from
        spotdl.providers.lyrics.azlyrics import AzLyrics\\n+from spotdl.providers.lyrics.base
        import LyricsProvider\\n+from spotdl.providers.lyrics.genius import Genius\\n+from
        spotdl.providers.lyrics.musixmatch import MusixMatch\\n+from spotdl.providers.lyrics.synced
        import Synced\\n+\\n+__all__ = [\\\"AzLyrics\\\", \\\"Genius\\\", \\\"MusixMatch\\\",
        \\\"Synced\\\", \\\"LyricsProvider\\\"]\"},{\"sha\":\"45222465559e4c872ced517f7ab93257304ce5b8\",\"filename\":\"spotdl/providers/lyrics/azlyrics.py\",\"status\":\"added\",\"additions\":147,\"deletions\":0,\"changes\":147,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fazlyrics.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fazlyrics.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fazlyrics.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,147 @@\\n+\\\"\\\"\\\"\\n+AZLyrics lyrics module.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import Dict, List, Optional\\n+\\n+import requests\\n+from bs4 import
        BeautifulSoup\\n+\\n+from spotdl.providers.lyrics.base import LyricsProvider\\n+\\n+__all__
        = [\\\"AzLyrics\\\"]\\n+\\n+\\n+class AzLyrics(LyricsProvider):\\n+    \\\"\\\"\\\"\\n+
        \   AZLyrics lyrics provider class.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(self):\\n+
        \       super().__init__()\\n+\\n+        self.session = requests.Session()\\n+
        \       self.session.headers.update(self.headers)\\n+\\n+        self.x_code
        = self.get_x_code()\\n+\\n+    def get_results(self, name: str, artists: List[str],
        **_) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+        Returns the results
        for the given song.\\n+\\n+        ### Arguments\\n+        - name: The name
        of the song.\\n+        - artists: The artists of the song.\\n+        - kwargs:
        Additional arguments.\\n+\\n+        ### Returns\\n+        - A dictionary
        with the results. (The key is the title and the value is the url.)\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if self.x_code is None:\\n+            self.x_code = self.get_x_code()\\n+\\n+
        \       if self.x_code is None:\\n+            return {}\\n+\\n+        #
        Join every artist by comma in artists\\n+        artist_str = \\\", \\\".join(artist
        for artist in artists if artist)\\n+\\n+        params = {\\n+            \\\"q\\\":
        f\\\"{artist_str} - {name}\\\",\\n+            \\\"x\\\": self.x_code,\\n+
        \       }\\n+\\n+        counter = 0\\n+        soup = None\\n+        while
        counter < 4:\\n+            try:\\n+                response = self.session.get(\\n+
        \                   \\\"https://search.azlyrics.com/search.php\\\", params=params\\n+
        \               )\\n+            except requests.ConnectionError:\\n+                continue\\n+\\n+
        \           if not response.ok:\\n+                counter += 1\\n+                continue\\n+\\n+
        \           soup = BeautifulSoup(response.content, \\\"html.parser\\\")\\n+
        \           break\\n+\\n+        if soup is None:\\n+            return {}\\n+\\n+
        \       td_tags = soup.find_all(\\\"td\\\")\\n+        if len(td_tags) ==
        0:\\n+            return {}\\n+\\n+        results = {}\\n+        for td_tag
        in td_tags:\\n+            a_tags = td_tag.find_all(\\\"a\\\", href=True)\\n+
        \           if len(a_tags) == 0:\\n+                continue\\n+\\n+            a_tag
        = a_tags[0]\\n+            url = a_tag[\\\"href\\\"].strip()\\n+            if
        url == \\\"\\\":\\n+                continue\\n+\\n+            title = td_tag.find(\\\"span\\\").get_text().strip()\\n+
        \           artist = td_tag.find(\\\"b\\\").get_text().strip()\\n+\\n+            results[f\\\"{artist}
        - {title}\\\"] = url\\n+\\n+        return results\\n+\\n+    def extract_lyrics(self,
        url: str, **_) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Extracts
        the lyrics from the given url.\\n+\\n+        ### Arguments\\n+        - url:
        The url to extract the lyrics from.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+\\n+        response = self.session.get(url)\\n+
        \       soup = BeautifulSoup(response.content, \\\"html.parser\\\")\\n+\\n+
        \       # Find all divs that don't have a class\\n+        div_tags = soup.find_all(\\\"div\\\",
        class_=False, id_=False)\\n+\\n+        # Find the div with the longest text\\n+
        \       lyrics_div = sorted(div_tags, key=lambda x: len(x.text))[-1]\\n+\\n+
        \       # extract lyrics from div and clean it up\\n+        lyrics = lyrics_div.get_text().strip()\\n+\\n+
        \       return lyrics\\n+\\n+    def get_x_code(self) -> Optional[str]:\\n+
        \       \\\"\\\"\\\"\\n+        Returns the x_code used by AZLyrics.\\n+\\n+
        \       ### Returns\\n+        - The x_code used by AZLyrics or None if it
        couldn't be retrieved.\\n+        \\\"\\\"\\\"\\n+\\n+        x_code = None\\n+\\n+
        \       try:\\n+            self.session.get(\\\"https://www.azlyrics.com/\\\")\\n+\\n+
        \           resp = self.session.get(\\\"https://www.azlyrics.com/geo.js\\\")\\n+\\n+
        \           # extract value from js code\\n+            js_code = resp.text\\n+
        \           start_index = js_code.find('value\\\"') + 9\\n+            end_index
        = js_code[start_index:].find('\\\");')\\n+\\n+            x_code = js_code[start_index
        : start_index + end_index]\\n+        except requests.ConnectionError:\\n+
        \           pass\\n+\\n+        return x_code\"},{\"sha\":\"cd7dff9a9fc01c3267f17355478b9ef4c6f67504\",\"filename\":\"spotdl/providers/lyrics/base.py\",\"status\":\"added\",\"additions\":132,\"deletions\":0,\"changes\":132,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fbase.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fbase.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fbase.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,132 @@\\n+\\\"\\\"\\\"\\n+Base module for all other lyrics providers.\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+from typing import Dict, List, Optional\\n+\\n+from spotdl.utils.formatter
        import ratio, slugify\\n+from spotdl.utils.matching import based_sort\\n+\\n+__all__
        = [\\\"LyricsProvider\\\"]\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        LyricsProvider:\\n+    \\\"\\\"\\\"\\n+    Base class for all other lyrics
        providers.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(self):\\n+        \\\"\\\"\\\"\\n+
        \       Init the lyrics provider searchand set headers.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       self.headers = {\\n+            \\\"Connection\\\": \\\"keep-alive\\\",\\n+
        \           \\\"Pragma\\\": \\\"no-cache\\\",\\n+            \\\"Cache-Control\\\":
        \\\"no-cache\\\",\\n+            \\\"sec-ch-ua\\\": '\\\"Chromium\\\";v=\\\"104\\\",
        \\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Google Chrome\\\";v=\\\"104\\\"',\\n+
        \           \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64)
        AppleWebKit/537.36 \\\"\\n+            \\\"(KHTML, like Gecko) Chrome/104.0.0.0
        Safari/537.36\\\",\\n+            \\\"Accept\\\": \\\"*/*\\\",\\n+            \\\"Sec-Fetch-Site\\\":
        \\\"same-origin\\\",\\n+            \\\"Sec-Fetch-Mode\\\": \\\"cors\\\",\\n+
        \           \\\"Sec-Fetch-Dest\\\": \\\"empty\\\",\\n+            \\\"Accept-Language\\\":
        \\\"en-US;q=0.8,en;q=0.7\\\",\\n+        }\\n+\\n+    def get_results(self,
        name: str, artists: List[str], **kwargs) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+
        \       Returns the results for the given song.\\n+\\n+        ### Arguments\\n+
        \       - name: The name of the song.\\n+        - artists: The artists of
        the song.\\n+        - kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+
        \       - A dictionary with the results. (The key is the title and the value
        is the url.)\\n+        \\\"\\\"\\\"\\n+\\n+        raise NotImplementedError\\n+\\n+
        \   def extract_lyrics(self, url: str, **kwargs) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+
        \       Extracts the lyrics from the given url.\\n+\\n+        ### Arguments\\n+
        \       - url: The url to extract the lyrics from.\\n+        - kwargs: Additional
        arguments.\\n+\\n+        ### Returns\\n+        - The lyrics of the song
        or None if no lyrics were found.\\n+        \\\"\\\"\\\"\\n+\\n+        raise
        NotImplementedError\\n+\\n+    def get_lyrics(self, name: str, artists: List[str],
        **kwargs) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Returns the
        lyrics for the given song.\\n+\\n+        ### Arguments\\n+        - name:
        The name of the song.\\n+        - artists: The artists of the song.\\n+        -
        kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+        - The
        lyrics of the song or None if no lyrics were found.\\n+        \\\"\\\"\\\"\\n+
        \       try:\\n+            results = self.get_results(name, artists, **kwargs)\\n+
        \       except Exception as exc:\\n+            logger.debug(\\n+                \\\"%s:
        Failed to get results for %s - %s: %s\\\",\\n+                self.name,\\n+
        \               name,\\n+                \\\", \\\".join(artists),\\n+                exc,\\n+
        \           )\\n+            return None\\n+\\n+        if not results:\\n+
        \           return None\\n+\\n+        results_with_score = {}\\n+        for
        title, url in results.items():\\n+            result_title = slugify(title)\\n+
        \           match_title = slugify(f\\\"{name} - {', '.join(artists)}\\\")\\n+\\n+
        \           res_list, song_list = based_sort(\\n+                result_title.split(\\\"-\\\"),
        match_title.split(\\\"-\\\")\\n+            )\\n+            result_title,
        match_title = \\\"-\\\".join(res_list), \\\"-\\\".join(song_list)\\n+\\n+
        \           score = ratio(result_title, match_title)\\n+            results_with_score[score]
        = url\\n+\\n+        if not results_with_score:\\n+            return None\\n+\\n+
        \       # Get song url with highest title match\\n+        score, url = max(results_with_score.items(),
        key=lambda x: x[0])\\n+\\n+        # Only return lyrics if the title match
        is at least 55%\\n+        if score < 55:\\n+            return None\\n+\\n+
        \       try:\\n+            return self.extract_lyrics(url, **kwargs)\\n+
        \       except Exception as exc:\\n+            logger.debug(\\n+                \\\"%s:
        Failed to extract lyrics from %s: %s\\\", self.name, url, exc\\n+            )\\n+
        \           return None\\n+\\n+    @property\\n+    def name(self) -> str:\\n+
        \       \\\"\\\"\\\"\\n+        Returns the name of the lyrics provider.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        return self.__class__.__name__\"},{\"sha\":\"1f529b35d6fa39efa40c3aefe48741009f0fb03e\",\"filename\":\"spotdl/providers/lyrics/genius.py\",\"status\":\"added\",\"additions\":130,\"deletions\":0,\"changes\":130,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fgenius.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fgenius.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fgenius.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,130 @@\\n+\\\"\\\"\\\"\\n+Genius Lyrics module.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import Dict, List, Optional\\n+\\n+import requests\\n+from bs4 import
        BeautifulSoup\\n+\\n+from spotdl.providers.lyrics.base import LyricsProvider\\n+from
        spotdl.utils.config import GlobalConfig\\n+\\n+__all__ = [\\\"Genius\\\"]\\n+\\n+\\n+class
        Genius(LyricsProvider):\\n+    \\\"\\\"\\\"\\n+    Genius lyrics provider
        class.\\n+    \\\"\\\"\\\"\\n+\\n+    def __init__(self):\\n+        \\\"\\\"\\\"\\n+
        \       Init the lyrics provider search and set headers.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       super().__init__()\\n+\\n+        self.headers.update(\\n+            {\\n+
        \               \\\"Authorization\\\": \\\"Bearer \\\"\\n+                \\\"alXXDbPZtK1m2RrZ8I4k2Hn8Ahsd0Gh_o076HYvcdlBvmc0ULL1H8Z8xRlew5qaG\\\",\\n+
        \           }\\n+        )\\n+\\n+    def get_results(self, name: str, artists:
        List[str], **_) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+        Returns
        the results for the given song.\\n+\\n+        ### Arguments\\n+        -
        name: The name of the song.\\n+        - artists: The artists of the song.\\n+
        \       - kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+        -
        A dictionary with the results. (The key is the title and the value is the
        url.)\\n+        \\\"\\\"\\\"\\n+\\n+        artists_str = \\\", \\\".join(artists)\\n+
        \       title = f\\\"{name} - {artists_str}\\\"\\n+\\n+        search_response
        = requests.get(\\n+            \\\"https://api.genius.com/search\\\",\\n+
        \           params={\\\"q\\\": title},\\n+            headers=self.headers,\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       )\\n+\\n+        results: Dict[str, str] = {}\\n+        for hit in
        search_response.json()[\\\"response\\\"][\\\"hits\\\"]:\\n+            results[hit[\\\"result\\\"][\\\"full_title\\\"]]
        = hit[\\\"result\\\"][\\\"id\\\"]\\n+\\n+        return results\\n+\\n+    def
        extract_lyrics(self, url: str, **_) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+
        \       Extracts the lyrics from the given url.\\n+\\n+        ### Arguments\\n+
        \       - url: The url to extract the lyrics from.\\n+        - kwargs: Additional
        arguments.\\n+\\n+        ### Returns\\n+        - The lyrics of the song
        or None if no lyrics were found.\\n+        \\\"\\\"\\\"\\n+\\n+        url
        = f\\\"https://api.genius.com/songs/{url}\\\"\\n+        song_response = requests.get(\\n+
        \           url,\\n+            headers=self.headers,\\n+            timeout=10,\\n+
        \           proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+        )\\n+
        \       url = song_response.json()[\\\"response\\\"][\\\"song\\\"][\\\"url\\\"]\\n+\\n+
        \       soup = None\\n+        counter = 0\\n+        while counter < 4:\\n+
        \           genius_page_response = requests.get(\\n+                url,\\n+
        \               headers=self.headers,\\n+                timeout=10,\\n+                proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \           )\\n+\\n+            if not genius_page_response.ok:\\n+                counter
        += 1\\n+                continue\\n+\\n+            soup = BeautifulSoup(\\n+
        \               genius_page_response.text.replace(\\\"<br/>\\\", \\\"\\\\n\\\"),
        \\\"html.parser\\\"\\n+            )\\n+\\n+            break\\n+\\n+        if
        soup is None:\\n+            return None\\n+\\n+        lyrics_div = soup.select_one(\\\"div.lyrics\\\")\\n+
        \       lyrics_containers = soup.select(\\\"div[class^=Lyrics__Container]\\\")\\n+\\n+
        \       # Get lyrics\\n+        if lyrics_div:\\n+            lyrics = lyrics_div.get_text()\\n+
        \       elif lyrics_containers:\\n+            lyrics = \\\"\\\\n\\\".join(con.get_text()
        for con in lyrics_containers)\\n+        else:\\n+            return None\\n+\\n+
        \       if not lyrics:\\n+            return None\\n+\\n+        # Clean lyrics\\n+
        \       lyrics = lyrics.strip()\\n+\\n+        # Remove desc at the beginning
        if it exists\\n+        for to_remove in [\\\"desc\\\", \\\"Desc\\\"]:\\n+
        \           lyrics.replace(to_remove, \\\"\\\", 1)\\n+\\n+        return lyrics\"},{\"sha\":\"3ae3c344e44120b44e21138cd334f1a6ade45119\",\"filename\":\"spotdl/providers/lyrics/musixmatch.py\",\"status\":\"added\",\"additions\":100,\"deletions\":0,\"changes\":100,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fmusixmatch.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fmusixmatch.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fmusixmatch.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,100 @@\\n+\\\"\\\"\\\"\\n+MusixMatch lyrics provider.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import Dict, List, Optional\\n+from urllib.parse import quote\\n+\\n+import
        requests\\n+from bs4 import BeautifulSoup\\n+\\n+from spotdl.providers.lyrics.base
        import LyricsProvider\\n+from spotdl.utils.config import GlobalConfig\\n+\\n+__all__
        = [\\\"MusixMatch\\\"]\\n+\\n+\\n+class MusixMatch(LyricsProvider):\\n+    \\\"\\\"\\\"\\n+
        \   MusixMatch lyrics provider class.\\n+    \\\"\\\"\\\"\\n+\\n+    def extract_lyrics(self,
        url: str, **_) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Extracts
        the lyrics from the given url.\\n+\\n+        ### Arguments\\n+        - url:
        The url to extract the lyrics from.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+\\n+        lyrics_resp = requests.get(\\n+
        \           url,\\n+            headers=self.headers,\\n+            timeout=10,\\n+
        \           proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+        )\\n+\\n+
        \       lyrics_soup = BeautifulSoup(lyrics_resp.text, \\\"html.parser\\\")\\n+
        \       lyrics_paragraphs = lyrics_soup.select(\\\"p.mxm-lyrics__content\\\")\\n+
        \       lyrics = \\\"\\\\n\\\".join(i.get_text() for i in lyrics_paragraphs)\\n+\\n+
        \       return lyrics\\n+\\n+    def get_results(self, name: str, artists:
        List[str], **kwargs) -> Dict[str, str]:\\n+        \\\"\\\"\\\"\\n+        Returns
        the results for the given song.\\n+\\n+        ### Arguments\\n+        -
        name: The name of the song.\\n+        - artists: The artists of the song.\\n+
        \       - kwargs: Additional arguments.\\n+\\n+        ### Returns\\n+        -
        A dictionary with the results. (The key is the title and the value is the
        url.)\\n+        \\\"\\\"\\\"\\n+\\n+        track_search = kwargs.get(\\\"track_search\\\",
        False)\\n+        artists_str = \\\", \\\".join(\\n+            artist for
        artist in artists if artist.lower() not in name.lower()\\n+        )\\n+\\n+
        \       # quote the query so that it's safe to use in a url\\n+        # e.g
        \\\"Au/Ra\\\" -> \\\"Au%2FRa\\\"\\n+        query = quote(f\\\"{name} - {artists_str}\\\",
        safe=\\\"\\\")\\n+\\n+        # search the `tracks page` if track_search is
        True\\n+        if track_search:\\n+            query += \\\"/tracks\\\"\\n+\\n+
        \       search_url = f\\\"https://www.musixmatch.com/search/{query}\\\"\\n+
        \       search_resp = requests.get(\\n+            search_url,\\n+            headers=self.headers,\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       )\\n+        search_soup = BeautifulSoup(search_resp.text, \\\"html.parser\\\")\\n+
        \       song_url_tag = search_soup.select(\\\"a[href^='/lyrics/']\\\")\\n+\\n+
        \       if not song_url_tag:\\n+            # song_url_tag being None means
        no results were found on the\\n+            # All Results page, therefore,
        we use `track_search` to\\n+            # search the tracks page.\\n+\\n+
        \           # track_serach being True means we are already searching the tracks
        page.\\n+            if track_search:\\n+                return {}\\n+\\n+
        \           return self.get_results(name, artists, track_search=True)\\n+\\n+
        \       results: Dict[str, str] = {}\\n+        for tag in song_url_tag:\\n+
        \           results[tag.get_text()] = \\\"https://www.musixmatch.com\\\" +
        str(\\n+                tag.get(\\\"href\\\", \\\"\\\")\\n+            )\\n+\\n+
        \       return results\"},{\"sha\":\"d6cc6626e396616b30827e3b828a314115c9bc3b\",\"filename\":\"spotdl/providers/lyrics/synced.py\",\"status\":\"added\",\"additions\":78,\"deletions\":0,\"changes\":78,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fsynced.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Fproviders%2Flyrics%2Fsynced.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics%2Fsynced.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,78 @@\\n+\\\"\\\"\\\"\\n+Synced lyrics provider using the syncedlyrics
        library\\n+\\\"\\\"\\\"\\n+\\n+from typing import Dict, List, Optional\\n+\\n+import
        requests\\n+import syncedlyrics\\n+\\n+from spotdl.providers.lyrics.base import
        LyricsProvider\\n+\\n+__all__ = [\\\"Synced\\\"]\\n+\\n+\\n+class Synced(LyricsProvider):\\n+
        \   \\\"\\\"\\\"\\n+    Lyrics provider for synced lyrics using the syncedlyrics
        library\\n+    Currently supported websites: Deezer, NetEase\\n+    \\\"\\\"\\\"\\n+\\n+
        \   def get_results(self, name: str, artists: List[str], **kwargs) -> Dict[str,
        str]:\\n+        \\\"\\\"\\\"\\n+        Returns the results for the given
        song.\\n+\\n+        ### Arguments\\n+        - name: The name of the song.\\n+
        \       - artists: The artists of the song.\\n+        - kwargs: Additional
        arguments.\\n+\\n+        ### Returns\\n+        - A dictionary with the results.
        (The key is the title and the value is the url.)\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise NotImplementedError\\n+\\n+    def extract_lyrics(self, url:
        str, **kwargs) -> Optional[str]:\\n+        \\\"\\\"\\\"\\n+        Extracts
        the lyrics from the given url.\\n+\\n+        ### Arguments\\n+        - url:
        The url to extract the lyrics from.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+\\n+        raise NotImplementedError\\n+\\n+
        \   def get_lyrics(self, name: str, artists: List[str], **kwargs) -> Optional[str]:\\n+
        \       \\\"\\\"\\\"\\n+        Try to get lyrics using syncedlyrics\\n+\\n+
        \       ### Arguments\\n+        - name: The name of the song.\\n+        -
        artists: The artists of the song.\\n+        - kwargs: Additional arguments.\\n+\\n+
        \       ### Returns\\n+        - The lyrics of the song or None if no lyrics
        were found.\\n+        \\\"\\\"\\\"\\n+\\n+        try:\\n+            lyrics
        = syncedlyrics.search(\\n+                f\\\"{name} - {artists[0]}\\\",\\n+
        \               allow_plain_format=kwargs.get(\\\"allow_plain_format\\\",
        True),\\n+            )\\n+            return lyrics\\n+        except requests.exceptions.SSLError:\\n+
        \           # Max retries reached\\n+            return None\\n+        except
        TypeError:\\n+            # Error at syncedlyrics.providers.musixmatch L89
        -\\n+            #   Because `body` is occasionally an empty list instead
        of a dictionary.\\n+            # We get this error when allow_plain_format
        is set to True,\\n+            #   and there are no synced lyrics present\\n+
        \           # Because its empty, we know there are no lyrics\\n+            return
        None\"},{\"sha\":\"91a4ad1dc532bd2a041fd46d6491dd2e23ba7338\",\"filename\":\"spotdl/providers/lyrics_providers.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":115,\"changes\":115,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Flyrics_providers.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Flyrics_providers.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Flyrics_providers.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,115 +0,0 @@\\n-from requests import get\\n-from bs4 import BeautifulSoup\\n-from
        typing import List\\n-from urllib.parse import quote\\n-\\n-user_agent = {\\n-
        \   \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
        \\\\\\n-(KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36\\\"\\n-}\\n-\\n-\\n-def
        get_lyrics_genius(song_name: str, song_artists: List[str]) -> str:\\n-    \\\"\\\"\\\"\\n-
        \   `str` `song_name` : name of song\\n-    `list<str>` `song_artists` : list
        containing name of contributing artists\\n-    RETURNS `str`: Lyrics of the
        song.\\n-    Gets the lyrics of the song.\\n-    \\\"\\\"\\\"\\n-    headers
        = {\\n-        \\\"Authorization\\\": \\\"Bearer alXXDbPZtK1m2RrZ8I4k2Hn8Ahsd0Gh_o076HYvcdlBvmc0ULL1H8Z8xRlew5qaG\\\",\\n-
        \   }\\n-    headers.update(user_agent)\\n-\\n-    api_search_url = \\\"https://api.genius.com/search\\\"\\n-
        \   artist_str = \\\", \\\".join(\\n-        artist for artist in song_artists
        if artist.lower() not in song_name.lower()\\n-    )\\n-    search_query =
        f\\\"{song_name} {artist_str}\\\"\\n-\\n-    api_response = get(api_search_url,
        params={\\\"q\\\": search_query}, headers=headers)\\n-    if not api_response.ok:\\n-
        \       return \\\"\\\"\\n-    api_json = api_response.json()\\n-\\n-    try:\\n-
        \       song_id = api_json[\\\"response\\\"][\\\"hits\\\"][0][\\\"result\\\"][\\\"id\\\"]\\n-
        \   except (IndexError, KeyError):\\n-        return \\\"\\\"\\n-\\n-    song_api_url
        = f\\\"https://api.genius.com/songs/{song_id}\\\"\\n-    api_response = get(song_api_url,
        headers=headers)\\n-    if not api_response.ok:\\n-        return \\\"\\\"\\n-
        \   api_json = api_response.json()\\n-\\n-    song_url = api_json[\\\"response\\\"][\\\"song\\\"][\\\"url\\\"]\\n-
        \   genius_page = get(song_url, headers=user_agent)\\n-    if not genius_page.ok:\\n-
        \       return \\\"\\\"\\n-\\n-    soup = BeautifulSoup(genius_page.text.replace(\\\"<br/>\\\",
        \\\"\\\\n\\\"), \\\"html.parser\\\")\\n-    lyrics_div = soup.select_one(\\\"div.lyrics\\\")\\n-\\n-
        \   if lyrics_div is not None:\\n-        return lyrics_div.get_text().strip()\\n-\\n-
        \   lyrics_containers = soup.select(\\\"div[class^=Lyrics__Container]\\\")\\n-
        \   lyrics = \\\"\\\\n\\\".join(con.get_text() for con in lyrics_containers)\\n-
        \   return lyrics.strip()\\n-\\n-\\n-def get_lyrics_musixmatch(\\n-    song_name:
        str, song_artists: List[str], track_search=False\\n-) -> str:\\n-    \\\"\\\"\\\"\\n-
        \   `str` `song_name` : Name of song\\n-    `list<str>` `song_artists` : list
        containing name of contributing artists\\n-    `bool` `track_search` : if
        `True`, search the musixmatch tracks page.\\n-    RETURNS `str`: Lyrics of
        the song.\\n-    Gets the lyrics of the song.\\n-    \\\"\\\"\\\"\\n-    #
        remove artist names that are already in the song_name\\n-    # we do not use
        SongObject.create_file_name beacause it\\n-    # removes '/' etc from the
        artist and song names.\\n-    artists_str = \\\", \\\".join(\\n-        artist
        for artist in song_artists if artist.lower() not in song_name.lower()\\n-
        \   )\\n-\\n-    # quote the query so that it's safe to use in a url\\n-    #
        e.g \\\"Au/Ra\\\" -> \\\"Au%2FRa\\\"\\n-    query = quote(f\\\"{song_name}
        - {artists_str}\\\", safe=\\\"\\\")\\n-\\n-    # search the `tracks page`
        if track_search is True\\n-    if track_search:\\n-        query += \\\"/tracks\\\"\\n-\\n-
        \   search_url = f\\\"https://www.musixmatch.com/search/{query}\\\"\\n-    search_resp
        = get(search_url, headers=user_agent)\\n-    if not search_resp.ok:\\n-        return
        \\\"\\\"\\n-\\n-    search_soup = BeautifulSoup(search_resp.text, \\\"html.parser\\\")\\n-
        \   song_url_tag = search_soup.select_one(\\\"a[href^='/lyrics/']\\\")\\n-\\n-
        \   # song_url_tag being None means no results were found on the\\n-    #
        All Results page, therefore, we use `track_search` to\\n-    # search the
        tracks page.\\n-    if song_url_tag is None:\\n-        # track_serach being
        True means we are already searching the tracks page.\\n-        if track_search:\\n-
        \           return \\\"\\\"\\n-\\n-        lyrics = get_lyrics_musixmatch(song_name,
        song_artists, track_search=True)\\n-        return lyrics\\n-\\n-    song_url
        = \\\"https://www.musixmatch.com\\\" + str(song_url_tag.get(\\\"href\\\",
        \\\"\\\"))\\n-    lyrics_resp = get(song_url, headers=user_agent)\\n-    if
        not lyrics_resp.ok:\\n-        return \\\"\\\"\\n-\\n-    lyrics_soup = BeautifulSoup(lyrics_resp.text,
        \\\"html.parser\\\")\\n-    lyrics_paragraphs = lyrics_soup.select(\\\"p.mxm-lyrics__content\\\")\\n-
        \   lyrics = \\\"\\\\n\\\".join(i.get_text() for i in lyrics_paragraphs)\\n-\\n-
        \   return lyrics\"},{\"sha\":\"6fc3acc8aa69facec5343a7b23df629ba07d4663\",\"filename\":\"spotdl/providers/metadata_provider.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":24,\"changes\":24,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fmetadata_provider.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fmetadata_provider.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fmetadata_provider.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,24 +0,0 @@\\n-from spotdl.search import SpotifyClient\\n-\\n-\\n-def from_url(spotify_url:
        str):\\n-    if \\\"open.spotify.com\\\" not in spotify_url or \\\"track\\\"
        not in spotify_url:\\n-        raise Exception(f\\\"passed URL is not that
        of a track: {spotify_url}\\\")\\n-\\n-    # query spotify for song, artist,
        album details\\n-    spotify_client = SpotifyClient()\\n-\\n-    raw_track_meta
        = spotify_client.track(spotify_url)\\n-\\n-    if raw_track_meta is None:\\n-
        \       raise Exception(\\n-            \\\"Couldn't get metadata, check if
        you have passed correct track id\\\"\\n-        )\\n-\\n-    primary_artist_id
        = raw_track_meta[\\\"artists\\\"][0][\\\"id\\\"]\\n-    raw_artist_meta =
        spotify_client.artist(primary_artist_id)\\n-\\n-    albumId = raw_track_meta[\\\"album\\\"][\\\"id\\\"]\\n-
        \   raw_album_meta = spotify_client.album(albumId)\\n-\\n-    return raw_track_meta,
        raw_artist_meta, raw_album_meta\"},{\"sha\":\"f29ebf7f298a4e85976d664a839c87a2c568152b\",\"filename\":\"spotdl/providers/provider_utils.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":162,\"changes\":162,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fprovider_utils.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fprovider_utils.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fprovider_utils.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,162 +0,0 @@\\n-import re\\n-\\n-from pathlib import Path\\n-from typing
        import List\\n-\\n-from rapidfuzz import fuzz\\n-\\n-from spotdl.utils.song_name_utils
        import format_name\\n-\\n-\\n-def _match_percentage(str1: str, str2: str,
        score_cutoff: float = 0) -> float:\\n-    \\\"\\\"\\\"\\n-    A wrapper around
        `rapidfuzz.fuzz.partial_ratio` to handle UTF-8 encoded\\n-    emojis that
        usually cause errors\\n-\\n-    `str` `str1` : a random sentence\\n-    `str`
        `str2` : another random sentence\\n-    `float` `score_cutoff` : minimum score
        required to consider it a match\\n-        returns 0 when similarity < score_cutoff\\n-\\n-
        \   RETURNS `float`\\n-    \\\"\\\"\\\"\\n-\\n-    # ! this will throw an
        error if either string contains a UTF-8 encoded emoji\\n-    try:\\n-        return
        fuzz.partial_ratio(str1, str2, processor=None, score_cutoff=score_cutoff)\\n-\\n-
        \   # ! we build new strings that contain only alphanumerical characters and
        spaces\\n-    # ! and return the partial_ratio of that\\n-    except:  # noqa:E722\\n-
        \       new_str1 = \\\"\\\".join(\\n-            each_letter\\n-            for
        each_letter in str1\\n-            if each_letter.isalnum() or each_letter.isspace()\\n-
        \       )\\n-\\n-        new_str2 = \\\"\\\".join(\\n-            each_letter\\n-
        \           for each_letter in str2\\n-            if each_letter.isalnum()
        or each_letter.isspace()\\n-        )\\n-\\n-        return fuzz.partial_ratio(\\n-
        \           new_str1, new_str2, processor=None, score_cutoff=score_cutoff\\n-
        \       )\\n-\\n-\\n-def _parse_duration(duration: str) -> float:\\n-    \\\"\\\"\\\"\\n-
        \   Convert string value of time (duration: \\\"25:36:59\\\") to a float value
        of seconds (92219.0)\\n-    \\\"\\\"\\\"\\n-    try:\\n-        # {(1, \\\"s\\\"),
        (60, \\\"m\\\"), (3600, \\\"h\\\")}\\n-        mapped_increments = zip([1,
        60, 3600], reversed(duration.split(\\\":\\\")))\\n-        seconds = sum(multiplier
        * int(time) for multiplier, time in mapped_increments)\\n-        return float(seconds)\\n-\\n-
        \   # ! This usually occurs when the wrong string is mistaken for the duration\\n-
        \   except (ValueError, TypeError, AttributeError):\\n-        return 0.0\\n-\\n-\\n-def
        _create_song_title(song_name: str, song_artists: List[str]) -> str:\\n-    joined_artists
        = \\\", \\\".join(song_artists)\\n-    return _sanitize_filename(f\\\"{joined_artists}
        - {song_name}\\\")\\n-\\n-\\n-def _sanitize_filename(input_str: str) -> str:\\n-
        \   return format_name(input_str)\\n-\\n-\\n-def _get_smaller_file_path(input_song,
        output_format: str) -> Path:\\n-    # Only use the first artist if the song
        path turns out to be too long\\n-    smaller_name = f\\\"{input_song.contributing_artists[0]}
        - {input_song.song_name}\\\"\\n-\\n-    smaller_name = _sanitize_filename(smaller_name)\\n-\\n-
        \   try:\\n-        return Path(f\\\"{smaller_name}.{output_format}\\\").resolve()\\n-
        \   except OSError:\\n-        # Expected to happen in the rare case when
        the saved path is too long,\\n-        # even with the short filename\\n-
        \       raise OSError(\\\"Cannot save song due to path issues.\\\")\\n-\\n-\\n-def
        _get_converted_file_path(song_obj, output_format: str = None) -> Path:\\n-\\n-
        \   # ! we eliminate contributing artist names that are also in the song name,
        else we\\n-    # ! would end up with things like 'Jetta, Mastubs - I'd love
        to change the world\\n-    # ! (Mastubs REMIX).mp3' which is kinda an odd
        file name.\\n-\\n-    # also make sure that main artist is included in artistStr
        even if they\\n-    # are in the song name, for example\\n-    # Lil Baby
        - Never Recover (Lil Baby & Gunna, Drake).mp3\\n-\\n-    artists_filtered
        = []\\n-\\n-    if output_format is None:\\n-        output_format = \\\"mp3\\\"\\n-\\n-
        \   for artist in song_obj.contributing_artists:\\n-        if artist.lower()
        not in song_obj.song_name:\\n-            artists_filtered.append(artist)\\n-
        \       elif artist.lower() is song_obj.contributing_artists[0].lower():\\n-
        \           artists_filtered.append(artist)\\n-\\n-    artist_str = \\\",
        \\\".join(artists_filtered)\\n-\\n-    converted_file_name = _sanitize_filename(\\n-
        \       f\\\"{artist_str} - {song_obj.song_name}.{output_format}\\\"\\n-    )\\n-\\n-
        \   converted_file_path = Path(converted_file_name)\\n-\\n-    # ! Checks
        if a file name is too long (256 max on both linux and windows)\\n-    try:\\n-
        \       if len(str(converted_file_path.resolve().name)) > 256:\\n-            print(\\\"Path
        was too long. Using Small Path.\\\")\\n-            return _get_smaller_file_path(song_obj,
        output_format)\\n-    except OSError:\\n-        return _get_smaller_file_path(song_obj,
        output_format)\\n-\\n-    return converted_file_path\\n-\\n-\\n-def _parse_path_template(path_template,
        song_object, output_format, short=False):\\n-    converted_file_name = path_template\\n-\\n-
        \   converted_file_name = converted_file_name.format(\\n-        artist=_sanitize_filename(song_object.contributing_artists[0]),\\n-
        \       title=_sanitize_filename(song_object.song_name),\\n-        album=_sanitize_filename(song_object.album_name),\\n-
        \       playlist=_sanitize_filename(song_object.playlist_name)\\n-        if
        song_object.playlist_name\\n-        else \\\"\\\",\\n-        artists=_sanitize_filename(\\n-
        \           \\\", \\\".join(song_object.contributing_artists)\\n-            if
        short is False\\n-            else song_object.contributing_artists[0]\\n-
        \       ),\\n-        ext=_sanitize_filename(output_format),\\n-    )\\n-\\n-
        \   if len(converted_file_name) > 250:\\n-        return _parse_path_template(\\n-
        \           path_template, song_object, output_format, short=True\\n-        )\\n-\\n-
        \   converted_file_path = Path(converted_file_name)\\n-\\n-    santitized_parts
        = []\\n-    for part in converted_file_path.parts:\\n-        match = re.search(r\\\"[^\\\\.*](.*)[^\\\\.*$]\\\",
        part)\\n-        if match:\\n-            santitized_parts.append(match.group(0))\\n-
        \       else:\\n-            santitized_parts.append(part)\\n-\\n-    # Join
        the parts of the path\\n-    converted_file_path = Path(*santitized_parts)\\n-\\n-
        \   return converted_file_path\"},{\"sha\":\"497316380076a34c0ecb4f60021ad04a5500ab00\",\"filename\":\"spotdl/providers/yt_provider.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":158,\"changes\":158,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fyt_provider.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fyt_provider.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fyt_provider.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,158 +0,0 @@\\n-# ===============\\n-# === Imports ===\\n-# ===============\\n-\\n-from
        pytube.__main__ import YouTube\\n-from unidecode import unidecode\\n-from
        pytube import Search\\n-\\n-# ! Just for static typing\\n-from typing import
        List, Optional\\n-\\n-from spotdl.providers.provider_utils import (\\n-    _match_percentage,\\n-
        \   _create_song_title,\\n-)\\n-\\n-\\n-def search_and_get_best_match(\\n-
        \   song_name: str,\\n-    song_artists: List[str],\\n-    song_duration:
        int,\\n-    isrc: str,\\n-) -> Optional[str]:\\n-    \\\"\\\"\\\"\\n-    `str`
        `song_name` : name of song\\n-\\n-    `list<str>` `song_artists` : list containing
        name of contributing artists\\n-\\n-    `str` `song_album_name` : name of
        song's album\\n-\\n-    `int` `song_duration` : duration of the song\\n-\\n-
        \   `str` `isrc` :  code for identifying sound recordings and music video
        recordings\\n-\\n-    RETURNS `str` : link of the best match\\n-    \\\"\\\"\\\"\\n-\\n-
        \   # if isrc is not None then we try to find song with it\\n-    if isrc
        is not None:\\n-        isrc_results = Search(isrc).results\\n-\\n-        if
        isrc_results and len(isrc_results) == 1:\\n-            isrc_result = isrc_results[0]\\n-\\n-
        \           if isrc_result is not None and isrc_result.watch_url is not None:\\n-
        \               return isrc_result.watch_url\\n-\\n-    song_title = _create_song_title(song_name,
        song_artists).lower()\\n-\\n-    # Query YTM by songs only first, this way
        if we get correct result on the first try\\n-    # we don't have to make another
        request to ytmusic api that could result in us\\n-    # getting rate limited
        sooner\\n-    results = Search(song_title).results\\n-\\n-    if results is
        None:\\n-        print(\\\"Couldn't find the song on YouTube\\\")\\n-        return
        None\\n-\\n-    # Order results\\n-    results = _order_yt_results(results,
        song_name, song_artists, song_duration)\\n-\\n-    # No matches found\\n-
        \   if len(results) == 0:\\n-        return None\\n-\\n-    result_items =
        list(results.items())\\n-\\n-    # Sort results by highest score\\n-    sorted_results
        = sorted(result_items, key=lambda x: x[1], reverse=True)\\n-\\n-    # ! In
        theory, the first 'TUPLE' in sorted_results should have the highest match\\n-
        \   # ! value, we send back only the link\\n-    return sorted_results[0][0]\\n-\\n-\\n-def
        _order_yt_results(\\n-    results: List[YouTube],\\n-    song_name: str,\\n-
        \   song_artists: List[str],\\n-    song_duration: int,\\n-) -> dict:\\n-\\n-
        \   # Assign an overall avg match value to each result\\n-    links_with_match_value
        = {}\\n-\\n-    for result in results:\\n-        # ! skip results without
        videoId, this happens if you are country restricted or\\n-        # ! video
        is unavailabe\\n-        if result.video_id is None:\\n-            continue\\n-\\n-
        \       lower_song_name = song_name.lower()\\n-        lower_result_name =
        result.title.lower()\\n-\\n-        sentence_words = lower_song_name.replace(\\\"-\\\",
        \\\" \\\").split(\\\" \\\")\\n-\\n-        common_word = False\\n-\\n-        #
        ! check for common word\\n-        for word in sentence_words:\\n-            if
        word != \\\"\\\" and word in lower_result_name:\\n-                common_word
        = True\\n-\\n-        # ! if there are no common words, skip result\\n-        if
        common_word is False:\\n-            continue\\n-\\n-        # Find artist
        match\\n-        # ! match  = (no of artist names in result) / (no. of artist
        names on spotify) * 100\\n-        artist_match_number = 0\\n-\\n-        #
        ! we use fuzzy matching because YouTube spellings might be mucked up\\n-        #
        ! i.e if video\\n-        for artist in song_artists:\\n-            # ! something
        like _match_percentage('rionos', 'aiobahn, rionos Motivation\\n-            #
        ! (remix)' would return 100, so we're absolutely corrent in matching\\n-            #
        ! artists to song name.\\n-            if _match_percentage(\\n-                str(unidecode(artist.lower())),
        str(unidecode(result.title).lower()), 85\\n-            ):\\n-                artist_match_number
        += 1\\n-\\n-        # ! Skip if there are no artists in common, (else, results
        like 'Griffith Swank -\\n-        # ! Madness' will be the top match for 'Ruelle
        - Madness')\\n-        if artist_match_number == 0:\\n-            continue\\n-\\n-
        \       artist_match = (artist_match_number / len(song_artists)) * 100\\n-
        \       song_title = _create_song_title(song_name, song_artists).lower()\\n-
        \       name_match = round(\\n-            _match_percentage(\\n-                str(unidecode(result.title.lower())),
        str(unidecode(song_title)), 60\\n-            ),\\n-            ndigits=3,\\n-
        \       )\\n-\\n-        # skip results with name match of 0, these are obviously
        wrong\\n-        # but can be identified as correct later on due to other
        factors\\n-        # such as time_match or artist_match\\n-        if name_match
        == 0:\\n-            continue\\n-\\n-        # Find duration match\\n-        #
        ! time match = 100 - (delta(duration)**2 / original duration * 100)\\n-        #
        ! difference in song duration (delta) is usually of the magnitude of a few\\n-
        \       # ! seconds, we need to amplify the delta if it is to have any meaningful
        impact\\n-        # ! wen we calculate the avg match value\\n-        delta
        = result.length - song_duration  # ! check this\\n-        non_match_value
        = (delta**2) / song_duration * 100\\n-\\n-        time_match = 100 - non_match_value\\n-\\n-
        \       average_match = (artist_match + name_match + time_match) / 3\\n-\\n-
        \       # the results along with the avg Match\\n-        links_with_match_value[result.watch_url]
        = average_match\\n-\\n-    return links_with_match_value\"},{\"sha\":\"79766e644f9261d8c2e71ae0bebde63a5a5361f6\",\"filename\":\"spotdl/providers/ytm_provider.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":303,\"changes\":303,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fytm_provider.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fproviders%2Fytm_provider.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fproviders%2Fytm_provider.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,303 +0,0 @@\\n-# ===============\\n-# === Imports ===\\n-# ===============\\n-\\n-#
        ! Just for static typing\\n-from ytmusicapi import YTMusic\\n-from unidecode
        import unidecode\\n-from typing import List, Optional\\n-\\n-from spotdl.providers.provider_utils
        import (\\n-    _match_percentage,\\n-    _parse_duration,\\n-    _create_song_title,\\n-)\\n-\\n-\\n-#
        ! YTMusic api client\\n-ytm_client = YTMusic()\\n-\\n-\\n-def search_and_get_best_match(\\n-
        \   song_name: str,\\n-    song_artists: List[str],\\n-    song_album_name:
        str,\\n-    song_duration: int,\\n-    isrc: str,\\n-) -> Optional[str]:\\n-
        \   \\\"\\\"\\\"\\n-    `str` `song_name` : name of song\\n-\\n-    `list<str>`
        `song_artists` : list containing name of contributing artists\\n-\\n-    `str`
        `song_album_name` : name of song's album\\n-\\n-    `int` `song_duration`
        : duration of the song\\n-\\n-    `str` `isrc` :  code for identifying sound
        recordings and music video recordings\\n-\\n-    RETURNS `str` : link of the
        best match\\n-    \\\"\\\"\\\"\\n-\\n-    # if isrc is not None then we try
        to find song with it\\n-    if isrc is not None:\\n-        isrc_results =
        _query_and_simplify(isrc, \\\"songs\\\")\\n-\\n-        if len(isrc_results)
        == 1:\\n-            isrc_result = isrc_results[0]\\n-\\n-            name_match
        = isrc_result[\\\"name\\\"].lower() == song_name.lower()\\n-\\n-            delta
        = isrc_result[\\\"length\\\"] - song_duration\\n-            non_match_value
        = (delta**2) / song_duration * 100\\n-\\n-            time_match = 100 - non_match_value\\n-\\n-
        \           if (\\n-                isrc_result is not None\\n-                and
        \\\"link\\\" in isrc_result\\n-                and name_match\\n-                and
        time_match > 90\\n-            ):\\n-                return isrc_result[\\\"link\\\"]\\n-\\n-
        \   song_title = _create_song_title(song_name, song_artists).lower()\\n-\\n-
        \   # Query YTM by songs only first, this way if we get correct result on
        the first try\\n-    # we don't have to make another request to ytmusic api
        that could result in us\\n-    # getting rate limited sooner\\n-    song_results
        = _query_and_simplify(song_title, \\\"songs\\\")\\n-\\n-    # Order results\\n-
        \   songs = _order_ytm_results(\\n-        song_results, song_name, song_artists,
        song_album_name, song_duration\\n-    )\\n-\\n-    # song type results are
        always more accurate than video type, so if we get score of 80 or above\\n-
        \   # we are almost 100% sure that this is the correct link\\n-    if len(songs)
        != 0:\\n-        # get the result with highest score\\n-        best_result
        = max(songs, key=lambda k: songs[k])\\n-\\n-        if songs[best_result]
        >= 80:\\n-            return best_result\\n-\\n-    # We didn't find the correct
        song on the first try so now we get video type results\\n-    # add them to
        song_results, and get the result with highest score\\n-    video_results =
        _query_and_simplify(\\n-        _create_song_title(song_name, song_artists).lower(),
        filter=\\\"videos\\\"\\n-    )\\n-\\n-    # Order video results\\n-    videos
        = _order_ytm_results(\\n-        video_results, song_name, song_artists, song_album_name,
        song_duration\\n-    )\\n-\\n-    # Merge songs and video results\\n-    results
        = {**songs, **videos}\\n-\\n-    # No matches found\\n-    if not results:\\n-
        \       return None\\n-\\n-    result_items = list(results.items())\\n-\\n-
        \   # Sort results by highest score\\n-    sorted_results = sorted(result_items,
        key=lambda x: x[1], reverse=True)\\n-\\n-    # ! In theory, the first 'TUPLE'
        in sorted_results should have the highest match\\n-    # ! value, we send
        back only the link\\n-    return sorted_results[0][0]\\n-\\n-\\n-def _order_ytm_results(\\n-
        \   results: List[dict],\\n-    song_name: str,\\n-    song_artists: List[str],\\n-
        \   song_album_name: str,\\n-    song_duration: int,\\n-) -> dict:\\n-\\n-
        \   # Assign an overall avg match value to each result\\n-    links_with_match_value
        = {}\\n-\\n-    for result in results:\\n-        # ! skip results without
        videoId, this happens if you are country restricted or\\n-        # ! video
        is unavailabe\\n-        if result == {}:\\n-            continue\\n-\\n-
        \       # ! If there are no common words b/w the spotify and YouTube Music
        name, the song\\n-        # ! is a wrong match (Like Ruelle - Madness being
        matched to Ruelle - Monster, it\\n-        # ! happens without this conditional)\\n-\\n-
        \       # ! most song results on youtube go by $artist - $song_name, so if
        the spotify name\\n-        # ! has a '-', this function would return True,
        a common '-' is hardly a 'common\\n-        # ! word', so we get rid of it.
        Lower-caseing all the inputs is to get rid of the\\n-        # ! troubles
        that arise from pythons handling of differently cased words, i.e.\\n-        #
        ! 'Rhino' == 'rhino' is false though the word is same... so we lower-case
        both\\n-        # ! sentences and replace any hypens(-)\\n-        lower_song_name
        = song_name.lower()\\n-        lower_result_name = result[\\\"name\\\"].lower()\\n-\\n-
        \       sentence_words = lower_song_name.replace(\\\"-\\\", \\\" \\\").split(\\\"
        \\\")\\n-\\n-        common_word = any(\\n-            # ! check for common
        word\\n-            word != \\\"\\\" and word in lower_result_name\\n-            for
        word in sentence_words\\n-        )\\n-\\n-        # ! if there are no common
        words, skip result\\n-        if not common_word:\\n-            continue\\n-\\n-
        \       # Find artist match\\n-        # ! match  = (no of artist names in
        result) / (no. of artist names on spotify) * 100\\n-        artist_match_number
        = 0.0\\n-\\n-        # ! we use fuzzy matching because YouTube spellings might
        be mucked up\\n-        if result[\\\"type\\\"] == \\\"song\\\":\\n-            for
        artist in song_artists:\\n-                artist_match_number += _match_percentage(\\n-
        \                   str(unidecode(artist.lower())), unidecode(result[\\\"artist\\\"].lower())\\n-
        \               )\\n-        else:\\n-            # ! i.e if video\\n-            for
        artist in song_artists:\\n-                # ! something like _match_percentage('rionos',
        'aiobahn, rionos Motivation\\n-                # ! (remix)' would return 100,
        so we're absolutely corrent in matching\\n-                # ! artists to
        song name.\\n-                artist_match_number += _match_percentage(\\n-
        \                   str(unidecode(artist.lower())), unidecode(result[\\\"name\\\"].lower())\\n-
        \               )\\n-\\n-            # we didn't find artist in the video
        title, so we fallback to\\n-            # detecting song artist in the channel
        name\\n-            # I am not sure if this won't create false positives\\n-
        \           if artist_match_number == 0:\\n-                for artist in
        song_artists:\\n-                    artist_match_number += _match_percentage(\\n-
        \                       str(unidecode(artist.lower())),\\n-                        unidecode(result[\\\"artist\\\"].lower()),\\n-
        \                   )\\n-\\n-        artist_match = artist_match_number /
        len(song_artists)\\n-        if artist_match < 70:\\n-            continue\\n-\\n-
        \       song_title = _create_song_title(song_name, song_artists).lower()\\n-\\n-
        \       # Find name match and drop results below 60%\\n-        # this needs
        more testing\\n-        if result[\\\"type\\\"] == \\\"song\\\":\\n-            name_match
        = round(\\n-                _match_percentage(\\n-                    unidecode(result[\\\"name\\\"]),
        str(unidecode(song_name)), 60\\n-                ),\\n-                ndigits=3,\\n-
        \           )\\n-        else:\\n-            name_match = round(\\n-                _match_percentage(\\n-
        \                   unidecode(result[\\\"name\\\"]), str(unidecode(song_title)),
        60\\n-                ),\\n-                ndigits=3,\\n-            )\\n-\\n-
        \       # skip results with name match of 0, these are obviously wrong\\n-
        \       # but can be identified as correct later on due to other factors\\n-
        \       # such as time_match or artist_match\\n-        if name_match == 0:\\n-
        \           continue\\n-\\n-        # Find album match\\n-        # ! We assign
        an arbitrary value of 0 for album match in case of video results\\n-        #
        ! from YouTube Music\\n-        album_match = 0.0\\n-        album = None\\n-\\n-
        \       if result[\\\"type\\\"] == \\\"song\\\":\\n-            album = result.get(\\\"album\\\")\\n-
        \           if album:\\n-                album_match = _match_percentage(album,
        song_album_name)\\n-\\n-        # Find duration match\\n-        # ! time
        match = 100 - (delta(duration)**2 / original duration * 100)\\n-        #
        ! difference in song duration (delta) is usually of the magnitude of a few\\n-
        \       # ! seconds, we need to amplify the delta if it is to have any meaningful
        impact\\n-        # ! wen we calculate the avg match value\\n-        delta
        = result[\\\"length\\\"] - song_duration\\n-        non_match_value = (delta**2)
        / song_duration * 100\\n-\\n-        time_match = 100 - non_match_value\\n-\\n-
        \       if result[\\\"type\\\"] == \\\"song\\\":\\n-            if album is
        None:\\n-                # Don't add album_match to average_match if song_name
        == result and\\n-                # result album name != song_album_name\\n-
        \               average_match = (artist_match + name_match + time_match) /
        3\\n-            elif (\\n-                _match_percentage(album.lower(),
        result[\\\"name\\\"].lower()) > 95\\n-                and album.lower() !=
        song_album_name.lower()\\n-            ):\\n-                average_match
        = (artist_match + name_match + time_match) / 3\\n-                # Add album
        to average_match if song_name == result album\\n-                # and result
        album name == song_album_name\\n-            else:\\n-                average_match
        = (\\n-                    artist_match + album_match + name_match + time_match\\n-
        \               ) / 4\\n-        else:\\n-            average_match = (artist_match
        + name_match + time_match) / 3\\n-        # Don't add album_match to average_match
        if we don't have information about the album\\n-        # name in the metadata\\n-\\n-
        \       # the results along with the avg Match\\n-        links_with_match_value[result[\\\"link\\\"]]
        = average_match\\n-\\n-    return links_with_match_value\\n-\\n-\\n-def _map_result_to_song_data(result:
        dict) -> dict:\\n-    song_data = {}\\n-    artists = \\\", \\\".join(map(lambda
        a: a[\\\"name\\\"], result[\\\"artists\\\"]))\\n-    video_id = result[\\\"videoId\\\"]\\n-\\n-
        \   # Ignore results without video id\\n-    if video_id is None:\\n-        return
        {}\\n-\\n-    song_data = {\\n-        \\\"name\\\": result[\\\"title\\\"],\\n-
        \       \\\"type\\\": result[\\\"resultType\\\"],\\n-        \\\"artist\\\":
        artists,\\n-        \\\"length\\\": _parse_duration(result.get(\\\"duration\\\",
        None)),\\n-        \\\"link\\\": f\\\"https://www.youtube.com/watch?v={video_id}\\\",\\n-
        \       \\\"position\\\": 0,\\n-    }\\n-\\n-    album = result.get(\\\"album\\\")\\n-
        \   if album:\\n-        song_data[\\\"album\\\"] = album[\\\"name\\\"]\\n-\\n-
        \   return song_data\\n-\\n-\\n-def _query_and_simplify(search_term: str,
        filter: str) -> List[dict]:\\n-    \\\"\\\"\\\"\\n-    `str` `searchTerm`
        : the search term you would type into YTM's search bar\\n-    `str` `filter`
        : Filter for item types\\n-\\n-    RETURNS `list<dict>`\\n-\\n-    For structure
        of dict, see comment at function declaration\\n-    \\\"\\\"\\\"\\n-\\n-    #
        ! For dict structure, see end of this function (~ln 268, ln 283) and chill,
        this\\n-    # ! function ain't soo big, there are plenty of comments and blank
        lines\\n-\\n-    # build and POST a query to YTM\\n-    search_results = ytm_client.search(search_term,
        filter=filter)\\n-\\n-    return list(map(_map_result_to_song_data, search_results))\"},{\"sha\":\"a92a956c4bced4c916e38230980ea48f548ababd\",\"filename\":\"spotdl/search/__init__.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":12,\"changes\":12,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2F__init__.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,12 +0,0 @@\\n-from spotdl.search.song_object import SongObject  # noqa:
        F401\\n-from spotdl.search.spotify_client import SpotifyClient  # noqa: F401\\n-from
        spotdl.search.song_gatherer import (\\n-    from_spotify_url,\\n-    from_search_term,\\n-
        \   from_album,\\n-    from_playlist,\\n-    from_artist,\\n-    from_saved_tracks,\\n-
        \   from_dump,\\n-)  # noqa: F401\\n-from spotdl.utils.song_name_utils import
        format_name  # noqa: F401\"},{\"sha\":\"d3f2d8ab008fe3d37011a46256d3e46031a46df7\",\"filename\":\"spotdl/search/song_gatherer.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":585,\"changes\":585,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_gatherer.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_gatherer.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2Fsong_gatherer.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,585 +0,0 @@\\n-import concurrent.futures\\n-\\n-from pathlib import Path\\n-from
        typing import Dict, List\\n-import platform\\n-\\n-from spotdl.providers import
        (\\n-    metadata_provider,\\n-    yt_provider,\\n-    ytm_provider,\\n-    provider_utils,\\n-
        \   lyrics_providers,\\n-)\\n-from spotdl.search import SongObject, SpotifyClient\\n-from
        spotdl.utils.song_name_utils import format_name\\n-from spotdl.providers.provider_utils
        import (\\n-    _get_converted_file_path,\\n-    _parse_path_template,\\n-)\\n-\\n-\\n-def
        from_spotify_url(\\n-    spotify_url: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-    playlist:
        dict = None,\\n-) -> SongObject:\\n-    \\\"\\\"\\\"\\n-    Creates song object
        using spotfy url\\n-\\n-    `str` `spotify_url` : spotify url used to create
        song object\\n-    `str` `output_format` : output format of the song\\n-\\n-
        \   returns a `SongObject`\\n-    \\\"\\\"\\\"\\n-\\n-    # Set default ouput
        format to mp3\\n-    if output_format is None:\\n-        output_format =
        \\\"mp3\\\"\\n-\\n-    # Get the Song Metadata\\n-    raw_track_meta, raw_artist_meta,
        raw_album_meta = metadata_provider.from_url(\\n-        spotify_url\\n-    )\\n-\\n-
        \   if raw_track_meta is None:\\n-        raise ValueError(\\\"Couldn't get
        metadata from url\\\")\\n-\\n-    song_name = raw_track_meta[\\\"name\\\"]\\n-
        \   album_name = raw_track_meta[\\\"album\\\"][\\\"name\\\"]\\n-    isrc =
        raw_track_meta.get(\\\"external_ids\\\", {}).get(\\\"isrc\\\")\\n-    duration
        = round(raw_track_meta[\\\"duration_ms\\\"] / 1000, ndigits=3)\\n-    contributing_artists
        = [artist[\\\"name\\\"] for artist in raw_track_meta[\\\"artists\\\"]]\\n-
        \   display_name = \\\", \\\".join(contributing_artists) + \\\" - \\\" + song_name\\n-\\n-
        \   # Create file name\\n-    converted_file_name = SongObject.create_file_name(\\n-
        \       song_name, [artist[\\\"name\\\"] for artist in raw_track_meta[\\\"artists\\\"]]\\n-
        \   )\\n-\\n-    # Ensure file name doesnt contain forbidden characters\\n-
        \   filesystem_display_name = display_name  # Create copy of display_name
        for filesystem use\\n-    if platform.system() == 'Windows':\\n-        for
        forbidden_letter in ['<', '>', ':', '\\\"', '/', '\\\\\\\\', '|', '?', '*']:\\n-
        \           converted_file_name = converted_file_name.replace(forbidden_letter,
        '')\\n-            filesystem_display_name = filesystem_display_name.replace(forbidden_letter,
        '')\\n-    else:  # Linux or MacOS\\n-        converted_file_name = converted_file_name.replace('/',
        '')\\n-        filesystem_display_name = filesystem_display_name.replace('/',
        '')\\n-\\n-    # If song name is too long use only first artist\\n-    if
        len(converted_file_name) > 250:\\n-        converted_file_name = SongObject.create_file_name(\\n-
        \           song_name, [raw_track_meta[\\\"artists\\\"][0][\\\"name\\\"]]\\n-
        \       )\\n-\\n-    converted_file_path = Path(\\\".\\\", f\\\"{converted_file_name}.{output_format}\\\")\\n-\\n-
        \   # Alternate file path.\\n-    alternate_file_path = Path(\\\".\\\", f\\\"{filesystem_display_name}.{output_format}\\\")\\n-\\n-
        \   # if a song is already downloaded skip it\\n-    if converted_file_path.is_file()
        or alternate_file_path.is_file():\\n-        print(f'Skipping \\\"{converted_file_name}\\\"
        as it\\\\'s already downloaded')\\n-        raise OSError(f\\\"{converted_file_name}
        already downloaded\\\")\\n-\\n-    # Get the song's downloadable audio link\\n-
        \   if use_youtube:\\n-        print(f'Searching YouTube for \\\"{display_name}\\\"',
        end=\\\"\\\\r\\\")\\n-        youtube_link = yt_provider.search_and_get_best_match(\\n-
        \           song_name, contributing_artists, duration, isrc\\n-        )\\n-
        \   else:\\n-        print(f'Searching YouTube Music for \\\"{display_name}\\\"',
        end=\\\"\\\\r\\\")\\n-        youtube_link = ytm_provider.search_and_get_best_match(\\n-
        \           song_name, contributing_artists, album_name, duration, isrc\\n-
        \       )\\n-\\n-    # Check if we found youtube url\\n-    if youtube_link
        is None:\\n-        print(\\n-            f'Could not match any of the results
        on YouTube for \\\"{display_name}\\\". Skipping'\\n-        )\\n-        raise
        LookupError(\\\"Could not match any of the results on YouTube for\\\")\\n-
        \   else:\\n-        print(\\\" \\\" * (len(display_name) + 25), end=\\\"\\\\r\\\")\\n-
        \       print(f'Found YouTube URL for \\\"{display_name}\\\" : {youtube_link}')\\n-\\n-
        \   # (try to) Get lyrics from musixmatch/genius\\n-    # use musixmatch as
        the default provider\\n-    if lyrics_provider == \\\"genius\\\":\\n-        lyrics
        = lyrics_providers.get_lyrics_genius(song_name, contributing_artists)\\n-
        \   else:\\n-        lyrics = lyrics_providers.get_lyrics_musixmatch(song_name,
        contributing_artists)\\n-\\n-    return SongObject(\\n-        raw_track_meta,
        raw_album_meta, raw_artist_meta, youtube_link, lyrics, playlist\\n-    )\\n-\\n-\\n-def
        from_search_term(\\n-    query: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-) ->
        List[SongObject]:\\n-    \\\"\\\"\\\"\\n-    Queries Spotify for a song and
        returns the best match\\n-\\n-    `str` `query` : what you'd type into Spotify's
        search box\\n-    `str` `output_format` : output format of the song\\n-\\n-
        \   returns a `list<SongObject>` containing Url's of each track in the given
        album\\n-    \\\"\\\"\\\"\\n-\\n-    # get a spotify client\\n-    spotify_client
        = SpotifyClient()\\n-\\n-    # get possible matches from spotify\\n-    result
        = spotify_client.search(query, type=\\\"track\\\")\\n-\\n-    # return first
        result link or if no matches are found, raise Exception\\n-    if result is
        None or len(result.get(\\\"tracks\\\", {}).get(\\\"items\\\", [])) == 0:\\n-
        \       raise Exception(\\\"No song matches found on Spotify\\\")\\n-    song_url
        = \\\"http://open.spotify.com/track/\\\" + result[\\\"tracks\\\"][\\\"items\\\"][0][\\\"id\\\"]\\n-
        \   try:\\n-        song = from_spotify_url(\\n-            song_url, output_format,
        use_youtube, lyrics_provider, None\\n-        )\\n-        return [song] if
        song.youtube_link is not None else []\\n-    except (LookupError, OSError,
        ValueError):\\n-        return []\\n-\\n-\\n-def from_album(\\n-    album_url:
        str,\\n-    output_format: str = None,\\n-    use_youtube: bool = False,\\n-
        \   lyrics_provider: str = None,\\n-    generate_m3u: bool = False,\\n-    threads:
        int = 1,\\n-    path_template: str = None,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-
        \   Create and return list containing SongObject for every song in the album\\n-\\n-
        \   `str` `album_url` : Spotify Url of the album whose tracks are to be retrieved\\n-
        \   `str` `output_format` : output format of the song\\n-\\n-    returns a
        `list<SongObject>` containing Url's of each track in the given album\\n-    \\\"\\\"\\\"\\n-\\n-
        \   spotify_client = SpotifyClient()\\n-    tracks = []\\n-\\n-    album_response
        = spotify_client.album_tracks(album_url)\\n-    if album_response is None:\\n-
        \       raise ValueError(\\\"Wrong album id\\\")\\n-\\n-    album_tracks =
        album_response[\\\"items\\\"]\\n-\\n-    # Get all tracks from album\\n-    while
        album_response[\\\"next\\\"]:\\n-        album_response = spotify_client.next(album_response)\\n-\\n-
        \       # Failed to get response, break the loop\\n-        if album_response
        is None:\\n-            break\\n-\\n-        album_tracks.extend(album_response[\\\"items\\\"])\\n-\\n-
        \   # Remove songs  without id\\n-    album_tracks = [\\n-        track\\n-
        \       for track in album_tracks\\n-        if track is not None and track.get(\\\"id\\\")
        is not None\\n-    ]\\n-\\n-    def get_tracks(track):\\n-        try:\\n-
        \           song = from_spotify_url(\\n-                \\\"https://open.spotify.com/track/\\\"
        + track[\\\"id\\\"],\\n-                output_format,\\n-                use_youtube,\\n-
        \               lyrics_provider,\\n-                None,\\n-            )\\n-\\n-
        \           if generate_m3u:\\n-                if path_template:\\n-                    file_path
        = _parse_path_template(path_template, song, output_format)\\n-                else:\\n-
        \                   file_path = _get_converted_file_path(song, output_format)\\n-\\n-
        \               return song, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return
        song, None\\n-        except (LookupError, ValueError):\\n-            return
        None, None\\n-        except OSError:\\n-            if generate_m3u:\\n-
        \               song_obj = SongObject(track, album_response, {}, None, \\\"\\\",
        None)\\n-                if path_template:\\n-                    file_path
        = _parse_path_template(\\n-                        path_template, song_obj,
        output_format\\n-                    )\\n-                else:\\n-                    file_path
        = _get_converted_file_path(song_obj, output_format)\\n-\\n-                return
        None, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return None, None\\n-\\n-
        \   with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:\\n-
        \       results = executor.map(get_tracks, album_tracks)\\n-\\n-    album_text
        = \\\"\\\"\\n-    for result in results:\\n-        if result[1] is not None:\\n-
        \           album_text += result[1]\\n-\\n-        if result[0] is not None
        and result[0].youtube_link is not None:\\n-            tracks.append(result[0])\\n-\\n-
        \   if album_response and generate_m3u is True:\\n-        album_data = spotify_client.album(album_url)\\n-\\n-
        \       if album_data is not None:\\n-            album_name = album_data[\\\"name\\\"]\\n-
        \       else:\\n-            album_name = album_tracks[0][\\\"name\\\"]\\n-\\n-
        \       album_name = format_name(album_name)\\n-\\n-        album_file = Path(f\\\"{album_name}.m3u\\\")\\n-\\n-
        \       with open(album_file, \\\"w\\\", encoding=\\\"utf-8\\\") as file:\\n-
        \           file.write(album_text)\\n-\\n-    return tracks\\n-\\n-\\n-def
        from_playlist(\\n-    playlist_url: str,\\n-    output_format: str = None,\\n-
        \   use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-    generate_m3u:
        bool = False,\\n-    threads: int = 1,\\n-    path_template: str = None,\\n-)
        -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-    Create and return list containing
        SongObject for every song in the playlist\\n-\\n-    `str` `album_url` : Spotify
        Url of the album whose tracks are to be retrieved\\n-    `str` `output_format`
        : output format of the song\\n-\\n-    returns a `list<SongObject>` containing
        Url's of each track in the given album\\n-    \\\"\\\"\\\"\\n-\\n-    spotify_client
        = SpotifyClient()\\n-    tracks = []\\n-\\n-    playlist_response = spotify_client.playlist_tracks(playlist_url)\\n-
        \   playlist = spotify_client.playlist(playlist_url)\\n-    if playlist_response
        is None:\\n-        raise ValueError(\\\"Wrong playlist id\\\")\\n-\\n-    playlist_tracks
        = [\\n-        track\\n-        for track in playlist_response[\\\"items\\\"]\\n-
        \       # check if track has id\\n-        if track is not None\\n-        and
        track.get(\\\"track\\\") is not None\\n-        and track[\\\"track\\\"].get(\\\"id\\\")
        is not None\\n-    ]\\n-\\n-    # Get all tracks from playlist\\n-    while
        playlist_response[\\\"next\\\"]:\\n-        playlist_response = spotify_client.next(playlist_response)\\n-\\n-
        \       # Failed to get response, break the loop\\n-        if playlist_response
        is None:\\n-            break\\n-\\n-        playlist_tracks.extend(playlist_response[\\\"items\\\"])\\n-\\n-
        \   # Remove songs  without id\\n-    playlist_tracks = [\\n-        track\\n-
        \       for track in playlist_tracks\\n-        if track is not None\\n-        and
        track.get(\\\"track\\\") is not None\\n-        and track[\\\"track\\\"].get(\\\"id\\\")
        is not None\\n-    ]\\n-\\n-    def get_song(track):\\n-        try:\\n-            song
        = from_spotify_url(\\n-                \\\"https://open.spotify.com/track/\\\"
        + track[\\\"track\\\"][\\\"id\\\"],\\n-                output_format,\\n-
        \               use_youtube,\\n-                lyrics_provider,\\n-                playlist,\\n-
        \           )\\n-\\n-            if generate_m3u:\\n-                if path_template:\\n-
        \                   file_path = _parse_path_template(path_template, song,
        output_format)\\n-                else:\\n-                    file_path =
        _get_converted_file_path(song, output_format)\\n-\\n-                return
        song, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return song, None\\n-        except
        (LookupError, ValueError):\\n-            return None, None\\n-        except
        OSError:\\n-            if generate_m3u:\\n-                song_obj = SongObject(\\n-
        \                   track[\\\"track\\\"], {}, {}, None, \\\"\\\", playlist_response\\n-
        \               )\\n-                if path_template:\\n-                    file_path
        = _parse_path_template(\\n-                        path_template, song_obj,
        output_format\\n-                    )\\n-                else:\\n-                    file_path
        = _get_converted_file_path(song_obj, output_format)\\n-\\n-                return
        None, f\\\"{file_path}\\\\n\\\"\\n-\\n-            return None, None\\n-\\n-
        \   with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:\\n-
        \       results = executor.map(get_song, playlist_tracks)\\n-\\n-    playlist_text
        = \\\"\\\"\\n-    for result in results:\\n-        if result[1] is not None:\\n-
        \           playlist_text += result[1]\\n-\\n-        if result[0] is not
        None and result[0].youtube_link is not None:\\n-            tracks.append(result[0])\\n-\\n-
        \   if playlist_response and generate_m3u is True:\\n-        playlist_data
        = spotify_client.playlist(playlist_url)\\n-\\n-        if playlist_data is
        not None:\\n-            playlist_name = playlist_data[\\\"name\\\"]\\n-        else:\\n-
        \           playlist_name = playlist_tracks[0][\\\"track\\\"][\\\"name\\\"]\\n-\\n-
        \       playlist_name = format_name(playlist_name)\\n-\\n-        playlist_file
        = Path(f\\\"{playlist_name}.m3u\\\")\\n-\\n-        with open(playlist_file,
        \\\"w\\\", encoding=\\\"utf-8\\\") as file:\\n-            file.write(playlist_text)\\n-\\n-
        \   return tracks\\n-\\n-\\n-def from_artist(\\n-    artist_url: str,\\n-
        \   output_format: str = None,\\n-    use_youtube: bool = False,\\n-    lyrics_provider:
        str = None,\\n-    threads: int = 1,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-
        \   `str` `artist_url` : Spotify Url of the artist whose tracks are to be\\n-
        \   retrieved\\n-    returns a `list<songObj>` containing Url's of each track
        in the artist profile\\n-    \\\"\\\"\\\"\\n-\\n-    spotify_client = SpotifyClient()\\n-\\n-
        \   artist_tracks = []\\n-\\n-    artist_response = spotify_client.artist_albums(\\n-
        \       artist_url, album_type=\\\"album,single\\\"\\n-    )\\n-    if artist_response
        is None:\\n-        raise ValueError(\\\"Wrong artist id\\\")\\n-\\n-    albums_list
        = artist_response[\\\"items\\\"]\\n-    albums_object: Dict[str, str] = {}\\n-\\n-
        \   # Fetch all artist albums\\n-    while artist_response and artist_response[\\\"next\\\"]:\\n-
        \       response = spotify_client.next(artist_response)\\n-        if response
        is None:\\n-            break\\n-\\n-        artist_response = response\\n-
        \       albums_list.extend(artist_response[\\\"items\\\"])\\n-\\n-    # Remove
        duplicate albums\\n-    for album in albums_list:\\n-        # return an iterable
        containing the string's alphanumeric characters\\n-        alpha_numeric_filter
        = filter(str.isalnum, album[\\\"name\\\"].lower())\\n-\\n-        # join all
        characters into one string\\n-        album_name = \\\"\\\".join(alpha_numeric_filter)\\n-\\n-
        \       if albums_object.get(album_name) is None:\\n-            albums_object[album_name]
        = album[\\\"uri\\\"]\\n-\\n-    tracks_list = []\\n-    tracks_object: Dict[str,
        str] = {}\\n-\\n-    # Fetch all tracks from all albums\\n-    for album_uri
        in albums_object.values():\\n-        response = spotify_client.album_tracks(album_uri)\\n-
        \       if response is None:\\n-            continue\\n-\\n-        album_response
        = response\\n-        album_tracks = album_response[\\\"items\\\"]\\n-\\n-
        \       while album_response[\\\"next\\\"]:\\n-            album_response
        = spotify_client.next(album_response)\\n-            if album_response is
        None:\\n-                break\\n-\\n-            album_tracks.extend(album_response[\\\"items\\\"])\\n-\\n-
        \       tracks_list.extend(album_tracks)\\n-\\n-    # Filter tracks to remove
        duplicates and songs without our artist\\n-    for track in tracks_list:\\n-
        \       # ignore None tracks or tracks without uri\\n-        if track is
        not None and track.get(\\\"uri\\\") is None:\\n-            continue\\n-\\n-
        \       # return an iterable containing the string's alphanumeric characters\\n-
        \       alphaNumericFilter = filter(str.isalnum, track[\\\"name\\\"].lower())\\n-\\n-
        \       # join all characters into one string\\n-        trackName = \\\"\\\".join(alphaNumericFilter)\\n-\\n-
        \       if tracks_object.get(trackName) is None:\\n-            for artist
        in track[\\\"artists\\\"]:\\n-                # get artist id from url\\n-
        \               # https://api.spotify.com/v1/artists/1fZAAHNWdSM5gqbi9o5iEA/albums\\n-
        \               #\\n-                # split string\\n-                #  ['https:',
        '', 'api.spotify.com', 'v1', 'artists',\\n-                #  '1fZAAHNWdSM5gqbi9o5iEA',
        'albums']\\n-                #\\n-                # get second element from
        the end\\n-                # '1fZAAHNWdSM5gqbi9o5iEA'\\n-                artistId
        = artist_response[\\\"href\\\"].split(\\\"/\\\")[-2]\\n-\\n-                #
        ignore tracks that are not from our artist by checking\\n-                #
        the id\\n-                if artist[\\\"id\\\"] == artistId:\\n-                    tracks_object[trackName]
        = track[\\\"uri\\\"]\\n-\\n-    # Create song objects from track ids\\n-    def
        get_song(track_uri):\\n-        try:\\n-            return from_spotify_url(\\n-
        \               f\\\"https://open.spotify.com/track/{track_uri.split(':')[-1]}\\\",\\n-
        \               output_format,\\n-                use_youtube,\\n-                lyrics_provider,\\n-
        \               None,\\n-            )\\n-        except (LookupError, ValueError,
        OSError):\\n-            return None\\n-\\n-    with concurrent.futures.ThreadPoolExecutor(max_workers=threads)
        as executor:\\n-        results = executor.map(get_song, tracks_object.values())\\n-\\n-
        \   for result in results:\\n-        if result is not None and result.youtube_link
        is not None:\\n-            artist_tracks.append(result)\\n-\\n-    return
        artist_tracks\\n-\\n-\\n-def from_saved_tracks(\\n-    output_format: str
        = None,\\n-    use_youtube: bool = False,\\n-    lyrics_provider: str = None,\\n-
        \   threads: int = 1,\\n-) -> List[SongObject]:\\n-    \\\"\\\"\\\"\\n-    Create
        and return list containing SongObject for every song that user has saved\\n-\\n-
        \   `str` `output_format` : output format of the song\\n-\\n-    returns a
        `list<songObj>` containing Url's of each track in the user's saved tracks\\n-
        \   \\\"\\\"\\\"\\n-\\n-    spotify_client = SpotifyClient()\\n-\\n-    saved_tracks_response
        = spotify_client.current_user_saved_tracks()\\n-    if saved_tracks_response
        is None:\\n-        raise Exception(\\\"Couldn't get saved tracks\\\")\\n-\\n-
        \   saved_tracks = saved_tracks_response[\\\"items\\\"]\\n-    tracks = []\\n-\\n-
        \   # Fetch all saved tracks\\n-    while saved_tracks_response and saved_tracks_response[\\\"next\\\"]:\\n-
        \       response = spotify_client.next(saved_tracks_response)\\n-        #
        response is wrong, break\\n-        if response is None:\\n-            break\\n-\\n-
        \       saved_tracks_response = response\\n-        saved_tracks.extend(saved_tracks_response[\\\"items\\\"])\\n-\\n-
        \   # Remove songs  without id\\n-    saved_tracks = [\\n-        track\\n-
        \       for track in saved_tracks\\n-        if track is not None\\n-        and
        track.get(\\\"track\\\") is not None\\n-        and track.get(\\\"track\\\",
        {}).get(\\\"id\\\") is not None\\n-    ]\\n-\\n-    def get_song(track):\\n-
        \       try:\\n-            return from_spotify_url(\\n-                \\\"https://open.spotify.com/track/\\\"
        + track[\\\"track\\\"][\\\"id\\\"],\\n-                output_format,\\n-
        \               use_youtube,\\n-                lyrics_provider,\\n-                None,\\n-
        \           )\\n-        except (LookupError, ValueError, OSError):\\n-            return
        None\\n-\\n-    with concurrent.futures.ThreadPoolExecutor(max_workers=threads)
        as executor:\\n-        results = executor.map(get_song, saved_tracks)\\n-\\n-
        \   for result in results:\\n-        if result is not None and result.youtube_link
        is not None:\\n-            tracks.append(result)\\n-\\n-    return tracks\\n-\\n-\\n-def
        from_dump(data_dump: dict) -> SongObject:\\n-    \\\"\\\"\\\"\\n-    Creates
        song object from data dump\\n-\\n-    `dict` `data_dump` : data dump used
        to create song object\\n-\\n-    returns `SongObject`\\n-    \\\"\\\"\\\"\\n-\\n-
        \   raw_track_meta = data_dump[\\\"raw_track_meta\\\"]\\n-    raw_album_meta
        = data_dump[\\\"raw_album_meta\\\"]\\n-    raw_artist_meta = data_dump[\\\"raw_artist_meta\\\"]\\n-
        \   youtube_link = data_dump[\\\"youtube_link\\\"]\\n-    lyrics = data_dump[\\\"lyrics\\\"]\\n-\\n-
        \   return SongObject(\\n-        raw_track_meta, raw_album_meta, raw_artist_meta,
        youtube_link, lyrics, None\\n-    )\"},{\"sha\":\"c1b371c268093afe8b586145cb93da44314bb821\",\"filename\":\"spotdl/search/song_object.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":209,\"changes\":209,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_object.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fsong_object.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2Fsong_object.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,209 +0,0 @@\\n-from typing import List, Optional\\n-\\n-from spotdl.utils.song_name_utils
        import format_name\\n-\\n-\\n-class SongObject:\\n-\\n-    # Constructor\\n-
        \   def __init__(\\n-        self,\\n-        raw_track_meta,\\n-        raw_album_meta,\\n-
        \       raw_artist_meta,\\n-        youtube_link,\\n-        lyrics,\\n-        playlist,\\n-
        \   ):\\n-        self._raw_track_meta = raw_track_meta\\n-        self._raw_album_meta
        = raw_album_meta\\n-        self._raw_artist_meta = raw_artist_meta\\n-        self._youtube_link
        = youtube_link\\n-        self._lyrics = lyrics\\n-        self._playlist
        = playlist\\n-\\n-    # Equals method\\n-    # for example song_obj1 == song_obj2\\n-
        \   def __eq__(self, compared_song) -> bool:\\n-        return compared_song.data_dump
        == self.data_dump\\n-\\n-    # ================================\\n-    # ===
        Interface Implementation ===\\n-    # ================================\\n-\\n-
        \   @property\\n-    def youtube_link(self) -> str:\\n-        \\\"\\\"\\\"\\n-
        \       returns youtube link\\n-        \\\"\\\"\\\"\\n-        return self._youtube_link\\n-\\n-
        \   @property\\n-    def song_name(self) -> str:\\n-        \\\"\\\"\\\"\\n-
        \       returns songs's name.\\n-        \\\"\\\"\\\"\\n-\\n-        return
        self._raw_track_meta[\\\"name\\\"]\\n-\\n-    @property\\n-    def track_number(self)
        -> int:\\n-        \\\"\\\"\\\"\\n-        returns song's track number from
        album (as in weather its the first\\n-        or second or third or fifth
        track in the album)\\n-        \\\"\\\"\\\"\\n-\\n-        return self._raw_track_meta[\\\"track_number\\\"]\\n-\\n-
        \   @property\\n-    def genres(self) -> List[str]:\\n-        \\\"\\\"\\\"\\n-
        \       returns a list of possible genres for the given song, the first member\\n-
        \       of the list is the most likely genre. returns None if genre data could\\n-
        \       not be found.\\n-        \\\"\\\"\\\"\\n-\\n-        return self._raw_album_meta[\\\"genres\\\"]
        + self._raw_artist_meta[\\\"genres\\\"]\\n-\\n-    @property\\n-    def duration(self)
        -> float:\\n-        \\\"\\\"\\\"\\n-        returns duration of song in seconds.\\n-
        \       \\\"\\\"\\\"\\n-\\n-        return round(self._raw_track_meta[\\\"duration_ms\\\"]
        / 1000, ndigits=3)\\n-\\n-    @property\\n-    def contributing_artists(self)
        -> List[str]:\\n-        \\\"\\\"\\\"\\n-        returns a list of all artists
        who worked on the song.\\n-        The first member of the list is likely
        the main artist.\\n-        \\\"\\\"\\\"\\n-\\n-        # we get rid of artist
        name that are in the song title so\\n-        # naming the song would be as
        easy as\\n-        # $contributingArtists + songName.mp3, we would want to
        end up with\\n-        # 'Jetta, Mastubs - I'd love to change the world (Mastubs
        remix).mp3'\\n-        # as a song name, it's dumb.\\n-        return [artist[\\\"name\\\"]
        for artist in self._raw_track_meta[\\\"artists\\\"]]\\n-\\n-    @property\\n-
        \   def disc_number(self) -> int:\\n-        return self._raw_track_meta[\\\"disc_number\\\"]\\n-\\n-
        \   @property\\n-    def lyrics(self):\\n-        \\\"\\\"\\\"\\n-        returns
        the lyrics of the song if found on musixmatch\\n-        \\\"\\\"\\\"\\n-\\n-
        \       return self._lyrics\\n-\\n-    @property\\n-    def display_name(self)
        -> str:\\n-        \\\"\\\"\\\"\\n-        returns songs's display name.\\n-
        \       \\\"\\\"\\\"\\n-\\n-        return str(\\\", \\\".join(self.contributing_artists)
        + \\\" - \\\" + self.song_name)\\n-\\n-    @property\\n-    def album_name(self)
        -> str:\\n-        \\\"\\\"\\\"\\n-        returns name of the album that
        the song belongs to.\\n-        \\\"\\\"\\\"\\n-\\n-        return self._raw_track_meta[\\\"album\\\"][\\\"name\\\"]\\n-\\n-
        \   @property\\n-    def album_artists(self) -> List[str]:\\n-        \\\"\\\"\\\"\\n-
        \       returns list of all artists who worked on the album that\\n-        the
        song belongs to. The first member of the list is likely the main\\n-        artist.\\n-
        \       \\\"\\\"\\\"\\n-\\n-        return [artist[\\\"name\\\"] for artist
        in self._raw_track_meta[\\\"album\\\"][\\\"artists\\\"]]\\n-\\n-    @property\\n-
        \   def album_release(self) -> str:\\n-        \\\"\\\"\\\"\\n-        returns
        date/year of album release depending on what data is available.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       return self._raw_track_meta[\\\"album\\\"][\\\"release_date\\\"]\\n-\\n-
        \   # ! Utilities for genuine use and also for metadata freaks:\\n-\\n-    @property\\n-
        \   def album_cover_url(self) -> Optional[str]:\\n-        \\\"\\\"\\\"\\n-
        \       returns url of the biggest album art image available.\\n-        \\\"\\\"\\\"\\n-\\n-
        \       images = self._raw_track_meta[\\\"album\\\"][\\\"images\\\"]\\n-\\n-
        \       if len(images) > 0:\\n-            return images[0][\\\"url\\\"]\\n-\\n-
        \       return None\\n-\\n-    @property\\n-    def playlist_name(self) ->
        Optional[str]:\\n-        \\\"\\\"\\\"\\n-        returns name of the playlist
        that the song belongs to.\\n-        \\\"\\\"\\\"\\n-\\n-        if self._playlist
        is None:\\n-            return None\\n-\\n-        return self._playlist[\\\"name\\\"]\\n-\\n-
        \   @property\\n-    def data_dump(self) -> dict:\\n-        \\\"\\\"\\\"\\n-
        \       returns a dictionary containing the spotify-api responses as-is. The\\n-
        \       dictionary keys are as follows:\\n-            - rawTrackMeta      spotify-api
        track details\\n-            - rawAlbumMeta      spotify-api song's album
        details\\n-            - rawArtistMeta     spotify-api song's artist details\\n-\\n-
        \       Avoid using this function, it is implemented here only for those super\\n-
        \       rare occasions where there is a need to look up other details. Why\\n-
        \       have to look it up seperately when it's already been looked up once?\\n-
        \       \\\"\\\"\\\"\\n-\\n-        # ! internally the only reason this exists
        is that it helps in saving to disk\\n-\\n-        return {\\n-            \\\"youtube_link\\\":
        self._youtube_link,\\n-            \\\"raw_track_meta\\\": self._raw_track_meta,\\n-
        \           \\\"raw_album_meta\\\": self._raw_album_meta,\\n-            \\\"raw_artist_meta\\\":
        self._raw_artist_meta,\\n-            \\\"lyrics\\\": self._lyrics,\\n-            \\\"playlist\\\":
        self._playlist,\\n-        }\\n-\\n-    @property\\n-    def file_name(self)
        -> str:\\n-        return self.create_file_name(\\n-            song_name=self._raw_track_meta[\\\"name\\\"],\\n-
        \           song_artists=[artist[\\\"name\\\"] for artist in self._raw_track_meta[\\\"artists\\\"]],\\n-
        \       )\\n-\\n-    @staticmethod\\n-    def create_file_name(song_name:
        str, song_artists: List[str]) -> str:\\n-        # build file name of converted
        file\\n-        # the main artist is always included\\n-        artist_string
        = song_artists[0]\\n-\\n-        # ! we eliminate contributing artist names
        that are also in the song name, else we\\n-        # ! would end up with things
        like 'Jetta, Mastubs - I'd love to change the world\\n-        # ! (Mastubs
        REMIX).mp3' which is kinda an odd file name.\\n-        for artist in song_artists[1:]:\\n-
        \           if artist.lower() not in song_name.lower():\\n-                artist_string
        += \\\", \\\" + artist\\n-\\n-        converted_file_name = artist_string
        + \\\" - \\\" + song_name\\n-\\n-        return format_name(converted_file_name)\"},{\"sha\":\"952d532151f3b945991922d33589f276f39009d6\",\"filename\":\"spotdl/search/spotify_client.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":79,\"changes\":79,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fspotify_client.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Fsearch%2Fspotify_client.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Fsearch%2Fspotify_client.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,79 +0,0 @@\\n-from spotipy import Spotify\\n-from spotipy.cache_handler
        import CacheFileHandler\\n-from spotipy.oauth2 import SpotifyClientCredentials,
        SpotifyOAuth\\n-\\n-\\n-class Singleton(type):\\n-    \\\"\\\"\\\"\\n-    Singleton
        metaclass for SpotifyClient. Ensures that SpotifyClient is not\\n-    instantiated
        without prior initialization. Every other instantiation of\\n-    SpotifyClient
        will return the same instance.\\n-    \\\"\\\"\\\"\\n-\\n-    _instance =
        None\\n-\\n-    def __call__(cls):\\n-        if cls._instance is None:\\n-
        \           raise Exception(\\n-                \\\"Spotify client not created.
        Call SpotifyClient.init\\\"\\n-                \\\"(client_id, client_secret,
        user_auth) first.\\\"\\n-            )\\n-        return cls._instance\\n-\\n-
        \   def init(cls, client_id: str, client_secret: str, user_auth: bool) ->
        \\\"Singleton\\\":\\n-        \\\"\\\"\\\"\\n-        `str` `client_id` :
        client id from your spotify account\\n-\\n-        `str` `client_secret` :
        client secret for your client id\\n-\\n-        `bool` `user_auth` : Determines
        if the Authorization Code Flow or\\n-                   the Client Credentials
        Flow is used\\n-\\n-        creates and caches a spotify client if a client
        doesn't exist. Can only be called\\n-        once, multiple calls will cause
        an Exception.\\n-        \\\"\\\"\\\"\\n-\\n-        # check if initialization
        has been completed, if yes, raise an Exception\\n-        if isinstance(cls._instance,
        cls):\\n-            raise Exception(\\\"A spotify client has already been
        initialized\\\")\\n-\\n-        credential_manager = None\\n-        cache_handler
        = CacheFileHandler(cache_path=\\\".spotdl-cache\\\")\\n-\\n-        # Use
        SpotifyOAuth as auth manager\\n-        if user_auth:\\n-            credential_manager
        = SpotifyOAuth(\\n-                client_id=client_id,\\n-                client_secret=client_secret,\\n-
        \               redirect_uri=\\\"http://127.0.0.1:8080/\\\",\\n-                scope=\\\"user-library-read\\\",\\n-
        \               cache_handler=cache_handler,\\n-            )\\n-        #
        Use SpotifyClientCredentials as auth manager\\n-        else:\\n-            credential_manager
        = SpotifyClientCredentials(\\n-                client_id=client_id,\\n-                client_secret=client_secret,\\n-
        \               cache_handler=cache_handler,\\n-            )\\n-\\n-        #
        Create instance\\n-        cls._instance = super().__call__(auth_manager=credential_manager)\\n-\\n-
        \       # Return instance\\n-        return cls._instance\\n-\\n-\\n-class
        SpotifyClient(Spotify, metaclass=Singleton):\\n-    \\\"\\\"\\\"\\n-    This
        is the Spotify client meant to be used in the app. Has to be initialized first
        by\\n-    calling `SpotifyClient.init(client_id, client_secret, user_auth)`.\\n-
        \   \\\"\\\"\\\"\\n-\\n-    _initialized = False\\n-\\n-    def __init__(self,
        user_auth=False, *args, **kwargs):\\n-        if user_auth:\\n-            self._user_auth
        = True\\n-        super().__init__(*args, **kwargs)\\n-        self._initialized
        = True\"},{\"sha\":\"ac8e242f850574fd203f0bcd6a5c8f8ab447932b\",\"filename\":\"spotdl/types/__init__.py\",\"status\":\"added\",\"additions\":3,\"deletions\":0,\"changes\":3,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,3 @@\\n+\\\"\\\"\\\"\\n+Types for the spotdl package.\\n+\\\"\\\"\\\"\"},{\"sha\":\"089b9bbe0936d707bec75fb25a502701707a749d\",\"filename\":\"spotdl/types/album.py\",\"status\":\"added\",\"additions\":118,\"deletions\":0,\"changes\":118,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Falbum.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Falbum.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Falbum.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,118 @@\\n+\\\"\\\"\\\"\\n+Artist module for retrieving artist data
        from Spotify.\\n+\\\"\\\"\\\"\\n+\\n+from dataclasses import dataclass\\n+from
        typing import Any, Dict, List, Tuple\\n+\\n+from spotdl.types.song import
        Song, SongList\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Album\\\", \\\"AlbumError\\\"]\\n+\\n+\\n+class AlbumError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to albums.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Album(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Album class for retrieving album data from Spotify.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    artist: Dict[str, Any]\\n+\\n+    @staticmethod\\n+
        \   def get_metadata(url: str) -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+
        \       Get metadata for album.\\n+\\n+        ### Arguments\\n+        -
        url: The URL of the album.\\n+\\n+        ### Returns\\n+        - A dictionary
        with metadata.\\n+        \\\"\\\"\\\"\\n+\\n+        spotify_client = SpotifyClient()\\n+\\n+
        \       album_metadata = spotify_client.album(url)\\n+        if album_metadata
        is None:\\n+            raise AlbumError(\\n+                \\\"Couldn't
        get metadata, check if you have passed correct album id\\\"\\n+            )\\n+\\n+
        \       metadata = {\\n+            \\\"name\\\": album_metadata[\\\"name\\\"],\\n+
        \           \\\"artist\\\": album_metadata[\\\"artists\\\"][0],\\n+            \\\"url\\\":
        url,\\n+        }\\n+\\n+        album_response = spotify_client.album_tracks(url)\\n+
        \       if album_response is None:\\n+            raise AlbumError(\\n+                \\\"Couldn't
        get metadata, check if you have passed correct album id\\\"\\n+            )\\n+\\n+
        \       tracks = album_response[\\\"items\\\"]\\n+\\n+        # Get all tracks
        from album\\n+        while album_response[\\\"next\\\"]:\\n+            album_response
        = spotify_client.next(album_response)\\n+\\n+            # Failed to get response,
        break the loop\\n+            if album_response is None:\\n+                break\\n+\\n+
        \           tracks.extend(album_response[\\\"items\\\"])\\n+\\n+        if
        album_response is None:\\n+            raise AlbumError(f\\\"Failed to get
        album response: {url}\\\")\\n+\\n+        songs = []\\n+        for track
        in tracks:\\n+            if not isinstance(track, dict) or track.get(\\\"is_local\\\"):\\n+
        \               continue\\n+\\n+            release_date = album_metadata[\\\"release_date\\\"]\\n+
        \           artists = artists = [artist[\\\"name\\\"] for artist in track[\\\"artists\\\"]]\\n+\\n+
        \           song = Song.from_missing_data(\\n+                name=track[\\\"name\\\"],\\n+
        \               artists=artists,\\n+                artist=artists[0],\\n+
        \               album_id=album_metadata[\\\"id\\\"],\\n+                album_name=album_metadata[\\\"name\\\"],\\n+
        \               album_artist=album_metadata[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \               album_type=album_metadata[\\\"album_type\\\"],\\n+                disc_number=track[\\\"disc_number\\\"],\\n+
        \               disc_count=int(album_metadata[\\\"tracks\\\"][\\\"items\\\"][-1][\\\"disc_number\\\"]),\\n+
        \               duration=int(track[\\\"duration_ms\\\"] / 1000),\\n+                year=release_date[:4],\\n+
        \               date=release_date,\\n+                track_number=track[\\\"track_number\\\"],\\n+
        \               tracks_count=album_metadata[\\\"total_tracks\\\"],\\n+                song_id=track[\\\"id\\\"],\\n+
        \               explicit=track[\\\"explicit\\\"],\\n+                publisher=album_metadata[\\\"label\\\"],\\n+
        \               url=track[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+                cover_url=(\\n+
        \                   max(\\n+                        album_metadata[\\\"images\\\"],
        key=lambda i: i[\\\"width\\\"] * i[\\\"height\\\"]\\n+                    )[\\\"url\\\"]\\n+
        \                   if album_metadata[\\\"images\\\"]\\n+                    else
        None\\n+                ),\\n+                copyright_text=(\\n+                    album_metadata[\\\"copyrights\\\"][0][\\\"text\\\"]\\n+
        \                   if album_metadata[\\\"copyrights\\\"]\\n+                    else
        None\\n+                ),\\n+            )\\n+\\n+            songs.append(song)\\n+\\n+
        \       return metadata, songs\"},{\"sha\":\"50239f35fb6e1f3ae0459841cbaef5c7ab5384bb\",\"filename\":\"spotdl/types/artist.py\",\"status\":\"added\",\"additions\":106,\"deletions\":0,\"changes\":106,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fartist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fartist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fartist.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,106 @@\\n+\\\"\\\"\\\"\\n+Artist module for retrieving artist data
        from Spotify.\\n+\\\"\\\"\\\"\\n+\\n+from dataclasses import dataclass\\n+from
        typing import Any, Dict, List, Set, Tuple\\n+\\n+from spotdl.types.album import
        Album\\n+from spotdl.types.song import Song, SongList\\n+from spotdl.utils.formatter
        import slugify\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Artist\\\", \\\"ArtistError\\\"]\\n+\\n+\\n+class ArtistError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to artists.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Artist(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Artist class.\\n+    Contains all the information
        about an artist.\\n+    Frozen to prevent accidental modification.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   genres: List[str]\\n+    albums: List[Album]\\n+\\n+    @staticmethod\\n+
        \   def get_metadata(url: str) -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+
        \       Get metadata for artist.\\n+\\n+        ### Arguments\\n+        -
        url: The URL of the artist.\\n+\\n+        ### Returns\\n+        - Dict with
        metadata for artist.\\n+        \\\"\\\"\\\"\\n+\\n+        # query spotify
        for artist details\\n+        spotify_client = SpotifyClient()\\n+\\n+        #
        get artist info\\n+        raw_artist_meta = spotify_client.artist(url)\\n+\\n+
        \       if raw_artist_meta is None:\\n+            raise ArtistError(\\n+
        \               \\\"Couldn't get metadata, check if you have passed correct
        artist id\\\"\\n+            )\\n+\\n+        artist_albums = spotify_client.artist_albums(url,
        album_type=\\\"album,single\\\")\\n+        # check if there is response\\n+
        \       if not artist_albums:\\n+            raise ArtistError(\\n+                \\\"Couldn't
        get albums, check if you have passed correct artist id\\\"\\n+            )\\n+\\n+
        \       # get artist albums and remove duplicates\\n+        # duplicates
        can occur if the artist has the same album available in\\n+        # different
        countries\\n+        albums: List[str] = []\\n+        known_albums: Set[str]
        = set()\\n+        for album in artist_albums[\\\"items\\\"]:\\n+            albums.append(album[\\\"external_urls\\\"][\\\"spotify\\\"])\\n+
        \           known_albums.add(slugify(album[\\\"name\\\"]))\\n+\\n+        #
        Fetch all artist albums\\n+        while artist_albums and artist_albums[\\\"next\\\"]:\\n+
        \           artist_albums = spotify_client.next(artist_albums)\\n+            if
        artist_albums is None:\\n+                break\\n+\\n+            for album
        in artist_albums[\\\"items\\\"]:\\n+                album_name = slugify(album[\\\"name\\\"])\\n+\\n+
        \               if album_name not in known_albums:\\n+                    albums.append(album[\\\"external_urls\\\"][\\\"spotify\\\"])\\n+
        \                   known_albums.add(album_name)\\n+\\n+        songs = []\\n+
        \       for album in albums:\\n+            album_obj = Album.from_url(album,
        fetch_songs=False)\\n+            songs.extend(album_obj.songs)\\n+\\n+        #
        Very aggressive deduplication\\n+        songs_list = []\\n+        songs_names
        = set()\\n+        for song in songs:\\n+            slug_name = slugify(song.name)\\n+
        \           if song.name not in songs_names:\\n+                songs_list.append(song)\\n+
        \               songs_names.add(slug_name)\\n+\\n+        metadata = {\\n+
        \           \\\"name\\\": raw_artist_meta[\\\"name\\\"],\\n+            \\\"genres\\\":
        raw_artist_meta[\\\"genres\\\"],\\n+            \\\"url\\\": url,\\n+            \\\"albums\\\":
        albums,\\n+        }\\n+\\n+        return metadata, songs_list\"},{\"sha\":\"bccf681d068b9cc3000495794430236a69bac9f6\",\"filename\":\"spotdl/types/options.py\",\"status\":\"added\",\"additions\":196,\"deletions\":0,\"changes\":196,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Foptions.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Foptions.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Foptions.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,196 @@\\n+\\\"\\\"\\\"\\n+This file contains types for spotdl/downloader/web
        modules.\\n+Options types have all the fields marked as required.\\n+Settings
        types have all the fields marked as optional.\\n+\\\"\\\"\\\"\\n+\\n+from
        typing import List, Optional, Union\\n+\\n+from typing_extensions import TypedDict\\n+\\n+__all__
        = [\\n+    \\\"SpotifyOptions\\\",\\n+    \\\"DownloaderOptions\\\",\\n+    \\\"WebOptions\\\",\\n+
        \   \\\"SpotDLOptions\\\",\\n+    \\\"SpotifyOptionalOptions\\\",\\n+    \\\"DownloaderOptionalOptions\\\",\\n+
        \   \\\"WebOptionalOptions\\\",\\n+    \\\"SpotDLOptionalOptions\\\",\\n+]\\n+\\n+\\n+class
        SpotifyOptions(TypedDict):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing
        the Spotify client.\\n+    \\\"\\\"\\\"\\n+\\n+    client_id: str\\n+    client_secret:
        str\\n+    auth_token: Optional[str]\\n+    user_auth: bool\\n+    headless:
        bool\\n+    cache_path: str\\n+    no_cache: bool\\n+    max_retries: int\\n+
        \   use_cache_file: bool\\n+\\n+\\n+class DownloaderOptions(TypedDict):\\n+
        \   \\\"\\\"\\\"\\n+    Options used for initializing the Downloader.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    audio_providers: List[str]\\n+    lyrics_providers:
        List[str]\\n+    playlist_numbering: bool\\n+    scan_for_songs: bool\\n+
        \   m3u: Optional[str]\\n+    output: str\\n+    overwrite: str\\n+    search_query:
        Optional[str]\\n+    ffmpeg: str\\n+    bitrate: Optional[Union[str, int]]\\n+
        \   ffmpeg_args: Optional[str]\\n+    format: str\\n+    save_file: Optional[str]\\n+
        \   filter_results: bool\\n+    album_type: Optional[str]\\n+    threads:
        int\\n+    cookie_file: Optional[str]\\n+    restrict: Optional[str]\\n+    print_errors:
        bool\\n+    sponsor_block: bool\\n+    preload: bool\\n+    archive: Optional[str]\\n+
        \   load_config: bool\\n+    log_level: str\\n+    simple_tui: bool\\n+    fetch_albums:
        bool\\n+    id3_separator: str\\n+    ytm_data: bool\\n+    add_unavailable:
        bool\\n+    generate_lrc: bool\\n+    force_update_metadata: bool\\n+    only_verified_results:
        bool\\n+    sync_without_deleting: bool\\n+    max_filename_length: Optional[int]\\n+
        \   yt_dlp_args: Optional[str]\\n+    detect_formats: Optional[List[str]]\\n+
        \   save_errors: Optional[str]\\n+    ignore_albums: Optional[List[str]]\\n+
        \   proxy: Optional[str]\\n+    skip_explicit: Optional[bool]\\n+    log_format:
        Optional[str]\\n+    redownload: Optional[bool]\\n+    skip_album_art: Optional[bool]\\n+
        \   create_skip_file: Optional[bool]\\n+    respect_skip_file: Optional[bool]\\n+\\n+\\n+class
        WebOptions(TypedDict):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing
        the Web server.\\n+    \\\"\\\"\\\"\\n+\\n+    web_use_output_dir: bool\\n+
        \   port: int\\n+    host: str\\n+    keep_alive: bool\\n+    allowed_origins:
        Optional[List[str]]\\n+    keep_sessions: bool\\n+\\n+\\n+class SpotDLOptions(SpotifyOptions,
        DownloaderOptions, WebOptions):\\n+    \\\"\\\"\\\"\\n+    Options used for
        initializing the SpotDL client.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+class SpotifyOptionalOptions(TypedDict,
        total=False):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing the
        Spotify client.\\n+    \\\"\\\"\\\"\\n+\\n+    client_id: str\\n+    client_secret:
        str\\n+    auth_token: Optional[str]\\n+    user_auth: bool\\n+    headless:
        bool\\n+    cache_path: str\\n+    no_cache: bool\\n+    max_retries: int\\n+
        \   use_cache_file: bool\\n+\\n+\\n+class DownloaderOptionalOptions(TypedDict,
        total=False):\\n+    \\\"\\\"\\\"\\n+    Options used for initializing the
        Downloader.\\n+    \\\"\\\"\\\"\\n+\\n+    audio_providers: List[str]\\n+
        \   lyrics_providers: List[str]\\n+    playlist_numbering: bool\\n+    scan_for_songs:
        bool\\n+    m3u: Optional[str]\\n+    output: str\\n+    overwrite: str\\n+
        \   search_query: Optional[str]\\n+    ffmpeg: str\\n+    bitrate: Optional[Union[str,
        int]]\\n+    ffmpeg_args: Optional[str]\\n+    format: str\\n+    save_file:
        Optional[str]\\n+    filter_results: bool\\n+    album_type: Optional[str]\\n+
        \   threads: int\\n+    cookie_file: Optional[str]\\n+    restrict: Optional[str]\\n+
        \   print_errors: bool\\n+    sponsor_block: bool\\n+    preload: bool\\n+
        \   archive: Optional[str]\\n+    load_config: bool\\n+    log_level: str\\n+
        \   simple_tui: bool\\n+    fetch_albums: bool\\n+    id3_separator: str\\n+
        \   ytm_data: bool\\n+    add_unavailable: bool\\n+    generate_lrc: bool\\n+
        \   force_update_metadata: bool\\n+    only_verified_results: bool\\n+    sync_without_deleting:
        bool\\n+    max_filename_length: Optional[int]\\n+    yt_dlp_args: Optional[str]\\n+
        \   detect_formats: Optional[List[str]]\\n+    save_errors: Optional[str]\\n+
        \   proxy: Optional[str]\\n+    skip_explicit: Optional[bool]\\n+    log_format:
        Optional[str]\\n+    redownload: Optional[bool]\\n+    skip_album_art: Optional[bool]\\n+
        \   create_skip_file: Optional[bool]\\n+    respect_skip_file: Optional[bool]\\n+\\n+\\n+class
        WebOptionalOptions(TypedDict, total=False):\\n+    \\\"\\\"\\\"\\n+    Options
        used for initializing the Web server.\\n+    \\\"\\\"\\\"\\n+\\n+    web_use_output_dir:
        bool\\n+    port: int\\n+    host: str\\n+    keep_alive: bool\\n+    allowed_origins:
        Optional[str]\\n+    keep_sessions: bool\\n+\\n+\\n+class SpotDLOptionalOptions(\\n+
        \   SpotifyOptionalOptions, DownloaderOptionalOptions, WebOptionalOptions\\n+):\\n+
        \   \\\"\\\"\\\"\\n+    Options used for initializing the SpotDL client.\\n+
        \   This type is modified to not require all the fields.\\n+    \\\"\\\"\\\"\"},{\"sha\":\"c2bc3f49138c30196004180287345dc268e94922\",\"filename\":\"spotdl/types/playlist.py\",\"status\":\"added\",\"additions\":144,\"deletions\":0,\"changes\":144,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fplaylist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fplaylist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fplaylist.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,144 @@\\n+\\\"\\\"\\\"\\n+Playlist module for retrieving playlist
        data from Spotify.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+from dataclasses
        import dataclass\\n+from typing import Any, Dict, List, Tuple\\n+\\n+from
        spotdl.types.song import Song, SongList\\n+from spotdl.utils.spotify import
        SpotifyClient\\n+\\n+__all__ = [\\\"Playlist\\\", \\\"PlaylistError\\\"]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class PlaylistError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to playlists.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Playlist(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Playlist class for retrieving playlist data from Spotify.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    description: str\\n+    author_url: str\\n+    author_name:
        str\\n+    cover_url: str\\n+\\n+    @staticmethod\\n+    def get_metadata(url:
        str) -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+        Get
        metadata for a playlist.\\n+\\n+        ### Arguments\\n+        - url: The
        URL of the playlist.\\n+\\n+        ### Returns\\n+        - A dictionary
        with metadata.\\n+        \\\"\\\"\\\"\\n+\\n+        spotify_client = SpotifyClient()\\n+\\n+
        \       playlist = spotify_client.playlist(url)\\n+        if playlist is
        None:\\n+            raise PlaylistError(\\\"Invalid playlist URL.\\\")\\n+\\n+
        \       metadata = {\\n+            \\\"name\\\": playlist[\\\"name\\\"],\\n+
        \           \\\"url\\\": url,\\n+            \\\"description\\\": playlist[\\\"description\\\"],\\n+
        \           \\\"author_url\\\": playlist[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \           \\\"author_name\\\": playlist[\\\"owner\\\"][\\\"display_name\\\"],\\n+
        \           \\\"cover_url\\\": (\\n+                max(\\n+                    playlist[\\\"images\\\"],\\n+
        \                   key=lambda i: (\\n+                        0\\n+                        if
        i[\\\"width\\\"] is None or i[\\\"height\\\"] is None\\n+                        else
        i[\\\"width\\\"] * i[\\\"height\\\"]\\n+                    ),\\n+                )[\\\"url\\\"]\\n+
        \               if (len(playlist[\\\"images\\\"]) > 0)\\n+                else
        \\\"\\\"\\n+            ),\\n+        }\\n+\\n+        playlist_response =
        spotify_client.playlist_items(url)\\n+        if playlist_response is None:\\n+
        \           raise PlaylistError(f\\\"Wrong playlist id: {url}\\\")\\n+\\n+
        \       # Get all tracks from playlist\\n+        tracks = playlist_response[\\\"items\\\"]\\n+
        \       while playlist_response[\\\"next\\\"]:\\n+            playlist_response
        = spotify_client.next(playlist_response)\\n+\\n+            # Failed to get
        response, break the loop\\n+            if playlist_response is None:\\n+
        \               break\\n+\\n+            # Add tracks to the list\\n+            tracks.extend(playlist_response[\\\"items\\\"])\\n+\\n+
        \       songs = []\\n+        for track in tracks:\\n+            if not isinstance(track,
        dict) or track.get(\\\"track\\\") is None:\\n+                continue\\n+\\n+
        \           track_meta = track[\\\"track\\\"]\\n+\\n+            if track_meta.get(\\\"is_local\\\")
        or track_meta.get(\\\"type\\\") != \\\"track\\\":\\n+                logger.warning(\\n+
        \                   \\\"Skipping track: %s local tracks and %s are not supported\\\",\\n+
        \                   track_meta.get(\\\"id\\\"),\\n+                    track_meta.get(\\\"type\\\"),\\n+
        \               )\\n+\\n+                continue\\n+\\n+            track_id
        = track_meta.get(\\\"id\\\")\\n+            if track_id is None or track_meta.get(\\\"duration_ms\\\")
        == 0:\\n+                continue\\n+\\n+            album_meta = track_meta.get(\\\"album\\\",
        {})\\n+            release_date = album_meta.get(\\\"release_date\\\")\\n+
        \           artists = [artist[\\\"name\\\"] for artist in track_meta.get(\\\"artists\\\",
        [])]\\n+            song = Song.from_missing_data(\\n+                name=track_meta[\\\"name\\\"],\\n+
        \               artists=artists,\\n+                artist=artists[0],\\n+
        \               album_id=album_meta.get(\\\"id\\\"),\\n+                album_name=album_meta.get(\\\"name\\\"),\\n+
        \               album_artist=(\\n+                    album_meta.get(\\\"artists\\\",
        [])[0][\\\"name\\\"]\\n+                    if album_meta.get(\\\"artists\\\")\\n+
        \                   else None\\n+                ),\\n+                album_type=album_meta.get(\\\"album_type\\\"),\\n+
        \               disc_number=track_meta[\\\"disc_number\\\"],\\n+                duration=int(track_meta[\\\"duration_ms\\\"]
        / 1000),\\n+                year=release_date[:4] if release_date else None,\\n+
        \               date=release_date,\\n+                track_number=track_meta[\\\"track_number\\\"],\\n+
        \               tracks_count=album_meta.get(\\\"total_tracks\\\"),\\n+                song_id=track_meta[\\\"id\\\"],\\n+
        \               explicit=track_meta[\\\"explicit\\\"],\\n+                url=track_meta[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \               isrc=track_meta.get(\\\"external_ids\\\", {}).get(\\\"isrc\\\"),\\n+
        \               cover_url=(\\n+                    max(album_meta[\\\"images\\\"],
        key=lambda i: i[\\\"width\\\"] * i[\\\"height\\\"])[\\n+                        \\\"url\\\"\\n+
        \                   ]\\n+                    if (len(album_meta.get(\\\"images\\\",
        [])) > 0)\\n+                    else None\\n+                ),\\n+            )\\n+\\n+
        \           songs.append(song)\\n+\\n+        return metadata, songs\"},{\"sha\":\"1ed9086d89a3a47487fd0d21ae7aebdc1a4987cb\",\"filename\":\"spotdl/types/result.py\",\"status\":\"added\",\"additions\":87,\"deletions\":0,\"changes\":87,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fresult.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fresult.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fresult.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,87 @@\\n+\\\"\\\"\\\"\\n+Result is a class that contains all the information
        about a result from search\\n+performed by audio provider.\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+from dataclasses import asdict, dataclass\\n+from typing import Any,
        Dict, Optional, Tuple\\n+\\n+__all__ = [\\\"Result\\\"]\\n+\\n+\\n+@dataclass(frozen=True,
        eq=True)\\n+class Result:\\n+    \\\"\\\"\\\"\\n+    Result is a class that
        contains all the information about a result from search\\n+    perfoermed
        by audio provider.\\n+    \\\"\\\"\\\"\\n+\\n+    # Required fields\\n+    source:
        str  # Source of the result\\n+    url: str  # URL of the result\\n+    verified:
        bool  # Whether the result is from a verified source or not\\n+    name: str
        \ # Name of the result\\n+    duration: float  # Duration of the result in
        seconds\\n+    author: str  # Author of the result\\n+    result_id: str  #
        ID of the result\\n+\\n+    # Search related fields\\n+    isrc_search: Optional[bool]
        = (\\n+        None  # Whether the result is from an ISRC search or not\\n+
        \   )\\n+    search_query: Optional[str] = None  # The search query used to
        find the result\\n+\\n+    # Optional fields\\n+    artists: Optional[Tuple[str,
        ...]] = None\\n+    views: Optional[int] = None\\n+    explicit: Optional[bool]
        = None\\n+    album: Optional[str] = None\\n+    year: Optional[int] = None\\n+
        \   track_number: Optional[int] = None\\n+    genre: Optional[str] = None\\n+
        \   lyrics: Optional[str] = None\\n+\\n+    @classmethod\\n+    def from_data_dump(cls,
        data: str) -> \\\"Result\\\":\\n+        \\\"\\\"\\\"\\n+        Create a
        Result object from a data dump.\\n+\\n+        ### Arguments\\n+        -
        data: The data dump.\\n+\\n+        ### Returns\\n+        - The Song object.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # Create dict from json string\\n+        data_dict
        = json.loads(data)\\n+\\n+        # Return product object\\n+        return
        cls(**data_dict)\\n+\\n+    @classmethod\\n+    def from_dict(cls, data: Dict[str,
        Any]) -> \\\"Result\\\":\\n+        \\\"\\\"\\\"\\n+        Create a Song
        object from a dictionary.\\n+\\n+        ### Arguments\\n+        - data:
        The dictionary.\\n+\\n+        ### Returns\\n+        - The Song object.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # Return product object\\n+        return
        cls(**data)\\n+\\n+    @property\\n+    def json(self) -> Dict[str, Any]:\\n+
        \       \\\"\\\"\\\"\\n+        Returns a dictionary of the song's data.\\n+\\n+
        \       ### Returns\\n+        - The dictionary.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return asdict(self)\"},{\"sha\":\"50114f6a44bd6ed29055ab99af9935841ca5db79\",\"filename\":\"spotdl/types/saved.py\",\"status\":\"added\",\"additions\":100,\"deletions\":0,\"changes\":100,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fsaved.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fsaved.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fsaved.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,100 @@\\n+\\\"\\\"\\\"\\n+Saved module for handing the saved tracks
        from user library\\n+\\\"\\\"\\\"\\n+\\n+from dataclasses import dataclass\\n+from
        typing import Any, Dict, List, Tuple\\n+\\n+from spotdl.types.song import
        Song, SongList\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Saved\\\", \\\"SavedError\\\"]\\n+\\n+\\n+class SavedError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to saved tracks.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+@dataclass(frozen=True)\\n+class Saved(SongList):\\n+
        \   \\\"\\\"\\\"\\n+    Saved class for handling the saved tracks from user
        library.\\n+    \\\"\\\"\\\"\\n+\\n+    @staticmethod\\n+    def get_metadata(url:
        str = \\\"saved\\\") -> Tuple[Dict[str, Any], List[Song]]:\\n+        \\\"\\\"\\\"\\n+
        \       Returns metadata for a saved list.\\n+\\n+        ### Arguments\\n+
        \       - url: Not required, but used to match the signature of the other
        get_metadata methods.\\n+\\n+        ### Returns\\n+        - metadata: A
        dictionary containing the metadata for the saved list.\\n+        - songs:
        A list of Song objects.\\n+        \\\"\\\"\\\"\\n+\\n+        metadata =
        {\\\"name\\\": \\\"Saved tracks\\\", \\\"url\\\": url}\\n+\\n+        spotify_client
        = SpotifyClient()\\n+        if spotify_client.user_auth is False:  # type:
        ignore\\n+            raise SavedError(\\\"You must be logged in to use this
        function\\\")\\n+\\n+        saved_tracks_response = spotify_client.current_user_saved_tracks()\\n+
        \       if saved_tracks_response is None:\\n+            raise SavedError(\\\"Couldn't
        get saved tracks\\\")\\n+\\n+        saved_tracks = saved_tracks_response[\\\"items\\\"]\\n+\\n+
        \       # Fetch all saved tracks\\n+        while saved_tracks_response and
        saved_tracks_response[\\\"next\\\"]:\\n+            response = spotify_client.next(saved_tracks_response)\\n+
        \           if response is None:\\n+                break\\n+\\n+            saved_tracks_response
        = response\\n+            saved_tracks.extend(saved_tracks_response[\\\"items\\\"])\\n+\\n+
        \       songs = []\\n+        for track in saved_tracks:\\n+            if
        not isinstance(track, dict) or track.get(\\\"track\\\", {}).get(\\\"is_local\\\"):\\n+
        \               continue\\n+\\n+            track_meta = track[\\\"track\\\"]\\n+
        \           album_meta = track_meta[\\\"album\\\"]\\n+\\n+            release_date
        = album_meta[\\\"release_date\\\"]\\n+            artists = artists = [artist[\\\"name\\\"]
        for artist in track_meta[\\\"artists\\\"]]\\n+\\n+            song = Song.from_missing_data(\\n+
        \               name=track_meta[\\\"name\\\"],\\n+                artists=artists,\\n+
        \               artist=artists[0],\\n+                album_id=album_meta[\\\"id\\\"],\\n+
        \               album_name=album_meta[\\\"name\\\"],\\n+                album_artist=album_meta[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \               album_type=album_meta[\\\"album_type\\\"],\\n+                disc_number=track_meta[\\\"disc_number\\\"],\\n+
        \               duration=int(track_meta[\\\"duration_ms\\\"] / 1000),\\n+
        \               year=release_date[:4],\\n+                date=release_date,\\n+
        \               track_number=track_meta[\\\"track_number\\\"],\\n+                tracks_count=album_meta[\\\"total_tracks\\\"],\\n+
        \               song_id=track_meta[\\\"id\\\"],\\n+                explicit=track_meta[\\\"explicit\\\"],\\n+
        \               url=track_meta[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \               isrc=track_meta.get(\\\"external_ids\\\", {}).get(\\\"isrc\\\"),\\n+
        \               cover_url=(\\n+                    max(album_meta[\\\"images\\\"],
        key=lambda i: i[\\\"width\\\"] * i[\\\"height\\\"])[\\n+                        \\\"url\\\"\\n+
        \                   ]\\n+                    if album_meta[\\\"images\\\"]\\n+
        \                   else None\\n+                ),\\n+            )\\n+\\n+
        \           songs.append(song)\\n+\\n+        return metadata, songs\"},{\"sha\":\"e0e060e11c8b6ecd2474b057e77b81467f625dcc\",\"filename\":\"spotdl/types/song.py\",\"status\":\"added\",\"additions\":384,\"deletions\":0,\"changes\":384,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fsong.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Ftypes%2Fsong.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Ftypes%2Fsong.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,384 @@\\n+\\\"\\\"\\\"\\n+Song module that hold the Song and SongList
        classes.\\n+\\\"\\\"\\\"\\n+\\n+import json\\n+from dataclasses import asdict,
        dataclass\\n+from typing import Any, Dict, List, Optional, Tuple\\n+\\n+from
        rapidfuzz import fuzz\\n+\\n+from spotdl.utils.spotify import SpotifyClient\\n+\\n+__all__
        = [\\\"Song\\\", \\\"SongList\\\", \\\"SongError\\\"]\\n+\\n+\\n+class SongError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to songs.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class SongListError(Exception):\\n+    \\\"\\\"\\\"\\n+
        \   Base class for all exceptions related to song lists.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+@dataclass\\n+class
        Song:\\n+    \\\"\\\"\\\"\\n+    Song class. Contains all the information
        about a song.\\n+    \\\"\\\"\\\"\\n+\\n+    name: str\\n+    artists: List[str]\\n+
        \   artist: str\\n+    genres: List[str]\\n+    disc_number: int\\n+    disc_count:
        int\\n+    album_name: str\\n+    album_artist: str\\n+    album_type: str\\n+
        \   duration: int\\n+    year: int\\n+    date: str\\n+    track_number: int\\n+
        \   tracks_count: int\\n+    song_id: str\\n+    explicit: bool\\n+    publisher:
        str\\n+    url: str\\n+    isrc: Optional[str]\\n+    cover_url: Optional[str]\\n+
        \   copyright_text: Optional[str]\\n+    download_url: Optional[str] = None\\n+
        \   lyrics: Optional[str] = None\\n+    popularity: Optional[int] = None\\n+
        \   album_id: Optional[str] = None\\n+    list_name: Optional[str] = None\\n+
        \   list_url: Optional[str] = None\\n+    list_position: Optional[int] = None\\n+
        \   list_length: Optional[int] = None\\n+    artist_id: Optional[str] = None\\n+\\n+
        \   @classmethod\\n+    def from_url(cls, url: str) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+
        \       Creates a Song object from a URL.\\n+\\n+        ### Arguments\\n+
        \       - url: The URL of the song.\\n+\\n+        ### Returns\\n+        -
        The Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        if \\\"open.spotify.com\\\"
        not in url or \\\"track\\\" not in url:\\n+            raise SongError(f\\\"Invalid
        URL: {url}\\\")\\n+\\n+        # query spotify for song, artist, album details\\n+
        \       spotify_client = SpotifyClient()\\n+\\n+        # get track info\\n+
        \       raw_track_meta = spotify_client.track(url)\\n+\\n+        if raw_track_meta
        is None:\\n+            raise SongError(\\n+                \\\"Couldn't get
        metadata, check if you have passed correct track id\\\"\\n+            )\\n+\\n+
        \       if raw_track_meta[\\\"duration_ms\\\"] == 0 or raw_track_meta[\\\"name\\\"].strip()
        == \\\"\\\":\\n+            raise SongError(f\\\"Track no longer exists: {url}\\\")\\n+\\n+
        \       # get artist info\\n+        primary_artist_id = raw_track_meta[\\\"artists\\\"][0][\\\"id\\\"]\\n+
        \       raw_artist_meta: Dict[str, Any] = spotify_client.artist(primary_artist_id)
        \ # type: ignore\\n+\\n+        # get album info\\n+        album_id = raw_track_meta[\\\"album\\\"][\\\"id\\\"]\\n+
        \       raw_album_meta: Dict[str, Any] = spotify_client.album(album_id)  #
        type: ignore\\n+\\n+        # create song object\\n+        return cls(\\n+
        \           name=raw_track_meta[\\\"name\\\"],\\n+            artists=[artist[\\\"name\\\"]
        for artist in raw_track_meta[\\\"artists\\\"]],\\n+            artist=raw_track_meta[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \           artist_id=primary_artist_id,\\n+            album_id=album_id,\\n+
        \           album_name=raw_album_meta[\\\"name\\\"],\\n+            album_artist=raw_album_meta[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \           album_type=raw_album_meta[\\\"album_type\\\"],\\n+            copyright_text=(\\n+
        \               raw_album_meta[\\\"copyrights\\\"][0][\\\"text\\\"]\\n+                if
        raw_album_meta[\\\"copyrights\\\"]\\n+                else None\\n+            ),\\n+
        \           genres=raw_album_meta[\\\"genres\\\"] + raw_artist_meta[\\\"genres\\\"],\\n+
        \           disc_number=raw_track_meta[\\\"disc_number\\\"],\\n+            disc_count=int(raw_album_meta[\\\"tracks\\\"][\\\"items\\\"][-1][\\\"disc_number\\\"]),\\n+
        \           duration=int(raw_track_meta[\\\"duration_ms\\\"] / 1000),\\n+
        \           year=int(raw_album_meta[\\\"release_date\\\"][:4]),\\n+            date=raw_album_meta[\\\"release_date\\\"],\\n+
        \           track_number=raw_track_meta[\\\"track_number\\\"],\\n+            tracks_count=raw_album_meta[\\\"total_tracks\\\"],\\n+
        \           isrc=raw_track_meta.get(\\\"external_ids\\\", {}).get(\\\"isrc\\\"),\\n+
        \           song_id=raw_track_meta[\\\"id\\\"],\\n+            explicit=raw_track_meta[\\\"explicit\\\"],\\n+
        \           publisher=raw_album_meta[\\\"label\\\"],\\n+            url=raw_track_meta[\\\"external_urls\\\"][\\\"spotify\\\"],\\n+
        \           popularity=raw_track_meta[\\\"popularity\\\"],\\n+            cover_url=(\\n+
        \               max(raw_album_meta[\\\"images\\\"], key=lambda i: i[\\\"width\\\"]
        * i[\\\"height\\\"])[\\n+                    \\\"url\\\"\\n+                ]\\n+
        \               if raw_album_meta[\\\"images\\\"]\\n+                else
        None\\n+            ),\\n+        )\\n+\\n+    @staticmethod\\n+    def search(search_term:
        str):\\n+        \\\"\\\"\\\"\\n+        Searches for Songs from a search
        term.\\n+\\n+        ### Arguments\\n+        - search_term: The search term
        to use.\\n+\\n+        ### Returns\\n+        - The raw search results\\n+
        \       \\\"\\\"\\\"\\n+        spotify_client = SpotifyClient()\\n+        raw_search_results
        = spotify_client.search(search_term)\\n+\\n+        if raw_search_results
        is None:\\n+            raise SongError(f\\\"Spotipy error, no response: {search_term}\\\")\\n+\\n+
        \       return raw_search_results\\n+\\n+    @classmethod\\n+    def from_search_term(cls,
        search_term: str) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+        Creates
        a list of Song objects from a search term.\\n+\\n+        ### Arguments\\n+
        \       - search_term: The search term to use.\\n+\\n+        ### Returns\\n+
        \       - The Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        raw_search_results
        = Song.search(search_term)\\n+\\n+        if len(raw_search_results[\\\"tracks\\\"][\\\"items\\\"])
        == 0:\\n+            raise SongError(f\\\"No results found for: {search_term}\\\")\\n+\\n+
        \       return Song.from_url(\\n+            \\\"http://open.spotify.com/track/\\\"\\n+
        \           + raw_search_results[\\\"tracks\\\"][\\\"items\\\"][0][\\\"id\\\"]\\n+
        \       )\\n+\\n+    @classmethod\\n+    def list_from_search_term(cls, search_term:
        str) -> \\\"List[Song]\\\":\\n+        \\\"\\\"\\\"\\n+        Creates a list
        of Song objects from a search term.\\n+\\n+        ### Arguments\\n+        -
        search_term: The search term to use.\\n+\\n+        ### Returns\\n+        -
        The list of Song objects.\\n+        \\\"\\\"\\\"\\n+\\n+        raw_search_results
        = Song.search(search_term)\\n+\\n+        songs = []\\n+        for idx, _
        in enumerate(raw_search_results.get(\\\"tracks\\\", []).get(\\\"items\\\",
        [])):\\n+            songs.append(\\n+                Song.from_url(\\n+                    \\\"http://open.spotify.com/track/\\\"\\n+
        \                   + raw_search_results[\\\"tracks\\\"][\\\"items\\\"][idx][\\\"id\\\"]\\n+
        \               )\\n+            )\\n+\\n+        return songs\\n+\\n+    @classmethod\\n+
        \   def from_data_dump(cls, data: str) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+
        \       Create a Song object from a data dump.\\n+\\n+        ### Arguments\\n+
        \       - data: The data dump.\\n+\\n+        ### Returns\\n+        - The
        Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        # Create dict from json
        string\\n+        data_dict = json.loads(data)\\n+\\n+        # Return product
        object\\n+        return cls(**data_dict)\\n+\\n+    @classmethod\\n+    def
        from_dict(cls, data: Dict[str, Any]) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+
        \       Create a Song object from a dictionary.\\n+\\n+        ### Arguments\\n+
        \       - data: The dictionary.\\n+\\n+        ### Returns\\n+        - The
        Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        # Return product object\\n+
        \       return cls(**data)\\n+\\n+    @classmethod\\n+    def from_missing_data(cls,
        **kwargs) -> \\\"Song\\\":\\n+        \\\"\\\"\\\"\\n+        Create a Song
        object from a dictionary with missing data.\\n+        For example, data dict
        doesn't contain all the required\\n+        attributes for the Song class.\\n+\\n+
        \       ### Arguments\\n+        - data: The dictionary.\\n+\\n+        ###
        Returns\\n+        - The Song object.\\n+        \\\"\\\"\\\"\\n+\\n+        song_data:
        Dict[str, Any] = {}\\n+        for key in cls.__dataclass_fields__:  # pylint:
        disable=E1101\\n+            song_data.setdefault(key, kwargs.get(key))\\n+\\n+
        \       return cls(**song_data)\\n+\\n+    @property\\n+    def display_name(self)
        -> str:\\n+        \\\"\\\"\\\"\\n+        Returns a display name for the
        song.\\n+\\n+        ### Returns\\n+        - The display name.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return f\\\"{self.artist} - {self.name}\\\"\\n+\\n+    @property\\n+
        \   def json(self) -> Dict[str, Any]:\\n+        \\\"\\\"\\\"\\n+        Returns
        a dictionary of the song's data.\\n+\\n+        ### Returns\\n+        - The
        dictionary.\\n+        \\\"\\\"\\\"\\n+\\n+        return asdict(self)\\n+\\n+\\n+@dataclass(frozen=True)\\n+class
        SongList:\\n+    \\\"\\\"\\\"\\n+    SongList class. Base class for all other
        song lists subclasses.\\n+    \\\"\\\"\\\"\\n+\\n+    name: str\\n+    url:
        str\\n+    urls: List[str]\\n+    songs: List[Song]\\n+\\n+    @classmethod\\n+
        \   def from_url(cls, url: str, fetch_songs: bool = True):\\n+        \\\"\\\"\\\"\\n+
        \       Create a SongList object from a url.\\n+\\n+        ### Arguments\\n+
        \       - url: The url of the list.\\n+        - fetch_songs: Whether to fetch
        missing metadata for songs.\\n+\\n+        ### Returns\\n+        - The SongList
        object.\\n+        \\\"\\\"\\\"\\n+\\n+        metadata, songs = cls.get_metadata(url)\\n+
        \       urls = [song.url for song in songs]\\n+\\n+        if fetch_songs:\\n+
        \           songs = [Song.from_url(song.url) for song in songs]\\n+\\n+        return
        cls(**metadata, urls=urls, songs=songs)\\n+\\n+    @classmethod\\n+    def
        from_search_term(cls, search_term: str, fetch_songs: bool = True):\\n+        \\\"\\\"\\\"\\n+
        \       Creates a SongList object from a search term.\\n+\\n+        ### Arguments\\n+
        \       - search_term: The search term to use.\\n+\\n+        ### Returns\\n+
        \       - The SongList object.\\n+        \\\"\\\"\\\"\\n+\\n+        list_type
        = cls.__name__.lower()\\n+        spotify_client = SpotifyClient()\\n+        raw_search_results
        = spotify_client.search(search_term, type=list_type)\\n+\\n+        if (\\n+
        \           raw_search_results is None\\n+            or len(raw_search_results.get(f\\\"{list_type}s\\\",
        {}).get(\\\"items\\\", [])) == 0\\n+        ):\\n+            raise SongListError(\\n+
        \               f\\\"No {list_type} matches found on spotify for '{search_term}'\\\"\\n+
        \           )\\n+\\n+        matches = {}\\n+        for result in raw_search_results[f\\\"{list_type}s\\\"][\\\"items\\\"]:\\n+
        \           score = fuzz.ratio(search_term.split(\\\":\\\", 1)[1].strip(),
        result[\\\"name\\\"])\\n+            matches[result[\\\"id\\\"]] = score\\n+\\n+
        \       best_match = max(matches, key=matches.get)  # type: ignore\\n+\\n+
        \       return cls.from_url(\\n+            f\\\"http://open.spotify.com/{list_type}/{best_match}\\\",\\n+
        \           fetch_songs,\\n+        )\\n+\\n+    @property\\n+    def length(self)
        -> int:\\n+        \\\"\\\"\\\"\\n+        Get list length (number of songs).\\n+\\n+
        \       ### Returns\\n+        - The list length.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return max(len(self.urls), len(self.songs))\\n+\\n+    @property\\n+
        \   def json(self) -> Dict[str, Any]:\\n+        \\\"\\\"\\\"\\n+        Returns
        a dictionary of the song list's data.\\n+\\n+        ### Returns\\n+        -
        The dictionary.\\n+        \\\"\\\"\\\"\\n+\\n+        return asdict(self)\\n+\\n+
        \   @staticmethod\\n+    def get_metadata(url: str) -> Tuple[Dict[str, Any],
        List[Song]]:\\n+        \\\"\\\"\\\"\\n+        Get metadata for a song list.\\n+\\n+
        \       ### Arguments\\n+        - url: The url of the song list.\\n+\\n+
        \       ### Returns\\n+        - The metadata.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       raise NotImplementedError\"},{\"sha\":\"1daf17c9a7714008e28d412763da982bf80e626e\",\"filename\":\"spotdl/utils/__init__.py\",\"status\":\"modified\",\"additions\":4,\"deletions\":0,\"changes\":4,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2F__init__.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2F__init__.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2F__init__.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,4 @@\\n+\\\"\\\"\\\"\\n+Utility functions for spotdl. These functions
        are used in every stage of the\\n+download process.\\n+\\\"\\\"\\\"\"},{\"sha\":\"66e79f96913d62902bcd3e1f37677080e135bfbc\",\"filename\":\"spotdl/utils/archive.py\",\"status\":\"added\",\"additions\":49,\"deletions\":0,\"changes\":49,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Farchive.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Farchive.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Farchive.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,49 @@\\n+\\\"\\\"\\\"\\n+Module for archiving sets of data\\n+\\\"\\\"\\\"\\n+\\n+from
        pathlib import Path\\n+from typing import Set\\n+\\n+__all__ = [\\\"Archive\\\"]\\n+\\n+\\n+class
        Archive(Set):\\n+    \\\"\\\"\\\"\\n+    Archive class.\\n+    A file-persistable
        set.\\n+    \\\"\\\"\\\"\\n+\\n+    def load(self, file: str) -> bool:\\n+
        \       \\\"\\\"\\\"\\n+        Imports the archive from the file.\\n+\\n+
        \       ### Arguments\\n+        - file: the file name of the archive\\n+\\n+
        \       ### Returns\\n+        - if the file exists\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if not Path(file).exists():\\n+            return False\\n+\\n+        with
        open(file, \\\"r\\\", encoding=\\\"utf-8\\\") as archive:\\n+            self.clear()\\n+
        \           self.update([line.strip() for line in archive])\\n+\\n+        return
        True\\n+\\n+    def save(self, file: str) -> bool:\\n+        \\\"\\\"\\\"\\n+
        \       Exports the current archive to the file.\\n+\\n+        ### Arguments\\n+
        \       - file: the file name of the archive\\n+        \\\"\\\"\\\"\\n+\\n+
        \       with open(file, \\\"w\\\", encoding=\\\"utf-8\\\") as archive:\\n+
        \           for element in sorted(self):\\n+                archive.write(f\\\"{element}\\\\n\\\")\\n+\\n+
        \       return True\"},{\"sha\":\"68898eeabd38fdedf014cd1c0e4c3ea7d8a1b5de\",\"filename\":\"spotdl/utils/arguments.py\",\"status\":\"added\",\"additions\":800,\"deletions\":0,\"changes\":800,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Farguments.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Farguments.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Farguments.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,800 @@\\n+\\\"\\\"\\\"\\n+Module that handles the command line arguments.\\n+\\\"\\\"\\\"\\n+\\n+import
        argparse\\n+import sys\\n+import textwrap\\n+from argparse import ArgumentParser,
        Namespace, _ArgumentGroup\\n+from typing import List\\n+\\n+from spotdl import
        _version\\n+from spotdl.download.downloader import AUDIO_PROVIDERS, LYRICS_PROVIDERS\\n+from
        spotdl.utils.ffmpeg import FFMPEG_FORMATS\\n+from spotdl.utils.formatter import
        VARS\\n+from spotdl.utils.logging import NAME_TO_LEVEL\\n+\\n+__all__ = [\\\"OPERATIONS\\\",
        \\\"SmartFormatter\\\", \\\"parse_arguments\\\"]\\n+\\n+OPERATIONS = [\\\"download\\\",
        \\\"save\\\", \\\"web\\\", \\\"sync\\\", \\\"meta\\\", \\\"url\\\"]\\n+\\n+\\n+class
        SmartFormatter(argparse.HelpFormatter):\\n+    \\\"\\\"\\\"\\n+    Class that
        overrides the default help formatter.\\n+    \\\"\\\"\\\"\\n+\\n+    def _split_lines(self,
        text: str, width: int) -> List[str]:\\n+        \\\"\\\"\\\"\\n+        Split
        the text in multiple lines if a line starts\\n+        with a N|\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if text.startswith(\\\"N|\\\"):\\n+            return text[2:].splitlines()\\n+\\n+
        \       text = self._whitespace_matcher.sub(\\\" \\\", text).strip()\\n+\\n+
        \       return textwrap.wrap(text, width)\\n+\\n+\\n+def parse_main_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse main options from the command
        line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser to add
        the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add operation argument\\n+
        \   operation = parser.add_argument(\\n+        \\\"operation\\\",\\n+        choices=OPERATIONS,\\n+
        \       default=\\\"download\\\",\\n+        const=\\\"download\\\",\\n+        nargs=\\\"?\\\",\\n+
        \       help=(\\n+            \\\"N|The operation to perform.\\\\n\\\"\\n+
        \           \\\"download: Download the songs to the disk and embed metadata.\\\\n\\\"\\n+
        \           \\\"save: Saves the songs metadata to a file for further use.\\\\n\\\"\\n+
        \           \\\"web: Starts a web interface to simplify the download process.\\\\n\\\"\\n+
        \           \\\"sync: Removes songs that are no longer present, downloads
        new ones\\\\n\\\"\\n+            \\\"meta: Update your audio files with metadata\\\\n\\\"\\n+
        \           \\\"url: Get the download URL for songs\\\\n\\\\n\\\"\\n+        ),\\n+
        \   )\\n+\\n+    # Add query argument\\n+    query = parser.add_argument(\\n+
        \       \\\"query\\\",\\n+        nargs=\\\"+\\\",\\n+        type=str,\\n+
        \       help=(\\n+            \\\"N|Spotify/YouTube URL for a song/playlist/album/artist/etc.
        to download.\\\\n\\\\n\\\"\\n+            \\\"For album/playlist/artist searching,
        include 'album:', 'playlist:', 'artist:' \\\\n\\\"\\n+            \\\"(ie.
        'album:the album name' you can mix these options to get more accurate results)\\\"\\n+
        \           \\\".\\\\n\\\\n\\\"\\n+            \\\"To download liked songs
        use 'saved' as the query, to download all user playlists\\\\n\\\"\\n+            \\\"use
        'all-user-playlists, to download playlists that the user has created\\\\n\\\"\\n+
        \           \\\"use 'all-saved-playlists', to download all user liked playlists\\\\n\\\"\\n+
        \           \\\"use 'all-user-followed-artists', to download all user saved
        albums \\\"\\n+            \\\"use 'all-user-saved-albums' \\\\n\\\\n\\\"\\n+
        \           \\\"For manual audio matching, you can use the format 'YouTubeURL|SpotifyURL'\\\\n\\\"\\n+
        \           \\\"You can only use album/playlist/tracks urls when \\\"\\n+
        \           \\\"downloading/matching youtube urls.\\\\n\\\"\\n+            \\\"When
        using youtube url without spotify url, \\\"\\n+            \\\"you won't be
        able to use `--fetch-albums` option.\\\\n\\\\n\\\"\\n+        ),\\n+    )\\n+\\n+
        \   try:\\n+        is_web = sys.argv[1] == \\\"web\\\"\\n+    except IndexError:\\n+
        \       is_web = False\\n+\\n+    is_frozen = getattr(sys, \\\"frozen\\\",
        False)\\n+\\n+    # If the program is frozen, we and user didn't pass any
        arguments,\\n+    # or if the user is using the web interface, we don't need
        to parse\\n+    # the query\\n+    if (is_frozen and len(sys.argv) < 2) or
        (len(sys.argv) > 1 and is_web):\\n+        # If we are running the web interface\\n+
        \       # or we are in the frozen env and not running web interface\\n+        #
        don't remove the operation from the arg parser\\n+        if not is_web or
        (is_frozen and not is_web):\\n+            parser._remove_action(operation)
        \ # pylint: disable=protected-access\\n+\\n+        parser._remove_action(query)
        \ # pylint: disable=protected-access\\n+\\n+    # Audio provider argument\\n+
        \   parser.add_argument(\\n+        \\\"--audio\\\",\\n+        dest=\\\"audio_providers\\\",\\n+
        \       nargs=\\\"*\\\",\\n+        choices=AUDIO_PROVIDERS,\\n+        help=\\\"The
        audio provider to use. You can provide more than one for fallback.\\\",\\n+
        \   )\\n+\\n+    # Lyrics provider argument\\n+    parser.add_argument(\\n+
        \       \\\"--lyrics\\\",\\n+        dest=\\\"lyrics_providers\\\",\\n+        nargs=\\\"*\\\",\\n+
        \       choices=LYRICS_PROVIDERS.keys(),\\n+        help=(\\n+            \\\"The
        lyrics provider to use. You can provide more than one for fallback. \\\"\\n+
        \           \\\"Synced lyrics might not work correctly with some music players.
        \\\"\\n+            \\\"For such cases it's better to use `--generate-lrc`
        option.\\\"\\n+        ),\\n+    )\\n+\\n+    # Add config argument\\n+    parser.add_argument(\\n+
        \       \\\"--config\\\",\\n+        action=\\\"store_true\\\",\\n+        help=(\\n+
        \           \\\"Use the config file to download songs. \\\"\\n+            \\\"It's
        located under C:\\\\\\\\Users\\\\\\\\user\\\\\\\\.spotdl\\\\\\\\config.json
        \\\"\\n+            \\\"or ~/.spotdl/config.json under linux\\\"\\n+        ),\\n+
        \   )\\n+\\n+    # Add search query argument\\n+    parser.add_argument(\\n+
        \       \\\"--search-query\\\",\\n+        help=f\\\"The search query to use,
        available variables: {', '.join(VARS)}\\\",\\n+        type=str,\\n+    )\\n+\\n+
        \   # Add don't filter results argument\\n+    parser.add_argument(\\n+        \\\"--dont-filter-results\\\",\\n+
        \       dest=\\\"filter_results\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=False,\\n+        help=\\\"Disable filtering results.\\\",\\n+
        \   )\\n+\\n+    # Add use only verified results argument\\n+    parser.add_argument(\\n+
        \       \\\"--album-type\\\",\\n+        choices={\\\"album\\\", \\\"single\\\"},\\n+
        \       help=\\\"Type of the album to search for. (album, single)\\\",\\n+
        \       type=str,\\n+    )\\n+\\n+    # Add use only verified results argument\\n+
        \   parser.add_argument(\\n+        \\\"--only-verified-results\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Use only verified results. (Not all
        providers support this)\\\",\\n+    )\\n+\\n+\\n+def parse_spotify_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse spotify options from the
        command line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser
        to add the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add login argument\\n+
        \   parser.add_argument(\\n+        \\\"--user-auth\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Login to Spotify using OAuth.\\\",\\n+
        \   )\\n+\\n+    # Add client id argument\\n+    parser.add_argument(\\n+
        \       \\\"--client-id\\\",\\n+        help=\\\"The client id to use when
        logging in to Spotify.\\\",\\n+        type=str,\\n+    )\\n+\\n+    # Add
        client secret argument\\n+    parser.add_argument(\\n+        \\\"--client-secret\\\",\\n+
        \       help=\\\"The client secret to use when logging in to Spotify.\\\",\\n+
        \       type=str,\\n+    )\\n+\\n+    # Add auth token argument\\n+    parser.add_argument(\\n+
        \       \\\"--auth-token\\\",\\n+        help=\\\"The authorization token
        to use directly to log in to Spotify.\\\",\\n+        type=str,\\n+    )\\n+\\n+
        \   # Add cache path argument\\n+    parser.add_argument(\\n+        \\\"--cache-path\\\",\\n+
        \       type=str,\\n+        help=\\\"The path where spotipy cache file will
        be stored.\\\",\\n+    )\\n+\\n+    # Add no cache argument\\n+    parser.add_argument(\\n+
        \       \\\"--no-cache\\\",\\n+        action=\\\"store_const\\\",\\n+        const=True,\\n+
        \       help=\\\"Disable caching (both requests and token).\\\",\\n+    )\\n+\\n+
        \   # Add max retries argument\\n+    parser.add_argument(\\n+        \\\"--max-retries\\\",\\n+
        \       type=int,\\n+        help=\\\"The maximum number of retries to perform
        when getting metadata.\\\",\\n+    )\\n+\\n+    # Add headless argument\\n+
        \   parser.add_argument(\\n+        \\\"--headless\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Run in headless mode.\\\",\\n+    )\\n+\\n+
        \   # Add use cache file argument\\n+    parser.add_argument(\\n+        \\\"--use-cache-file\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=(\\n+
        \           \\\"Use the cache file to get metadata. \\\"\\n+            \\\"It's
        located under C:\\\\\\\\Users\\\\\\\\user\\\\\\\\.spotdl\\\\\\\\.spotify_cache
        \\\"\\n+            \\\"or ~/.spotdl/.spotify_cache under linux. \\\"\\n+
        \           \\\"It only caches tracks and \\\"\\n+            \\\"gets updated
        whenever spotDL gets metadata from Spotify. \\\"\\n+            \\\"(It may
        provide outdated metadata use with caution)\\\"\\n+        ),\\n+    )\\n+\\n+\\n+def
        parse_ffmpeg_options(parser: _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse
        ffmpeg options from the command line.\\n+\\n+    ### Arguments\\n+    - parser:
        The argument parser to add the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    #
        Add ffmpeg executable argument\\n+    parser.add_argument(\\n+        \\\"--ffmpeg\\\",\\n+
        \       help=\\\"The ffmpeg executable to use.\\\",\\n+        type=str,\\n+
        \   )\\n+\\n+    # Add search threads argument\\n+    parser.add_argument(\\n+
        \       \\\"--threads\\\",\\n+        type=int,\\n+        help=\\\"The number
        of threads to use when downloading songs.\\\",\\n+    )\\n+\\n+    # Add constant
        bit rate argument\\n+    parser.add_argument(\\n+        \\\"--bitrate\\\",\\n+
        \       choices=[\\n+            \\\"auto\\\",\\n+            \\\"disable\\\",\\n+
        \           \\\"8k\\\",\\n+            \\\"16k\\\",\\n+            \\\"24k\\\",\\n+
        \           \\\"32k\\\",\\n+            \\\"40k\\\",\\n+            \\\"48k\\\",\\n+
        \           \\\"64k\\\",\\n+            \\\"80k\\\",\\n+            \\\"96k\\\",\\n+
        \           \\\"112k\\\",\\n+            \\\"128k\\\",\\n+            \\\"160k\\\",\\n+
        \           \\\"192k\\\",\\n+            \\\"224k\\\",\\n+            \\\"256k\\\",\\n+
        \           \\\"320k\\\",\\n+        ]\\n+        + list(map(str, range(0,
        10))),\\n+        type=str.lower,\\n+        help=(\\n+            \\\"The
        constant/variable bitrate to use for the output file. \\\"\\n+            \\\"Values
        from 0 to 9 are variable bitrates. \\\"\\n+            \\\"Auto will use the
        bitrate of the original file. \\\"\\n+            \\\"Disable will disable
        the bitrate option. \\\"\\n+            \\\"(In case of m4a and opus files,
        auto and disable will skip the conversion)\\\"\\n+        ),\\n+    )\\n+\\n+
        \   # Additional ffmpeg arguments\\n+    parser.add_argument(\\n+        \\\"--ffmpeg-args\\\",\\n+
        \       type=str,\\n+        help=\\\"Additional ffmpeg arguments passed as
        a string.\\\",\\n+    )\\n+\\n+\\n+def parse_output_options(parser: _ArgumentGroup):\\n+
        \   \\\"\\\"\\\"\\n+    Parse output options from the command line.\\n+\\n+
        \   ### Arguments\\n+    - parser: The argument parser to add the options
        to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add output format argument\\n+    parser.add_argument(\\n+
        \       \\\"--format\\\",\\n+        choices=FFMPEG_FORMATS.keys(),\\n+        help=\\\"The
        format to download the song in.\\\",\\n+        type=str,\\n+    )\\n+\\n+
        \   # Add save file argument\\n+    parser.add_argument(\\n+        \\\"--save-file\\\",\\n+
        \       type=str,\\n+        help=(\\n+            \\\"The file to save/load
        the songs data from/to. \\\"\\n+            \\\"It has to end with .spotdl.
        \\\"\\n+            \\\"If combined with the download operation, it will save
        the songs data to the file. \\\"\\n+            \\\"Required for save/sync
        (use - to print to stdout when using save). \\\"\\n+        ),\\n+        required=len(sys.argv)
        > 1 and sys.argv[1] in [\\\"save\\\"],\\n+    )\\n+\\n+    # Add preload argument\\n+
        \   parser.add_argument(\\n+        \\\"--preload\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Preload the download url to speed
        up the download process.\\\",\\n+    )\\n+\\n+    # Add name format argument\\n+
        \   parser.add_argument(\\n+        \\\"--output\\\",\\n+        type=str,\\n+
        \       help=f\\\"Specify the downloaded file name format, available variables:
        {', '.join(VARS)}\\\",\\n+    )\\n+\\n+    # Add m3u argument\\n+    parser.add_argument(\\n+
        \       \\\"--m3u\\\",\\n+        type=str,\\n+        nargs=\\\"?\\\",\\n+
        \       help=(\\n+            \\\"Name of the m3u file to save the songs to.
        \\\"\\n+            \\\"Defaults to {list[0]}.m3u8 \\\"\\n+            \\\"If
        you want to generate a m3u for each list in the query use {list}, \\\"\\n+
        \           \\\"If you want to generate a m3u file based on the first list
        in the query use {list[0]}\\\"\\n+            \\\", (0 is the first list in
        the query, 1 is the second, etc. \\\"\\n+            \\\"songs don't count
        towards the list number) \\\"\\n+        ),\\n+        const=\\\"{list[0]}.m3u8\\\",\\n+
        \   )\\n+\\n+    # Add cookie file argument\\n+    parser.add_argument(\\n+
        \       \\\"--cookie-file\\\",\\n+        help=\\\"Path to cookies file.\\\",\\n+
        \       type=str,\\n+    )\\n+\\n+    # Add overwrite argument\\n+    parser.add_argument(\\n+
        \       \\\"--overwrite\\\",\\n+        choices={\\\"force\\\", \\\"skip\\\",
        \\\"metadata\\\"},\\n+        help=(\\n+            \\\"How to handle existing/duplicate
        files. \\\"\\n+            \\\"(When combined with --scan-for-songs force
        will remove \\\"\\n+            \\\"all duplicates, and metadata will only
        apply metadata to the \\\"\\n+            \\\"latest song and will remove
        the rest. )\\\"\\n+        ),\\n+        type=str,\\n+    )\\n+\\n+    # Option
        to increase compatibility of filenames and easier handling in the shell\\n+
        \   parser.add_argument(\\n+        \\\"--restrict\\\",\\n+        choices={\\\"strict\\\",
        \\\"ascii\\\", \\\"none\\\"},\\n+        const=\\\"strict\\\",\\n+        nargs=\\\"?\\\",\\n+
        \       help=\\\"Restrict filenames to a sanitized set of characters for better
        compatibility\\\",\\n+        type=str,\\n+    )\\n+\\n+    # Option to print
        errors on exit, useful for long playlist\\n+    parser.add_argument(\\n+        \\\"--print-errors\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Print
        errors (wrong songs, failed downloads etc) on exit, useful for long playlist\\\",\\n+
        \   )\\n+\\n+    # Option to save errors to a file\\n+    parser.add_argument(\\n+
        \       \\\"--save-errors\\\",\\n+        type=str,\\n+        help=\\\"Save
        errors (wrong songs, failed downloads etc) to a file\\\",\\n+    )\\n+\\n+
        \   # Option to use sponsor block\\n+    parser.add_argument(\\n+        \\\"--sponsor-block\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Use
        the sponsor block to download songs from yt/ytm.\\\",\\n+    )\\n+\\n+    #
        Add archive_file argument\\n+    parser.add_argument(\\n+        \\\"--archive\\\",\\n+
        \       type=str,\\n+        help=\\\"Specify the file name for an archive
        of already downloaded songs\\\",\\n+    )\\n+\\n+    # Option to set the track
        number & album of tracks in a playlist to their index in the playlist\\n+
        \   # & the name of playlist respectively.\\n+    parser.add_argument(\\n+
        \       \\\"--playlist-numbering\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       dest=\\\"playlist_numbering\\\",\\n+        const=True,\\n+        help=\\\"Sets
        each track in a playlist to have the playlist's name as its album,\\\\\\n+
        \           and album art as the playlist's icon\\\",\\n+    )\\n+\\n+    #
        Option to scan the output directory for existing files\\n+    parser.add_argument(\\n+
        \       \\\"--scan-for-songs\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=(\\n+            \\\"Scan the output directory
        for existing files. \\\"\\n+            \\\"This option should be combined
        with the --overwrite option \\\"\\n+            \\\"to control how existing
        files are handled. (Output directory is the last directory \\\"\\n+            \\\"that
        is not a template variable in the output template)\\\"\\n+        ),\\n+    )\\n+\\n+
        \   # Option to fetch all albums from songs in query\\n+    parser.add_argument(\\n+
        \       \\\"--fetch-albums\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Fetch all albums from songs in query\\\",\\n+
        \   )\\n+\\n+    # Option to change the id3 separator\\n+    parser.add_argument(\\n+
        \       \\\"--id3-separator\\\",\\n+        type=str,\\n+        help=\\\"Change
        the separator used in the id3 tags. Only supported for mp3 files.\\\",\\n+
        \   )\\n+\\n+    # Option to use ytm data instead of spotify data\\n+    #
        when downloading using ytm link\\n+    parser.add_argument(\\n+        \\\"--ytm-data\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Use
        ytm data instead of spotify data when downloading using ytm link.\\\",\\n+
        \   )\\n+\\n+    # Option whether to add unavailable songs to the m3u file\\n+
        \   parser.add_argument(\\n+        \\\"--add-unavailable\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Add unavailable songs to the m3u/archive
        files when downloading\\\",\\n+    )\\n+\\n+    # Generate lrc files\\n+    parser.add_argument(\\n+
        \       \\\"--generate-lrc\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=(\\n+            \\\"Generate lrc files
        for downloaded songs. \\\"\\n+            \\\"Requires `synced` provider to
        be present in the lyrics providers list.\\\"\\n+        ),\\n+    )\\n+\\n+
        \   # Force update metadata\\n+    parser.add_argument(\\n+        \\\"--force-update-metadata\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Force
        update metadata for songs that already have metadata.\\\",\\n+    )\\n+\\n+
        \   # Sync without deleting\\n+    parser.add_argument(\\n+        \\\"--sync-without-deleting\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Sync
        without deleting songs that are not in the query.\\\",\\n+    )\\n+\\n+    #
        Max file name length\\n+    parser.add_argument(\\n+        \\\"--max-filename-length\\\",\\n+
        \       type=int,\\n+        help=(\\n+            \\\"Max file name length.
        \\\"\\n+            \\\"(This won't override the max file name length enforced
        by the OS)\\\"\\n+        ),\\n+    )\\n+\\n+    # YT-DlP options\\n+    parser.add_argument(\\n+
        \       \\\"--yt-dlp-args\\\",\\n+        type=str,\\n+        help=\\\"Arguments
        to pass to yt-dlp\\\",\\n+    )\\n+\\n+    # Detect formats option\\n+    parser.add_argument(\\n+
        \       \\\"--detect-formats\\\",\\n+        type=str,\\n+        nargs=\\\"*\\\",\\n+
        \       help=(\\n+            \\\"Detect already downloaded songs with file
        format different from the --format option \\\"\\n+            \\\"(When combined
        with --m3u option, \\\"\\n+            \\\"only first detected format will
        be added to m3u file)\\\"\\n+        ),\\n+        choices=FFMPEG_FORMATS.keys(),\\n+
        \   )\\n+\\n+    # download song in meta operation\\n+    parser.add_argument(\\n+
        \       \\\"--redownload\\\",\\n+        action=\\\"store_const\\\",\\n+        const=True,\\n+
        \       help=\\\"to redownload the local song in diffrent format using --format
        for meta operation\\\",\\n+    )\\n+\\n+    # skip album art for meta operation\\n+
        \   parser.add_argument(\\n+        \\\"--skip-album-art\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"skip downloading album art for meta
        operation\\\",\\n+    )\\n+\\n+    # Ignore songs from a paticular album\\n+
        \   parser.add_argument(\\n+        \\\"--ignore-albums\\\",\\n+        type=str,\\n+
        \       nargs=\\\"*\\\",\\n+        help=\\\"ignores the song of the given
        albums\\\",\\n+    )\\n+\\n+    # Skip explicit songs options\\n+    parser.add_argument(\\n+
        \       \\\"--skip-explicit\\\", action=\\\"store_const\\\", const=True, help=\\\"Skip
        explicit songs\\\"\\n+    )\\n+\\n+    parser.add_argument(\\n+        \\\"--proxy\\\",\\n+
        \       help=\\\"Http(s) proxy server for download song. Example: http://host:port\\\",\\n+
        \   )\\n+\\n+    # Skip songs having a skip flag file\\n+    parser.add_argument(\\n+
        \       \\\"--create-skip-file\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Create skip file for successfully
        downloaded file\\\",\\n+    )\\n+\\n+    # Skip songs having a skip flag file\\n+
        \   parser.add_argument(\\n+        \\\"--respect-skip-file\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"If a file with the extension .skip
        exists, skip download\\\",\\n+    )\\n+\\n+\\n+def parse_web_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse web options from the command
        line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser to add
        the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add host argument\\n+    parser.add_argument(\\n+
        \       \\\"--host\\\",\\n+        type=str,\\n+        help=\\\"The host
        to use for the web server.\\\",\\n+    )\\n+\\n+    # Add port argument\\n+
        \   parser.add_argument(\\n+        \\\"--port\\\",\\n+        type=int,\\n+
        \       help=\\\"The port to run the web server on.\\\",\\n+    )\\n+\\n+
        \   # Add keep alive argument\\n+    parser.add_argument(\\n+        \\\"--keep-alive\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Keep
        the web server alive even when no clients are connected.\\\",\\n+    )\\n+\\n+
        \   # Add allowed origins argument\\n+    parser.add_argument(\\n+        \\\"--allowed-origins\\\",\\n+
        \       nargs=\\\"*\\\",\\n+        help=\\\"The allowed origins for the web
        server.\\\",\\n+    )\\n+\\n+    # Add use output directory argument\\n+    parser.add_argument(\\n+
        \       \\\"--web-use-output-dir\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=(\\n+            \\\"Use the output directory
        instead of the session directory for downloads. (\\\"\\n+            \\\"This
        might cause issues if you have multiple users using the web-ui at the same
        time)\\\"\\n+        ),\\n+    )\\n+\\n+    # Add keep sessions argument\\n+
        \   parser.add_argument(\\n+        \\\"--keep-sessions\\\",\\n+        action=\\\"store_const\\\",\\n+
        \       const=True,\\n+        help=\\\"Keep the session directory after the
        web server is closed.\\\",\\n+    )\\n+\\n+\\n+def parse_misc_options(parser:
        _ArgumentGroup):\\n+    \\\"\\\"\\\"\\n+    Parse misc options from the command
        line.\\n+\\n+    ### Arguments\\n+    - parser: The argument parser to add
        the options to.\\n+    \\\"\\\"\\\"\\n+\\n+    # Add verbose argument\\n+
        \   parser.add_argument(\\n+        \\\"--log-level\\\",\\n+        choices=NAME_TO_LEVEL.keys(),\\n+
        \       help=\\\"Select log level.\\\",\\n+    )\\n+\\n+    # Add simple tui
        argument\\n+    parser.add_argument(\\n+        \\\"--simple-tui\\\",\\n+
        \       action=\\\"store_const\\\",\\n+        const=True,\\n+        help=\\\"Use
        a simple tui.\\\",\\n+    )\\n+\\n+    # Add log format argument\\n+    parser.add_argument(\\n+
        \       \\\"--log-format\\\",\\n+        help=(\\n+            \\\"Custom
        logging format to use. More info: \\\"\\n+            \\\"https://docs.python.org/3/library/logging.html#logrecord-attributes\\\"\\n+
        \       ),\\n+    )\\n+\\n+\\n+def parse_other_options(parser: _ArgumentGroup):\\n+
        \   \\\"\\\"\\\"\\n+    Parse other options from the command line.\\n+\\n+
        \   ### Arguments\\n+    - parser: The argument parser to add the options
        to.\\n+    \\\"\\\"\\\"\\n+\\n+    parser.add_argument(\\n+        \\\"--download-ffmpeg\\\",\\n+
        \       action=\\\"store_true\\\",\\n+        help=\\\"Download ffmpeg to
        spotdl directory.\\\",\\n+    )\\n+\\n+    parser.add_argument(\\n+        \\\"--generate-config\\\",\\n+
        \       action=\\\"store_true\\\",\\n+        help=\\\"Generate a config file.
        This will overwrite current config if present.\\\",\\n+    )\\n+\\n+    parser.add_argument(\\n+
        \       \\\"--check-for-updates\\\", action=\\\"store_true\\\", help=\\\"Check
        for new version.\\\"\\n+    )\\n+\\n+    parser.add_argument(\\n+        \\\"--profile\\\",\\n+
        \       action=\\\"store_true\\\",\\n+        help=\\\"Run in profile mode.
        Useful for debugging.\\\",\\n+    )\\n+\\n+    parser.add_argument(\\n+        \\\"--version\\\",\\n+
        \       \\\"-v\\\",\\n+        action=\\\"version\\\",\\n+        help=\\\"Show
        the version number and exit.\\\",\\n+        version=_version.__version__,\\n+
        \   )\\n+\\n+\\n+def create_parser() -> ArgumentParser:\\n+    \\\"\\\"\\\"\\n+
        \   Parse arguments from the command line.\\n+\\n+    ### Returns\\n+    -
        A Namespace object containing the parsed arguments.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Initialize argument parser\\n+    parser = ArgumentParser(\\n+        prog=\\\"spotdl\\\",\\n+
        \       description=\\\"Download your Spotify playlists and songs along with
        album art and metadata\\\",\\n+        formatter_class=SmartFormatter,\\n+
        \       epilog=(\\n+            \\\"For more information, visit http://spotdl.rtfd.io/
        \\\"\\n+            \\\"or join our Discord server: https://discord.com/invite/xCa23pwJWY\\\"\\n+
        \       ),\\n+    )\\n+\\n+    # Parse main options\\n+    main_options =
        parser.add_argument_group(\\\"Main options\\\")\\n+    parse_main_options(main_options)\\n+\\n+
        \   # Parse spotify options\\n+    spotify_options = parser.add_argument_group(\\\"Spotify
        options\\\")\\n+    parse_spotify_options(spotify_options)\\n+\\n+    # Parse
        ffmpeg options\\n+    ffmpeg_options = parser.add_argument_group(\\\"FFmpeg
        options\\\")\\n+    parse_ffmpeg_options(ffmpeg_options)\\n+\\n+    # Parse
        output options\\n+    output_options = parser.add_argument_group(\\\"Output
        options\\\")\\n+    parse_output_options(output_options)\\n+\\n+    # Parse
        web options\\n+    web_options = parser.add_argument_group(\\\"Web options\\\")\\n+
        \   parse_web_options(web_options)\\n+\\n+    # Parse misc options\\n+    misc_options
        = parser.add_argument_group(\\\"Misc options\\\")\\n+    parse_misc_options(misc_options)\\n+\\n+
        \   # Parse other options\\n+    other_options = parser.add_argument_group(\\\"Other
        options\\\")\\n+    parse_other_options(other_options)\\n+\\n+    return parser\\n+\\n+\\n+def
        parse_arguments() -> Namespace:\\n+    \\\"\\\"\\\"\\n+    Parse arguments
        from the command line.\\n+\\n+    ### Arguments\\n+    - parser: The argument
        parser to parse the arguments from.\\n+\\n+    ### Returns\\n+    - A Namespace
        object containing the parsed arguments.\\n+    \\\"\\\"\\\"\\n+\\n+    # Create
        parser\\n+    parser = create_parser()\\n+\\n+    # Parse arguments\\n+    return
        parser.parse_args()\"},{\"sha\":\"4908b7972b8d79d9f91489a6104fe0c6cb04eb58\",\"filename\":\"spotdl/utils/config.py\",\"status\":\"added\",\"additions\":349,\"deletions\":0,\"changes\":349,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fconfig.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fconfig.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fconfig.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,349 @@\\n+\\\"\\\"\\\"\\n+Module related to managing reading and writing
        to the config file.\\n+\\n+Default config - spotdl.utils.config.DEFAULT_CONFIG\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import logging\\n+import os\\n+import platform\\n+from argparse import
        Namespace\\n+from pathlib import Path\\n+from typing import Any, Dict, Tuple,
        Union\\n+\\n+import platformdirs\\n+\\n+from spotdl.types.options import (\\n+
        \   DownloaderOptions,\\n+    SpotDLOptions,\\n+    SpotifyOptions,\\n+    WebOptions,\\n+)\\n+\\n+__all__
        = [\\n+    \\\"ConfigError\\\",\\n+    \\\"get_spotdl_path\\\",\\n+    \\\"get_config_file\\\",\\n+
        \   \\\"get_cache_path\\\",\\n+    \\\"get_temp_path\\\",\\n+    \\\"get_errors_path\\\",\\n+
        \   \\\"get_config\\\",\\n+    \\\"create_settings_type\\\",\\n+    \\\"create_settings\\\",\\n+
        \   \\\"SPOTIFY_OPTIONS\\\",\\n+    \\\"DOWNLOADER_OPTIONS\\\",\\n+    \\\"WEB_OPTIONS\\\",\\n+
        \   \\\"DEFAULT_CONFIG\\\",\\n+]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+\\n+class
        ConfigError(Exception):\\n+    \\\"\\\"\\\"\\n+    Base class for all exceptions
        related to config.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+def get_spotdl_path() ->
        Path:\\n+    \\\"\\\"\\\"\\n+    Get the path to the spotdl folder.\\n+\\n+
        \   ### Returns\\n+    - The path to the spotdl folder.\\n+\\n+    ### Notes\\n+
        \   - If the spotdl directory does not exist, it will be created.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if os is linux\\n+    if platform.system() == \\\"Linux\\\":\\n+
        \       # if platform is linux, and XDG DATA HOME spotdl folder exists, use
        it\\n+        user_data_dir = Path(platformdirs.user_data_dir(\\\"spotdl\\\",
        \\\"spotDL\\\"))\\n+        if user_data_dir.exists():\\n+            return
        user_data_dir\\n+\\n+    spotdl_path = Path(os.path.expanduser(\\\"~\\\"),
        \\\".spotdl\\\")\\n+    if not spotdl_path.exists():\\n+        os.mkdir(spotdl_path)\\n+\\n+
        \   return spotdl_path\\n+\\n+\\n+def get_config_file() -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Get config file path\\n+\\n+    ### Returns\\n+    - The path to the config
        file.\\n+    \\\"\\\"\\\"\\n+\\n+    return get_spotdl_path() / \\\"config.json\\\"\\n+\\n+\\n+def
        get_cache_path() -> Path:\\n+    \\\"\\\"\\\"\\n+    Get the path to the cache
        folder.\\n+\\n+    ### Returns\\n+    - The path to the spotipy cache file.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    return get_spotdl_path() / \\\".spotipy\\\"\\n+\\n+\\n+def
        get_spotify_cache_path() -> Path:\\n+    \\\"\\\"\\\"\\n+    Get the path
        to the spotify cache folder.\\n+\\n+    ### Returns\\n+    - The path to the
        spotipy cache file.\\n+    \\\"\\\"\\\"\\n+\\n+    return get_spotdl_path()
        / \\\".spotify_cache\\\"\\n+\\n+\\n+def get_temp_path() -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Get the path to the temp folder.\\n+\\n+    ### Returns\\n+    - The path
        to the temp folder.\\n+    \\\"\\\"\\\"\\n+\\n+    temp_path = get_spotdl_path()
        / \\\"temp\\\"\\n+    if not temp_path.exists():\\n+        os.mkdir(temp_path)\\n+\\n+
        \   return temp_path\\n+\\n+\\n+def get_errors_path() -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Get the path to the errors folder.\\n+\\n+    ### Returns\\n+    - The
        path to the errors folder.\\n+\\n+    ### Notes\\n+    - If the errors directory
        does not exist, it will be created.\\n+    \\\"\\\"\\\"\\n+\\n+    errors_path
        = get_spotdl_path() / \\\"errors\\\"\\n+\\n+    if not errors_path.exists():\\n+
        \       os.mkdir(errors_path)\\n+\\n+    return errors_path\\n+\\n+\\n+def
        get_config() -> Dict[str, Any]:\\n+    \\\"\\\"\\\"\\n+    Get the config.\\n+\\n+
        \   ### Returns\\n+    - The dictionary with the config.\\n+\\n+    ### Errors\\n+
        \   - ConfigError: If the config file does not exist.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   config_path = get_config_file()\\n+\\n+    if not config_path.exists():\\n+
        \       raise ConfigError(\\n+            \\\"Config file not found.\\\"\\n+
        \           \\\"Please run `spotdl --generate-config` to create a config file.\\\"\\n+
        \       )\\n+\\n+    with open(config_path, \\\"r\\\", encoding=\\\"utf-8\\\")
        as config_file:\\n+        return json.load(config_file)\\n+\\n+\\n+def create_settings_type(\\n+
        \   arguments: Namespace,\\n+    config: Dict[str, Any],\\n+    default: Union[SpotifyOptions,
        DownloaderOptions, WebOptions],\\n+) -> Dict[str, Any]:\\n+    \\\"\\\"\\\"\\n+
        \   Create settings dict\\n+    Argument value has always the priority, then
        the config file\\n+    value, and if neither are set, use default value\\n+\\n+
        \   ### Arguments\\n+    - arguments: Namespace from argparse\\n+    - default:
        dict\\n+\\n+    ### Returns\\n+    - settings: dict\\n+    \\\"\\\"\\\"\\n+\\n+
        \   settings = {}\\n+    for key, default_value in default.items():\\n+        argument_val
        = arguments.__dict__.get(key)\\n+        config_val = config.get(key)\\n+\\n+
        \       if argument_val is not None:\\n+            settings[key] = argument_val\\n+
        \       elif config_val is not None:\\n+            settings[key] = config_val\\n+
        \       else:\\n+            settings[key] = default_value\\n+\\n+    return
        settings\\n+\\n+\\n+def create_settings(\\n+    arguments: Namespace,\\n+)
        -> Tuple[SpotifyOptions, DownloaderOptions, WebOptions]:\\n+    \\\"\\\"\\\"\\n+
        \   Create settings dicts for Spotify, Downloader and Web\\n+    based on
        the arguments and config file (if enabled)\\n+\\n+    ### Arguments\\n+    -
        arguments: Namespace from argparse\\n+\\n+    ### Returns\\n+    - spotify_options:
        SpotifyOptions\\n+    - downloader_options: DownloaderOptions\\n+    - web_options:
        WebOptions\\n+    \\\"\\\"\\\"\\n+\\n+    # Get the config file\\n+    # It
        will automatically load if the `load_config` is set to True\\n+    # in the
        config file\\n+    config = {}\\n+    if arguments.config or (\\n+        get_config_file().exists()
        and get_config().get(\\\"load_config\\\")\\n+    ):\\n+        config = get_config()\\n+\\n+
        \   # Type: ignore because of the issues below\\n+    # https://github.com/python/mypy/issues/8890\\n+
        \   # https://github.com/python/mypy/issues/5382\\n+    spotify_options =
        SpotifyOptions(\\n+        **create_settings_type(arguments, config, SPOTIFY_OPTIONS)
        \ # type: ignore\\n+    )\\n+    downloader_options = DownloaderOptions(\\n+
        \       **create_settings_type(arguments, config, DOWNLOADER_OPTIONS)  # type:
        ignore\\n+    )\\n+    web_options = WebOptions(**create_settings_type(arguments,
        config, WEB_OPTIONS))  # type: ignore\\n+\\n+    return spotify_options, downloader_options,
        web_options\\n+\\n+\\n+def modernize_settings(options: DownloaderOptions):\\n+
        \   \\\"\\\"\\\"Handle deprecated values in config file.\\n+\\n+    ### Arguments\\n+
        \   - options: DownloaderOptions to modernize\\n+    \\\"\\\"\\\"\\n+\\n+
        \   warning_msg = \\\"Deprecated '%s' value found for '%s' setting in config
        file. Using '%s' instead.\\\"\\n+\\n+    # Respect backward compatibility
        with old boolean --restrict flag\\n+    if options[\\\"restrict\\\"] is True:\\n+
        \       logger.warning(warning_msg, True, \\\"restrict\\\", \\\"strict\\\")\\n+
        \       options[\\\"restrict\\\"] = \\\"strict\\\"\\n+\\n+\\n+class GlobalConfig:\\n+
        \   \\\"\\\"\\\"\\n+    Class to store global configuration\\n+    \\\"\\\"\\\"\\n+\\n+
        \   parameters: Dict[str, Any] = {}\\n+\\n+    @classmethod\\n+    def set_parameter(cls,
        key, value):\\n+        \\\"\\\"\\\"\\n+        Set a parameter for the download
        config\\n+        \\\"\\\"\\\"\\n+\\n+        cls.parameters[key] = value\\n+\\n+
        \   @classmethod\\n+    def get_parameter(cls, key):\\n+        \\\"\\\"\\\"\\n+
        \       Get a parameter from the download config\\n+        \\\"\\\"\\\"\\n+\\n+
        \       return cls.parameters.get(key, None)\\n+\\n+\\n+SPOTIFY_OPTIONS: SpotifyOptions
        = {\\n+    \\\"client_id\\\": \\\"5f573c9620494bae87890c0f08a60293\\\",\\n+
        \   \\\"client_secret\\\": \\\"212476d9b0f3472eaa762d90b19b0ba8\\\",\\n+    \\\"auth_token\\\":
        None,\\n+    \\\"user_auth\\\": False,\\n+    \\\"headless\\\": False,\\n+
        \   \\\"cache_path\\\": str(get_cache_path()),\\n+    \\\"no_cache\\\": False,\\n+
        \   \\\"max_retries\\\": 3,\\n+    \\\"use_cache_file\\\": False,\\n+}\\n+\\n+DOWNLOADER_OPTIONS:
        DownloaderOptions = {\\n+    \\\"audio_providers\\\": [\\\"youtube-music\\\"],\\n+
        \   \\\"lyrics_providers\\\": [\\\"genius\\\", \\\"azlyrics\\\", \\\"musixmatch\\\"],\\n+
        \   \\\"playlist_numbering\\\": False,\\n+    \\\"scan_for_songs\\\": False,\\n+
        \   \\\"m3u\\\": None,\\n+    \\\"output\\\": \\\"{artists} - {title}.{output-ext}\\\",\\n+
        \   \\\"overwrite\\\": \\\"skip\\\",\\n+    \\\"search_query\\\": None,\\n+
        \   \\\"ffmpeg\\\": \\\"ffmpeg\\\",\\n+    \\\"bitrate\\\": None,\\n+    \\\"ffmpeg_args\\\":
        None,\\n+    \\\"format\\\": \\\"mp3\\\",\\n+    \\\"save_file\\\": None,\\n+
        \   \\\"filter_results\\\": True,\\n+    \\\"album_type\\\": None,\\n+    \\\"threads\\\":
        4,\\n+    \\\"cookie_file\\\": None,\\n+    \\\"restrict\\\": None,\\n+    \\\"print_errors\\\":
        False,\\n+    \\\"sponsor_block\\\": False,\\n+    \\\"preload\\\": False,\\n+
        \   \\\"archive\\\": None,\\n+    \\\"load_config\\\": True,\\n+    \\\"log_level\\\":
        \\\"INFO\\\",\\n+    \\\"simple_tui\\\": False,\\n+    \\\"fetch_albums\\\":
        False,\\n+    \\\"id3_separator\\\": \\\"/\\\",\\n+    \\\"ytm_data\\\": False,\\n+
        \   \\\"add_unavailable\\\": False,\\n+    \\\"generate_lrc\\\": False,\\n+
        \   \\\"force_update_metadata\\\": False,\\n+    \\\"only_verified_results\\\":
        False,\\n+    \\\"sync_without_deleting\\\": False,\\n+    \\\"max_filename_length\\\":
        None,\\n+    \\\"yt_dlp_args\\\": None,\\n+    \\\"detect_formats\\\": None,\\n+
        \   \\\"save_errors\\\": None,\\n+    \\\"ignore_albums\\\": None,\\n+    \\\"proxy\\\":
        None,\\n+    \\\"skip_explicit\\\": False,\\n+    \\\"log_format\\\": None,\\n+
        \   \\\"redownload\\\": False,\\n+    \\\"skip_album_art\\\": False,\\n+    \\\"create_skip_file\\\":
        False,\\n+    \\\"respect_skip_file\\\": False,\\n+}\\n+\\n+WEB_OPTIONS: WebOptions
        = {\\n+    \\\"web_use_output_dir\\\": False,\\n+    \\\"port\\\": 8800,\\n+
        \   \\\"host\\\": \\\"localhost\\\",\\n+    \\\"keep_alive\\\": False,\\n+
        \   \\\"allowed_origins\\\": None,\\n+    \\\"keep_sessions\\\": False,\\n+}\\n+\\n+#
        Type: ignore because of the issues above\\n+DEFAULT_CONFIG: SpotDLOptions
        = {\\n+    **SPOTIFY_OPTIONS,  # type: ignore\\n+    **DOWNLOADER_OPTIONS,
        \ # type: ignore\\n+    **WEB_OPTIONS,  # type: ignore\\n+}\"},{\"sha\":\"f53339ff95496566dfd9b7fc8ee114f44c8ffe20\",\"filename\":\"spotdl/utils/console.py\",\"status\":\"added\",\"additions\":122,\"deletions\":0,\"changes\":122,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fconsole.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fconsole.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fconsole.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,122 @@\\n+\\\"\\\"\\\"\\n+Module for holding console related actions.\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import sys\\n+\\n+from spotdl.utils.config import DEFAULT_CONFIG,
        get_config_file\\n+from spotdl.utils.ffmpeg import download_ffmpeg as ffmpeg_download\\n+from
        spotdl.utils.ffmpeg import get_local_ffmpeg, is_ffmpeg_installed\\n+from spotdl.utils.github
        import check_for_updates as get_update_status\\n+\\n+__all__ = [\\n+    \\\"is_frozen\\\",\\n+
        \   \\\"is_executable\\\",\\n+    \\\"generate_initial_config\\\",\\n+    \\\"generate_config\\\",\\n+
        \   \\\"check_for_updates\\\",\\n+    \\\"download_ffmpeg\\\",\\n+    \\\"ACTIONS\\\",\\n+]\\n+\\n+\\n+def
        is_frozen():\\n+    \\\"\\\"\\\"\\n+    Check if the application is frozen.\\n+\\n+
        \   ### Returns\\n+    - `True` if the application is frozen, `False` otherwise.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    return getattr(sys, \\\"frozen\\\", False)\\n+\\n+\\n+def
        is_executable():\\n+    \\\"\\\"\\\"\\n+    Check if the application is an
        prebuilt executable.\\n+    And has been launched with double click.\\n+\\n+
        \   ### Returns\\n+    - `True` if the application is an prebuilt executable,
        `False` otherwise.\\n+    \\\"\\\"\\\"\\n+\\n+    return is_frozen() and len(sys.argv)
        == 1\\n+\\n+\\n+def generate_initial_config():\\n+    \\\"\\\"\\\"\\n+    Generate
        the initial config file if it doesn't exist.\\n+    \\\"\\\"\\\"\\n+\\n+    if
        get_config_file().is_file() is False:\\n+        config_path = get_config_file()\\n+
        \       with open(config_path, \\\"w\\\", encoding=\\\"utf-8\\\") as config_file:\\n+
        \           json.dump(DEFAULT_CONFIG, config_file, indent=4)\\n+\\n+\\n+def
        generate_config():\\n+    \\\"\\\"\\\"\\n+    Generate the config file if
        it doesn't exist\\n+    This is done before the argument parser so it doesn't
        requires `operation`\\n+    and `query` to be passed.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   config_path = get_config_file()\\n+    if config_path.exists():\\n+        overwrite_config
        = input(\\\"Config file already exists. Overwrite? (y/N): \\\")\\n+\\n+        if
        overwrite_config.lower() != \\\"y\\\":\\n+            print(\\\"Exiting...\\\")\\n+
        \           return None\\n+\\n+    with open(config_path, \\\"w\\\", encoding=\\\"utf-8\\\")
        as config_file:\\n+        json.dump(DEFAULT_CONFIG, config_file, indent=4)\\n+\\n+
        \   print(f\\\"Config file generated at {config_path}\\\")\\n+\\n+    return
        None\\n+\\n+\\n+def check_for_updates():\\n+    \\\"\\\"\\\"\\n+    Check
        for updates to the current version.\\n+    \\\"\\\"\\\"\\n+\\n+    version_message
        = get_update_status()\\n+\\n+    print(version_message)\\n+\\n+\\n+def download_ffmpeg():\\n+
        \   \\\"\\\"\\\"\\n+    Handle ffmpeg download process and print the result.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    if get_local_ffmpeg() is not None or is_ffmpeg_installed():\\n+
        \       overwrite_ffmpeg = input(\\n+            \\\"FFmpeg is already installed.
        Do you want to overwrite it? (y/N): \\\"\\n+        )\\n+\\n+        if overwrite_ffmpeg.lower()
        == \\\"y\\\":\\n+            local_ffmpeg = ffmpeg_download()\\n+\\n+            if
        local_ffmpeg.is_file():\\n+                print(f\\\"FFmpeg successfully
        downloaded to {local_ffmpeg.absolute()}\\\")\\n+            else:\\n+                print(\\\"FFmpeg
        download failed\\\")\\n+    else:\\n+        print(\\\"Downloading FFmpeg...\\\")\\n+
        \       download_path = ffmpeg_download()\\n+\\n+        if download_path.is_file():\\n+
        \           print(f\\\"FFmpeg successfully downloaded to {download_path.absolute()}\\\")\\n+
        \       else:\\n+            print(\\\"FFmpeg download failed\\\")\\n+\\n+\\n+ACTIONS
        = {\\n+    \\\"--generate-config\\\": generate_config,\\n+    \\\"--check-for-updates\\\":
        check_for_updates,\\n+    \\\"--download-ffmpeg\\\": download_ffmpeg,\\n+}\"},{\"sha\":\"356842534ed75ad54b2e37933df5c466b74c5b89\",\"filename\":\"spotdl/utils/downloader.py\",\"status\":\"added\",\"additions\":25,\"deletions\":0,\"changes\":25,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fdownloader.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fdownloader.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fdownloader.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,25 @@\\n+\\\"\\\"\\\"\\n+Module for functions related to downloading
        songs.\\n+\\\"\\\"\\\"\\n+\\n+from spotdl.providers.audio import YouTubeMusic\\n+\\n+__all__
        = [\\\"check_ytmusic_connection\\\"]\\n+\\n+\\n+def check_ytmusic_connection()
        -> bool:\\n+    \\\"\\\"\\\"\\n+    Check if we can connect to YouTube Music
        API\\n+\\n+    ### Returns\\n+    - `True` if we can connect to YouTube Music
        API\\n+    - `False` if we can't connect to YouTube Music API\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if we are getting results from YouTube Music\\n+    ytm = YouTubeMusic()\\n+
        \   test_results = ytm.get_results(\\\"a\\\")\\n+    if len(test_results)
        == 0:\\n+        return False\\n+\\n+    return True\"},{\"sha\":\"8f530ac12be8fe8c6e8b2e2b478027dbf7102279\",\"filename\":\"spotdl/utils/ffmpeg.py\",\"status\":\"added\",\"additions\":407,\"deletions\":0,\"changes\":407,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fffmpeg.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,407 @@\\n+\\\"\\\"\\\"\\n+Module for converting audio files to different
        formats\\n+and checking for ffmpeg binary, and downloading it if not found.\\n+\\\"\\\"\\\"\\n+\\n+import
        os\\n+import platform\\n+import re\\n+import shlex\\n+import shutil\\n+import
        stat\\n+import subprocess\\n+from pathlib import Path\\n+from typing import
        Any, Callable, Dict, List, Optional, Tuple, Union\\n+\\n+import requests\\n+\\n+from
        spotdl.utils.config import get_spotdl_path\\n+from spotdl.utils.formatter
        import to_ms\\n+\\n+__all__ = [\\n+    \\\"FFMPEG_URLS\\\",\\n+    \\\"FFMPEG_FORMATS\\\",\\n+
        \   \\\"DUR_REGEX\\\",\\n+    \\\"TIME_REGEX\\\",\\n+    \\\"VERSION_REGEX\\\",\\n+
        \   \\\"YEAR_REGEX\\\",\\n+    \\\"FFmpegError\\\",\\n+    \\\"is_ffmpeg_installed\\\",\\n+
        \   \\\"get_ffmpeg_path\\\",\\n+    \\\"get_ffmpeg_version\\\",\\n+    \\\"get_local_ffmpeg\\\",\\n+
        \   \\\"download_ffmpeg\\\",\\n+    \\\"convert\\\",\\n+]\\n+\\n+FFMPEG_URLS
        = {\\n+    \\\"windows\\\": {\\n+        \\\"amd64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/win32-x64\\\",\\n+
        \       \\\"i686\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/win32-ia32\\\",\\n+
        \   },\\n+    \\\"linux\\\": {\\n+        \\\"x86_64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-x64\\\",\\n+
        \       \\\"x86\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-ia32\\\",\\n+
        \       \\\"arm32\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-arm\\\",\\n+
        \       \\\"aarch64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/linux-arm64\\\",\\n+
        \   },\\n+    \\\"darwin\\\": {\\n+        \\\"x86_64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/darwin-x64\\\",\\n+
        \       \\\"arm64\\\": \\\"https://github.com/eugeneware/ffmpeg-static/releases/download/b4.4/darwin-arm64\\\",\\n+
        \   },\\n+}\\n+\\n+FFMPEG_FORMATS = {\\n+    \\\"mp3\\\": [\\\"-codec:a\\\",
        \\\"libmp3lame\\\"],\\n+    \\\"flac\\\": [\\\"-codec:a\\\", \\\"flac\\\",
        \\\"-sample_fmt\\\", \\\"s16\\\"],\\n+    \\\"ogg\\\": [\\\"-codec:a\\\",
        \\\"libvorbis\\\"],\\n+    \\\"opus\\\": [\\\"-codec:a\\\", \\\"libopus\\\"],\\n+
        \   \\\"m4a\\\": [\\\"-codec:a\\\", \\\"aac\\\"],\\n+    \\\"wav\\\": [\\\"-codec:a\\\",
        \\\"pcm_s16le\\\"],\\n+}\\n+\\n+DUR_REGEX = re.compile(\\n+    r\\\"Duration:
        (?P<hour>\\\\d{2}):(?P<min>\\\\d{2}):(?P<sec>\\\\d{2})\\\\.(?P<ms>\\\\d{2})\\\"\\n+)\\n+TIME_REGEX
        = re.compile(\\n+    r\\\"out_time=(?P<hour>\\\\d{2}):(?P<min>\\\\d{2}):(?P<sec>\\\\d{2})\\\\.(?P<ms>\\\\d{2})\\\"\\n+)\\n+VERSION_REGEX
        = re.compile(r\\\"ffmpeg version \\\\w?(\\\\d+\\\\.)?(\\\\d+)\\\")\\n+YEAR_REGEX
        = re.compile(r\\\"Copyright \\\\(c\\\\) \\\\d\\\\d\\\\d\\\\d\\\\-\\\\d\\\\d\\\\d\\\\d\\\")\\n+\\n+\\n+class
        FFmpegError(Exception):\\n+    \\\"\\\"\\\"\\n+    Base class for all exceptions
        related to FFmpeg.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+def is_ffmpeg_installed(ffmpeg:
        str = \\\"ffmpeg\\\") -> bool:\\n+    \\\"\\\"\\\"\\n+    Check if ffmpeg
        is installed.\\n+\\n+    ### Arguments\\n+    - ffmpeg: ffmpeg executable
        to check\\n+\\n+    ### Returns\\n+    - True if ffmpeg is installed, False
        otherwise.\\n+    \\\"\\\"\\\"\\n+\\n+    if ffmpeg == \\\"ffmpeg\\\":\\n+
        \       global_ffmpeg = shutil.which(\\\"ffmpeg\\\")\\n+        if global_ffmpeg
        is None:\\n+            ffmpeg_path = get_ffmpeg_path()\\n+        else:\\n+
        \           ffmpeg_path = Path(global_ffmpeg)\\n+    else:\\n+        ffmpeg_path
        = Path(ffmpeg)\\n+\\n+    if ffmpeg_path is None:\\n+        return False\\n+\\n+
        \   # else check if path to ffmpeg is valid\\n+    # and if ffmpeg has the
        correct access rights\\n+    return ffmpeg_path.exists() and os.access(ffmpeg_path,
        os.X_OK)\\n+\\n+\\n+def get_ffmpeg_path() -> Optional[Path]:\\n+    \\\"\\\"\\\"\\n+
        \   Get path to global ffmpeg binary or a local ffmpeg binary.\\n+\\n+    ###
        Returns\\n+    - Path to ffmpeg binary or None if not found.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if ffmpeg is installed\\n+    global_ffmpeg = shutil.which(\\\"ffmpeg\\\")\\n+
        \   if global_ffmpeg:\\n+        return Path(global_ffmpeg)\\n+\\n+    # Get
        local ffmpeg path\\n+    return get_local_ffmpeg()\\n+\\n+\\n+def get_ffmpeg_version(ffmpeg:
        str = \\\"ffmpeg\\\") -> Tuple[Optional[float], Optional[int]]:\\n+    \\\"\\\"\\\"\\n+
        \   Get ffmpeg version.\\n+\\n+    ### Arguments\\n+    - ffmpeg: ffmpeg executable
        to check\\n+\\n+    ### Returns\\n+    - Tuple of optional version and optional
        year.\\n+\\n+    ### Errors\\n+    - FFmpegError if ffmpeg is not installed.\\n+
        \   - FFmpegError if ffmpeg version is not found.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Check if ffmpeg is installed\\n+    if not is_ffmpeg_installed(ffmpeg):\\n+
        \       if ffmpeg == \\\"ffmpeg\\\":\\n+            raise FFmpegError(\\\"ffmpeg
        is not installed.\\\")\\n+\\n+        raise FFmpegError(f\\\"{ffmpeg} is not
        a valid ffmpeg executable.\\\")\\n+\\n+    with subprocess.Popen(\\n+        [ffmpeg,
        \\\"-version\\\"],\\n+        stdout=subprocess.PIPE,\\n+        stderr=subprocess.PIPE,\\n+
        \       encoding=\\\"utf-8\\\",\\n+    ) as process:\\n+        output = \\\"\\\".join(process.communicate())\\n+\\n+
        \   # Search for version and build year in output\\n+    version_result =
        VERSION_REGEX.search(output)\\n+    year_result = YEAR_REGEX.search(output)\\n+\\n+
        \   build_year = None\\n+    version = None\\n+\\n+    if version_result is
        not None:\\n+        # remove all non numeric characters from string example:
        n4.3\\n+        version_str = re.sub(r\\\"[a-zA-Z]\\\", \\\"\\\", version_result.group(0))\\n+\\n+
        \       # parse version string to float\\n+        version = float(version_str)
        if version_str else None\\n+\\n+    if year_result is not None:\\n+        #
        get build years from string example: Copyright (c) 2019-2020\\n+        build_years
        = [\\n+            int(\\n+                re.sub(r\\\"[^0-9]\\\", \\\"\\\",
        year)\\n+            )  # remove all non numeric characters from string\\n+
        \           for year in year_result.group(0).split(\\n+                \\\"-\\\"\\n+
        \           )  # split string into list of years\\n+        ]\\n+\\n+        #
        get the highest build year\\n+        build_year = max(build_years)\\n+\\n+
        \   return (version, build_year)\\n+\\n+\\n+def get_local_ffmpeg() -> Optional[Path]:\\n+
        \   \\\"\\\"\\\"\\n+    Get local ffmpeg binary path.\\n+\\n+    ### Returns\\n+
        \   - Path to ffmpeg binary or None if not found.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   ffmpeg_path = Path(get_spotdl_path()) / (\\n+        \\\"ffmpeg\\\" +
        (\\\".exe\\\" if platform.system() == \\\"Windows\\\" else \\\"\\\")\\n+    )\\n+\\n+
        \   if ffmpeg_path.is_file():\\n+        return ffmpeg_path\\n+\\n+    return
        None\\n+\\n+\\n+def download_ffmpeg() -> Path:\\n+    \\\"\\\"\\\"\\n+    Download
        ffmpeg binary to spotdl directory.\\n+\\n+    ### Returns\\n+    - Path to
        ffmpeg binary.\\n+\\n+    ### Notes\\n+    - ffmpeg is downloaded from github
        releases\\n+        for current platform and architecture.\\n+    - executable
        permission is set for ffmpeg binary.\\n+    \\\"\\\"\\\"\\n+\\n+    os_name
        = platform.system().lower()\\n+    os_arch = platform.machine().lower()\\n+
        \   ffmpeg_url: Optional[str] = None\\n+\\n+    # if platform.system() ==
        \\\"Darwin\\\" and (\\n+    #     platform.processor() == \\\"arm\\\"\\n+
        \   #     or subprocess.run([\\\"sysctl\\\", \\\"-n\\\", \\\"sysctl.proc_translated\\\"],
        check=False)\\n+    # ):\\n+    #     ffmpeg_url = FFMPEG_URLS[\\\"darwin\\\"][\\\"arm\\\"]\\n+
        \   # else:\\n+    #     ffmpeg_url = FFMPEG_URLS.get(os_name, {}).get(os_arch)\\n+\\n+
        \   ffmpeg_url = FFMPEG_URLS.get(os_name, {}).get(os_arch)\\n+\\n+    if ffmpeg_url
        is None:\\n+        raise FFmpegError(\\\"FFmpeg binary is not available for
        your system.\\\")\\n+\\n+    ffmpeg_path = Path(\\n+        os.path.join(\\n+
        \           get_spotdl_path(), \\\"ffmpeg\\\" + (\\\".exe\\\" if os_name ==
        \\\"windows\\\" else \\\"\\\")\\n+        )\\n+    )\\n+\\n+    # Download
        binary and save it to a file in spotdl directory\\n+    ffmpeg_binary = requests.get(ffmpeg_url,
        allow_redirects=True, timeout=10).content\\n+    with open(ffmpeg_path, \\\"wb\\\")
        as ffmpeg_file:\\n+        ffmpeg_file.write(ffmpeg_binary)\\n+\\n+    # Set
        executable permission on linux and mac\\n+    if os_name in [\\\"linux\\\",
        \\\"darwin\\\"]:\\n+        ffmpeg_path.chmod(ffmpeg_path.stat().st_mode |
        stat.S_IEXEC)\\n+\\n+    return ffmpeg_path\\n+\\n+\\n+def convert(\\n+    input_file:
        Union[Path, Tuple[str, str]],\\n+    output_file: Path,\\n+    ffmpeg: str
        = \\\"ffmpeg\\\",\\n+    output_format: str = \\\"mp3\\\",\\n+    bitrate:
        Optional[str] = None,\\n+    ffmpeg_args: Optional[str] = None,\\n+    progress_handler:
        Optional[Callable[[int], None]] = None,\\n+) -> Tuple[bool, Optional[Dict[str,
        Any]]]:\\n+    \\\"\\\"\\\"\\n+    Convert the input file to the output file
        synchronously with progress handler.\\n+\\n+    ### Arguments\\n+    - input_file:
        Path to input file or tuple of (url, file_format).\\n+    - output_file: Path
        to output file.\\n+    - ffmpeg: ffmpeg executable to use.\\n+    - output_format:
        output format.\\n+    - bitrate: constant/variable bitrate.\\n+    - ffmpeg_args:
        ffmpeg arguments.\\n+    - progress_handler: progress handler, has to accept
        an integer as argument.\\n+\\n+    ### Returns\\n+    - Tuple of conversion
        status and error dictionary.\\n+\\n+    ### Notes\\n+    - Make sure to check
        if ffmpeg is installed before calling this function.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Initialize ffmpeg command\\n+    # -i is the input file\\n+    arguments:
        List[str] = [\\n+        \\\"-nostdin\\\",\\n+        \\\"-y\\\",\\n+        \\\"-i\\\",\\n+
        \       str(input_file.resolve()) if isinstance(input_file, Path) else input_file[0],\\n+
        \       \\\"-movflags\\\",\\n+        \\\"+faststart\\\",\\n+        \\\"-v\\\",\\n+
        \       \\\"debug\\\",\\n+        \\\"-progress\\\",\\n+        \\\"-\\\",\\n+
        \       \\\"-nostats\\\",\\n+    ]\\n+\\n+    file_format = (\\n+        str(input_file.suffix).split(\\\".\\\")[1]\\n+
        \       if isinstance(input_file, Path)\\n+        else input_file[1]\\n+
        \   )\\n+\\n+    # Add output format to command\\n+    # -c:a is used if the
        file is not an matroska container\\n+    # and we want to convert to opus\\n+
        \   # otherwise we use arguments from FFMPEG_FORMATS\\n+    if output_format
        == \\\"opus\\\" and file_format != \\\"webm\\\":\\n+        arguments.extend([\\\"-c:a\\\",
        \\\"libopus\\\"])\\n+    else:\\n+        if (\\n+            (output_format
        == \\\"opus\\\" and file_format == \\\"webm\\\")\\n+            or (output_format
        == \\\"m4a\\\" and file_format == \\\"m4a\\\")\\n+            and not (bitrate
        or ffmpeg_args)\\n+        ):\\n+            # Copy the audio stream to the
        output file\\n+            arguments.extend([\\\"-vn\\\", \\\"-c:a\\\", \\\"copy\\\"])\\n+
        \       else:\\n+            arguments.extend(FFMPEG_FORMATS[output_format])\\n+\\n+
        \   # Add bitrate if specified\\n+    if bitrate:\\n+        # Check if bitrate
        is an integer\\n+        # if it is then use it as variable bitrate\\n+        if
        bitrate.isdigit():\\n+            arguments.extend([\\\"-q:a\\\", bitrate])\\n+
        \       else:\\n+            arguments.extend([\\\"-b:a\\\", bitrate])\\n+\\n+
        \   # Add other ffmpeg arguments if specified\\n+    if ffmpeg_args:\\n+        arguments.extend(shlex.split(ffmpeg_args))\\n+\\n+
        \   # Add output file at the end\\n+    arguments.append(str(output_file.resolve()))\\n+\\n+
        \   # Run ffmpeg\\n+    with subprocess.Popen(\\n+        [ffmpeg, *arguments],\\n+
        \       stdin=subprocess.PIPE,\\n+        stdout=subprocess.PIPE,\\n+        stderr=subprocess.STDOUT,\\n+
        \       universal_newlines=False,\\n+    ) as process:\\n+        if not progress_handler:\\n+
        \           # Wait for process to finish\\n+            proc_out = process.communicate()\\n+\\n+
        \           if process.returncode != 0:\\n+                # get version and
        build year\\n+                version = get_ffmpeg_version(ffmpeg)\\n+\\n+
        \               # join stdout and stderr and decode to utf-8\\n+                message
        = b\\\"\\\".join([out for out in proc_out if out]).decode(\\\"utf-8\\\")\\n+\\n+
        \               # return error dictionary\\n+                return False,
        {\\n+                    \\\"return_code\\\": process.returncode,\\n+                    \\\"arguments\\\":
        arguments,\\n+                    \\\"ffmpeg\\\": ffmpeg,\\n+                    \\\"version\\\":
        version[0],\\n+                    \\\"build_year\\\": version[1],\\n+                    \\\"error\\\":
        message,\\n+                }\\n+\\n+            return True, None\\n+\\n+
        \       progress_handler(0)\\n+\\n+        out_buffer = []\\n+        total_dur
        = None\\n+        while True:\\n+            if process.stdout is None:\\n+
        \               continue\\n+\\n+            out_line = (\\n+                process.stdout.readline().decode(\\\"utf-8\\\",
        errors=\\\"replace\\\").strip()\\n+            )\\n+\\n+            if out_line
        == \\\"\\\" and process.poll() is not None:\\n+                break\\n+\\n+
        \           out_buffer.append(out_line.strip())\\n+\\n+            total_dur_match
        = DUR_REGEX.search(out_line)\\n+            if total_dur is None and total_dur_match:\\n+
        \               total_dur = to_ms(**total_dur_match.groupdict())  # type:
        ignore\\n+                continue\\n+            if total_dur:\\n+                progress_time
        = TIME_REGEX.search(out_line)\\n+                if progress_time:\\n+                    elapsed_time
        = to_ms(**progress_time.groupdict())  # type: ignore\\n+                    progress_handler(int(elapsed_time
        / total_dur * 100))  # type: ignore\\n+\\n+        if process.returncode !=
        0:\\n+            # get version and build year\\n+            version = get_ffmpeg_version(ffmpeg)\\n+\\n+
        \           return False, {\\n+                \\\"return_code\\\": process.returncode,\\n+
        \               \\\"arguments\\\": arguments,\\n+                \\\"ffmpeg\\\":
        ffmpeg,\\n+                \\\"version\\\": version[0],\\n+                \\\"build_year\\\":
        version[1],\\n+                \\\"error\\\": \\\"\\\\n\\\".join(out_buffer),\\n+
        \           }\\n+\\n+        progress_handler(100)\\n+\\n+        return True,
        None\"},{\"sha\":\"1f76d05d800562aecd5e1877c2af903781e9486c\",\"filename\":\"spotdl/utils/formatter.py\",\"status\":\"added\",\"additions\":644,\"deletions\":0,\"changes\":644,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fformatter.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fformatter.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fformatter.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,644 @@\\n+\\\"\\\"\\\"\\n+Module for formatting songs into strings.\\n+Contains
        functions to create search queries and song titles\\n+and file names.\\n+\\\"\\\"\\\"\\n+\\n+import
        copy\\n+import logging\\n+import re\\n+from functools import lru_cache\\n+from
        pathlib import Path\\n+from typing import Any, Dict, List, Optional\\n+from
        unicodedata import normalize\\n+\\n+import pykakasi\\n+from rapidfuzz import
        fuzz\\n+from slugify import slugify as py_slugify\\n+from yt_dlp.options import
        create_parser\\n+from yt_dlp.utils import sanitize_filename\\n+\\n+from spotdl.types.song
        import Song\\n+\\n+__all__ = [\\n+    \\\"VARS\\\",\\n+    \\\"JAP_REGEX\\\",\\n+
        \   \\\"DISALLOWED_REGEX\\\",\\n+    \\\"create_song_title\\\",\\n+    \\\"sanitize_string\\\",\\n+
        \   \\\"slugify\\\",\\n+    \\\"format_query\\\",\\n+    \\\"create_search_query\\\",\\n+
        \   \\\"create_file_name\\\",\\n+    \\\"parse_duration\\\",\\n+    \\\"to_ms\\\",\\n+
        \   \\\"restrict_filename\\\",\\n+    \\\"ratio\\\",\\n+    \\\"smart_split\\\",\\n+
        \   \\\"create_path_object\\\",\\n+    \\\"args_to_ytdlp_options\\\",\\n+]\\n+\\n+VARS
        = [\\n+    \\\"{title}\\\",\\n+    \\\"{artists}\\\",\\n+    \\\"{artist}\\\",\\n+
        \   \\\"{album}\\\",\\n+    \\\"{album-artist}\\\",\\n+    \\\"{genre}\\\",\\n+
        \   \\\"{disc-number}\\\",\\n+    \\\"{disc-count}\\\",\\n+    \\\"{duration}\\\",\\n+
        \   \\\"{year}\\\",\\n+    \\\"{original-date}\\\",\\n+    \\\"{track-number}\\\",\\n+
        \   \\\"{tracks-count}\\\",\\n+    \\\"{isrc}\\\",\\n+    \\\"{track-id}\\\",\\n+
        \   \\\"{publisher}\\\",\\n+    \\\"{list-length}\\\",\\n+    \\\"{list-position}\\\",\\n+
        \   \\\"{list-name}\\\",\\n+    \\\"{output-ext}\\\",\\n+]\\n+\\n+KKS = pykakasi.kakasi()\\n+\\n+JAP_REGEX
        = re.compile(\\n+    \\\"[\\\\u3000-\\\\u303f\\\\u3040-\\\\u309f\\\\u30a0-\\\\u30ff\\\\uff00-\\\\uff9f\\\\u4e00-\\\\u9faf\\\\u3400-\\\\u4dbf]\\\"\\n+)\\n+\\n+DISALLOWED_REGEX
        = re.compile(r\\\"[^-a-zA-Z0-9\\\\!\\\\@\\\\$]+\\\")\\n+YT_DLP_PARSER = create_parser()\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+def create_song_title(song_name:
        str, song_artists: List[str]) -> str:\\n+    \\\"\\\"\\\"\\n+    Create the
        song title.\\n+\\n+    ### Arguments\\n+    - song_name: the name of the song\\n+
        \   - song_artists: the list of artists of the song\\n+\\n+    ### Returns\\n+
        \   - the song title\\n+\\n+    ### Notes\\n+    - Example: \\\"Artist1, Artist2
        - Song Name\\\"\\n+\\n+    \\\"\\\"\\\"\\n+\\n+    joined_artists = \\\",
        \\\".join(song_artists)\\n+    if len(song_artists) >= 1:\\n+        return
        f\\\"{joined_artists} - {song_name}\\\"\\n+\\n+    return song_name\\n+\\n+\\n+def
        sanitize_string(string: str) -> str:\\n+    \\\"\\\"\\\"\\n+    Sanitize the
        filename to be used in the file system.\\n+\\n+    ### Arguments\\n+    -
        string: the string to sanitize\\n+\\n+    ### Returns\\n+    - the sanitized
        string\\n+    \\\"\\\"\\\"\\n+\\n+    output = string\\n+\\n+    # this is
        windows specific (disallowed chars)\\n+    output = \\\"\\\".join(char for
        char in output if char not in \\\"/?\\\\\\\\*|<>\\\")\\n+\\n+    # double
        quotes (\\\") and semi-colons (:) are also disallowed characters but we would\\n+
        \   # like to retain their equivalents, so they aren't removed in the prior
        loop\\n+    output = output.replace('\\\"', \\\"'\\\").replace(\\\":\\\",
        \\\"-\\\")\\n+\\n+    return output\\n+\\n+\\n+@lru_cache()\\n+def slugify(string:
        str) -> str:\\n+    \\\"\\\"\\\"\\n+    Slugify the string.\\n+\\n+    ###
        Arguments\\n+    - string: the string to slugify\\n+\\n+    ### Returns\\n+
        \   - the slugified string\\n+    \\\"\\\"\\\"\\n+\\n+    # Replace ambiguous
        characters\\n+    if not JAP_REGEX.search(string):\\n+        # If string
        doesn't have japanese characters\\n+        # return early\\n+        return
        py_slugify(string, regex_pattern=DISALLOWED_REGEX.pattern)\\n+\\n+    # Workaround
        for japanese characters\\n+    # because slugify incorrectly converts them\\n+
        \   # to latin characters\\n+    normal_slug = py_slugify(\\n+        string,\\n+
        \       regex_pattern=JAP_REGEX.pattern,\\n+    )\\n+\\n+    results = KKS.convert(normal_slug)\\n+\\n+
        \   result = \\\"\\\"\\n+    for index, item in enumerate(results):\\n+        result
        += item[\\\"hepburn\\\"]\\n+        if not (\\n+            item[\\\"kana\\\"]
        == item[\\\"hepburn\\\"]\\n+            or item[\\\"kana\\\"] == item[\\\"hepburn\\\"]\\n+
        \           or (\\n+                item == results[-1]\\n+                or
        results[index + 1][\\\"kana\\\"] == results[index + 1][\\\"hepburn\\\"]\\n+
        \           )\\n+        ):\\n+            result += \\\"-\\\"\\n+\\n+    return
        py_slugify(result, regex_pattern=DISALLOWED_REGEX.pattern)\\n+\\n+\\n+def
        format_query(\\n+    song: Song,\\n+    template: str,\\n+    santitize: bool,\\n+
        \   file_extension: Optional[str] = None,\\n+    short: bool = False,\\n+)
        -> str:\\n+    \\\"\\\"\\\"\\n+    Replace template variables with the actual
        values.\\n+\\n+    ### Arguments\\n+    - song: the song object\\n+    - template:
        the template string\\n+    - santitize: whether to sanitize the string\\n+
        \   - file_extension: the file extension to use\\n+    - short: whether to
        use the short version of the template\\n+\\n+    ### Returns\\n+    - the
        formatted string\\n+    \\\"\\\"\\\"\\n+\\n+    if \\\"{output-ext}\\\" in
        template and file_extension is None:\\n+        raise ValueError(\\\"file_extension
        is None, but template contains {output-ext}\\\")\\n+\\n+    for key, val in
        [\\n+        (\\\"{list-length}\\\", song.list_length),\\n+        (\\\"{list-position}\\\",
        song.list_position),\\n+        (\\\"{list-name}\\\", song.list_name),\\n+
        \   ]:\\n+        if not (key in template and val is None):\\n+            continue\\n+\\n+
        \       logger.warning(\\n+            \\\"Template contains %s, but it's
        value is None. Replacing with empty string.\\\",\\n+            key,\\n+        )\\n+\\n+
        \       template = template.replace(key, \\\"\\\")\\n+        template = template.replace(r\\\"//\\\",
        r\\\"/\\\")\\n+\\n+    # If template has only {output-ext}, fix it\\n+    if
        template in [\\\"/.{output-ext}\\\", \\\".{output-ext}\\\"]:\\n+        template
        = \\\"{artists} - {title}.{output-ext}\\\"\\n+\\n+    # Remove artists from
        the list that are already in the title\\n+    artists = [\\n+        artist
        for artist in song.artists if slugify(artist) not in slugify(song.name)\\n+
        \   ]\\n+\\n+    # Add the main artist again to the list\\n+    if len(artists)
        == 0 or artists[0] != song.artists[0]:\\n+        artists.insert(0, song.artists[0])\\n+\\n+
        \   artists_str = \\\", \\\".join(artists)\\n+\\n+    # the code below is
        valid, song_list is actually checked for None\\n+    formats = {\\n+        \\\"{title}\\\":
        song.name,\\n+        \\\"{artists}\\\": song.artists[0] if short is True
        else artists_str,\\n+        \\\"{artist}\\\": song.artists[0],\\n+        \\\"{album}\\\":
        song.album_name,\\n+        \\\"{album-artist}\\\": song.album_artist,\\n+
        \       \\\"{genre}\\\": song.genres[0] if song.genres else \\\"\\\",\\n+
        \       \\\"{disc-number}\\\": song.disc_number,\\n+        \\\"{disc-count}\\\":
        song.disc_count,\\n+        \\\"{duration}\\\": song.duration,\\n+        \\\"{year}\\\":
        song.year,\\n+        \\\"{original-date}\\\": song.date,\\n+        \\\"{track-number}\\\":
        f\\\"{song.track_number:02d}\\\" if song.track_number else \\\"\\\",\\n+        \\\"{tracks-count}\\\":
        song.tracks_count,\\n+        \\\"{isrc}\\\": song.isrc,\\n+        \\\"{track-id}\\\":
        song.song_id,\\n+        \\\"{publisher}\\\": song.publisher,\\n+        \\\"{output-ext}\\\":
        file_extension,\\n+        \\\"{list-name}\\\": song.list_name,\\n+        \\\"{list-position}\\\":
        str(song.list_position).zfill(len(str(song.list_length))),\\n+        \\\"{list-length}\\\":
        song.list_length,\\n+    }\\n+\\n+    if santitize:\\n+        # sanitize
        the values in formats dict\\n+        for key, value in formats.items():\\n+
        \           if value is None:\\n+                continue\\n+\\n+            formats[key]
        = sanitize_string(str(value))\\n+\\n+    # Replace all the keys with the values\\n+
        \   for key, value in formats.items():\\n+        template = template.replace(key,
        str(value))\\n+\\n+    return template\\n+\\n+\\n+def create_search_query(\\n+
        \   song: Song,\\n+    template: str,\\n+    santitize: bool,\\n+    file_extension:
        Optional[str] = None,\\n+    short: bool = False,\\n+) -> str:\\n+    \\\"\\\"\\\"\\n+
        \   Create the search query for the song.\\n+\\n+    ### Arguments\\n+    -
        song: the song object\\n+    - template: the template string\\n+    - santitize:
        whether to sanitize the string\\n+    - file_extension: the file extension
        to use\\n+    - short: whether to use the short version of the template\\n+\\n+
        \   ### Returns\\n+    - the formatted string\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # If template does not contain any of the keys,\\n+    # append {artist}
        - {title} at the beginning of the template\\n+    if not any(key in template
        for key in VARS):\\n+        template = \\\"{artist} - {title}\\\" + template\\n+\\n+
        \   return format_query(song, template, santitize, file_extension, short=short)\\n+\\n+\\n+def
        create_file_name(\\n+    song: Song,\\n+    template: str,\\n+    file_extension:
        str,\\n+    restrict: Optional[str] = None,\\n+    short: bool = False,\\n+
        \   file_name_length: Optional[int] = None,\\n+) -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Create the file name for the song, by replacing template variables with
        the actual values.\\n+\\n+    ### Arguments\\n+    - song: the song object\\n+
        \   - template: the template string\\n+    - file_extension: the file extension
        to use\\n+    - restrict: sanitization to apply to the filename\\n+    - short:
        whether to use the short version of the template\\n+    - file_name_length:
        the maximum length of the file name\\n+\\n+    ### Returns\\n+    - the formatted
        string as a Path object\\n+    \\\"\\\"\\\"\\n+\\n+    temp_song = copy.deepcopy(song)\\n+\\n+
        \   # If template does not contain any of the keys,\\n+    # append {artists}
        - {title}.{output-ext} to it\\n+    if not any(key in template for key in
        VARS) and template != \\\"\\\":\\n+        template += \\\"/{artists} - {title}.{output-ext}\\\"\\n+\\n+
        \   if template == \\\"\\\":\\n+        template = \\\"{artists} - {title}.{output-ext}\\\"\\n+\\n+
        \   # If template ends with a slash. Does not have a file name with extension\\n+
        \   # at the end of the template, append {artists} - {title}.{output-ext}
        to it\\n+    if template.endswith(\\\"/\\\") or template.endswith(r\\\"\\\\\\\\\\\")
        or template.endswith(\\\"\\\\\\\\\\\\\\\\\\\"):\\n+        template += \\\"/{artists}
        - {title}.{output-ext}\\\"\\n+\\n+    # If template does not end with {output-ext},
        append it to the end of the template\\n+    if not template.endswith(\\\".{output-ext}\\\"):\\n+
        \       template += \\\".{output-ext}\\\"\\n+\\n+    formatted_string = format_query(\\n+
        \       song=song,\\n+        template=template,\\n+        santitize=True,\\n+
        \       file_extension=file_extension,\\n+        short=short,\\n+    )\\n+\\n+
        \   file = create_path_object(formatted_string)\\n+\\n+    length_limit =
        file_name_length or 255\\n+\\n+    # Check if the file name length is greater
        than the limit\\n+    if len(file.name) < length_limit:\\n+        # Restrict
        the filename if needed\\n+        if restrict and restrict != \\\"none\\\":\\n+
        \           return restrict_filename(file, restrict == \\\"strict\\\")\\n+\\n+
        \       return file\\n+\\n+    if short is False:\\n+        return create_file_name(\\n+
        \           song,\\n+            template,\\n+            file_extension,\\n+
        \           restrict=restrict,\\n+            short=True,\\n+            file_name_length=length_limit,\\n+
        \       )\\n+\\n+    non_template_chars = re.findall(r\\\"(?<!{)[^{}]+(?![^{}]*})\\\",
        template)\\n+    half_length = int((length_limit * 0.50) - (len(\\\"\\\".join(non_template_chars))
        / 2))\\n+\\n+    # Path template is already short, but we still can't create
        a file\\n+    # so we reduce it even further\\n+    is_long_artist = len(temp_song.artist)
        > half_length\\n+    is_long_title = len(temp_song.name) > half_length\\n+\\n+
        \   path_separator = \\\"/\\\" if \\\"/\\\" in template else \\\"\\\\\\\\\\\"\\n+
        \   name_template_parts = template.rsplit(path_separator, 1)\\n+    name_template
        = (\\n+        name_template_parts[1]\\n+        if len(name_template_parts)
        > 1\\n+        else name_template_parts[0]\\n+    )\\n+\\n+    if is_long_artist:\\n+
        \       logger.warning(\\n+            \\\"%s: Song artist is too long. Using
        only part of song artist.\\\",\\n+            temp_song.display_name,\\n+
        \       )\\n+\\n+        temp_song.artist = smart_split(temp_song.artist,
        half_length, None)\\n+        temp_song.artists = [temp_song.artist]\\n+\\n+
        \   if is_long_title:\\n+        logger.warning(\\n+            \\\"%s: File
        name is too long. Using only part of the song title.\\\",\\n+            temp_song.display_name,\\n+
        \       )\\n+\\n+        temp_song.name = smart_split(temp_song.name, half_length,
        None)\\n+\\n+    new_file = create_path_object(\\n+        format_query(\\n+
        \           song=temp_song,\\n+            template=name_template,\\n+            santitize=True,\\n+
        \           file_extension=file_extension,\\n+            short=short,\\n+
        \       )\\n+    )\\n+\\n+    if len(new_file.name) > length_limit:\\n+        logger.warning(\\n+
        \           \\\"File name is still too long. \\\"\\n+            \\\"Using
        default file name with shortened artist and title.\\\"\\n+        )\\n+\\n+
        \       if template == \\\"{artist} - {title}.{output-ext}\\\":\\n+            raise
        ValueError(\\n+                \\\"File name is still too long, \\\"\\n+                \\\"but
        the template is already short. \\\"\\n+                \\\"Please try other
        template, \\\"\\n+                \\\"increase the file name length limit.\\\"\\n+
        \           )\\n+\\n+        return create_file_name(\\n+            temp_song,\\n+
        \           \\\"{artist} - {title}.{output-ext}\\\",\\n+            file_extension,\\n+
        \           restrict=restrict,\\n+            short=True,\\n+            file_name_length=length_limit,\\n+
        \       )\\n+\\n+    return new_file\\n+\\n+\\n+def parse_duration(duration:
        Optional[str]) -> float:\\n+    \\\"\\\"\\\"\\n+    Convert string value of
        time (duration: \\\"25:36:59\\\") to a float value of seconds (92219.0)\\n+\\n+
        \   ### Arguments\\n+    - duration: the string value of time\\n+\\n+    ###
        Returns\\n+    - the float value of seconds\\n+    \\\"\\\"\\\"\\n+\\n+    if
        duration is None:\\n+        return 0.0\\n+\\n+    try:\\n+        # {(1,
        \\\"s\\\"), (60, \\\"m\\\"), (3600, \\\"h\\\")}\\n+        mapped_increments
        = zip([1, 60, 3600], reversed(duration.split(\\\":\\\")))\\n+        seconds
        = sum(multiplier * int(time) for multiplier, time in mapped_increments)\\n+
        \       return float(seconds)\\n+\\n+    # This usually occurs when the wrong
        string is mistaken for the duration\\n+    except (ValueError, TypeError,
        AttributeError):\\n+        return 0.0\\n+\\n+\\n+def to_ms(\\n+    string:
        Optional[str] = None, precision: Optional[int] = None, **kwargs\\n+) -> float:\\n+
        \   \\\"\\\"\\\"\\n+    Convert a string to milliseconds.\\n+\\n+    ### Arguments\\n+
        \   - string: the string to convert\\n+    - precision: the number of decimals
        to round to\\n+    - kwargs: the keyword args to convert\\n+\\n+    ### Returns\\n+
        \   - the milliseconds\\n+\\n+    ### Notes\\n+    - You can either pass a
        string,\\n+    - or a set of keyword args (\\\"hour\\\", \\\"min\\\", \\\"sec\\\",
        \\\"ms\\\") to convert.\\n+    - If \\\"precision\\\" is set, the result is
        rounded to the number of decimals given.\\n+    - From: https://gist.github.com/Hellowlol/5f8545e999259b4371c91ac223409209\\n+
        \   \\\"\\\"\\\"\\n+\\n+    if string:\\n+        hour = int(string[0:2])\\n+
        \       minute = int(string[3:5])\\n+        sec = int(string[6:8])\\n+        milliseconds
        = int(string[10:11])\\n+    else:\\n+        hour = int(kwargs.get(\\\"hour\\\",
        0))\\n+        minute = int(kwargs.get(\\\"min\\\", 0))\\n+        sec = int(kwargs.get(\\\"sec\\\",
        0))\\n+        milliseconds = int(kwargs.get(\\\"ms\\\", 0))\\n+\\n+    result
        = (\\n+        (hour * 60 * 60 * 1000) + (minute * 60 * 1000) + (sec * 1000)
        + milliseconds\\n+    )\\n+\\n+    if precision and isinstance(precision,
        int):\\n+        return round(result, precision)\\n+\\n+    return result\\n+\\n+\\n+def
        restrict_filename(pathobj: Path, strict: bool = True) -> Path:\\n+    \\\"\\\"\\\"\\n+
        \   Sanitizes the filename part of a Path object. Returns modified object.\\n+\\n+
        \   ### Arguments\\n+    - pathobj: the Path object to sanitize\\n+    - strict:
        whether sanitization should be strict\\n+\\n+    ### Returns\\n+    - the
        modified Path object\\n+\\n+    ### Notes\\n+    - Based on the `sanitize_filename`
        function from yt-dlp\\n+    \\\"\\\"\\\"\\n+    if strict:\\n+        result
        = sanitize_filename(pathobj.name, True, False)  # type: ignore\\n+        result
        = result.replace(\\\"_-_\\\", \\\"-\\\")\\n+    else:\\n+        result =
        (\\n+            normalize(\\\"NFKD\\\", pathobj.name).encode(\\\"ascii\\\",
        \\\"ignore\\\").decode(\\\"utf-8\\\")\\n+        )\\n+\\n+    if not result:\\n+
        \       result = \\\"_\\\"\\n+\\n+    return pathobj.with_name(result)\\n+\\n+\\n+@lru_cache()\\n+def
        ratio(string1: str, string2: str) -> float:\\n+    \\\"\\\"\\\"\\n+    Wrapper
        for fuzz.ratio\\n+    with lru_cache\\n+\\n+    ### Arguments\\n+    - string1:
        the first string\\n+    - string2: the second string\\n+\\n+    ### Returns\\n+
        \   - the ratio\\n+    \\\"\\\"\\\"\\n+\\n+    return fuzz.ratio(string1,
        string2)\\n+\\n+\\n+def smart_split(\\n+    string: str, max_length: int,
        separators: Optional[List[str]] = None\\n+) -> str:\\n+    \\\"\\\"\\\"\\n+
        \   Split a string into a list of strings\\n+    with a maximum length of
        max_length.\\n+    Stops at the first separator that produces a string\\n+
        \   with a length less than max_length.\\n+\\n+    ### Arguments\\n+    -
        string: the string to split\\n+    - max_length: the maximum length of string\\n+
        \   - separators: the separators to split the string with\\n+\\n+    ### Returns\\n+
        \   - the new string\\n+    \\\"\\\"\\\"\\n+\\n+    if separators is None:\\n+
        \       separators = [\\\"-\\\", \\\",\\\", \\\" \\\", \\\"\\\"]\\n+\\n+    for
        separator in separators:\\n+        parts = string.split(separator if separator
        != \\\"\\\" else None)\\n+        new_string = separator.join(parts[:1])\\n+
        \       for part in parts[1:]:\\n+            if len(new_string) + len(separator)
        + len(part) > max_length:\\n+                break\\n+            new_string
        += separator + part\\n+\\n+        if len(new_string) <= max_length:\\n+            return
        new_string\\n+\\n+    return string[:max_length]\\n+\\n+\\n+def create_path_object(string:
        str) -> Path:\\n+    \\\"\\\"\\\"\\n+    Create a Path object from a string.\\n+
        \   Sanitizes the filename part of the Path object.\\n+\\n+    ### Arguments\\n+
        \   - string: the string to convert\\n+\\n+    ### Returns\\n+    - the Path
        object\\n+    \\\"\\\"\\\"\\n+\\n+    # Parse template as Path object\\n+
        \   file = Path(string)\\n+\\n+    santitized_parts = []\\n+    for part in
        file.parts:\\n+        match = re.search(r\\\"[^\\\\.*](.*)[^\\\\.*$]\\\",
        part)\\n+        if match and part != \\\".spotdl\\\":\\n+            santitized_parts.append(match.group(0))\\n+
        \       else:\\n+            santitized_parts.append(part)\\n+\\n+    # Join
        the parts of the path\\n+    return Path(*santitized_parts)\\n+\\n+\\n+def
        args_to_ytdlp_options(argument_list: List[str]) -> Dict[str, Any]:\\n+    \\\"\\\"\\\"\\n+
        \   Convert a list of arguments to a dictionary of options.\\n+\\n+    ###
        Arguments\\n+    - argument_list: the list of arguments\\n+\\n+    ### Returns\\n+
        \   - the dictionary of options\\n+    \\\"\\\"\\\"\\n+\\n+    options_dict:
        Dict[str, Any] = {}\\n+    for option_group in YT_DLP_PARSER.option_groups:\\n+
        \       for option in option_group.option_list:\\n+            for opts in
        option._long_opts:  # pylint: disable=protected-access\\n+                try:\\n+
        \                   index = argument_list.index(opts)\\n+                except
        ValueError:\\n+                    continue\\n+\\n+                if option.action
        == \\\"store_true\\\" and option.dest:\\n+                    options_dict[option.dest]
        = True\\n+                    continue\\n+\\n+                if option.action
        == \\\"store_false\\\" and option.dest:\\n+                    options_dict[option.dest]
        = False\\n+                    continue\\n+\\n+                if option.action
        == \\\"store\\\" and option.dest:\\n+                    values = []\\n+                    val_index
        = index\\n+                    while val_index + 1 < len(argument_list) and
        not argument_list[\\n+                        val_index + 1\\n+                    ].startswith(\\\"--\\\"):\\n+
        \                       values.append(argument_list[val_index + 1])\\n+                        val_index
        += 1\\n+\\n+                    options_dict[option.dest] = values\\n+\\n+
        \   return options_dict\"},{\"sha\":\"b16185fa63dbd93b344ad27fc51483dfa9be4b33\",\"filename\":\"spotdl/utils/github.py\",\"status\":\"added\",\"additions\":249,\"deletions\":0,\"changes\":249,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fgithub.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fgithub.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fgithub.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,249 @@\\n+\\\"\\\"\\\"\\n+Module for getting information about the
        current version of spotdl\\n+from GitHub, downloading the latest version,
        and checking for updates.\\n+\\\"\\\"\\\"\\n+\\n+import logging\\n+import
        os\\n+import re\\n+from typing import Tuple\\n+\\n+import requests\\n+\\n+from
        spotdl import _version\\n+\\n+__all__ = [\\n+    \\\"REPO\\\",\\n+    \\\"WEB_APP_URL\\\",\\n+
        \   \\\"get_status\\\",\\n+    \\\"check_for_updates\\\",\\n+    \\\"get_latest_version\\\",\\n+
        \   \\\"create_github_url\\\",\\n+    \\\"download_github_dir\\\",\\n+]\\n+\\n+REPO
        = \\\"spotdl/spotify-downloader\\\"\\n+WEB_APP_URL = \\\"https://github.com/spotdl/web-ui/tree/master/dist\\\"\\n+\\n+\\n+class
        RateLimitError(Exception):\\n+    \\\"\\\"\\\"\\n+    Raised when the GitHub
        API rate limit is exceeded.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+def get_status(start:
        str, end: str, repo: str = REPO) -> Tuple[str, int, int]:\\n+    \\\"\\\"\\\"\\n+
        \   Get the status of a commit range.\\n+\\n+    ### Arguments\\n+    - start:
        the starting commit/branch/tag\\n+    - end: the ending commit/branch/tag\\n+
        \   - repo: the repo to check (defaults to spotdl/spotify-downloader)\\n+\\n+
        \   ### Returns\\n+    - tuple of (status, ahead_by, behind_by)\\n+    \\\"\\\"\\\"\\n+\\n+
        \   url = f\\\"https://api.github.com/repos/{repo}/compare/{start}...{end}\\\"\\n+\\n+
        \   response = requests.get(url, timeout=10)\\n+\\n+    if response.status_code
        != 200:\\n+        if response.status_code == 403:\\n+            raise RateLimitError(\\\"GitHub
        API rate limit exceeded.\\\")\\n+\\n+        raise RuntimeError(\\n+            f\\\"Failed
        to get commit count. Status code: {response.status_code}\\\"\\n+        )\\n+\\n+
        \   data = response.json()\\n+\\n+    return (\\n+        data[\\\"status\\\"],\\n+
        \       data[\\\"ahead_by\\\"],\\n+        data[\\\"behind_by\\\"],\\n+    )\\n+\\n+\\n+def
        get_latest_version(repo: str = REPO) -> str:\\n+    \\\"\\\"\\\"\\n+    Get
        the latest version of spotdl.\\n+\\n+    ### Arguments\\n+    - repo: the
        repo to check (defaults to spotdl/spotify-downloader)\\n+\\n+    ### Returns\\n+
        \   - the latest version\\n+    \\\"\\\"\\\"\\n+\\n+    url = f\\\"https://api.github.com/repos/{repo}/releases/latest\\\"\\n+\\n+
        \   response = requests.get(url, timeout=10)\\n+\\n+    if response.status_code
        != 200:\\n+        if response.status_code == 403:\\n+            raise RateLimitError(\\\"GitHub
        API rate limit exceeded.\\\")\\n+\\n+        raise RuntimeError(\\n+            f\\\"Failed
        to get commit count. Status code: {response.status_code}\\\"\\n+        )\\n+\\n+
        \   data = response.json()\\n+\\n+    return data[\\\"name\\\"]  # returns
        \\\"vx.x.x\\\"\\n+\\n+\\n+def check_for_updates(repo: str = REPO) -> str:\\n+
        \   \\\"\\\"\\\"\\n+    Check for updates to the current version.\\n+\\n+
        \   ### Arguments\\n+    - repo: the repo to check (defaults to spotdl/spotify-downloader)\\n+\\n+
        \   ### Returns\\n+    - the latest version\\n+    \\\"\\\"\\\"\\n+\\n+    message
        = \\\"\\\"\\n+\\n+    latest_version = get_latest_version(repo)\\n+    current_version
        = f\\\"v{_version.__version__}\\\"  # returns \\\"vx.x.x\\\"\\n+\\n+    if
        latest_version != current_version:\\n+        message = f\\\"New version available:
        {latest_version}.\\\\n\\\\n\\\"\\n+    else:\\n+        message = \\\"No updates
        available.\\\\n\\\\n\\\"\\n+    try:\\n+        master = get_status(current_version,
        \\\"master\\\")\\n+        dev = get_status(current_version, \\\"dev\\\")\\n+
        \   except RuntimeError:\\n+        message = \\\"Couldn't check for updates.
        You might be running a dev version.\\\\n\\\"\\n+        message += \\\"Current
        version: \\\" + current_version + \\\"\\\\n\\\"\\n+        message += \\\"Latest
        version: \\\" + latest_version\\n+        return message\\n+    except RateLimitError:\\n+
        \       message = \\\"GitHub API rate limit exceeded. Couldn't check for updates.\\\\n\\\"\\n+
        \       message += \\\"Current version: \\\" + current_version + \\\"\\\\n\\\"\\n+
        \       message += \\\"Latest version: \\\" + latest_version + \\\"\\\\n\\\"\\n+
        \       message += \\\"Please try again later.\\\"\\n+        return message\\n+\\n+
        \   for branch in [\\\"master\\\", \\\"dev\\\"]:\\n+        name = branch.capitalize()\\n+
        \       if branch == \\\"master\\\":\\n+            status, ahead_by, behind_by
        = master\\n+        else:\\n+            status, ahead_by, behind_by = dev\\n+\\n+
        \       if status == \\\"behind\\\":\\n+            message += f\\\"{name}
        is {status} by {behind_by} commits.\\\\n\\\"\\n+        elif status == \\\"ahead\\\":\\n+
        \           message += f\\\"{name} is {status} by {ahead_by} commits.\\\\n\\\"\\n+
        \       else:\\n+            message += f\\\"{name} is up to date.\\\\n\\\"\\n+\\n+
        \   return message\\n+\\n+\\n+def create_github_url(url: str = WEB_APP_URL):\\n+
        \   \\\"\\\"\\\"\\n+    From the given url, produce a URL that is compatible
        with Github's REST API.\\n+\\n+    ### Arguments\\n+    - url: the url to
        convert\\n+\\n+    ### Notes\\n+    - Can handle blob or tree paths.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   repo_only_url = re.compile(\\n+        r\\\"https:\\\\/\\\\/github\\\\.com\\\\/[a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38}\\\\/[a-zA-Z0-9]+$\\\"\\n+
        \   )\\n+    re_branch = re.compile(\\\"/(tree|blob)/(.+?)/\\\")\\n+\\n+    #
        Check if the given url is a url to a GitHub repo. If it is, tell the\\n+    #
        user to use 'git clone' to download it\\n+    if re.match(repo_only_url, url):\\n+
        \       raise ValueError(\\n+            \\\"The given URL is a GitHub repo.
        Please use 'git clone' to download it.\\\"\\n+        )\\n+\\n+    # extract
        the branch name from the given url (e.g master)\\n+    branch = re_branch.search(url)\\n+
        \   if branch:\\n+        download_dirs = url[branch.end() :]\\n+        api_url
        = (\\n+            url[: branch.start()].replace(\\\"github.com\\\", \\\"api.github.com/repos\\\",
        1)\\n+            + \\\"/contents/\\\"\\n+            + download_dirs\\n+
        \           + \\\"?ref=\\\"\\n+            + branch.group(2)\\n+        )\\n+
        \       return api_url\\n+\\n+    raise ValueError(\\\"The given url is not
        a valid GitHub url\\\")\\n+\\n+\\n+def download_github_dir(\\n+    repo_url:
        str = WEB_APP_URL, flatten: bool = False, output_dir: str = \\\"./\\\"\\n+):\\n+
        \   \\\"\\\"\\\"\\n+    Downloads the files and directories in repo_url.\\n+\\n+
        \   ### Arguments\\n+    - repo_url: the url to the repo to download\\n+    -
        flatten: whether to flatten the directory structure\\n+    - output_dir: the
        directory to download the files to\\n+\\n+    ### Notes\\n+    - Modification
        of https://github.com/sdushantha/gitdir/blob/master/gitdir/gitdir.py\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # generate the url which returns the JSON data\\n+    api_url = create_github_url(repo_url)\\n+\\n+
        \   dir_out = output_dir\\n+\\n+    response = requests.get(api_url, timeout=10).json()\\n+\\n+
        \   if (\\n+        isinstance(response, dict)\\n+        and \\\"message\\\"
        in response.keys()\\n+        and \\\"rate limit\\\" in response[\\\"message\\\"]\\n+
        \   ):\\n+        logging.error(\\n+            \\\"You have been rate limited
        by Github API attempting to update web client.\\\"\\n+            \\\"Proceeding
        with cached web client. Please try again later.\\\"\\n+            \\\"See
        https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\\\"\\n+
        \       )\\n+        return None\\n+\\n+    if not flatten:\\n+        # make
        a directory with the name which is taken from\\n+        # the actual repo\\n+
        \       os.makedirs(dir_out, exist_ok=True)\\n+\\n+    if isinstance(response,
        dict) and response[\\\"type\\\"] == \\\"file\\\":\\n+        response = [response]\\n+\\n+
        \   for file in response:\\n+        file_url = file[\\\"download_url\\\"]\\n+\\n+
        \       if flatten:\\n+            path = os.path.join(dir_out, os.path.basename(file[\\\"path\\\"]))\\n+
        \       else:\\n+            path = os.path.join(dir_out, file[\\\"path\\\"])\\n+\\n+
        \       dirname = os.path.dirname(path)\\n+\\n+        if dirname != \\\"\\\":\\n+
        \           os.makedirs(dirname, exist_ok=True)\\n+\\n+        if file_url
        is not None:\\n+            with open(path, \\\"wb\\\") as new_file:\\n+                new_file.write(requests.get(file_url,
        timeout=10).content)\\n+        else:\\n+            download_github_dir(file[\\\"html_url\\\"],
        flatten, output_dir)\\n+\\n+    return None\"},{\"sha\":\"1af6bb9c23d8ac8b879064b7459cee2f45beacea\",\"filename\":\"spotdl/utils/logging.py\",\"status\":\"added\",\"additions\":219,\"deletions\":0,\"changes\":219,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Flogging.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Flogging.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Flogging.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,219 @@\\n+\\\"\\\"\\\"\\n+Module for logging\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+from typing import Optional\\n+\\n+from rich import get_console\\n+from
        rich.console import ConsoleRenderable\\n+from rich.logging import RichHandler\\n+from
        rich.markup import escape\\n+from rich.text import Text\\n+from rich.theme
        import Theme\\n+from rich.traceback import install\\n+\\n+__all__ = [\\n+
        \   \\\"CRITICAL\\\",\\n+    \\\"FATAL\\\",\\n+    \\\"ERROR\\\",\\n+    \\\"WARNING\\\",\\n+
        \   \\\"WARN\\\",\\n+    \\\"INFO\\\",\\n+    \\\"DEBUG\\\",\\n+    \\\"MATCH\\\",\\n+
        \   \\\"NOTSET\\\",\\n+    \\\"init_logging\\\",\\n+    \\\"SpotdlFormatter\\\",\\n+
        \   \\\"LEVEL_TO_NAME\\\",\\n+    \\\"NAME_TO_LEVEL\\\",\\n+]\\n+\\n+# https://github.com/python/cpython/blob/3.10/Lib/logging/__init__.py\\n+CRITICAL
        = 50\\n+FATAL = CRITICAL\\n+ERROR = 40\\n+WARNING = 30\\n+WARN = WARNING\\n+INFO
        = 20\\n+DEBUG = 10\\n+MATCH = 5\\n+NOTSET = 0\\n+\\n+LEVEL_TO_NAME = {\\n+
        \   CRITICAL: \\\"CRITICAL\\\",\\n+    ERROR: \\\"ERROR\\\",\\n+    WARNING:
        \\\"WARNING\\\",\\n+    INFO: \\\"INFO\\\",\\n+    MATCH: \\\"MATCH\\\",\\n+
        \   DEBUG: \\\"DEBUG\\\",\\n+    NOTSET: \\\"NOTSET\\\",\\n+}\\n+\\n+NAME_TO_LEVEL
        = {\\n+    \\\"CRITICAL\\\": CRITICAL,\\n+    \\\"FATAL\\\": FATAL,\\n+    \\\"ERROR\\\":
        ERROR,\\n+    \\\"WARN\\\": WARNING,\\n+    \\\"WARNING\\\": WARNING,\\n+
        \   \\\"INFO\\\": INFO,\\n+    \\\"MATCH\\\": MATCH,\\n+    \\\"DEBUG\\\":
        DEBUG,\\n+    \\\"NOTSET\\\": NOTSET,\\n+}\\n+\\n+THEME = Theme(\\n+    {\\n+
        \       \\\"bar.back\\\": \\\"grey23\\\",\\n+        \\\"bar.complete\\\":
        \\\"rgb(165,66,129)\\\",\\n+        \\\"bar.finished\\\": \\\"rgb(114,156,31)\\\",\\n+
        \       \\\"bar.pulse\\\": \\\"rgb(165,66,129)\\\",\\n+        \\\"general\\\":
        \\\"green\\\",\\n+        \\\"nonimportant\\\": \\\"rgb(40,100,40)\\\",\\n+
        \       \\\"progress.data.speed\\\": \\\"red\\\",\\n+        \\\"progress.description\\\":
        \\\"none\\\",\\n+        \\\"progress.download\\\": \\\"green\\\",\\n+        \\\"progress.filesize\\\":
        \\\"green\\\",\\n+        \\\"progress.filesize.total\\\": \\\"green\\\",\\n+
        \       \\\"progress.percentage\\\": \\\"green\\\",\\n+        \\\"progress.remaining\\\":
        \\\"rgb(40,100,40)\\\",\\n+        \\\"logging.level.debug\\\": \\\"blue\\\",\\n+
        \       \\\"logging.level.info\\\": \\\"green\\\",\\n+        \\\"logging.level.warning\\\":
        \\\"yellow\\\",\\n+        \\\"logging.level.error\\\": \\\"red\\\",\\n+        \\\"logging.level.critical\\\":
        \\\"bold red\\\",\\n+    }\\n+)\\n+\\n+\\n+class SpotdlFormatter(logging.Formatter):\\n+
        \   \\\"\\\"\\\"\\n+    A custom logger for spotdl.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   def format(self, record: logging.LogRecord) -> str:\\n+        \\\"\\\"\\\"\\n+
        \       Format a log record.\\n+        \\\"\\\"\\\"\\n+\\n+        result
        = escape(super().format(record))\\n+\\n+        msg = result\\n+        if
        record.levelno == DEBUG:\\n+            msg = f\\\"[blue]{result}\\\"\\n+\\n+
        \       if record.levelno == MATCH:\\n+            msg = f\\\"[magenta]{result}\\\"\\n+\\n+
        \       if record.levelno == INFO:\\n+            msg = f\\\"[green]{result}\\\"\\n+\\n+
        \       if record.levelno == WARNING:\\n+            msg = f\\\"[yellow]{result}\\\"\\n+\\n+
        \       if record.levelno == ERROR:\\n+            msg = f\\\"[red]{result}\\\"\\n+\\n+
        \       if record.levelno == CRITICAL:\\n+            msg = f\\\"[bold red]{result}\\\"\\n+\\n+
        \       return msg\\n+\\n+\\n+class SpotdlHandler(RichHandler):\\n+    \\\"\\\"\\\"\\n+
        \   A custom logging handler for spotdl.\\n+    In this case, it's just a
        wrapper around the rich handler.\\n+    To not highlight keywords in info
        messages\\n+    \\\"\\\"\\\"\\n+\\n+    def render_message(\\n+        self,
        record: logging.LogRecord, message: str\\n+    ) -> \\\"ConsoleRenderable\\\":\\n+
        \       \\\"\\\"\\\"Render message text in to Text.\\n+\\n+        ### Arguments\\n+
        \       - record: logging Record.\\n+        - message: String containing
        log message.\\n+\\n+        ### Returns\\n+        - ConsoleRenderable: Renderable
        to display log message.\\n+        \\\"\\\"\\\"\\n+\\n+        use_markup
        = getattr(record, \\\"markup\\\", self.markup)\\n+        message_text = Text.from_markup(message)
        if use_markup else Text(message)\\n+\\n+        highlighter = getattr(record,
        \\\"highlighter\\\", self.highlighter)\\n+\\n+        # Don't highlight info
        messages\\n+        if highlighter and record.levelno != INFO:\\n+            message_text
        = highlighter(message_text)\\n+\\n+        if self.keywords is None:\\n+            self.keywords
        = self.KEYWORDS\\n+\\n+        # Don't highlight keywords in info messages\\n+
        \       if self.keywords and record.levelno != INFO:\\n+            message_text.highlight_words(self.keywords,
        \\\"logging.keyword\\\")\\n+\\n+        return message_text\\n+\\n+\\n+def
        init_logging(log_level: str, log_format: Optional[str] = None):\\n+    \\\"\\\"\\\"\\n+
        \   Initialize logging for spotdl.\\n+\\n+    ### Arguments\\n+    - `console`:
        The console to use.\\n+    - `log_level`: The log level to use.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Don't log too much\\n+    logging.getLogger(\\\"requests\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"urllib3\\\").setLevel(logging.WARNING)\\n+    logging.getLogger(\\\"spotipy\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"asyncio\\\").setLevel(logging.WARNING)\\n+    logging.getLogger(\\\"syncedlyrics\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"bandcamp_api\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"beautifulsoup4\\\").setLevel(logging.WARNING)\\n+
        \   logging.getLogger(\\\"pytube\\\").setLevel(logging.ERROR)\\n+\\n+    #
        Create console\\n+    console = get_console()\\n+    console.push_theme(THEME)\\n+\\n+
        \   # Add matching level loggers\\n+    logging.addLevelName(MATCH, \\\"MATCH\\\")\\n+\\n+
        \   # Create a rich handler\\n+    rich_handler = SpotdlHandler(\\n+        show_time=log_level
        == \\\"DEBUG\\\",\\n+        log_time_format=\\\"[%X]\\\",\\n+        omit_repeated_times=False,\\n+
        \       console=console,\\n+        level=log_level,\\n+        markup=True,\\n+
        \       show_path=log_level == \\\"DEBUG\\\",\\n+        show_level=log_level
        == \\\"DEBUG\\\",\\n+        rich_tracebacks=True,\\n+    )\\n+\\n+    msg_format
        = \\\"%(message)s\\\"\\n+    if log_format is None:\\n+        if log_level
        == \\\"DEBUG\\\":\\n+            msg_format = \\\"%(threadName)s - %(message)s\\\"\\n+
        \   else:\\n+        msg_format = log_format\\n+\\n+    # Add rich handler
        to spotdl logger\\n+    rich_handler.setFormatter(SpotdlFormatter(msg_format))\\n+\\n+
        \   # Create spotdl logger\\n+    spotdl_logger = logging.getLogger(\\\"spotdl\\\")\\n+\\n+
        \   # Setup spotdl logger\\n+    spotdl_logger.setLevel(log_level)\\n+    spotdl_logger.addHandler(rich_handler)\\n+\\n+
        \   # Install rich traceback handler\\n+    install(show_locals=False, extra_lines=1,
        console=console)\"},{\"sha\":\"726fefbee90bc462a7b71da1d9bd9dd1b1c79242\",\"filename\":\"spotdl/utils/lrc.py\",\"status\":\"added\",\"additions\":54,\"deletions\":0,\"changes\":54,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Flrc.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Flrc.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Flrc.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,54 @@\\n+\\\"\\\"\\\"\\n+LRC related functions\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+import re\\n+from pathlib import Path\\n+\\n+from syncedlyrics
        import search as syncedlyrics_search\\n+from syncedlyrics.utils import is_lrc_valid,
        save_lrc_file\\n+\\n+from spotdl.types.song import Song\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+__all__
        = [\\\"generate_lrc\\\", \\\"remomve_lrc\\\"]\\n+\\n+\\n+def generate_lrc(song:
        Song, output_file: Path):\\n+    \\\"\\\"\\\"\\n+    Generates an LRC file
        for the current song\\n+\\n+    ### Arguments\\n+    - song: Song object\\n+
        \   - output_file: Path to the output file\\n+    \\\"\\\"\\\"\\n+\\n+    if
        song.lyrics and is_lrc_valid(song.lyrics):\\n+        lrc_data = song.lyrics\\n+
        \   else:\\n+        try:\\n+            lrc_data = syncedlyrics_search(song.display_name)\\n+
        \       except Exception:\\n+            lrc_data = None\\n+\\n+    if lrc_data:\\n+
        \       save_lrc_file(str(output_file.with_suffix(\\\".lrc\\\")), lrc_data)\\n+
        \       logger.debug(\\\"Saved lrc file for %s\\\", song.display_name)\\n+
        \   else:\\n+        logger.debug(\\\"No lrc file found for %s\\\", song.display_name)\\n+\\n+\\n+def
        remomve_lrc(lyrics: str) -> str:\\n+    \\\"\\\"\\\"\\n+    Removes lrc tags
        from lyrics\\n+\\n+    ### Arguments\\n+    - lyrics: Lyrics string\\n+\\n+
        \   ### Returns\\n+    - Lyrics string without lrc tags\\n+    \\\"\\\"\\\"\\n+\\n+
        \   return re.sub(r\\\"\\\\[.*?\\\\]\\\", \\\"\\\", lyrics)\"},{\"sha\":\"4e18ad5596de1d5e22a7cc53277dbb3601ac3dd0\",\"filename\":\"spotdl/utils/m3u.py\",\"status\":\"added\",\"additions\":188,\"deletions\":0,\"changes\":188,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fm3u.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fm3u.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fm3u.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,188 @@\\n+\\\"\\\"\\\"\\n+Module for creating m3u content and writing
        it to a file.\\n+\\\"\\\"\\\"\\n+\\n+from typing import Dict, List, Optional\\n+\\n+from
        spotdl.types.song import Song\\n+from spotdl.utils.formatter import create_file_name\\n+\\n+__all__
        = [\\n+    \\\"create_m3u_content\\\",\\n+    \\\"gen_m3u_files\\\",\\n+    \\\"create_m3u_file\\\",\\n+]\\n+\\n+\\n+def
        create_m3u_content(\\n+    song_list: List[Song],\\n+    template: str,\\n+
        \   file_extension: str,\\n+    restrict: Optional[str] = None,\\n+    short:
        bool = False,\\n+    detect_formats: Optional[List[str]] = None,\\n+) -> str:\\n+
        \   \\\"\\\"\\\"\\n+    Create m3u content and return it as a string.\\n+\\n+
        \   ### Arguments\\n+    - song_list: the list of songs\\n+    - template:
        the template to use\\n+    - file_extension: the file extension to use\\n+
        \   - restrict: sanitization to apply to the filename\\n+    - short: whether
        to use the short version of the template\\n+\\n+    ### Returns\\n+    - the
        m3u content as a string\\n+    \\\"\\\"\\\"\\n+\\n+    text = \\\"\\\"\\n+
        \   for song in song_list:\\n+        if not detect_formats:\\n+            file_name
        = create_file_name(\\n+                song, template, file_extension, restrict,
        short\\n+            )\\n+\\n+            text += str(file_name) + \\\"\\\\n\\\"\\n+
        \       else:\\n+            for file_ext in detect_formats:\\n+                file_name
        = create_file_name(song, template, file_ext, restrict, short)\\n+                if
        file_name.exists():\\n+                    text += str(file_name) + \\\"\\\\n\\\"\\n+
        \                   break\\n+            else:\\n+                file_name
        = create_file_name(\\n+                    song, template, file_extension,
        restrict, short\\n+                )\\n+\\n+                text += str(file_name)
        + \\\"\\\\n\\\"\\n+\\n+    return text\\n+\\n+\\n+def gen_m3u_files(\\n+    songs:
        List[Song],\\n+    file_name: Optional[str],\\n+    template: str,\\n+    file_extension:
        str,\\n+    restrict: Optional[str] = None,\\n+    short: bool = False,\\n+
        \   detect_formats: Optional[List[str]] = None,\\n+):\\n+    \\\"\\\"\\\"\\n+
        \   Create an m3u8 filename from the query.\\n+\\n+    ### Arguments\\n+    -
        query: the query\\n+    - file_name: the file name to use\\n+    - song_list:
        the list of songs\\n+    - template: the output file template to use\\n+    -
        file_extension: the file extension to use\\n+    - restrict: sanitization
        to apply to the filename\\n+    - short: whether to use the short version
        of the template\\n+    - detect_formats: the formats to detect\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # If no file name is provided, use the first list's name\\n+    if not
        file_name:\\n+        file_name = \\\"{list[0]}.m3u8\\\"\\n+\\n+    # If file_name
        ends with a slash. Does not have a m3u8 name with extension\\n+    # at the
        end of the template, append `{list[0]}`` to it\\n+    if (\\n+        file_name.endswith(\\\"/\\\")\\n+
        \       or file_name.endswith(r\\\"\\\\\\\\\\\")\\n+        or file_name.endswith(\\\"\\\\\\\\\\\\\\\\\\\")\\n+
        \   ):\\n+        file_name += \\\"/{list[0]}.m3u8\\\"\\n+\\n+    # Check
        if the file name ends with .m3u or .m3u8\\n+    if not file_name.endswith(\\\".m3u\\\")
        and not file_name.endswith(\\\".m3u8\\\"):\\n+        file_name += \\\".m3u8\\\"\\n+\\n+
        \   lists_object: Dict[str, List[Song]] = {}\\n+    for song in songs:\\n+
        \       if song.list_name is None:\\n+            continue\\n+\\n+        if
        song.list_name not in lists_object:\\n+            lists_object[song.list_name]
        = []\\n+\\n+        lists_object[song.list_name].append(song)\\n+\\n+    if
        \\\"{list}\\\" in file_name:\\n+        # Create multiple m3u files if there
        are multiple lists\\n+        for list_name, song_list in lists_object.items():\\n+
        \           create_m3u_file(\\n+                file_name.format(\\n+                    list=list_name,\\n+
        \               ),\\n+                song_list,\\n+                template,\\n+
        \               file_extension,\\n+                restrict,\\n+                short,\\n+
        \               detect_formats,\\n+            )\\n+    elif \\\"{list[\\\"
        in file_name and \\\"]}\\\" in file_name:\\n+        # Create a single m3u
        file for specified song list name\\n+        create_m3u_file(\\n+            file_name.format(list=list(lists_object.keys())),\\n+
        \           songs,\\n+            template,\\n+            file_extension,\\n+
        \           restrict,\\n+            short,\\n+            detect_formats,\\n+
        \       )\\n+    else:\\n+        # Use the provided file name\\n+        create_m3u_file(\\n+
        \           file_name,\\n+            songs,\\n+            template,\\n+
        \           file_extension,\\n+            restrict,\\n+            short,\\n+
        \           detect_formats,\\n+        )\\n+\\n+\\n+def create_m3u_file(\\n+
        \   file_name: str,\\n+    song_list: List[Song],\\n+    template: str,\\n+
        \   file_extension: str,\\n+    restrict: Optional[str] = None,\\n+    short:
        bool = False,\\n+    detect_formats: Optional[List[str]] = None,\\n+) -> str:\\n+
        \   \\\"\\\"\\\"\\n+    Create the m3u file.\\n+\\n+    ### Arguments\\n+
        \   - file_name: the file name to use\\n+    - song_list: the list of songs\\n+
        \   - template: the template to use\\n+    - file_extension: the file extension
        to use\\n+    - restrict: sanitization to apply to the filename\\n+    - short:
        whether to use the short version of the template\\n+    - detect_formats:
        the formats to detect\\n+\\n+    ### Returns\\n+    - the m3u content as a
        string\\n+    \\\"\\\"\\\"\\n+\\n+    m3u_content = create_m3u_content(\\n+
        \       song_list,\\n+        template,\\n+        file_extension,\\n+        restrict,\\n+
        \       short,\\n+        detect_formats,\\n+    )\\n+\\n+    with open(file_name,
        \\\"w\\\", encoding=\\\"utf-8\\\") as m3u_file:\\n+        m3u_file.write(m3u_content)\\n+\\n+
        \   return m3u_content\"},{\"sha\":\"848cc542fae591013c6431cbc41a06c3a66e3c91\",\"filename\":\"spotdl/utils/matching.py\",\"status\":\"added\",\"additions\":824,\"deletions\":0,\"changes\":824,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fmatching.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fmatching.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fmatching.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,824 @@\\n+\\\"\\\"\\\"\\n+Module for all things matching related\\n+\\\"\\\"\\\"\\n+\\n+import
        logging\\n+from itertools import product, zip_longest\\n+from math import
        exp\\n+from typing import Dict, List, Optional, Tuple\\n+\\n+from spotdl.types.result
        import Result\\n+from spotdl.types.song import Song\\n+from spotdl.utils.formatter
        import (\\n+    create_search_query,\\n+    create_song_title,\\n+    ratio,\\n+
        \   slugify,\\n+)\\n+from spotdl.utils.logging import MATCH\\n+\\n+__all__
        = [\\n+    \\\"FORBIDDEN_WORDS\\\",\\n+    \\\"fill_string\\\",\\n+    \\\"create_clean_string\\\",\\n+
        \   \\\"sort_string\\\",\\n+    \\\"based_sort\\\",\\n+    \\\"check_common_word\\\",\\n+
        \   \\\"check_forbidden_words\\\",\\n+    \\\"create_match_strings\\\",\\n+
        \   \\\"get_best_matches\\\",\\n+    \\\"calc_main_artist_match\\\",\\n+    \\\"calc_artists_match\\\",\\n+
        \   \\\"artists_match_fixup1\\\",\\n+    \\\"artists_match_fixup2\\\",\\n+
        \   \\\"artists_match_fixup3\\\",\\n+    \\\"calc_name_match\\\",\\n+    \\\"calc_time_match\\\",\\n+
        \   \\\"calc_album_match\\\",\\n+]\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+FORBIDDEN_WORDS
        = [\\n+    \\\"bassboosted\\\",\\n+    \\\"remix\\\",\\n+    \\\"remastered\\\",\\n+
        \   \\\"remaster\\\",\\n+    \\\"reverb\\\",\\n+    \\\"bassboost\\\",\\n+
        \   \\\"live\\\",\\n+    \\\"acoustic\\\",\\n+    \\\"8daudio\\\",\\n+    \\\"concert\\\",\\n+
        \   \\\"live\\\",\\n+    \\\"acapella\\\",\\n+    \\\"slowed\\\",\\n+    \\\"instrumental\\\",\\n+
        \   \\\"remix\\\",\\n+    \\\"cover\\\",\\n+    \\\"reverb\\\",\\n+]\\n+\\n+\\n+def
        debug(song_id: str, result_id: str, message: str) -> None:\\n+    \\\"\\\"\\\"\\n+
        \   Log a message with MATCH level\\n+\\n+    ### Arguments\\n+    - message:
        message to log\\n+    \\\"\\\"\\\"\\n+\\n+    logger.log(MATCH, \\\"[%s|%s]
        %s\\\", song_id, result_id, message)\\n+\\n+\\n+def fill_string(strings: List[str],
        main_string: str, string_to_check: str) -> str:\\n+    \\\"\\\"\\\"\\n+    Create
        a string with strings from `strings` list\\n+    if they are not yet present
        in main_string\\n+    but are present in string_to_check\\n+\\n+    ### Arguments\\n+
        \   - strings: strings to check\\n+    - main_string: string to add strings
        to\\n+    - string_to_check: string to check if strings are present in\\n+\\n+
        \   ### Returns\\n+    - string with strings from `strings` list\\n+    \\\"\\\"\\\"\\n+\\n+
        \   final_str = main_string\\n+    test_str = final_str.replace(\\\"-\\\",
        \\\"\\\")\\n+    simple_test_str = string_to_check.replace(\\\"-\\\", \\\"\\\")\\n+
        \   for string in strings:\\n+        slug_str = slugify(string).replace(\\\"-\\\",
        \\\"\\\")\\n+\\n+        if slug_str in simple_test_str and slug_str not in
        test_str:\\n+            final_str += f\\\"-{slug_str}\\\"\\n+            test_str
        += slug_str\\n+\\n+    return final_str\\n+\\n+\\n+def create_clean_string(\\n+
        \   words: List[str], string: str, sort: bool = False, join_str: str = \\\"-\\\"\\n+)
        -> str:\\n+    \\\"\\\"\\\"\\n+    Create a string with strings from `words`
        list\\n+    if they are not yet present in `string`\\n+\\n+    ### Arguments\\n+
        \   - words: strings to check\\n+    - string: string to check if strings
        are present in\\n+    - sort: sort strings in list\\n+    - join_str: string
        to join strings with\\n+\\n+    ### Returns\\n+    - string with strings from
        `words` list\\n+    \\\"\\\"\\\"\\n+\\n+    string = slugify(string).replace(\\\"-\\\",
        \\\"\\\")\\n+\\n+    final = []\\n+    for word in words:\\n+        word
        = slugify(word).replace(\\\"-\\\", \\\"\\\")\\n+\\n+        if word in string:\\n+
        \           continue\\n+\\n+        final.append(word)\\n+\\n+    if sort:\\n+
        \       return sort_string(final, join_str)\\n+\\n+    return f\\\"{join_str}\\\".join(final)\\n+\\n+\\n+def
        sort_string(strings: List[str], join_str: str) -> str:\\n+    \\\"\\\"\\\"\\n+
        \   Sort strings in list and join them with `join` string\\n+\\n+    ### Arguments\\n+
        \   - strings: strings to sort\\n+    - join: string to join strings with\\n+\\n+
        \   ### Returns\\n+    - joined sorted string\\n+    \\\"\\\"\\\"\\n+\\n+
        \   final_str = strings\\n+    final_str.sort()\\n+\\n+    return f\\\"{join_str}\\\".join(final_str)\\n+\\n+\\n+def
        based_sort(strings: List[str], based_on: List[str]) -> Tuple[List[str], List[str]]:\\n+
        \   \\\"\\\"\\\"\\n+    Sort strings in list based on the order of strings
        in `based_on` list\\n+\\n+    ### Arguments\\n+    - strings: strings to sort\\n+
        \   - based_on: strings to sort `strings` list based on\\n+\\n+    ### Returns\\n+
        \   - sorted list of strings\\n+    \\\"\\\"\\\"\\n+\\n+    strings.sort()\\n+
        \   based_on.sort()\\n+\\n+    list_map = {value: index for index, value in
        enumerate(based_on)}\\n+\\n+    strings = sorted(\\n+        strings,\\n+
        \       key=lambda x: list_map.get(x, -1),\\n+        reverse=True,\\n+    )\\n+\\n+
        \   based_on.reverse()\\n+\\n+    return strings, based_on\\n+\\n+\\n+def
        check_common_word(song: Song, result: Result) -> bool:\\n+    \\\"\\\"\\\"\\n+
        \   Check if a word is present in a sentence\\n+\\n+    ### Arguments\\n+
        \   - song: song to match\\n+    - result: result to match\\n+\\n+    ###
        Returns\\n+    - True if word is present in sentence, False otherwise\\n+
        \   \\\"\\\"\\\"\\n+\\n+    sentence_words = slugify(song.name).split(\\\"-\\\")\\n+
        \   to_check = slugify(result.name).replace(\\\"-\\\", \\\"\\\")\\n+\\n+    for
        word in sentence_words:\\n+        if word != \\\"\\\" and word in to_check:\\n+
        \           return True\\n+\\n+    return False\\n+\\n+\\n+def check_forbidden_words(song:
        Song, result: Result) -> Tuple[bool, List[str]]:\\n+    \\\"\\\"\\\"\\n+    Check
        if a forbidden word is present in the result name\\n+\\n+    ### Arguments\\n+
        \   - song: song to match\\n+    - result: result to match\\n+\\n+    ###
        Returns\\n+    - True if forbidden word is present in result name, False otherwise\\n+
        \   \\\"\\\"\\\"\\n+\\n+    song_name = slugify(song.name).replace(\\\"-\\\",
        \\\"\\\")\\n+    to_check = slugify(result.name).replace(\\\"-\\\", \\\"\\\")\\n+\\n+
        \   words = []\\n+    for word in FORBIDDEN_WORDS:\\n+        if word in to_check
        and word not in song_name:\\n+            words.append(word)\\n+\\n+    return
        len(words) > 0, words\\n+\\n+\\n+def create_match_strings(\\n+    song: Song,
        result: Result, search_query: Optional[str] = None\\n+) -> Tuple[str, str]:\\n+
        \   \\\"\\\"\\\"\\n+    Create strings based on song and result to match\\n+
        \   fill strings with missing artists\\n+\\n+    ### Arguments\\n+    - song:
        song to match\\n+    - result: result to match\\n+\\n+    ### Returns\\n+
        \   - tuple of strings to match\\n+    \\\"\\\"\\\"\\n+\\n+    slug_song_name
        = slugify(song.name)\\n+    slug_song_title = slugify(\\n+        create_song_title(song.name,
        song.artists)\\n+        if not search_query\\n+        else create_search_query(song,
        search_query, False, None, True)\\n+    )\\n+\\n+    test_str1 = slugify(result.name)\\n+
        \   test_str2 = slug_song_name if result.verified else slug_song_title\\n+\\n+
        \   # Fill strings with missing artists\\n+    test_str1 = fill_string(song.artists,
        test_str1, test_str2)\\n+    test_str2 = fill_string(song.artists, test_str2,
        test_str1)\\n+\\n+    # Sort both strings and then join them\\n+    test_list1,
        test_list2 = based_sort(test_str1.split(\\\"-\\\"), test_str2.split(\\\"-\\\"))\\n+
        \   test_str1, test_str2 = \\\"-\\\".join(test_list1), \\\"-\\\".join(test_list2)\\n+\\n+
        \   return test_str1, test_str2\\n+\\n+\\n+def get_best_matches(\\n+    results:
        Dict[Result, float], score_threshold: float\\n+) -> List[Tuple[Result, float]]:\\n+
        \   \\\"\\\"\\\"\\n+    Get best matches from a list of results\\n+\\n+    ###
        Arguments\\n+    - results: list of results to match\\n+    - score_threshold:
        threshold to match results\\n+\\n+    ### Returns\\n+    - list of best matches\\n+
        \   \\\"\\\"\\\"\\n+\\n+    result_items = list(results.items())\\n+\\n+    #
        Sort results by highest score\\n+    sorted_results = sorted(result_items,
        key=lambda x: x[1], reverse=True)\\n+\\n+    best_score = sorted_results[0][1]\\n+\\n+
        \   return [\\n+        result\\n+        for result in sorted_results\\n+
        \       if (best_score - result[1]) <= score_threshold\\n+    ]\\n+\\n+\\n+def
        calc_main_artist_match(song: Song, result: Result) -> float:\\n+    \\\"\\\"\\\"\\n+
        \   Check if main artist is present in list of artists\\n+\\n+    ### Arguments\\n+
        \   - main_artist: main artist to check\\n+    - artists: list of artists
        to check\\n+\\n+    ### Returns\\n+    - True if main artist is present in
        list of artists, False otherwise\\n+    \\\"\\\"\\\"\\n+\\n+    main_artist_match
        = 0.0\\n+\\n+    # Result has no artists, return 0.0\\n+    if not result.artists:\\n+
        \       return main_artist_match\\n+\\n+    song_artists, result_artists =
        list(map(slugify, song.artists)), list(\\n+        map(slugify, result.artists)\\n+
        \   )\\n+    sorted_song_artists, sorted_result_artists = based_sort(\\n+
        \       song_artists, result_artists\\n+    )\\n+\\n+    debug(song.song_id,
        result.result_id, f\\\"Song artists: {sorted_song_artists}\\\")\\n+    debug(song.song_id,
        result.result_id, f\\\"Result artists: {sorted_result_artists}\\\")\\n+\\n+
        \   slug_song_main_artist = slugify(song.artists[0])\\n+    slug_result_main_artist
        = sorted_result_artists[0]\\n+\\n+    # Result has only one artist, but song
        has multiple artists\\n+    # we can assume that other artists are in the
        main artist name\\n+    if len(song.artists) > 1 and len(result.artists) ==
        1:\\n+        for artist in map(slugify, song.artists[1:]):\\n+            artist
        = sort_string(slugify(artist).split(\\\"-\\\"), \\\"-\\\")\\n+\\n+            res_main_artist
        = sort_string(slug_result_main_artist.split(\\\"-\\\"), \\\"-\\\")\\n+\\n+
        \           if artist in res_main_artist:\\n+                main_artist_match
        += 100 / len(song.artists)\\n+\\n+        return main_artist_match\\n+\\n+
        \   # Match main result artist with main song artist\\n+    main_artist_match
        = ratio(slug_song_main_artist, slug_result_main_artist)\\n+\\n+    debug(\\n+
        \       song.song_id, result.result_id, f\\\"First main artist match: {main_artist_match}\\\"\\n+
        \   )\\n+\\n+    # Use second artist from the sorted list to\\n+    # calculate
        the match if the first artist match is too low\\n+    if main_artist_match
        < 50 and len(song_artists) > 1:\\n+        for song_artist, result_artist
        in product(\\n+            song_artists[:2], sorted_result_artists[:2]\\n+
        \       ):\\n+            new_artist_match = ratio(song_artist, result_artist)\\n+
        \           debug(\\n+                song.song_id,\\n+                result.result_id,\\n+
        \               f\\\"Matched {song_artist} with {result_artist}: {new_artist_match}\\\",\\n+
        \           )\\n+\\n+            main_artist_match = max(main_artist_match,
        new_artist_match)\\n+\\n+    return main_artist_match\\n+\\n+\\n+def calc_artists_match(song:
        Song, result: Result) -> float:\\n+    \\\"\\\"\\\"\\n+    Check if all artists
        are present in list of artists\\n+\\n+    ### Arguments\\n+    - song: song
        to match\\n+    - result: result to match\\n+\\n+    ### Returns\\n+    -
        artists match percentage\\n+    \\\"\\\"\\\"\\n+\\n+    artist_match_number
        = 0.0\\n+\\n+    # Result has only one artist, return 0.0\\n+    if len(song.artists)
        == 1 or not result.artists:\\n+        return artist_match_number\\n+\\n+
        \   artist1_list, artist2_list = based_sort(\\n+        list(map(slugify,
        song.artists)), list(map(slugify, result.artists))\\n+    )\\n+\\n+    # Remove
        main artist from the lists\\n+    artist1_list, artist2_list = artist1_list[1:],
        artist2_list[1:]\\n+\\n+    artists_match = 0.0\\n+    for artist1, artist2
        in zip_longest(artist1_list, artist2_list):\\n+        artist12_match = ratio(artist1,
        artist2)\\n+        artists_match += artist12_match\\n+\\n+    artist_match_number
        = artists_match / len(artist1_list)\\n+\\n+    return artist_match_number\\n+\\n+\\n+def
        artists_match_fixup1(song: Song, result: Result, score: float) -> float:\\n+
        \   \\\"\\\"\\\"\\n+    Multiple fixes to the artists score for\\n+    not
        verified results to improve the accuracy\\n+\\n+    ### Arguments\\n+    -
        song: song to match\\n+    - result: result to match\\n+    - score: current
        score\\n+\\n+    ### Returns\\n+    - new score\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # If we have a verified result, we don't have to fix anything\\n+    if
        result.verified or score > 50:\\n+        return score\\n+\\n+    # If we
        didn't find any artist match,\\n+    # we fallback to channel name match\\n+
        \   channel_name_match = ratio(\\n+        slugify(song.artist),\\n+        slugify(\\\",
        \\\".join(result.artists)) if result.artists else \\\"\\\",\\n+    )\\n+\\n+
        \   score = max(score, channel_name_match)\\n+\\n+    # If artist match is
        still too low,\\n+    # we fallback to matching all song artist names\\n+
        \   # with the result's title\\n+    if score <= 70:\\n+        artist_title_match
        = 0.0\\n+        result_name = slugify(result.name).replace(\\\"-\\\", \\\"\\\")\\n+
        \       for artist in song.artists:\\n+            slug_artist = slugify(artist).replace(\\\"-\\\",
        \\\"\\\")\\n+\\n+            if slug_artist in result_name:\\n+                artist_title_match
        += 1.0\\n+\\n+        artist_title_match = (artist_title_match / len(song.artists))
        * 100\\n+\\n+        score = max(score, artist_title_match)\\n+\\n+    return
        score\\n+\\n+\\n+def artists_match_fixup2(\\n+    song: Song, result: Result,
        score: float, search_query: Optional[str] = None\\n+) -> float:\\n+    \\\"\\\"\\\"\\n+
        \   Multiple fixes to the artists score for\\n+    verified results to improve
        the accuracy\\n+\\n+    ### Arguments\\n+    - song: song to match\\n+    -
        result: result to match\\n+    - score: current score\\n+\\n+    ### Returns\\n+
        \   - new score\\n+    \\\"\\\"\\\"\\n+\\n+    if score > 70 or not result.verified:\\n+
        \       # Don't fixup the score\\n+        # if the artist match is already
        high\\n+        # or if the result is not verified\\n+        return score\\n+\\n+
        \   # Slugify some variables\\n+    slug_song_name = slugify(song.name)\\n+
        \   slug_result_name = slugify(result.name)\\n+\\n+    # # Check if the main
        artist is simlar\\n+    has_main_artist = (score / (2 if len(song.artists)
        > 1 else 1)) > 50\\n+\\n+    _, match_str2 = create_match_strings(song, result,
        search_query)\\n+\\n+    # Check if other song artists are in the result name\\n+
        \   # if they are, we increase the artist match\\n+    # (main artist is already
        checked, so we skip it)\\n+    artists_to_check = song.artists[int(has_main_artist)
        :]\\n+    for artist in artists_to_check:\\n+        artist = slugify(artist).replace(\\\"-\\\",
        \\\"\\\")\\n+        if artist in match_str2.replace(\\\"-\\\", \\\"\\\"):\\n+
        \           score += 5\\n+\\n+    # if the artist match is still too low,\\n+
        \   # we fallback to matching all song artist names\\n+    # with the result's
        artists\\n+    if score <= 70:\\n+        # Artists from song/result name
        without the song/result name words\\n+        artist_list1 = create_clean_string(song.artists,
        slug_song_name, True)\\n+        artist_list2 = create_clean_string(\\n+            list(result.artists)
        if result.artists else [result.author],\\n+            slug_result_name,\\n+
        \           True,\\n+        )\\n+\\n+        artist_title_match = ratio(artist_list1,
        artist_list2)\\n+\\n+        score = max(score, artist_title_match)\\n+\\n+
        \   return score\\n+\\n+\\n+def artists_match_fixup3(song: Song, result: Result,
        score: float) -> float:\\n+    \\\"\\\"\\\"\\n+    Calculate match percentage
        based result's name\\n+    and song's title if the result has exactly one
        artist\\n+    and the song has more than one artist\\n+\\n+    ### Arguments\\n+
        \   - song: song to match\\n+    - result: result to match\\n+    - score:
        current score\\n+\\n+    ### Returns\\n+    - new score\\n+    \\\"\\\"\\\"\\n+\\n+
        \   if (\\n+        score > 70\\n+        or not result.artists\\n+        or
        len(result.artists) > 1\\n+        or len(song.artists) == 1\\n+    ):\\n+
        \       # Don't fixup the score\\n+        # if the score is already high\\n+
        \       # or if the result has more than one artist\\n+        # or if the
        song has only one artist\\n+        return score\\n+\\n+    artists_score_fixup
        = ratio(\\n+        slugify(result.name),\\n+        slugify(create_song_title(song.name,
        [song.artist])),\\n+    )\\n+\\n+    if artists_score_fixup >= 80:\\n+        score
        = (score + artists_score_fixup) / 2\\n+\\n+    # Make sure that the score
        is not higher than 100\\n+    score = min(score, 100)\\n+\\n+    return score\\n+\\n+\\n+def
        calc_name_match(\\n+    song: Song, result: Result, search_query: Optional[str]
        = None\\n+) -> float:\\n+    \\\"\\\"\\\"\\n+    Calculate name match percentage\\n+\\n+
        \   ### Arguments\\n+    - song: song to match\\n+    - result: result to
        match\\n+\\n+    ### Returns\\n+    - name match percentage\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Create match strings that will be used\\n+    # to calculate name match
        value\\n+    match_str1, match_str2 = create_match_strings(song, result, search_query)\\n+
        \   result_name, song_name = slugify(result.name), slugify(song.name)\\n+\\n+
        \   res_list, song_list = based_sort(result_name.split(\\\"-\\\"), song_name.split(\\\"-\\\"))\\n+
        \   result_name, song_name = \\\"-\\\".join(res_list), \\\"-\\\".join(song_list)\\n+\\n+
        \   # Calculate initial name match\\n+    name_match = ratio(result_name,
        song_name)\\n+\\n+    debug(song.song_id, result.result_id, f\\\"MATCH STRINGS:
        {match_str1} - {match_str2}\\\")\\n+    debug(\\n+        song.song_id,\\n+
        \       result.result_id,\\n+        f\\\"SLUG MATCH STRINGS: {song_name}
        - {result_name}\\\",\\n+    )\\n+    debug(song.song_id, result.result_id,
        f\\\"First name match: {name_match}\\\")\\n+\\n+    # If name match is lower
        than 60%,\\n+    # we try to match using the test strings\\n+    if name_match
        <= 75:\\n+        second_name_match = ratio(\\n+            match_str1,\\n+
        \           match_str2,\\n+        )\\n+\\n+        debug(\\n+            song.song_id,\\n+
        \           result.result_id,\\n+            f\\\"Second name match: {second_name_match}\\\",\\n+
        \       )\\n+\\n+        name_match = max(name_match, second_name_match)\\n+\\n+
        \   return name_match\\n+\\n+\\n+def calc_time_match(song: Song, result: Result)
        -> float:\\n+    \\\"\\\"\\\"\\n+    Calculate time difference between song
        and result\\n+\\n+    ### Arguments\\n+    - song: song to match\\n+    -
        result: result to match\\n+\\n+    ### Returns\\n+    - time difference between
        song and result\\n+    \\\"\\\"\\\"\\n+\\n+    time_diff = abs(song.duration
        - result.duration)\\n+    score = exp(-0.1 * time_diff)\\n+    return score
        * 100\\n+\\n+\\n+def calc_album_match(song: Song, result: Result) -> float:\\n+
        \   \\\"\\\"\\\"\\n+    Calculate album match percentage\\n+\\n+    ### Arguments\\n+
        \   - song: song to match\\n+    - result: result to match\\n+\\n+    ###
        Returns\\n+    - album match percentage\\n+    \\\"\\\"\\\"\\n+\\n+    if
        not result.album:\\n+        return 0.0\\n+\\n+    return ratio(slugify(song.album_name),
        slugify(result.album))\\n+\\n+\\n+def order_results(\\n+    results: List[Result],\\n+
        \   song: Song,\\n+    search_query: Optional[str] = None,\\n+) -> Dict[Result,
        float]:\\n+    \\\"\\\"\\\"\\n+    Order results.\\n+\\n+    ### Arguments\\n+
        \   - results: The results to order.\\n+    - song: The song to order for.\\n+
        \   - search_query: The search query.\\n+\\n+    ### Returns\\n+    - The
        ordered results.\\n+    \\\"\\\"\\\"\\n+\\n+    # Assign an overall avg match
        value to each result\\n+    links_with_match_value = {}\\n+\\n+    # Iterate
        over all results\\n+    for result in results:\\n+        debug(\\n+            song.song_id,\\n+
        \           result.result_id,\\n+            f\\\"Calculating match value
        for {result.url} - {result.json}\\\",\\n+        )\\n+\\n+        # skip results
        that have no common words in their name\\n+        if not check_common_word(song,
        result):\\n+            debug(\\n+                song.song_id, result.result_id,
        \\\"Skipping result due to no common words\\\"\\n+            )\\n+\\n+            continue\\n+\\n+
        \       # Calculate match value for main artist\\n+        artists_match =
        calc_main_artist_match(song, result)\\n+        debug(song.song_id, result.result_id,
        f\\\"Main artist match: {artists_match}\\\")\\n+\\n+        # Calculate match
        value for all artists\\n+        other_artists_match = calc_artists_match(song,
        result)\\n+        debug(\\n+            song.song_id,\\n+            result.result_id,\\n+
        \           f\\\"Other artists match: {other_artists_match}\\\",\\n+        )\\n+\\n+
        \       artists_match += other_artists_match\\n+\\n+        # Calculate initial
        artist match value\\n+        debug(song.song_id, result.result_id, f\\\"Initial
        artists match: {artists_match}\\\")\\n+        artists_match = artists_match
        / (2 if len(song.artists) > 1 else 1)\\n+        debug(song.song_id, result.result_id,
        f\\\"First artists match: {artists_match}\\\")\\n+\\n+        # # First attempt
        to fix artist match\\n+        artists_match = artists_match_fixup1(song,
        result, artists_match)\\n+        debug(\\n+            song.song_id,\\n+
        \           result.result_id,\\n+            f\\\"Artists match after fixup1:
        {artists_match}\\\",\\n+        )\\n+\\n+        # Second attempt to fix artist
        match\\n+        artists_match = artists_match_fixup2(song, result, artists_match)\\n+
        \       debug(\\n+            song.song_id,\\n+            result.result_id,\\n+
        \           f\\\"Artists match after fixup2: {artists_match}\\\",\\n+        )\\n+\\n+
        \       # Third attempt to fix artist match\\n+        artists_match = artists_match_fixup3(song,
        result, artists_match)\\n+        debug(\\n+            song.song_id,\\n+
        \           result.result_id,\\n+            f\\\"Artists match after fixup3:
        {artists_match}\\\",\\n+        )\\n+\\n+        debug(song.song_id, result.result_id,
        f\\\"Final artists match: {artists_match}\\\")\\n+\\n+        # Calculate
        name match\\n+        name_match = calc_name_match(song, result, search_query)\\n+
        \       debug(song.song_id, result.result_id, f\\\"Initial name match: {name_match}\\\")\\n+\\n+
        \       # Check if result contains forbidden words\\n+        contains_fwords,
        found_fwords = check_forbidden_words(song, result)\\n+        if contains_fwords:\\n+
        \           for _ in found_fwords:\\n+                name_match -= 15\\n+\\n+
        \       debug(\\n+            song.song_id,\\n+            result.result_id,\\n+
        \           f\\\"Contains forbidden words: {contains_fwords}, {found_fwords}\\\",\\n+
        \       )\\n+        debug(song.song_id, result.result_id, f\\\"Final name
        match: {name_match}\\\")\\n+\\n+        # Calculate album match\\n+        album_match
        = calc_album_match(song, result)\\n+        debug(song.song_id, result.result_id,
        f\\\"Final album match: {album_match}\\\")\\n+\\n+        # Calculate time
        match\\n+        time_match = calc_time_match(song, result)\\n+        debug(song.song_id,
        result.result_id, f\\\"Final time match: {time_match}\\\")\\n+\\n+        #
        Ignore results with name match lower than 60%\\n+        if name_match <=
        60:\\n+            debug(\\n+                song.song_id,\\n+                result.result_id,\\n+
        \               \\\"Skipping result due to name match lower than 60%\\\",\\n+
        \           )\\n+            continue\\n+\\n+        # Ignore results with
        artists match lower than 70%\\n+        if artists_match < 70 and result.source
        != \\\"slider.kz\\\":\\n+            debug(\\n+                song.song_id,\\n+
        \               result.result_id,\\n+                \\\"Skipping result due
        to artists match lower than 70%\\\",\\n+            )\\n+            continue\\n+\\n+
        \       # Calculate total match\\n+        average_match = (artists_match
        + name_match) / 2\\n+        debug(song.song_id, result.result_id, f\\\"Average
        match: {average_match}\\\")\\n+\\n+        if (\\n+            result.verified\\n+
        \           and not result.isrc_search\\n+            and result.album\\n+
        \           and album_match <= 80\\n+        ):\\n+            # we are almost
        certain that this is the correct result\\n+            # so we add the album
        match to the average match\\n+            average_match = (average_match +
        album_match) / 2\\n+            debug(\\n+                song.song_id,\\n+
        \               result.result_id,\\n+                f\\\"Average match /w
        album match: {average_match}\\\",\\n+            )\\n+\\n+        # Skip results
        with time match lower than 25%\\n+        if time_match < 25:\\n+            debug(\\n+
        \               song.song_id,\\n+                result.result_id,\\n+                \\\"Skipping
        result due to time match lower than 25%\\\",\\n+            )\\n+            continue\\n+\\n+
        \       # If the time match is lower than 50%\\n+        # and the average
        match is lower than 75%\\n+        # we skip the result\\n+        if time_match
        < 50 and average_match < 75:\\n+            debug(\\n+                song.song_id,\\n+
        \               result.result_id,\\n+                \\\"Skipping result due
        to time match < 50% and average match < 75%\\\",\\n+            )\\n+            continue\\n+\\n+
        \       if (\\n+            (not result.isrc_search and average_match <= 85)\\n+
        \           or result.source == \\\"slider.kz\\\"\\n+            or time_match
        < 0\\n+        ):\\n+            # Don't add time to avg match if average
        match is not the best\\n+            # (lower than 85%), always include time
        match if result is from\\n+            # slider.kz or if time match is lower
        than 0\\n+            average_match = (average_match + time_match) / 2\\n+\\n+
        \           debug(\\n+                song.song_id,\\n+                result.result_id,\\n+
        \               f\\\"Average match /w time match: {average_match}\\\",\\n+
        \           )\\n+\\n+            if (result.explicit is not None and song.explicit
        is not None) and (\\n+                result.explicit != song.explicit\\n+
        \           ):\\n+                debug(\\n+                    song.song_id,\\n+
        \                   result.result_id,\\n+                    \\\"Lowering
        average match due to explicit mismatch\\\",\\n+                )\\n+\\n+                average_match
        -= 5\\n+\\n+        average_match = min(average_match, 100)\\n+        debug(song.song_id,
        result.result_id, f\\\"Final average match: {average_match}\\\")\\n+\\n+        #
        the results along with the avg Match\\n+        links_with_match_value[result]
        = average_match\\n+\\n+    return links_with_match_value\"},{\"sha\":\"61367924f6f2de413a0ab2febe9fe3854c4c67d8\",\"filename\":\"spotdl/utils/metadata.py\",\"status\":\"added\",\"additions\":650,\"deletions\":0,\"changes\":650,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fmetadata.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fmetadata.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fmetadata.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,650 @@\\n+\\\"\\\"\\\"\\n+Module for embedding metadata into audio
        files using Mutagen.\\n+\\n+```python\\n+embed_metadata(\\n+    output_file=Path(\\\"test.mp3\\\"),\\n+
        \   song=song_object,\\n+    file_format=\\\"mp3\\\",\\n+)\\n+```\\n+\\\"\\\"\\\"\\n+\\n+import
        base64\\n+import logging\\n+import re\\n+from pathlib import Path\\n+from
        typing import Any, Dict, Optional\\n+\\n+import requests\\n+from mutagen._file
        import File\\n+from mutagen.flac import Picture\\n+from mutagen.id3 import
        ID3\\n+from mutagen.id3._frames import (\\n+    APIC,\\n+    COMM,\\n+    POPM,\\n+
        \   SYLT,\\n+    TALB,\\n+    TCOM,\\n+    TCON,\\n+    TCOP,\\n+    TDRC,\\n+
        \   TIT2,\\n+    TPE1,\\n+    TRCK,\\n+    TSRC,\\n+    USLT,\\n+    WOAS,\\n+)\\n+from
        mutagen.id3._specs import Encoding\\n+from mutagen.mp4 import MP4Cover\\n+from
        mutagen.wave import WAVE\\n+\\n+from spotdl.types.song import Song\\n+from
        spotdl.utils.config import GlobalConfig\\n+from spotdl.utils.formatter import
        to_ms\\n+from spotdl.utils.lrc import remomve_lrc\\n+\\n+logger = logging.getLogger(__name__)\\n+\\n+__all__
        = [\\n+    \\\"MetadataError\\\",\\n+    \\\"M4A_TAG_PRESET\\\",\\n+    \\\"MP3_TAG_PRESET\\\",\\n+
        \   \\\"TAG_PRESET\\\",\\n+    \\\"TAG_TO_SONG\\\",\\n+    \\\"M4A_TO_SONG\\\",\\n+
        \   \\\"MP3_TO_SONG\\\",\\n+    \\\"LRC_REGEX\\\",\\n+    \\\"embed_metadata\\\",\\n+
        \   \\\"embed_cover\\\",\\n+    \\\"embed_lyrics\\\",\\n+    \\\"get_file_metadata\\\",\\n+]\\n+\\n+\\n+class
        MetadataError(Exception):\\n+    \\\"\\\"\\\"\\n+    Base class for all exceptions
        related to metadata and id3 embedding.\\n+    \\\"\\\"\\\"\\n+\\n+\\n+# Apple
        has specific tags - see mutagen docs -\\n+# http://mutagen.readthedocs.io/en/latest/api/mp4.html\\n+M4A_TAG_PRESET
        = {\\n+    \\\"album\\\": \\\"\\\\xa9alb\\\",\\n+    \\\"artist\\\": \\\"\\\\xa9ART\\\",\\n+
        \   \\\"date\\\": \\\"\\\\xa9day\\\",\\n+    \\\"title\\\": \\\"\\\\xa9nam\\\",\\n+
        \   \\\"year\\\": \\\"\\\\xa9day\\\",\\n+    \\\"comment\\\": \\\"\\\\xa9cmt\\\",\\n+
        \   \\\"group\\\": \\\"\\\\xa9grp\\\",\\n+    \\\"writer\\\": \\\"\\\\xa9wrt\\\",\\n+
        \   \\\"genre\\\": \\\"\\\\xa9gen\\\",\\n+    \\\"tracknumber\\\": \\\"trkn\\\",\\n+
        \   \\\"albumartist\\\": \\\"aART\\\",\\n+    \\\"discnumber\\\": \\\"disk\\\",\\n+
        \   \\\"cpil\\\": \\\"cpil\\\",\\n+    \\\"albumart\\\": \\\"covr\\\",\\n+
        \   \\\"encodedby\\\": \\\"\\\\xa9too\\\",\\n+    \\\"copyright\\\": \\\"cprt\\\",\\n+
        \   \\\"tempo\\\": \\\"tmpo\\\",\\n+    \\\"lyrics\\\": \\\"\\\\xa9lyr\\\",\\n+
        \   \\\"explicit\\\": \\\"rtng\\\",\\n+    \\\"woas\\\": \\\"----:spotdl:WOAS\\\",\\n+
        \   \\\"isrc\\\": \\\"----:spotdl:ISRC\\\",\\n+}\\n+\\n+MP3_TAG_PRESET = {\\n+
        \   \\\"album\\\": \\\"TALB\\\",\\n+    \\\"artist\\\": \\\"TPE1\\\",\\n+
        \   \\\"date\\\": \\\"TDRC\\\",\\n+    \\\"title\\\": \\\"TIT2\\\",\\n+    \\\"year\\\":
        \\\"TDRC\\\",\\n+    \\\"comment\\\": \\\"COMM::XXX\\\",\\n+    \\\"group\\\":
        \\\"TIT1\\\",\\n+    \\\"writer\\\": \\\"TEXT\\\",\\n+    \\\"genre\\\": \\\"TCON\\\",\\n+
        \   \\\"tracknumber\\\": \\\"TRCK\\\",\\n+    \\\"albumartist\\\": \\\"TPE2\\\",\\n+
        \   \\\"discnumber\\\": \\\"TPOS\\\",\\n+    \\\"cpil\\\": \\\"TCMP\\\",\\n+
        \   \\\"albumart\\\": \\\"APIC\\\",\\n+    \\\"encodedby\\\": \\\"TENC\\\",\\n+
        \   \\\"copyright\\\": \\\"TCOP\\\",\\n+    \\\"tempo\\\": \\\"TBPM\\\",\\n+
        \   \\\"lyrics\\\": \\\"USLT::XXX\\\",\\n+    \\\"woas\\\": \\\"WOAS\\\",\\n+
        \   \\\"isrc\\\": \\\"TSRC\\\",\\n+    \\\"explicit\\\": \\\"NULL\\\",\\n+}\\n+\\n+TAG_PRESET
        = {key: key for key in M4A_TAG_PRESET}\\n+\\n+TAG_TO_SONG = {\\n+    \\\"title\\\":
        \\\"name\\\",\\n+    \\\"artist\\\": \\\"artists\\\",\\n+    \\\"album\\\":
        \\\"album_name\\\",\\n+    \\\"albumartist\\\": \\\"album_artist\\\",\\n+
        \   \\\"genre\\\": \\\"genres\\\",\\n+    \\\"discnumber\\\": \\\"disc_number\\\",\\n+
        \   \\\"year\\\": \\\"year\\\",\\n+    \\\"date\\\": \\\"date\\\",\\n+    \\\"tracknumber\\\":
        \\\"track_number\\\",\\n+    \\\"encodedby\\\": \\\"publisher\\\",\\n+    \\\"woas\\\":
        \\\"url\\\",\\n+    \\\"comment\\\": \\\"download_url\\\",\\n+    \\\"isrc\\\":
        \\\"isrc\\\",\\n+    \\\"copyright\\\": \\\"copyright_text\\\",\\n+    \\\"lyrics\\\":
        \\\"lyrics\\\",\\n+    \\\"albumart\\\": \\\"album_art\\\",\\n+}\\n+\\n+M4A_TO_SONG
        = {\\n+    value: TAG_TO_SONG.get(key)\\n+    for key, value in M4A_TAG_PRESET.items()\\n+
        \   if TAG_TO_SONG.get(key)\\n+}\\n+MP3_TO_SONG = {\\n+    value: TAG_TO_SONG.get(key)\\n+
        \   for key, value in MP3_TAG_PRESET.items()\\n+    if TAG_TO_SONG.get(key)\\n+}\\n+\\n+LRC_REGEX
        = re.compile(r\\\"(\\\\[\\\\d{2}:\\\\d{2}.\\\\d{2,3}\\\\])\\\")\\n+\\n+\\n+def
        embed_metadata(\\n+    output_file: Path,\\n+    song: Song,\\n+    id3_separator:
        str = \\\"/\\\",\\n+    skip_album_art: Optional[bool] = False,\\n+):\\n+
        \   \\\"\\\"\\\"\\n+    Set ID3 tags for generic files (FLAC, OPUS, OGG)\\n+\\n+
        \   ### Arguments\\n+    - output_file: Path to the output file.\\n+    -
        song: Song object.\\n+    - id3_separator: The separator used for the id3
        tags.\\n+    - skip_album_art: Boolean to skip album art embedding.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   # Get the file extension for the output file\\n+    encoding = output_file.suffix[1:]\\n+\\n+
        \   if encoding == \\\"wav\\\":\\n+        embed_wav_file(output_file, song)\\n+
        \       return\\n+\\n+    # Get the tag preset for the file extension\\n+
        \   tag_preset = TAG_PRESET if encoding != \\\"m4a\\\" else M4A_TAG_PRESET\\n+\\n+
        \   try:\\n+        audio_file = File(str(output_file.resolve()), easy=encoding
        == \\\"mp3\\\")\\n+\\n+        if audio_file is None:\\n+            raise
        MetadataError(\\n+                f\\\"Unrecognized file format for {output_file}
        from {song.url}\\\"\\n+            )\\n+    except Exception as exc:\\n+        raise
        MetadataError(\\\"Unable to load file.\\\") from exc\\n+\\n+    # Embed basic
        metadata\\n+    audio_file[tag_preset[\\\"artist\\\"]] = song.artists\\n+
        \   audio_file[tag_preset[\\\"albumartist\\\"]] = (\\n+        song.album_artist
        if song.album_artist else song.artist\\n+    )\\n+    audio_file[tag_preset[\\\"title\\\"]]
        = song.name\\n+    audio_file[tag_preset[\\\"date\\\"]] = song.date\\n+    audio_file[tag_preset[\\\"encodedby\\\"]]
        = song.publisher\\n+\\n+    # Embed metadata that isn't always present\\n+
        \   album_name = song.album_name\\n+    if album_name:\\n+        audio_file[tag_preset[\\\"album\\\"]]
        = album_name\\n+\\n+    if song.genres:\\n+        audio_file[tag_preset[\\\"genre\\\"]]
        = song.genres[0].title()\\n+\\n+    if song.copyright_text:\\n+        audio_file[tag_preset[\\\"copyright\\\"]]
        = song.copyright_text\\n+\\n+    if song.download_url and encoding != \\\"mp3\\\":\\n+
        \       audio_file[tag_preset[\\\"comment\\\"]] = song.download_url\\n+\\n+
        \   # Embed some metadata in format specific ways\\n+    if encoding in [\\\"flac\\\",
        \\\"ogg\\\", \\\"opus\\\"]:\\n+        # Zero fill the disc and track numbers\\n+
        \       zfilled_disc_number = str(song.disc_number).zfill(len(str(song.disc_count)))\\n+
        \       zfilled_track_number = str(song.track_number).zfill(len(str(song.tracks_count)))\\n+\\n+
        \       audio_file[tag_preset[\\\"discnumber\\\"]] = zfilled_disc_number\\n+
        \       audio_file[tag_preset[\\\"tracknumber\\\"]] = zfilled_track_number\\n+
        \       audio_file[tag_preset[\\\"woas\\\"]] = song.url\\n+        audio_file[tag_preset[\\\"isrc\\\"]]
        = song.isrc\\n+    elif encoding == \\\"m4a\\\":\\n+        audio_file[tag_preset[\\\"discnumber\\\"]]
        = [(song.disc_number, song.disc_count)]\\n+        audio_file[tag_preset[\\\"tracknumber\\\"]]
        = [(song.track_number, song.tracks_count)]\\n+        audio_file[tag_preset[\\\"explicit\\\"]]
        = (4 if song.explicit is True else 2,)\\n+        audio_file[tag_preset[\\\"woas\\\"]]
        = song.url.encode(\\\"utf-8\\\")\\n+    elif encoding == \\\"mp3\\\":\\n+
        \       audio_file[\\\"tracknumber\\\"] = f\\\"{str(song.track_number)}/{str(song.tracks_count)}\\\"\\n+
        \       audio_file[\\\"discnumber\\\"] = f\\\"{str(song.disc_number)}/{str(song.disc_count)}\\\"\\n+
        \       audio_file[\\\"isrc\\\"] = song.isrc\\n+\\n+    # Mp3 specific encoding\\n+
        \   if encoding == \\\"mp3\\\":\\n+        if id3_separator != \\\"/\\\":\\n+
        \           audio_file.save(v23_sep=id3_separator, v2_version=3)\\n+        else:\\n+
        \           audio_file.save(v2_version=3)\\n+\\n+        audio_file = ID3(str(output_file.resolve()))\\n+\\n+
        \       audio_file.add(WOAS(encoding=3, url=song.url))\\n+\\n+        if song.download_url:\\n+
        \           audio_file.add(COMM(encoding=3, text=song.download_url))\\n+\\n+
        \       if song.popularity:\\n+            audio_file.add(\\n+                POPM(\\n+
        \                   rating=int(song.popularity * 255 / 100),\\n+                )\\n+
        \           )\\n+\\n+    if not skip_album_art:\\n+        # Embed album art\\n+
        \       audio_file = embed_cover(audio_file, song, encoding)\\n+\\n+    #
        Embed lyrics\\n+    audio_file = embed_lyrics(audio_file, song, encoding)\\n+\\n+
        \   # Mp3 specific encoding\\n+    if encoding == \\\"mp3\\\":\\n+        audio_file.save(v23_sep=id3_separator,
        v2_version=3)\\n+    else:\\n+        audio_file.save()\\n+\\n+\\n+def embed_cover(audio_file,
        song: Song, encoding: str):\\n+    \\\"\\\"\\\"\\n+    Embed the album art
        in the audio file.\\n+\\n+    ### Arguments\\n+    - audio_file: Audio file
        object.\\n+    - song: Song object.\\n+    \\\"\\\"\\\"\\n+\\n+    if not
        song.cover_url:\\n+        return audio_file\\n+\\n+    # Try to download
        the cover art\\n+    try:\\n+        cover_data = requests.get(\\n+            song.cover_url,\\n+
        \           timeout=10,\\n+            proxies=GlobalConfig.get_parameter(\\\"proxies\\\"),\\n+
        \       ).content\\n+    except Exception:\\n+        return audio_file\\n+\\n+
        \   # Create the image object for the file type\\n+    if encoding in [\\\"flac\\\",
        \\\"ogg\\\", \\\"opus\\\"]:\\n+        picture = Picture()\\n+        picture.type
        = 3\\n+        picture.desc = \\\"Cover\\\"\\n+        picture.mime = \\\"image/jpeg\\\"\\n+
        \       picture.data = cover_data\\n+\\n+        if encoding in [\\\"ogg\\\",
        \\\"opus\\\"]:\\n+            image_data = picture.write()\\n+            encoded_data
        = base64.b64encode(image_data)\\n+            vcomment_value = encoded_data.decode(\\\"ascii\\\")\\n+
        \           if \\\"metadata_block_picture\\\" in audio_file.keys():\\n+                audio_file.pop(\\\"metadata_block_picture\\\")\\n+
        \           audio_file[\\\"metadata_block_picture\\\"] = [vcomment_value]\\n+
        \       elif encoding == \\\"flac\\\":\\n+            if audio_file.pictures:\\n+
        \               audio_file.clear_pictures()\\n+            audio_file.add_picture(picture)\\n+
        \   elif encoding == \\\"m4a\\\":\\n+        if M4A_TAG_PRESET[\\\"albumart\\\"]
        in audio_file.keys():\\n+            audio_file.pop(M4A_TAG_PRESET[\\\"albumart\\\"])\\n+
        \       audio_file[M4A_TAG_PRESET[\\\"albumart\\\"]] = [\\n+            MP4Cover(\\n+
        \               cover_data,\\n+                imageformat=MP4Cover.FORMAT_JPEG,\\n+
        \           )\\n+        ]\\n+    elif encoding == \\\"mp3\\\":\\n+        if
        \\\"APIC:Cover\\\" in audio_file.keys():\\n+            audio_file.pop(\\\"APIC:Cover\\\")\\n+
        \       audio_file[\\\"APIC\\\"] = APIC(\\n+            encoding=3,\\n+            mime=\\\"image/jpeg\\\",\\n+
        \           type=3,\\n+            desc=\\\"Cover\\\",\\n+            data=cover_data,\\n+
        \       )\\n+\\n+    return audio_file\\n+\\n+\\n+def embed_lyrics(audio_file,
        song: Song, encoding: str):\\n+    \\\"\\\"\\\"\\n+    Detect lyrics type
        (lrc or txt) and embed them in the audio file.\\n+\\n+    ### Arguments\\n+
        \   - audio_file: Audio file object.\\n+    - song: Song object.\\n+    -
        encoding: Encoding type.\\n+    \\\"\\\"\\\"\\n+\\n+    lyrics = song.lyrics\\n+
        \   if not lyrics:\\n+        return audio_file\\n+\\n+    tag_preset = TAG_PRESET
        if encoding != \\\"m4a\\\" else M4A_TAG_PRESET\\n+\\n+    # Check if the lyrics
        are in lrc format\\n+    # using regex on the first 5 lines\\n+    lrc_lines
        = lyrics.splitlines()[:5]\\n+    lrc_lines = [line for line in lrc_lines if
        line and LRC_REGEX.match(line)]\\n+\\n+    if len(lrc_lines) == 0:\\n+        #
        Lyrics are not in lrc format\\n+        # Embed them normally\\n+        if
        encoding == \\\"mp3\\\":\\n+            audio_file.add(USLT(encoding=Encoding.UTF8,
        text=song.lyrics))\\n+        else:\\n+            audio_file[tag_preset[\\\"lyrics\\\"]]
        = song.lyrics\\n+    else:\\n+        # Lyrics are in lrc format\\n+        #
        Embed them as SYLT id3 tag\\n+        clean_lyrics = remomve_lrc(lyrics)\\n+
        \       if encoding == \\\"mp3\\\":\\n+            lrc_data = []\\n+            for
        line in lyrics.splitlines():\\n+                time_tag = line.split(\\\"]\\\",
        1)[0] + \\\"]\\\"\\n+                text = line.replace(time_tag, \\\"\\\")\\n+\\n+
        \               time_tag = time_tag.replace(\\\"[\\\", \\\"\\\")\\n+                time_tag
        = time_tag.replace(\\\"]\\\", \\\"\\\")\\n+                time_tag = time_tag.replace(\\\".\\\",
        \\\":\\\")\\n+                time_tag_vals = time_tag.split(\\\":\\\")\\n+
        \               if len(time_tag_vals) != 3 or any(\\n+                    not
        isinstance(tag, int) for tag in time_tag_vals\\n+                ):\\n+                    continue\\n+\\n+
        \               minute, sec, millisecond = time_tag_vals\\n+                time
        = to_ms(min=minute, sec=sec, ms=millisecond)\\n+                lrc_data.append((text,
        time))\\n+\\n+            audio_file.add(USLT(encoding=3, text=clean_lyrics))\\n+
        \           audio_file.add(SYLT(encoding=3, text=lrc_data, format=2, type=1))\\n+
        \       else:\\n+            audio_file[tag_preset[\\\"lyrics\\\"]] = song.lyrics\\n+\\n+
        \   return audio_file\\n+\\n+\\n+def get_file_metadata(path: Path, id3_separator:
        str = \\\"/\\\") -> Optional[Dict[str, Any]]:\\n+    \\\"\\\"\\\"\\n+    Get
        song metadata.\\n+\\n+    ### Arguments\\n+    - path: Path to the song.\\n+\\n+
        \   ### Returns\\n+    - Dict of song metadata.\\n+\\n+    ### Raises\\n+
        \   - OSError: If the file is not found.\\n+    - MetadataError: If the file
        is not a valid audio file.\\n+    \\\"\\\"\\\"\\n+\\n+    if path.exists()
        is False:\\n+        raise OSError(f\\\"File not found: {path}\\\")\\n+\\n+
        \   audio_file = File(str(path.resolve()))\\n+\\n+    if audio_file is None
        or audio_file == {}:\\n+        return None\\n+\\n+    song_meta: Dict[str,
        Any] = {}\\n+    for key in TAG_PRESET:\\n+        if path.suffix == \\\".m4a\\\":\\n+
        \           val = audio_file.get(M4A_TAG_PRESET[key])\\n+        elif path.suffix
        == \\\".mp3\\\":\\n+            val = audio_file.get(MP3_TAG_PRESET[key])\\n+
        \       else:\\n+            val = audio_file.get(key)\\n+\\n+        # Cover
        art is a special case and\\n+        # has to be handled before checking the
        val\\n+        # M4A is handled in the m4a section since it\\n+        # has
        data in the val variable\\n+        if key == \\\"albumart\\\":\\n+            if
        path.suffix == \\\".mp3\\\":\\n+                cover = audio_file.get(\\\"APIC:Cover\\\")\\n+
        \               if cover:\\n+                    song_meta[\\\"album_art\\\"]
        = cover.data\\n+                else:\\n+                    song_meta[\\\"album_art\\\"]
        = None\\n+\\n+                continue\\n+\\n+            if path.suffix ==
        \\\".flac\\\":\\n+                song_meta[\\\"album_art\\\"] = audio_file.pictures[0].data\\n+
        \               continue\\n+\\n+            if path.suffix in [\\\".ogg\\\",
        \\\".opus\\\"]:\\n+                pictures = audio_file.get(\\\"metadata_block_picture\\\")\\n+
        \               if pictures and pictures[0]:\\n+                    song_meta[\\\"album_art\\\"]
        = pictures[0]\\n+                else:\\n+                    song_meta[\\\"album_art\\\"]
        = None\\n+\\n+                continue\\n+\\n+        # If the tag is empty,
        skip it\\n+        if val is None:\\n+            # If the tag is empty but
        it's key is in the\\n+            # song object, set it to None\\n+            empty_key
        = TAG_TO_SONG.get(key)\\n+            if empty_key:\\n+                song_meta[empty_key]
        = None\\n+\\n+            continue\\n+\\n+        # MP3 specific decoding\\n+
        \       if path.suffix == \\\".mp3\\\":\\n+            if key == \\\"woas\\\":\\n+
        \               song_meta[\\\"url\\\"] = val.url\\n+            elif key ==
        \\\"comment\\\":\\n+                song_meta[\\\"download_url\\\"] = val.text[0]\\n+
        \           elif key == \\\"year\\\":\\n+                song_meta[\\\"year\\\"]
        = int(str(val.text[0])[:4])\\n+            elif key == \\\"date\\\":\\n+                song_meta[\\\"date\\\"]
        = str(val.text[0])\\n+            elif key == \\\"tracknumber\\\":\\n+                count
        = val.text[0].split(id3_separator)\\n+                if len(count) == 2:\\n+
        \                   song_meta[\\\"track_number\\\"] = int(count[0])\\n+                    song_meta[\\\"tracks_count\\\"]
        = int(count[1])\\n+                else:\\n+                    song_meta[\\\"track_number\\\"]
        = val.text[0]\\n+            elif key == \\\"discnumber\\\":\\n+                count
        = val.text[0].split(id3_separator)\\n+                if len(count) == 2:\\n+
        \                   song_meta[\\\"disc_number\\\"] = int(count[0])\\n+                    song_meta[\\\"disc_count\\\"]
        = int(count[1])\\n+                else:\\n+                    song_meta[\\\"disc_number\\\"]
        = val.text[0]\\n+            elif key == \\\"artist\\\":\\n+                artists_val:
        str = (\\n+                    val.text[0] if isinstance(val.text, list) else
        val.text\\n+                )\\n+                song_meta[\\\"artists\\\"]
        = artists_val.split(id3_separator)\\n+            else:\\n+                meta_key
        = TAG_TO_SONG.get(key)\\n+                if meta_key:\\n+                    song_meta[meta_key]
        = (\\n+                        val.text[0]\\n+                        if isinstance(val.text,
        list) and len(val.text) == 1\\n+                        else val.text\\n+
        \                   )\\n+\\n+        # M4A specific decoding\\n+        elif
        path.suffix == \\\".m4a\\\":\\n+            if key == \\\"artist\\\":\\n+
        \               song_meta[\\\"artists\\\"] = val\\n+            elif key ==
        \\\"woas\\\":\\n+                song_meta[\\\"url\\\"] = val[0].decode(\\\"utf-8\\\")\\n+
        \           elif key == \\\"explicit\\\":\\n+                song_meta[\\\"explicit\\\"]
        = val == [4] if val else None\\n+            elif key == \\\"year\\\":\\n+
        \               song_meta[\\\"year\\\"] = int(str(val[0])[:4])\\n+            elif
        key == \\\"discnumber\\\":\\n+                song_meta[\\\"disc_number\\\"]
        = val[0][0]\\n+                song_meta[\\\"disc_count\\\"] = val[0][1]\\n+
        \           elif key == \\\"tracknumber\\\":\\n+                song_meta[\\\"track_number\\\"]
        = val[0][0]\\n+                song_meta[\\\"tracks_count\\\"] = val[0][1]\\n+
        \           else:\\n+                meta_key = TAG_TO_SONG.get(key)\\n+                if
        meta_key:\\n+                    song_meta[meta_key] = (\\n+                        val[0]
        if isinstance(val, list) and len(val) == 1 else val\\n+                    )\\n+\\n+
        \       # FLAC, OGG, OPUS specific decoding\\n+        else:\\n+            if
        key == \\\"artist\\\":\\n+                song_meta[\\\"artists\\\"] = val\\n+
        \           elif key == \\\"tracknumber\\\":\\n+                song_meta[\\\"track_number\\\"]
        = int(val[0])\\n+            elif key == \\\"discnumber\\\":\\n+                song_meta[\\\"disc_count\\\"]
        = int(val[0])\\n+                song_meta[\\\"disc_number\\\"] = int(val[0])\\n+
        \           else:\\n+                meta_key = TAG_TO_SONG.get(key)\\n+                if
        meta_key:\\n+                    song_meta[meta_key] = (\\n+                        val[0]
        if isinstance(val, list) and len(val) == 1 else val\\n+                    )\\n+\\n+
        \   # Make sure that artists is a list\\n+    if isinstance(song_meta[\\\"artists\\\"],
        str):\\n+        song_meta[\\\"artists\\\"] = [song_meta[\\\"artists\\\"]]\\n+
        \   elif song_meta[\\\"artists\\\"] is not None:\\n+        song_meta[\\\"artists\\\"]
        = list(song_meta[\\\"artists\\\"])\\n+    else:\\n+        song_meta[\\\"artists\\\"]
        = []\\n+\\n+    # Make sure that genres is a list\\n+    if isinstance(song_meta[\\\"genres\\\"],
        str):\\n+        song_meta[\\\"genres\\\"] = [song_meta[\\\"genres\\\"]]\\n+\\n+
        \   # Add main artist to the song meta object\\n+    if song_meta[\\\"artists\\\"]:\\n+
        \       song_meta[\\\"artist\\\"] = song_meta[\\\"artists\\\"][0]\\n+    else:\\n+
        \       song_meta[\\\"artist\\\"] = None\\n+\\n+    return song_meta\\n+\\n+\\n+def
        embed_wav_file(output_file: Path, song: Song):\\n+    \\\"\\\"\\\"\\n+    Embeds
        the song metadata into the wav file\\n+\\n+    ### Arguments\\n+    - output_file:
        The output file path\\n+    - song: The song object\\n+    - id3_separator:
        The separator used for the id3 tags\\n+    \\\"\\\"\\\"\\n+    audio = WAVE(output_file)\\n+
        \   if audio is None:\\n+        raise ValueError(\\\"Invalid audio file\\\")\\n+\\n+
        \   if audio.tags:\\n+        audio.tags.clear()\\n+\\n+    audio.add_tags()\\n+\\n+
        \   audio.tags.add(TIT2(encoding=3, text=song.name))  # type: ignore\\n+    audio.tags.add(TPE1(encoding=3,
        text=song.artists))  # type: ignore\\n+    audio.tags.add(TALB(encoding=3,
        text=song.album_name))  # type: ignore\\n+    audio.tags.add(TCOM(encoding=3,
        text=song.publisher))  # type: ignore\\n+    audio.tags.add(TCON(encoding=3,
        text=song.genres))  # type: ignore\\n+    audio.tags.add(TDRC(encoding=3,
        text=song.date))  # type: ignore\\n+    audio.tags.add(  # type: ignore\\n+
        \       TRCK(encoding=3, text=f\\\"{song.track_number}/{song.tracks_count}\\\")
        \ # type: ignore\\n+    )\\n+    audio.tags.add(TDRC(encoding=3, text=song.date))
        \ # type: ignore\\n+    audio.tags.add(WOAS(encoding=3, text=song.url))  #
        type: ignore\\n+    audio.tags.add(TSRC(encoding=3, text=song.isrc))  # type:
        ignore\\n+\\n+    if song.download_url:\\n+        audio.tags.add(COMM(encoding=3,
        text=song.download_url))  # type: ignore\\n+\\n+    if song.copyright_text:\\n+
        \       audio.tags.add(TCOP(encoding=3, text=song.copyright_text))  # type:
        ignore\\n+\\n+    if song.popularity:\\n+        audio.tags.add(  # type:
        ignore\\n+            COMM(\\n+                encoding=3,\\n+                lang=\\\"eng\\\",\\n+
        \               text=\\\"Spotify Popularity: \\\" + str(song.popularity),\\n+
        \           )\\n+        )\\n+\\n+    if song.cover_url:\\n+        try:\\n+
        \           cover_data = requests.get(song.cover_url, timeout=10).content\\n+
        \           audio.tags.add(  # type: ignore\\n+                APIC(\\n+                    encoding=3,
        mime=\\\"image/jpeg\\\", type=3, desc=\\\"Cover\\\", data=cover_data\\n+                )\\n+
        \           )\\n+        except Exception:\\n+            pass\\n+\\n+    if
        song.lyrics:\\n+        # Check if the lyrics are in lrc format\\n+        #
        using regex on the first 5 lines\\n+        lrc_lines = song.lyrics.splitlines()[:5]\\n+
        \       lrc_lines = [line for line in lrc_lines if line and LRC_REGEX.match(line)]\\n+\\n+
        \       if len(lrc_lines) == 0:\\n+            audio.tags.add(USLT(encoding=Encoding.UTF8,
        text=song.lyrics))  # type: ignore\\n+        else:\\n+            lrc_data
        = []\\n+            clean_lyrics = remomve_lrc(song.lyrics)\\n+            for
        line in song.lyrics.splitlines():\\n+                time_tag = line.split(\\\"]\\\",
        1)[0] + \\\"]\\\"\\n+                text = line.replace(time_tag, \\\"\\\")\\n+\\n+
        \               time_tag = time_tag.replace(\\\"[\\\", \\\"\\\")\\n+                time_tag
        = time_tag.replace(\\\"]\\\", \\\"\\\")\\n+                time_tag = time_tag.replace(\\\".\\\",
        \\\":\\\")\\n+                time_tag_vals = time_tag.split(\\\":\\\")\\n+
        \               if len(time_tag_vals) != 3 or any(\\n+                    not
        isinstance(tag, int) for tag in time_tag_vals\\n+                ):\\n+                    continue\\n+\\n+
        \               minute, sec, millisecond = time_tag_vals\\n+                time
        = to_ms(min=minute, sec=sec, ms=millisecond)\\n+                lrc_data.append((text,
        time))\\n+\\n+            audio.tags.add(USLT(encoding=3, text=clean_lyrics))
        \ # type: ignore\\n+            audio.tags.add(SYLT(encoding=3, text=lrc_data,
        format=2, type=1))  # type: ignore\\n+\\n+    audio.save()\"},{\"sha\":\"214877cca81b9916e97a4df18a95a0a19d2c824f\",\"filename\":\"spotdl/utils/search.py\",\"status\":\"added\",\"additions\":732,\"deletions\":0,\"changes\":732,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fsearch.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fsearch.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fsearch.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,732 @@\\n+\\\"\\\"\\\"\\n+Module for creating Song objects by interacting
        with Spotify API\\n+or by parsing a query.\\n+\\n+To use this module you must
        first initialize the SpotifyClient.\\n+\\\"\\\"\\\"\\n+\\n+import concurrent.futures\\n+import
        json\\n+import logging\\n+import re\\n+from pathlib import Path\\n+from typing
        import Dict, List, Optional\\n+\\n+import requests\\n+from ytmusicapi import
        YTMusic\\n+\\n+from spotdl.types.album import Album\\n+from spotdl.types.artist
        import Artist\\n+from spotdl.types.playlist import Playlist\\n+from spotdl.types.saved
        import Saved\\n+from spotdl.types.song import Song, SongList\\n+from spotdl.utils.metadata
        import get_file_metadata\\n+from spotdl.utils.spotify import SpotifyClient,
        SpotifyError\\n+\\n+__all__ = [\\n+    \\\"QueryError\\\",\\n+    \\\"get_search_results\\\",\\n+
        \   \\\"parse_query\\\",\\n+    \\\"get_simple_songs\\\",\\n+    \\\"reinit_song\\\",\\n+
        \   \\\"get_song_from_file_metadata\\\",\\n+    \\\"gather_known_songs\\\",\\n+
        \   \\\"create_ytm_album\\\",\\n+    \\\"create_ytm_playlist\\\",\\n+    \\\"get_all_user_playlists\\\",\\n+
        \   \\\"get_user_saved_albums\\\",\\n+]\\n+\\n+logger = logging.getLogger(__name__)\\n+client
        = None  # pylint: disable=invalid-name\\n+\\n+\\n+def get_ytm_client() ->
        YTMusic:\\n+    \\\"\\\"\\\"\\n+    Lazily initialize the YTMusic client.\\n+\\n+
        \   ### Returns\\n+    - the YTMusic client\\n+    \\\"\\\"\\\"\\n+\\n+    global
        client  # pylint: disable=global-statement\\n+    if client is None:\\n+        client
        = YTMusic()\\n+\\n+    return client\\n+\\n+\\n+class QueryError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to query.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+def get_search_results(search_term: str) -> List[Song]:\\n+
        \   \\\"\\\"\\\"\\n+    Creates a list of Song objects from a search term.\\n+\\n+
        \   ### Arguments\\n+    - search_term: the search term to use\\n+\\n+    ###
        Returns\\n+    - a list of Song objects\\n+    \\\"\\\"\\\"\\n+\\n+    return
        Song.list_from_search_term(search_term)\\n+\\n+\\n+def parse_query(\\n+    query:
        List[str],\\n+    threads: int = 1,\\n+    use_ytm_data: bool = False,\\n+
        \   playlist_numbering: bool = False,\\n+    album_type=None,\\n+) -> List[Song]:\\n+
        \   \\\"\\\"\\\"\\n+    Parse query and return list containing song object\\n+\\n+
        \   ### Arguments\\n+    - query: List of strings containing query\\n+    -
        threads: Number of threads to use\\n+\\n+    ### Returns\\n+    - List of
        song objects\\n+    \\\"\\\"\\\"\\n+\\n+    songs: List[Song] = get_simple_songs(\\n+
        \       query,\\n+        use_ytm_data=use_ytm_data,\\n+        playlist_numbering=playlist_numbering,\\n+
        \       album_type=album_type,\\n+    )\\n+\\n+    results = []\\n+    with
        concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:\\n+
        \       future_to_song = {executor.submit(reinit_song, song): song for song
        in songs}\\n+        for future in concurrent.futures.as_completed(future_to_song):\\n+
        \           song = future_to_song[future]\\n+            try:\\n+                results.append(future.result())\\n+
        \           except Exception as exc:\\n+                logger.error(\\\"%s
        generated an exception: %s\\\", song.display_name, exc)\\n+\\n+    return
        results\\n+\\n+\\n+def get_simple_songs(\\n+    query: List[str],\\n+    use_ytm_data:
        bool = False,\\n+    playlist_numbering: bool = False,\\n+    albums_to_ignore=None,\\n+
        \   album_type=None,\\n+) -> List[Song]:\\n+    \\\"\\\"\\\"\\n+    Parse
        query and return list containing simple song objects\\n+\\n+    ### Arguments\\n+
        \   - query: List of strings containing query\\n+\\n+    ### Returns\\n+    -
        List of simple song objects\\n+    \\\"\\\"\\\"\\n+\\n+    songs: List[Song]
        = []\\n+    lists: List[SongList] = []\\n+    for request in query:\\n+        logger.info(\\\"Processing
        query: %s\\\", request)\\n+\\n+        # Remove /intl-xxx/ from Spotify URLs
        with regex\\n+        request = re.sub(r\\\"\\\\/intl-\\\\w+\\\\/\\\", \\\"/\\\",
        request)\\n+\\n+        if (\\n+            (  # pylint: disable=too-many-boolean-expressions\\n+
        \               \\\"watch?v=\\\" in request\\n+                or \\\"youtu.be/\\\"
        in request\\n+                or \\\"soundcloud.com/\\\" in request\\n+                or
        \\\"bandcamp.com/\\\" in request\\n+            )\\n+            and \\\"open.spotify.com\\\"
        in request\\n+            and \\\"track\\\" in request\\n+            and
        \\\"|\\\" in request\\n+        ):\\n+            split_urls = request.split(\\\"|\\\")\\n+
        \           if (\\n+                len(split_urls) <= 1\\n+                or
        not (\\n+                    \\\"watch?v=\\\" in split_urls[0]\\n+                    or
        \\\"youtu.be\\\" in split_urls[0]\\n+                    or \\\"soundcloud.com/\\\"
        in split_urls[0]\\n+                    or \\\"bandcamp.com/\\\" in split_urls[0]\\n+
        \               )\\n+                or \\\"spotify\\\" not in split_urls[1]\\n+
        \           ):\\n+                raise QueryError(\\n+                    'Incorrect
        format used, please use \\\"YouTubeURL|SpotifyURL\\\"'\\n+                )\\n+\\n+
        \           songs.append(\\n+                Song.from_missing_data(url=split_urls[1],
        download_url=split_urls[0])\\n+            )\\n+        elif \\\"music.youtube.com/watch?v\\\"
        in request:\\n+            track_data = get_ytm_client().get_song(request.split(\\\"?v=\\\",
        1)[1])\\n+\\n+            yt_song = Song.from_search_term(\\n+                f\\\"{track_data['videoDetails']['author']}
        - {track_data['videoDetails']['title']}\\\"\\n+            )\\n+\\n+            if
        use_ytm_data:\\n+                yt_song.name = track_data[\\\"title\\\"]\\n+
        \               yt_song.artist = track_data[\\\"author\\\"]\\n+                yt_song.artists
        = [track_data[\\\"author\\\"]]\\n+                yt_song.duration = track_data[\\\"lengthSeconds\\\"]\\n+\\n+
        \           yt_song.download_url = request\\n+            songs.append(yt_song)\\n+
        \       elif (\\n+            \\\"youtube.com/playlist?list=\\\" in request\\n+
        \           or \\\"youtube.com/browse/VLPL\\\" in request\\n+        ):\\n+
        \           request = request.replace(\\n+                \\\"https://www.youtube.com/\\\",
        \\\"https://music.youtube.com/\\\"\\n+            )\\n+            request
        = request.replace(\\n+                \\\"https://youtube.com/\\\", \\\"https://music.youtube.com/\\\"\\n+
        \           )\\n+\\n+            split_urls = request.split(\\\"|\\\")\\n+
        \           if len(split_urls) == 1:\\n+                if \\\"?list=OLAK5uy_\\\"
        in request:\\n+                    lists.append(create_ytm_album(request,
        fetch_songs=False))\\n+                elif \\\"?list=PL\\\" in request or
        \\\"browse/VLPL\\\" in request:\\n+                    lists.append(create_ytm_playlist(request,
        fetch_songs=False))\\n+            else:\\n+                if (\\\"spotify\\\"
        not in split_urls[1]) or not any(\\n+                    x in split_urls[0]\\n+
        \                   for x in [\\\"?list=PL\\\", \\\"?list=OLAK5uy_\\\", \\\"browse/VLPL\\\"]\\n+
        \               ):\\n+                    raise QueryError(\\n+                        'Incorrect
        format used, please use \\\"YouTubeMusicURL|SpotifyURL\\\". '\\n+                        \\\"Currently
        only supports YouTube Music playlists and albums.\\\"\\n+                    )\\n+\\n+
        \               if (\\\"open.spotify.com\\\" in request and \\\"album\\\"
        in request) and (\\n+                    \\\"?list=OLAK5uy_\\\" in request\\n+
        \               ):\\n+                    ytm_list: SongList = create_ytm_album(\\n+
        \                       split_urls[0], fetch_songs=False\\n+                    )\\n+
        \                   spot_list = Album.from_url(split_urls[1], fetch_songs=False)\\n+
        \               elif (\\\"open.spotify.com\\\" in request and \\\"playlist\\\"
        in request) and (\\n+                    \\\"?list=PL\\\" in request or \\\"browse/VLPL\\\"
        in request\\n+                ):\\n+                    ytm_list = create_ytm_playlist(split_urls[0],
        fetch_songs=False)\\n+                    spot_list = Playlist.from_url(split_urls[1],
        fetch_songs=False)\\n+                else:\\n+                    raise QueryError(\\n+
        \                       f\\\"URLs are not of the same type, {split_urls[0]}
        is not \\\"\\n+                        f\\\"the same type as {split_urls[1]}.\\\"\\n+
        \                   )\\n+\\n+                if ytm_list.length != spot_list.length:\\n+
        \                   raise QueryError(\\n+                        f\\\"The
        YouTube Music ({ytm_list.length}) \\\"\\n+                        f\\\"and
        Spotify ({spot_list.length}) lists have different lengths. \\\"\\n+                    )\\n+\\n+
        \               if use_ytm_data:\\n+                    for index, song in
        enumerate(ytm_list.songs):\\n+                        song.url = spot_list.songs[index].url\\n+\\n+
        \                   lists.append(ytm_list)\\n+                else:\\n+                    for
        index, song in enumerate(spot_list.songs):\\n+                        song.download_url
        = ytm_list.songs[index].download_url\\n+\\n+                    lists.append(spot_list)\\n+
        \       elif \\\"open.spotify.com\\\" in request and \\\"track\\\" in request:\\n+
        \           songs.append(Song.from_url(url=request))\\n+        elif \\\"https://spotify.link/\\\"
        in request:\\n+            resp = requests.head(request, allow_redirects=True,
        timeout=10)\\n+            full_url = resp.url\\n+            full_lists =
        get_simple_songs(\\n+                [full_url],\\n+                use_ytm_data=use_ytm_data,\\n+
        \               playlist_numbering=playlist_numbering,\\n+                album_type=album_type,\\n+
        \           )\\n+            songs.extend(full_lists)\\n+        elif \\\"open.spotify.com\\\"
        in request and \\\"playlist\\\" in request:\\n+            lists.append(Playlist.from_url(request,
        fetch_songs=False))\\n+        elif \\\"open.spotify.com\\\" in request and
        \\\"album\\\" in request:\\n+            lists.append(Album.from_url(request,
        fetch_songs=False))\\n+        elif \\\"open.spotify.com\\\" in request and
        \\\"artist\\\" in request:\\n+            lists.append(Artist.from_url(request,
        fetch_songs=False))\\n+        elif \\\"open.spotify.com\\\" in request and
        \\\"user\\\" in request:\\n+            lists.extend(get_all_user_playlists(request))\\n+
        \       elif \\\"album:\\\" in request:\\n+            lists.append(Album.from_search_term(request,
        fetch_songs=False))\\n+        elif \\\"playlist:\\\" in request:\\n+            lists.append(Playlist.from_search_term(request,
        fetch_songs=False))\\n+        elif \\\"artist:\\\" in request:\\n+            lists.append(Artist.from_search_term(request,
        fetch_songs=False))\\n+        elif request == \\\"saved\\\":\\n+            lists.append(Saved.from_url(request,
        fetch_songs=False))\\n+        elif request == \\\"all-user-playlists\\\":\\n+
        \           lists.extend(get_all_user_playlists())\\n+        elif request
        == \\\"all-user-followed-artists\\\":\\n+            lists.extend(get_user_followed_artists())\\n+
        \       elif request == \\\"all-user-saved-albums\\\":\\n+            lists.extend(get_user_saved_albums())\\n+
        \       elif request == \\\"all-saved-playlists\\\":\\n+            lists.extend(get_all_saved_playlists())\\n+
        \       elif request.endswith(\\\".spotdl\\\"):\\n+            with open(request,
        \\\"r\\\", encoding=\\\"utf-8\\\") as save_file:\\n+                for track
        in json.load(save_file):\\n+                    # Append to songs\\n+                    songs.append(Song.from_dict(track))\\n+
        \       else:\\n+            songs.append(Song.from_search_term(request))\\n+\\n+
        \   for song_list in lists:\\n+        logger.info(\\n+            \\\"Found
        %s songs in %s (%s)\\\",\\n+            len(song_list.urls),\\n+            song_list.name,\\n+
        \           song_list.__class__.__name__,\\n+        )\\n+\\n+        for
        index, song in enumerate(song_list.songs):\\n+            song_data = song.json\\n+
        \           song_data[\\\"list_name\\\"] = song_list.name\\n+            song_data[\\\"list_url\\\"]
        = song_list.url\\n+            song_data[\\\"list_position\\\"] = index +
        1\\n+            song_data[\\\"list_length\\\"] = song_list.length\\n+\\n+
        \           if playlist_numbering:\\n+                song_data[\\\"track_number\\\"]
        = song_data[\\\"list_position\\\"]\\n+                song_data[\\\"tracks_count\\\"]
        = song_data[\\\"list_length\\\"]\\n+                song_data[\\\"album_name\\\"]
        = song_data[\\\"list_name\\\"]\\n+                song_data[\\\"disc_number\\\"]
        = 1\\n+                song_data[\\\"disc_count\\\"] = 1\\n+                if
        isinstance(song_list, Playlist):\\n+                    song_data[\\\"album_artist\\\"]
        = song_list.author_name\\n+                    song_data[\\\"cover_url\\\"]
        = song_list.cover_url\\n+\\n+            songs.append(Song.from_dict(song_data))\\n+\\n+
        \   # removing songs for --ignore-albums\\n+    original_length = len(songs)\\n+
        \   if albums_to_ignore:\\n+        songs = [\\n+            song\\n+            for
        song in songs\\n+            if all(\\n+                keyword not in song.album_name.lower()
        for keyword in albums_to_ignore\\n+            )\\n+        ]\\n+        logger.info(\\\"Skipped
        %s songs (Ignored albums)\\\", (original_length - len(songs)))\\n+\\n+    if
        album_type:\\n+        songs = [song for song in songs if song.album_type
        == album_type]\\n+\\n+        logger.info(\\n+            \\\"Skipped %s songs
        for Album Type %s\\\",\\n+            (original_length - len(songs)),\\n+
        \           album_type,\\n+        )\\n+\\n+    logger.debug(\\\"Found %s
        songs in %s lists\\\", len(songs), len(lists))\\n+\\n+    return songs\\n+\\n+\\n+def
        songs_from_albums(albums: List[str]):\\n+    \\\"\\\"\\\"\\n+    Get all songs
        from albums ids/urls/etc.\\n+\\n+    ### Arguments\\n+    - albums: List of
        albums ids\\n+\\n+    ### Returns\\n+    - List of songs\\n+    \\\"\\\"\\\"\\n+\\n+
        \   songs: List[Song] = []\\n+    for album_id in albums:\\n+        album
        = Album.from_url(album_id, fetch_songs=False)\\n+\\n+        songs.extend([Song.from_missing_data(**song.json)
        for song in album.songs])\\n+\\n+    return songs\\n+\\n+\\n+def get_all_user_playlists(user_url:
        str = \\\"\\\") -> List[Playlist]:\\n+    \\\"\\\"\\\"\\n+    Get all user
        playlists.\\n+\\n+    ### Args (optional)\\n+    - user_url: Spotify user
        profile url.\\n+        If a url is mentioned, get all public playlists of
        that specific user.\\n+\\n+    ### Returns\\n+    - List of all user playlists\\n+
        \   \\\"\\\"\\\"\\n+\\n+    spotify_client = SpotifyClient()\\n+    if spotify_client.user_auth
        is False:  # type: ignore\\n+        raise SpotifyError(\\\"You must be logged
        in to use this function\\\")\\n+\\n+    if user_url and not user_url.startswith(\\\"https://open.spotify.com/user/\\\"):\\n+
        \       raise ValueError(f\\\"Invalid user profile url: {user_url}\\\")\\n+\\n+
        \   user_id = user_url.split(\\\"https://open.spotify.com/user/\\\")[-1].replace(\\\"/\\\",
        \\\"\\\")\\n+\\n+    if user_id:\\n+        user_playlists_response = spotify_client.user_playlists(user_id)\\n+
        \   else:\\n+        user_playlists_response = spotify_client.current_user_playlists()\\n+
        \       user_resp = spotify_client.current_user()\\n+        if user_resp
        is None:\\n+            raise SpotifyError(\\\"Couldn't get user info\\\")\\n+\\n+
        \       user_id = user_resp[\\\"id\\\"]\\n+\\n+    if user_playlists_response
        is None:\\n+        raise SpotifyError(\\\"Couldn't get user playlists\\\")\\n+\\n+
        \   user_playlists = user_playlists_response[\\\"items\\\"]\\n+\\n+    # Fetch
        all saved tracks\\n+    while user_playlists_response and user_playlists_response[\\\"next\\\"]:\\n+
        \       response = spotify_client.next(user_playlists_response)\\n+        if
        response is None:\\n+            break\\n+\\n+        user_playlists_response
        = response\\n+        user_playlists.extend(user_playlists_response[\\\"items\\\"])\\n+\\n+
        \   return [\\n+        Playlist.from_url(playlist[\\\"external_urls\\\"][\\\"spotify\\\"],
        fetch_songs=False)\\n+        for playlist in user_playlists\\n+        if
        playlist[\\\"owner\\\"][\\\"id\\\"] == user_id\\n+    ]\\n+\\n+\\n+def get_user_saved_albums()
        -> List[Album]:\\n+    \\\"\\\"\\\"\\n+    Get all user saved albums\\n+\\n+
        \   ### Returns\\n+    - List of all user saved albums\\n+    \\\"\\\"\\\"\\n+\\n+
        \   spotify_client = SpotifyClient()\\n+    if spotify_client.user_auth is
        False:  # type: ignore\\n+        raise SpotifyError(\\\"You must be logged
        in to use this function\\\")\\n+\\n+    user_saved_albums_response = spotify_client.current_user_saved_albums()\\n+
        \   if user_saved_albums_response is None:\\n+        raise SpotifyError(\\\"Couldn't
        get user saved albums\\\")\\n+\\n+    user_saved_albums = user_saved_albums_response[\\\"items\\\"]\\n+\\n+
        \   # Fetch all saved tracks\\n+    while user_saved_albums_response and user_saved_albums_response[\\\"next\\\"]:\\n+
        \       response = spotify_client.next(user_saved_albums_response)\\n+        if
        response is None:\\n+            break\\n+\\n+        user_saved_albums_response
        = response\\n+        user_saved_albums.extend(user_saved_albums_response[\\\"items\\\"])\\n+\\n+
        \   return [\\n+        Album.from_url(item[\\\"album\\\"][\\\"external_urls\\\"][\\\"spotify\\\"],
        fetch_songs=False)\\n+        for item in user_saved_albums\\n+    ]\\n+\\n+\\n+def
        get_user_followed_artists() -> List[Artist]:\\n+    \\\"\\\"\\\"\\n+    Get
        all user playlists\\n+\\n+    ### Returns\\n+    - List of all user playlists\\n+
        \   \\\"\\\"\\\"\\n+\\n+    spotify_client = SpotifyClient()\\n+    if spotify_client.user_auth
        is False:  # type: ignore\\n+        raise SpotifyError(\\\"You must be logged
        in to use this function\\\")\\n+\\n+    user_followed_response = spotify_client.current_user_followed_artists()\\n+
        \   if user_followed_response is None:\\n+        raise SpotifyError(\\\"Couldn't
        get user followed artists\\\")\\n+\\n+    user_followed_response = user_followed_response[\\\"artists\\\"]\\n+
        \   user_followed = user_followed_response[\\\"items\\\"]\\n+\\n+    # Fetch
        all artists\\n+    while user_followed_response and user_followed_response[\\\"next\\\"]:\\n+
        \       response = spotify_client.next(user_followed_response)\\n+        if
        response is None:\\n+            break\\n+\\n+        user_followed_response
        = response[\\\"artists\\\"]\\n+        user_followed.extend(user_followed_response[\\\"items\\\"])\\n+\\n+
        \   return [\\n+        Artist.from_url(followed_artist[\\\"external_urls\\\"][\\\"spotify\\\"],
        fetch_songs=False)\\n+        for followed_artist in user_followed\\n+    ]\\n+\\n+\\n+def
        get_all_saved_playlists() -> List[Playlist]:\\n+    \\\"\\\"\\\"\\n+    Get
        all user playlists.\\n+\\n+    ### Args (optional)\\n+    - user_url: Spotify
        user profile url.\\n+        If a url is mentioned, get all public playlists
        of that specific user.\\n+\\n+    ### Returns\\n+    - List of all user playlists\\n+
        \   \\\"\\\"\\\"\\n+\\n+    spotify_client = SpotifyClient()\\n+    if spotify_client.user_auth
        is False:  # type: ignore\\n+        raise SpotifyError(\\\"You must be logged
        in to use this function\\\")\\n+\\n+    user_playlists_response = spotify_client.current_user_playlists()\\n+\\n+
        \   print(user_playlists_response)\\n+\\n+    if user_playlists_response is
        None:\\n+        raise SpotifyError(\\\"Couldn't get user playlists\\\")\\n+\\n+
        \   user_playlists = user_playlists_response[\\\"items\\\"]\\n+    user_id
        = user_playlists_response[\\\"href\\\"].split(\\\"users/\\\")[-1].split(\\\"/\\\")[0]\\n+\\n+
        \   # Fetch all saved tracks\\n+    while user_playlists_response and user_playlists_response[\\\"next\\\"]:\\n+
        \       response = spotify_client.next(user_playlists_response)\\n+        if
        response is None:\\n+            break\\n+\\n+        user_playlists_response
        = response\\n+        user_playlists.extend(user_playlists_response[\\\"items\\\"])\\n+\\n+
        \   return [\\n+        Playlist.from_url(playlist[\\\"external_urls\\\"][\\\"spotify\\\"],
        fetch_songs=False)\\n+        for playlist in user_playlists\\n+        if
        playlist[\\\"owner\\\"][\\\"id\\\"] != user_id\\n+    ]\\n+\\n+\\n+def reinit_song(song:
        Song) -> Song:\\n+    \\\"\\\"\\\"\\n+    Update song object with new data\\n+
        \   from Spotify\\n+\\n+    ### Arguments\\n+    - song: Song object\\n+\\n+
        \   ### Returns\\n+    - Updated song object\\n+    \\\"\\\"\\\"\\n+\\n+    data
        = song.json\\n+    if data.get(\\\"url\\\"):\\n+        new_data = Song.from_url(data[\\\"url\\\"]).json\\n+
        \   elif data.get(\\\"song_id\\\"):\\n+        new_data = Song.from_url(\\n+
        \           \\\"https://open.spotify.com/track/\\\" + data[\\\"song_id\\\"]\\n+
        \       ).json\\n+    elif data.get(\\\"name\\\") and data.get(\\\"artist\\\"):\\n+
        \       new_data = Song.from_search_term(f\\\"{data['artist']} - {data['name']}\\\").json\\n+
        \   else:\\n+        raise QueryError(\\\"Song object is missing required
        data to be reinitialized\\\")\\n+\\n+    for key in Song.__dataclass_fields__:
        \ # type: ignore # pylint: disable=E1101\\n+        val = data.get(key)\\n+
        \       new_val = new_data.get(key)\\n+        if new_val is not None and
        val is None:\\n+            data[key] = new_val\\n+        elif new_val is
        not None and val is not None:\\n+            data[key] = val\\n+\\n+    #
        return reinitialized song object\\n+    return Song(**data)\\n+\\n+\\n+def
        get_song_from_file_metadata(file: Path, id3_separator: str = \\\"/\\\") ->
        Optional[Song]:\\n+    \\\"\\\"\\\"\\n+    Get song based on the file metadata
        or file name\\n+\\n+    ### Arguments\\n+    - file: Path to file\\n+\\n+
        \   ### Returns\\n+    - Song object\\n+    \\\"\\\"\\\"\\n+\\n+    file_metadata
        = get_file_metadata(file, id3_separator)\\n+\\n+    if file_metadata is None:\\n+
        \       return None\\n+\\n+    return Song.from_missing_data(**file_metadata)\\n+\\n+\\n+def
        gather_known_songs(output: str, output_format: str) -> Dict[str, List[Path]]:\\n+
        \   \\\"\\\"\\\"\\n+    Gather all known songs from the output directory\\n+\\n+
        \   ### Arguments\\n+    - output: Output path template\\n+    - output_format:
        Output format\\n+\\n+    ### Returns\\n+    - Dictionary containing all known
        songs and their paths\\n+    \\\"\\\"\\\"\\n+\\n+    # Get the base directory
        from the path template\\n+    # Path(\\\"/Music/test/{artist}/{artists} -
        {title}.{output-ext}\\\") -> \\\"/Music/test\\\"\\n+    base_dir = output.split(\\\"{\\\",
        1)[0]\\n+    paths = Path(base_dir).glob(f\\\"**/*.{output_format}\\\")\\n+\\n+
        \   known_songs: Dict[str, List[Path]] = {}\\n+    for path in paths:\\n+
        \       # Try to get the song from the metadata\\n+        song = get_song_from_file_metadata(path)\\n+\\n+
        \       # If the songs doesn't have metadata, try to get it from the filename\\n+
        \       if song is None or song.url is None:\\n+            search_results
        = get_search_results(path.stem)\\n+            if len(search_results) == 0:\\n+
        \               continue\\n+\\n+            song = search_results[0]\\n+\\n+
        \       known_paths = known_songs.get(song.url)\\n+        if known_paths
        is None:\\n+            known_songs[song.url] = [path]\\n+        else:\\n+
        \           known_songs[song.url].append(path)\\n+\\n+    return known_songs\\n+\\n+\\n+def
        create_ytm_album(url: str, fetch_songs: bool = True) -> Album:\\n+    \\\"\\\"\\\"\\n+
        \   Creates a list of Song objects from an album query.\\n+\\n+    ### Arguments\\n+
        \   - album_query: the url of the album\\n+\\n+    ### Returns\\n+    - a
        list of Song objects\\n+    \\\"\\\"\\\"\\n+\\n+    if \\\"?list=\\\" not
        in url or not url.startswith(\\\"https://music.youtube.com/\\\"):\\n+        raise
        ValueError(f\\\"Invalid album url: {url}\\\")\\n+\\n+    browse_id = get_ytm_client().get_album_browse_id(\\n+
        \       url.split(\\\"?list=\\\")[1].split(\\\"&\\\")[0]\\n+    )\\n+    if
        browse_id is None:\\n+        raise ValueError(f\\\"Invalid album url: {url}\\\")\\n+\\n+
        \   album = get_ytm_client().get_album(browse_id)\\n+\\n+    if album is None:\\n+
        \       raise ValueError(f\\\"Couldn't fetch album: {url}\\\")\\n+\\n+    metadata
        = {\\n+        \\\"artist\\\": album[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \       \\\"name\\\": album[\\\"title\\\"],\\n+        \\\"url\\\": url,\\n+
        \   }\\n+\\n+    songs = []\\n+    for track in album[\\\"tracks\\\"]:\\n+
        \       artists = [artist[\\\"name\\\"] for artist in track[\\\"artists\\\"]]\\n+\\n+
        \       song = Song.from_missing_data(\\n+            name=track[\\\"title\\\"],\\n+
        \           artists=artists,\\n+            artist=artists[0],\\n+            album_name=metadata[\\\"name\\\"],\\n+
        \           album_artist=metadata[\\\"artist\\\"],\\n+            duration=track[\\\"duration_seconds\\\"],\\n+
        \           download_url=f\\\"https://music.youtube.com/watch?v={track['videoId']}\\\",\\n+
        \       )\\n+\\n+        if fetch_songs:\\n+            song = Song.from_search_term(f\\\"{song.artist}
        - {song.name}\\\")\\n+\\n+        songs.append(song)\\n+\\n+    return Album(**metadata,
        songs=songs, urls=[song.url for song in songs])\\n+\\n+\\n+def create_ytm_playlist(url:
        str, fetch_songs: bool = True) -> Playlist:\\n+    \\\"\\\"\\\"\\n+    Returns
        a playlist object from a youtube playlist url\\n+\\n+    ### Arguments\\n+
        \   - url: the url of the playlist\\n+\\n+    ### Returns\\n+    - a Playlist
        object\\n+    \\\"\\\"\\\"\\n+\\n+    if not (\\\"?list=\\\" in url or \\\"/browse/VLPL\\\"
        in url) or not url.startswith(\\n+        \\\"https://music.youtube.com/\\\"\\n+
        \   ):\\n+        raise ValueError(f\\\"Invalid playlist url: {url}\\\")\\n+\\n+
        \   if \\\"/browse/VLPL\\\" in url:\\n+        playlist_id = url.split(\\\"/browse/\\\")[1]\\n+
        \   else:\\n+        playlist_id = url.split(\\\"?list=\\\")[1]\\n+    playlist
        = get_ytm_client().get_playlist(playlist_id, None)  # type: ignore\\n+\\n+
        \   if playlist is None:\\n+        raise ValueError(f\\\"Couldn't fetch playlist:
        {url}\\\")\\n+\\n+    metadata = {\\n+        \\\"description\\\": (\\n+            playlist[\\\"description\\\"]
        if playlist[\\\"description\\\"] is not None else \\\"\\\"\\n+        ),\\n+
        \       \\\"author_url\\\": f\\\"https://music.youtube.com/channel/{playlist['author']['id']}\\\",\\n+
        \       \\\"author_name\\\": playlist[\\\"author\\\"][\\\"name\\\"],\\n+        \\\"cover_url\\\":
        playlist[\\\"thumbnails\\\"][0][\\\"url\\\"],\\n+        \\\"name\\\": playlist[\\\"title\\\"],\\n+
        \       \\\"url\\\": url,\\n+    }\\n+\\n+    songs = []\\n+    for track
        in playlist[\\\"tracks\\\"]:\\n+        if track[\\\"videoId\\\"] is None
        or track[\\\"isAvailable\\\"] is False:\\n+            continue\\n+\\n+        song
        = Song.from_missing_data(\\n+            name=track[\\\"title\\\"],\\n+            artists=[artist[\\\"name\\\"]
        for artist in track[\\\"artists\\\"]],\\n+            artist=track[\\\"artists\\\"][0][\\\"name\\\"],\\n+
        \           album_name=(\\n+                track.get(\\\"album\\\", {}).get(\\\"name\\\")\\n+
        \               if track.get(\\\"album\\\") is not None\\n+                else
        None\\n+            ),\\n+            duration=track.get(\\\"duration_seconds\\\"),\\n+
        \           explicit=track.get(\\\"isExplicit\\\"),\\n+            download_url=f\\\"https://music.youtube.com/watch?v={track['videoId']}\\\",\\n+
        \       )\\n+\\n+        if fetch_songs:\\n+            song = reinit_song(song)\\n+\\n+
        \       songs.append(song)\\n+\\n+    return Playlist(**metadata, songs=songs,
        urls=[song.url for song in songs])\"},{\"sha\":\"f69c941f1873b94356e3da146f45c8c99f87e54a\",\"filename\":\"spotdl/utils/song_name_utils.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":11,\"changes\":11,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Futils%2Fsong_name_utils.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/spotdl%2Futils%2Fsong_name_utils.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fsong_name_utils.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\",\"patch\":\"@@
        -1,11 +0,0 @@\\n-def format_name(input_str: str) -> str:\\n-    output = input_str\\n-\\n-
        \   # ! this is windows specific (disallowed chars)\\n-    output = \\\"\\\".join(char
        for char in output if char not in \\\"/?\\\\\\\\*|<>#\\\")\\n-\\n-    # !
        double quotes (\\\") and semi-colons (:) are also disallowed characters but
        we would\\n-    # ! like to retain their equivalents, so they aren't removed
        in the prior loop\\n-    output = output.replace('\\\"', \\\"'\\\").replace(\\\":\\\",
        \\\" - \\\")\\n-\\n-    return output\"},{\"sha\":\"d7669a213d81e09aa854cebd94da381961718cd2\",\"filename\":\"spotdl/utils/spotify.py\",\"status\":\"added\",\"additions\":227,\"deletions\":0,\"changes\":227,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fspotify.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fspotify.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fspotify.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,227 @@\\n+\\\"\\\"\\\"\\n+Module for interacting with Spotify API.\\n+To
        use this module, you must have a Spotify API key and Spotify API secret.\\n+\\n+```python\\n+import
        spotdl.utils.spotify\\n+spotify.Spotify.init(client_id, client_secret)\\n+```\\n+\\\"\\\"\\\"\\n+\\n+import
        json\\n+import logging\\n+from typing import Dict, Optional\\n+\\n+import
        requests\\n+from spotipy import Spotify\\n+from spotipy.cache_handler import
        CacheFileHandler, MemoryCacheHandler\\n+from spotipy.oauth2 import SpotifyClientCredentials,
        SpotifyOAuth\\n+\\n+from spotdl.utils.config import get_cache_path, get_spotify_cache_path\\n+\\n+__all__
        = [\\n+    \\\"SpotifyError\\\",\\n+    \\\"SpotifyClient\\\",\\n+    \\\"save_spotify_cache\\\",\\n+]\\n+\\n+logger
        = logging.getLogger(__name__)\\n+\\n+\\n+class SpotifyError(Exception):\\n+
        \   \\\"\\\"\\\"\\n+    Base class for all exceptions related to SpotifyClient.\\n+
        \   \\\"\\\"\\\"\\n+\\n+\\n+class Singleton(type):\\n+    \\\"\\\"\\\"\\n+
        \   Singleton metaclass for SpotifyClient. Ensures that SpotifyClient is not\\n+
        \   instantiated without prior initialization. Every other instantiation of\\n+
        \   SpotifyClient will return the same instance.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   _instance = None\\n+\\n+    def __call__(self):  # pylint: disable=bad-mcs-method-argument\\n+
        \       \\\"\\\"\\\"\\n+        Call method for Singleton metaclass.\\n+\\n+
        \       ### Returns\\n+        - The instance of the SpotifyClient.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       if self._instance is None:\\n+            raise SpotifyError(\\n+
        \               \\\"Spotify client not created. Call SpotifyClient.init\\\"\\n+
        \               \\\"(client_id, client_secret, user_auth, cache_path, no_cache,
        open_browser) first.\\\"\\n+            )\\n+        return self._instance\\n+\\n+
        \   def init(  # pylint: disable=bad-mcs-method-argument\\n+        self,\\n+
        \       client_id: str,\\n+        client_secret: str,\\n+        user_auth:
        bool = False,\\n+        no_cache: bool = False,\\n+        headless: bool
        = False,\\n+        max_retries: int = 3,\\n+        use_cache_file: bool
        = False,\\n+        auth_token: Optional[str] = None,\\n+        cache_path:
        Optional[str] = None,\\n+    ) -> \\\"Singleton\\\":\\n+        \\\"\\\"\\\"\\n+
        \       Initializes the SpotifyClient.\\n+\\n+        ### Arguments\\n+        -
        client_id: The client ID of the application.\\n+        - client_secret: The
        client secret of the application.\\n+        - auth_token: The access token
        to use.\\n+        - user_auth: Whether or not to use user authentication.\\n+
        \       - cache_path: The path to the cache file.\\n+        - no_cache: Whether
        or not to use the cache.\\n+        - open_browser: Whether or not to open
        the browser.\\n+\\n+        ### Returns\\n+        - The instance of the SpotifyClient.\\n+
        \       \\\"\\\"\\\"\\n+\\n+        # check if initialization has been completed,
        if yes, raise an Exception\\n+        if isinstance(self._instance, self):\\n+
        \           raise SpotifyError(\\\"A spotify client has already been initialized\\\")\\n+\\n+
        \       credential_manager = None\\n+\\n+        cache_handler = (\\n+            CacheFileHandler(cache_path
        or get_cache_path())\\n+            if not no_cache\\n+            else MemoryCacheHandler()\\n+
        \       )\\n+        # Use SpotifyOAuth as auth manager\\n+        if user_auth:\\n+
        \           credential_manager = SpotifyOAuth(\\n+                client_id=client_id,\\n+
        \               client_secret=client_secret,\\n+                redirect_uri=\\\"http://127.0.0.1:9900/\\\",\\n+
        \               scope=\\\"user-library-read,user-follow-read,playlist-read-private\\\",\\n+
        \               cache_handler=cache_handler,\\n+                open_browser=not
        headless,\\n+            )\\n+        # Use SpotifyClientCredentials as auth
        manager\\n+        else:\\n+            credential_manager = SpotifyClientCredentials(\\n+
        \               client_id=client_id,\\n+                client_secret=client_secret,\\n+
        \               cache_handler=cache_handler,\\n+            )\\n+        if
        auth_token is not None:\\n+            credential_manager = None\\n+\\n+        self.user_auth
        = user_auth\\n+        self.no_cache = no_cache\\n+        self.max_retries
        = max_retries\\n+        self.use_cache_file = use_cache_file\\n+\\n+        #
        Create instance\\n+        self._instance = super().__call__(\\n+            auth=auth_token,\\n+
        \           auth_manager=credential_manager,\\n+            status_forcelist=(429,
        500, 502, 503, 504, 404),\\n+        )\\n+\\n+        # Return instance\\n+
        \       return self._instance\\n+\\n+\\n+class SpotifyClient(Spotify, metaclass=Singleton):\\n+
        \   \\\"\\\"\\\"\\n+    This is the Spotify client meant to be used in the
        app.\\n+    Has to be initialized first by calling\\n+    `SpotifyClient.init(client_id,
        client_secret, user_auth, cache_path, no_cache, open_browser)`.\\n+    \\\"\\\"\\\"\\n+\\n+
        \   _initialized = False\\n+    cache: Dict[str, Optional[Dict]] = {}\\n+\\n+
        \   def __init__(self, *args, **kwargs):\\n+        \\\"\\\"\\\"\\n+        Initializes
        the SpotifyClient.\\n+\\n+        ### Arguments\\n+        - auth: The access
        token to use.\\n+        - auth_manager: The auth manager to use.\\n+        \\\"\\\"\\\"\\n+\\n+
        \       super().__init__(*args, **kwargs)\\n+        self._initialized = True\\n+\\n+
        \       use_cache_file: bool = self.use_cache_file  # type: ignore # pylint:
        disable=E1101\\n+        cache_file_loc = get_spotify_cache_path()\\n+\\n+
        \       if use_cache_file and cache_file_loc.exists():\\n+            with
        open(cache_file_loc, \\\"r\\\", encoding=\\\"utf-8\\\") as cache_file:\\n+
        \               self.cache = json.load(cache_file)\\n+        elif use_cache_file:\\n+
        \           with open(cache_file_loc, \\\"w\\\", encoding=\\\"utf-8\\\") as
        cache_file:\\n+                json.dump(self.cache, cache_file)\\n+\\n+    def
        _get(self, url, args=None, payload=None, **kwargs):\\n+        \\\"\\\"\\\"\\n+
        \       Overrides the get method of the SpotifyClient.\\n+        Allows us
        to cache requests\\n+        \\\"\\\"\\\"\\n+\\n+        use_cache = not self.no_cache
        \ # type: ignore # pylint: disable=E1101\\n+\\n+        if args:\\n+            kwargs.update(args)\\n+\\n+
        \       cache_key = None\\n+        if use_cache:\\n+            key_obj =
        dict(kwargs)\\n+            key_obj[\\\"url\\\"] = url\\n+            key_obj[\\\"data\\\"]
        = json.dumps(payload)\\n+            cache_key = json.dumps(key_obj)\\n+            if
        cache_key is None:\\n+                cache_key = url\\n+            if self.cache.get(cache_key)
        is not None:\\n+                return self.cache[cache_key]\\n+\\n+        #
        Wrap in a try-except and retry up to `retries` times.\\n+        response
        = None\\n+        retries = self.max_retries  # type: ignore # pylint: disable=E1101\\n+
        \       while response is None:\\n+            try:\\n+                response
        = self._internal_call(\\\"GET\\\", url, payload, kwargs)\\n+            except
        (requests.exceptions.Timeout, requests.ConnectionError) as exc:\\n+                retries
        -= 1\\n+                if retries <= 0:\\n+                    raise exc\\n+\\n+
        \       if use_cache and cache_key is not None:\\n+            self.cache[cache_key]
        = response\\n+\\n+        return response\\n+\\n+\\n+def save_spotify_cache(cache:
        Dict[str, Optional[Dict]]):\\n+    \\\"\\\"\\\"\\n+    Saves the Spotify cache
        to a file.\\n+\\n+    ### Arguments\\n+    - cache: The cache to save.\\n+
        \   \\\"\\\"\\\"\\n+\\n+    cache_file_loc = get_spotify_cache_path()\\n+\\n+
        \   logger.debug(\\\"Saving Spotify cache to %s\\\", cache_file_loc)\\n+\\n+
        \   # Only cache tracks\\n+    cache = {\\n+        key: value\\n+        for
        key, value in cache.items()\\n+        if value is not None and \\\"tracks/\\\"
        in key\\n+    }\\n+\\n+    with open(cache_file_loc, \\\"w\\\", encoding=\\\"utf-8\\\")
        as cache_file:\\n+        json.dump(cache, cache_file)\"},{\"sha\":\"261f2bc0612f93b000c53315e3268ef010cbbd25\",\"filename\":\"spotdl/utils/static.py\",\"status\":\"added\",\"additions\":1599,\"deletions\":0,\"changes\":1599,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fstatic.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fstatic.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fstatic.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\",\"patch\":\"@@
        -0,0 +1,1599 @@\\n+\\\"\\\"\\\"\\n+Module for holding static variables that
        are used throughout the project.\\n+And are for the most part, not likely
        to change.\\n+(Also holds really large variables, so pylint is disabled here)\\n+\\\"\\\"\\\"\\n+\\n+#
        pylint: skip-file\\n+\\n+__all__ = [\\n+    \\\"AMBIGUOUS_CHARACTERS\\\",\\n+
        \   \\\"BAD_CHARS\\\",\\n+]\\n+\\n+BAD_CHARS = [12441, 12442] + list(range(769,
        880))\\n+\\n+# Source: https://github.com/hediet/vscode-unicode-data/blob/main/out/ambiguous.json\\n+AMBIGUOUS_CHARACTERS
        = {\\n+    \\\"8232\\\": 32,\\n+    \\\"8233\\\": 32,\\n+    \\\"5760\\\":
        32,\\n+    \\\"8192\\\": 32,\\n+    \\\"8193\\\": 32,\\n+    \\\"8194\\\":
        32,\\n+    \\\"8195\\\": 32,\\n+    \\\"8196\\\": 32,\\n+    \\\"8197\\\":
        32,\\n+    \\\"8198\\\": 32,\\n+    \\\"8200\\\": 32,\\n+    \\\"8201\\\":
        32,\\n+    \\\"8202\\\": 32,\\n+    \\\"8287\\\": 32,\\n+    \\\"8199\\\":
        32,\\n+    \\\"8239\\\": 32,\\n+    \\\"2042\\\": 95,\\n+    \\\"65101\\\":
        95,\\n+    \\\"65102\\\": 95,\\n+    \\\"65103\\\": 95,\\n+    \\\"8208\\\":
        45,\\n+    \\\"8209\\\": 45,\\n+    \\\"8210\\\": 45,\\n+    \\\"65112\\\":
        45,\\n+    \\\"1748\\\": 45,\\n+    \\\"8259\\\": 45,\\n+    \\\"727\\\":
        45,\\n+    \\\"8722\\\": 45,\\n+    \\\"10134\\\": 45,\\n+    \\\"11450\\\":
        45,\\n+    \\\"1549\\\": 44,\\n+    \\\"1643\\\": 44,\\n+    \\\"8218\\\":
        44,\\n+    \\\"184\\\": 44,\\n+    \\\"42233\\\": 44,\\n+    \\\"894\\\":
        59,\\n+    \\\"2307\\\": 58,\\n+    \\\"2691\\\": 58,\\n+    \\\"1417\\\":
        58,\\n+    \\\"1795\\\": 58,\\n+    \\\"1796\\\": 58,\\n+    \\\"5868\\\":
        58,\\n+    \\\"65072\\\": 58,\\n+    \\\"6147\\\": 58,\\n+    \\\"6153\\\":
        58,\\n+    \\\"8282\\\": 58,\\n+    \\\"1475\\\": 58,\\n+    \\\"760\\\":
        58,\\n+    \\\"42889\\\": 58,\\n+    \\\"8758\\\": 58,\\n+    \\\"720\\\":
        58,\\n+    \\\"42237\\\": 58,\\n+    \\\"451\\\": 33,\\n+    \\\"11601\\\":
        33,\\n+    \\\"660\\\": 63,\\n+    \\\"577\\\": 63,\\n+    \\\"2429\\\": 63,\\n+
        \   \\\"5038\\\": 63,\\n+    \\\"42731\\\": 63,\\n+    \\\"119149\\\": 46,\\n+
        \   \\\"8228\\\": 46,\\n+    \\\"1793\\\": 46,\\n+    \\\"1794\\\": 46,\\n+
        \   \\\"42510\\\": 46,\\n+    \\\"68176\\\": 46,\\n+    \\\"1632\\\": 46,\\n+
        \   \\\"1776\\\": 46,\\n+    \\\"42232\\\": 46,\\n+    \\\"1373\\\": 96,\\n+
        \   \\\"65287\\\": 96,\\n+    \\\"8219\\\": 96,\\n+    \\\"8242\\\": 96,\\n+
        \   \\\"1370\\\": 96,\\n+    \\\"1523\\\": 96,\\n+    \\\"8175\\\": 96,\\n+
        \   \\\"65344\\\": 96,\\n+    \\\"900\\\": 96,\\n+    \\\"8189\\\": 96,\\n+
        \   \\\"8125\\\": 96,\\n+    \\\"8127\\\": 96,\\n+    \\\"8190\\\": 96,\\n+
        \   \\\"697\\\": 96,\\n+    \\\"884\\\": 96,\\n+    \\\"712\\\": 96,\\n+    \\\"714\\\":
        96,\\n+    \\\"715\\\": 96,\\n+    \\\"756\\\": 96,\\n+    \\\"699\\\": 96,\\n+
        \   \\\"701\\\": 96,\\n+    \\\"700\\\": 96,\\n+    \\\"702\\\": 96,\\n+    \\\"42892\\\":
        96,\\n+    \\\"1497\\\": 96,\\n+    \\\"2036\\\": 96,\\n+    \\\"2037\\\":
        96,\\n+    \\\"5194\\\": 96,\\n+    \\\"5836\\\": 96,\\n+    \\\"94033\\\":
        96,\\n+    \\\"94034\\\": 96,\\n+    \\\"65339\\\": 91,\\n+    \\\"10088\\\":
        40,\\n+    \\\"10098\\\": 40,\\n+    \\\"12308\\\": 40,\\n+    \\\"64830\\\":
        40,\\n+    \\\"65341\\\": 93,\\n+    \\\"10089\\\": 41,\\n+    \\\"10099\\\":
        41,\\n+    \\\"12309\\\": 41,\\n+    \\\"64831\\\": 41,\\n+    \\\"10100\\\":
        123,\\n+    \\\"119060\\\": 123,\\n+    \\\"10101\\\": 125,\\n+    \\\"65342\\\":
        94,\\n+    \\\"8270\\\": 42,\\n+    \\\"1645\\\": 42,\\n+    \\\"8727\\\":
        42,\\n+    \\\"66335\\\": 42,\\n+    \\\"5941\\\": 47,\\n+    \\\"8257\\\":
        47,\\n+    \\\"8725\\\": 47,\\n+    \\\"8260\\\": 47,\\n+    \\\"9585\\\":
        47,\\n+    \\\"10187\\\": 47,\\n+    \\\"10744\\\": 47,\\n+    \\\"119354\\\":
        47,\\n+    \\\"12755\\\": 47,\\n+    \\\"12339\\\": 47,\\n+    \\\"11462\\\":
        47,\\n+    \\\"20031\\\": 47,\\n+    \\\"12035\\\": 47,\\n+    \\\"65340\\\":
        92,\\n+    \\\"65128\\\": 92,\\n+    \\\"8726\\\": 92,\\n+    \\\"10189\\\":
        92,\\n+    \\\"10741\\\": 92,\\n+    \\\"10745\\\": 92,\\n+    \\\"119311\\\":
        92,\\n+    \\\"119355\\\": 92,\\n+    \\\"12756\\\": 92,\\n+    \\\"20022\\\":
        92,\\n+    \\\"12034\\\": 92,\\n+    \\\"42872\\\": 38,\\n+    \\\"708\\\":
        94,\\n+    \\\"710\\\": 94,\\n+    \\\"5869\\\": 43,\\n+    \\\"10133\\\":
        43,\\n+    \\\"66203\\\": 43,\\n+    \\\"8249\\\": 60,\\n+    \\\"10094\\\":
        60,\\n+    \\\"706\\\": 60,\\n+    \\\"119350\\\": 60,\\n+    \\\"5176\\\":
        60,\\n+    \\\"5810\\\": 60,\\n+    \\\"5120\\\": 61,\\n+    \\\"11840\\\":
        61,\\n+    \\\"12448\\\": 61,\\n+    \\\"42239\\\": 61,\\n+    \\\"8250\\\":
        62,\\n+    \\\"10095\\\": 62,\\n+    \\\"707\\\": 62,\\n+    \\\"119351\\\":
        62,\\n+    \\\"5171\\\": 62,\\n+    \\\"94015\\\": 62,\\n+    \\\"8275\\\":
        126,\\n+    \\\"732\\\": 126,\\n+    \\\"8128\\\": 126,\\n+    \\\"8764\\\":
        126,\\n+    \\\"65372\\\": 124,\\n+    \\\"65293\\\": 45,\\n+    \\\"120784\\\":
        50,\\n+    \\\"120794\\\": 50,\\n+    \\\"120804\\\": 50,\\n+    \\\"120814\\\":
        50,\\n+    \\\"120824\\\": 50,\\n+    \\\"130034\\\": 50,\\n+    \\\"42842\\\":
        50,\\n+    \\\"423\\\": 50,\\n+    \\\"1000\\\": 50,\\n+    \\\"42564\\\":
        50,\\n+    \\\"5311\\\": 50,\\n+    \\\"42735\\\": 50,\\n+    \\\"119302\\\":
        51,\\n+    \\\"120785\\\": 51,\\n+    \\\"120795\\\": 51,\\n+    \\\"120805\\\":
        51,\\n+    \\\"120815\\\": 51,\\n+    \\\"120825\\\": 51,\\n+    \\\"130035\\\":
        51,\\n+    \\\"42923\\\": 51,\\n+    \\\"540\\\": 51,\\n+    \\\"439\\\":
        51,\\n+    \\\"42858\\\": 51,\\n+    \\\"11468\\\": 51,\\n+    \\\"1248\\\":
        51,\\n+    \\\"94011\\\": 51,\\n+    \\\"71882\\\": 51,\\n+    \\\"120786\\\":
        52,\\n+    \\\"120796\\\": 52,\\n+    \\\"120806\\\": 52,\\n+    \\\"120816\\\":
        52,\\n+    \\\"120826\\\": 52,\\n+    \\\"130036\\\": 52,\\n+    \\\"5070\\\":
        52,\\n+    \\\"71855\\\": 52,\\n+    \\\"120787\\\": 53,\\n+    \\\"120797\\\":
        53,\\n+    \\\"120807\\\": 53,\\n+    \\\"120817\\\": 53,\\n+    \\\"120827\\\":
        53,\\n+    \\\"130037\\\": 53,\\n+    \\\"444\\\": 53,\\n+    \\\"71867\\\":
        53,\\n+    \\\"120788\\\": 54,\\n+    \\\"120798\\\": 54,\\n+    \\\"120808\\\":
        54,\\n+    \\\"120818\\\": 54,\\n+    \\\"120828\\\": 54,\\n+    \\\"130038\\\":
        54,\\n+    \\\"11474\\\": 54,\\n+    \\\"5102\\\": 54,\\n+    \\\"71893\\\":
        54,\\n+    \\\"119314\\\": 55,\\n+    \\\"120789\\\": 55,\\n+    \\\"120799\\\":
        55,\\n+    \\\"120809\\\": 55,\\n+    \\\"120819\\\": 55,\\n+    \\\"120829\\\":
        55,\\n+    \\\"130039\\\": 55,\\n+    \\\"66770\\\": 55,\\n+    \\\"71878\\\":
        55,\\n+    \\\"2819\\\": 56,\\n+    \\\"2538\\\": 56,\\n+    \\\"2666\\\":
        56,\\n+    \\\"125131\\\": 56,\\n+    \\\"120790\\\": 56,\\n+    \\\"120800\\\":
        56,\\n+    \\\"120810\\\": 56,\\n+    \\\"120820\\\": 56,\\n+    \\\"120830\\\":
        56,\\n+    \\\"130040\\\": 56,\\n+    \\\"547\\\": 56,\\n+    \\\"546\\\":
        56,\\n+    \\\"66330\\\": 56,\\n+    \\\"2663\\\": 57,\\n+    \\\"2920\\\":
        57,\\n+    \\\"2541\\\": 57,\\n+    \\\"3437\\\": 57,\\n+    \\\"120791\\\":
        57,\\n+    \\\"120801\\\": 57,\\n+    \\\"120811\\\": 57,\\n+    \\\"120821\\\":
        57,\\n+    \\\"120831\\\": 57,\\n+    \\\"130041\\\": 57,\\n+    \\\"42862\\\":
        57,\\n+    \\\"11466\\\": 57,\\n+    \\\"71884\\\": 57,\\n+    \\\"71852\\\":
        57,\\n+    \\\"71894\\\": 57,\\n+    \\\"9082\\\": 97,\\n+    \\\"65345\\\":
        97,\\n+    \\\"119834\\\": 97,\\n+    \\\"119886\\\": 97,\\n+    \\\"119938\\\":
        97,\\n+    \\\"119990\\\": 97,\\n+    \\\"120042\\\": 97,\\n+    \\\"120094\\\":
        97,\\n+    \\\"120146\\\": 97,\\n+    \\\"120198\\\": 97,\\n+    \\\"120250\\\":
        97,\\n+    \\\"120302\\\": 97,\\n+    \\\"120354\\\": 97,\\n+    \\\"120406\\\":
        97,\\n+    \\\"120458\\\": 97,\\n+    \\\"593\\\": 97,\\n+    \\\"945\\\":
        97,\\n+    \\\"120514\\\": 97,\\n+    \\\"120572\\\": 97,\\n+    \\\"120630\\\":
        97,\\n+    \\\"120688\\\": 97,\\n+    \\\"120746\\\": 97,\\n+    \\\"65313\\\":
        65,\\n+    \\\"119808\\\": 65,\\n+    \\\"119860\\\": 65,\\n+    \\\"119912\\\":
        65,\\n+    \\\"119964\\\": 65,\\n+    \\\"120016\\\": 65,\\n+    \\\"120068\\\":
        65,\\n+    \\\"120120\\\": 65,\\n+    \\\"120172\\\": 65,\\n+    \\\"120224\\\":
        65,\\n+    \\\"120276\\\": 65,\\n+    \\\"120328\\\": 65,\\n+    \\\"120380\\\":
        65,\\n+    \\\"120432\\\": 65,\\n+    \\\"913\\\": 65,\\n+    \\\"120488\\\":
        65,\\n+    \\\"120546\\\": 65,\\n+    \\\"120604\\\": 65,\\n+    \\\"120662\\\":
        65,\\n+    \\\"120720\\\": 65,\\n+    \\\"5034\\\": 65,\\n+    \\\"5573\\\":
        65,\\n+    \\\"42222\\\": 65,\\n+    \\\"94016\\\": 65,\\n+    \\\"66208\\\":
        65,\\n+    \\\"119835\\\": 98,\\n+    \\\"119887\\\": 98,\\n+    \\\"119939\\\":
        98,\\n+    \\\"119991\\\": 98,\\n+    \\\"120043\\\": 98,\\n+    \\\"120095\\\":
        98,\\n+    \\\"120147\\\": 98,\\n+    \\\"120199\\\": 98,\\n+    \\\"120251\\\":
        98,\\n+    \\\"120303\\\": 98,\\n+    \\\"120355\\\": 98,\\n+    \\\"120407\\\":
        98,\\n+    \\\"120459\\\": 98,\\n+    \\\"388\\\": 98,\\n+    \\\"5071\\\":
        98,\\n+    \\\"5234\\\": 98,\\n+    \\\"5551\\\": 98,\\n+    \\\"65314\\\":
        66,\\n+    \\\"8492\\\": 66,\\n+    \\\"119809\\\": 66,\\n+    \\\"119861\\\":
        66,\\n+    \\\"119913\\\": 66,\\n+    \\\"120017\\\": 66,\\n+    \\\"120069\\\":
        66,\\n+    \\\"120121\\\": 66,\\n+    \\\"120173\\\": 66,\\n+    \\\"120225\\\":
        66,\\n+    \\\"120277\\\": 66,\\n+    \\\"120329\\\": 66,\\n+    \\\"120381\\\":
        66,\\n+    \\\"120433\\\": 66,\\n+    \\\"42932\\\": 66,\\n+    \\\"914\\\":
        66,\\n+    \\\"120489\\\": 66,\\n+    \\\"120547\\\": 66,\\n+    \\\"120605\\\":
        66,\\n+    \\\"120663\\\": 66,\\n+    \\\"120721\\\": 66,\\n+    \\\"5108\\\":
        66,\\n+    \\\"5623\\\": 66,\\n+    \\\"42192\\\": 66,\\n+    \\\"66178\\\":
        66,\\n+    \\\"66209\\\": 66,\\n+    \\\"66305\\\": 66,\\n+    \\\"65347\\\":
        99,\\n+    \\\"8573\\\": 99,\\n+    \\\"119836\\\": 99,\\n+    \\\"119888\\\":
        99,\\n+    \\\"119940\\\": 99,\\n+    \\\"119992\\\": 99,\\n+    \\\"120044\\\":
        99,\\n+    \\\"120096\\\": 99,\\n+    \\\"120148\\\": 99,\\n+    \\\"120200\\\":
        99,\\n+    \\\"120252\\\": 99,\\n+    \\\"120304\\\": 99,\\n+    \\\"120356\\\":
        99,\\n+    \\\"120408\\\": 99,\\n+    \\\"120460\\\": 99,\\n+    \\\"7428\\\":
        99,\\n+    \\\"1010\\\": 99,\\n+    \\\"11429\\\": 99,\\n+    \\\"43951\\\":
        99,\\n+    \\\"66621\\\": 99,\\n+    \\\"128844\\\": 67,\\n+    \\\"71922\\\":
        67,\\n+    \\\"71913\\\": 67,\\n+    \\\"65315\\\": 67,\\n+    \\\"8557\\\":
        67,\\n+    \\\"8450\\\": 67,\\n+    \\\"8493\\\": 67,\\n+    \\\"119810\\\":
        67,\\n+    \\\"119862\\\": 67,\\n+    \\\"119914\\\": 67,\\n+    \\\"119966\\\":
        67,\\n+    \\\"120018\\\": 67,\\n+    \\\"120174\\\": 67,\\n+    \\\"120226\\\":
        67,\\n+    \\\"120278\\\": 67,\\n+    \\\"120330\\\": 67,\\n+    \\\"120382\\\":
        67,\\n+    \\\"120434\\\": 67,\\n+    \\\"1017\\\": 67,\\n+    \\\"11428\\\":
        67,\\n+    \\\"5087\\\": 67,\\n+    \\\"42202\\\": 67,\\n+    \\\"66210\\\":
        67,\\n+    \\\"66306\\\": 67,\\n+    \\\"66581\\\": 67,\\n+    \\\"66844\\\":
        67,\\n+    \\\"8574\\\": 100,\\n+    \\\"8518\\\": 100,\\n+    \\\"119837\\\":
        100,\\n+    \\\"119889\\\": 100,\\n+    \\\"119941\\\": 100,\\n+    \\\"119993\\\":
        100,\\n+    \\\"120045\\\": 100,\\n+    \\\"120097\\\": 100,\\n+    \\\"120149\\\":
        100,\\n+    \\\"120201\\\": 100,\\n+    \\\"120253\\\": 100,\\n+    \\\"120305\\\":
        100,\\n+    \\\"120357\\\": 100,\\n+    \\\"120409\\\": 100,\\n+    \\\"120461\\\":
        100,\\n+    \\\"1281\\\": 100,\\n+    \\\"5095\\\": 100,\\n+    \\\"5231\\\":
        100,\\n+    \\\"42194\\\": 100,\\n+    \\\"8558\\\": 68,\\n+    \\\"8517\\\":
        68,\\n+    \\\"119811\\\": 68,\\n+    \\\"119863\\\": 68,\\n+    \\\"119915\\\":
        68,\\n+    \\\"119967\\\": 68,\\n+    \\\"120019\\\": 68,\\n+    \\\"120071\\\":
        68,\\n+    \\\"120123\\\": 68,\\n+    \\\"120175\\\": 68,\\n+    \\\"120227\\\":
        68,\\n+    \\\"120279\\\": 68,\\n+    \\\"120331\\\": 68,\\n+    \\\"120383\\\":
        68,\\n+    \\\"120435\\\": 68,\\n+    \\\"5024\\\": 68,\\n+    \\\"5598\\\":
        68,\\n+    \\\"5610\\\": 68,\\n+    \\\"42195\\\": 68,\\n+    \\\"8494\\\":
        101,\\n+    \\\"65349\\\": 101,\\n+    \\\"8495\\\": 101,\\n+    \\\"8519\\\":
        101,\\n+    \\\"119838\\\": 101,\\n+    \\\"119890\\\": 101,\\n+    \\\"119942\\\":
        101,\\n+    \\\"120046\\\": 101,\\n+    \\\"120098\\\": 101,\\n+    \\\"120150\\\":
        101,\\n+    \\\"120202\\\": 101,\\n+    \\\"120254\\\": 101,\\n+    \\\"120306\\\":
        101,\\n+    \\\"120358\\\": 101,\\n+    \\\"120410\\\": 101,\\n+    \\\"120462\\\":
        101,\\n+    \\\"43826\\\": 101,\\n+    \\\"1213\\\": 101,\\n+    \\\"8959\\\":
        69,\\n+    \\\"65317\\\": 69,\\n+    \\\"8496\\\": 69,\\n+    \\\"119812\\\":
        69,\\n+    \\\"119864\\\": 69,\\n+    \\\"119916\\\": 69,\\n+    \\\"120020\\\":
        69,\\n+    \\\"120072\\\": 69,\\n+    \\\"120124\\\": 69,\\n+    \\\"120176\\\":
        69,\\n+    \\\"120228\\\": 69,\\n+    \\\"120280\\\": 69,\\n+    \\\"120332\\\":
        69,\\n+    \\\"120384\\\": 69,\\n+    \\\"120436\\\": 69,\\n+    \\\"917\\\":
        69,\\n+    \\\"120492\\\": 69,\\n+    \\\"120550\\\": 69,\\n+    \\\"120608\\\":
        69,\\n+    \\\"120666\\\": 69,\\n+    \\\"120724\\\": 69,\\n+    \\\"11577\\\":
        69,\\n+    \\\"5036\\\": 69,\\n+    \\\"42224\\\": 69,\\n+    \\\"71846\\\":
        69,\\n+    \\\"71854\\\": 69,\\n+    \\\"66182\\\": 69,\\n+    \\\"119839\\\":
        102,\\n+    \\\"119891\\\": 102,\\n+    \\\"119943\\\": 102,\\n+    \\\"119995\\\":
        102,\\n+    \\\"120047\\\": 102,\\n+    \\\"120099\\\": 102,\\n+    \\\"120151\\\":
        102,\\n+    \\\"120203\\\": 102,\\n+    \\\"120255\\\": 102,\\n+    \\\"120307\\\":
        102,\\n+    \\\"120359\\\": 102,\\n+    \\\"120411\\\": 102,\\n+    \\\"120463\\\":
        102,\\n+    \\\"43829\\\": 102,\\n+    \\\"42905\\\": 102,\\n+    \\\"383\\\":
        102,\\n+    \\\"7837\\\": 102,\\n+    \\\"1412\\\": 102,\\n+    \\\"119315\\\":
        70,\\n+    \\\"8497\\\": 70,\\n+    \\\"119813\\\": 70,\\n+    \\\"119865\\\":
        70,\\n+    \\\"119917\\\": 70,\\n+    \\\"120021\\\": 70,\\n+    \\\"120073\\\":
        70,\\n+    \\\"120125\\\": 70,\\n+    \\\"120177\\\": 70,\\n+    \\\"120229\\\":
        70,\\n+    \\\"120281\\\": 70,\\n+    \\\"120333\\\": 70,\\n+    \\\"120385\\\":
        70,\\n+    \\\"120437\\\": 70,\\n+    \\\"42904\\\": 70,\\n+    \\\"988\\\":
        70,\\n+    \\\"120778\\\": 70,\\n+    \\\"5556\\\": 70,\\n+    \\\"42205\\\":
        70,\\n+    \\\"71874\\\": 70,\\n+    \\\"71842\\\": 70,\\n+    \\\"66183\\\":
        70,\\n+    \\\"66213\\\": 70,\\n+    \\\"66853\\\": 70,\\n+    \\\"65351\\\":
        103,\\n+    \\\"8458\\\": 103,\\n+    \\\"119840\\\": 103,\\n+    \\\"119892\\\":
        103,\\n+    \\\"119944\\\": 103,\\n+    \\\"120048\\\": 103,\\n+    \\\"120100\\\":
        103,\\n+    \\\"120152\\\": 103,\\n+    \\\"120204\\\": 103,\\n+    \\\"120256\\\":
        103,\\n+    \\\"120308\\\": 103,\\n+    \\\"120360\\\": 103,\\n+    \\\"120412\\\":
        103,\\n+    \\\"120464\\\": 103,\\n+    \\\"609\\\": 103,\\n+    \\\"7555\\\":
        103,\\n+    \\\"397\\\": 103,\\n+    \\\"1409\\\": 103,\\n+    \\\"119814\\\":
        71,\\n+    \\\"119866\\\": 71,\\n+    \\\"119918\\\": 71,\\n+    \\\"119970\\\":
        71,\\n+    \\\"120022\\\": 71,\\n+    \\\"120074\\\": 71,\\n+    \\\"120126\\\":
        71,\\n+    \\\"120178\\\": 71,\\n+    \\\"120230\\\": 71,\\n+    \\\"120282\\\":
        71,\\n+    \\\"120334\\\": 71,\\n+    \\\"120386\\\": 71,\\n+    \\\"120438\\\":
        71,\\n+    \\\"1292\\\": 71,\\n+    \\\"5056\\\": 71,\\n+    \\\"5107\\\":
        71,\\n+    \\\"42198\\\": 71,\\n+    \\\"65352\\\": 104,\\n+    \\\"8462\\\":
        104,\\n+    \\\"119841\\\": 104,\\n+    \\\"119945\\\": 104,\\n+    \\\"119997\\\":
        104,\\n+    \\\"120049\\\": 104,\\n+    \\\"120101\\\": 104,\\n+    \\\"120153\\\":
        104,\\n+    \\\"120205\\\": 104,\\n+    \\\"120257\\\": 104,\\n+    \\\"120309\\\":
        104,\\n+    \\\"120361\\\": 104,\\n+    \\\"120413\\\": 104,\\n+    \\\"120465\\\":
        104,\\n+    \\\"1211\\\": 104,\\n+    \\\"1392\\\": 104,\\n+    \\\"5058\\\":
        104,\\n+    \\\"65320\\\": 72,\\n+    \\\"8459\\\": 72,\\n+    \\\"8460\\\":
        72,\\n+    \\\"8461\\\": 72,\\n+    \\\"119815\\\": 72,\\n+    \\\"119867\\\":
        72,\\n+    \\\"119919\\\": 72,\\n+    \\\"120023\\\": 72,\\n+    \\\"120179\\\":
        72,\\n+    \\\"120231\\\": 72,\\n+    \\\"120283\\\": 72,\\n+    \\\"120335\\\":
        72,\\n+    \\\"120387\\\": 72,\\n+    \\\"120439\\\": 72,\\n+    \\\"919\\\":
        72,\\n+    \\\"120494\\\": 72,\\n+    \\\"120552\\\": 72,\\n+    \\\"120610\\\":
        72,\\n+    \\\"120668\\\": 72,\\n+    \\\"120726\\\": 72,\\n+    \\\"11406\\\":
        72,\\n+    \\\"5051\\\": 72,\\n+    \\\"5500\\\": 72,\\n+    \\\"42215\\\":
        72,\\n+    \\\"66255\\\": 72,\\n+    \\\"731\\\": 105,\\n+    \\\"9075\\\":
        105,\\n+    \\\"65353\\\": 105,\\n+    \\\"8560\\\": 105,\\n+    \\\"8505\\\":
        105,\\n+    \\\"8520\\\": 105,\\n+    \\\"119842\\\": 105,\\n+    \\\"119894\\\":
        105,\\n+    \\\"119946\\\": 105,\\n+    \\\"119998\\\": 105,\\n+    \\\"120050\\\":
        105,\\n+    \\\"120102\\\": 105,\\n+    \\\"120154\\\": 105,\\n+    \\\"120206\\\":
        105,\\n+    \\\"120258\\\": 105,\\n+    \\\"120310\\\": 105,\\n+    \\\"120362\\\":
        105,\\n+    \\\"120414\\\": 105,\\n+    \\\"120466\\\": 105,\\n+    \\\"120484\\\":
        105,\\n+    \\\"618\\\": 105,\\n+    \\\"617\\\": 105,\\n+    \\\"953\\\":
        105,\\n+    \\\"8126\\\": 105,\\n+    \\\"890\\\": 105,\\n+    \\\"120522\\\":
        105,\\n+    \\\"120580\\\": 105,\\n+    \\\"120638\\\": 105,\\n+    \\\"120696\\\":
        105,\\n+    \\\"120754\\\": 105,\\n+    \\\"1110\\\": 105,\\n+    \\\"42567\\\":
        105,\\n+    \\\"1231\\\": 105,\\n+    \\\"43893\\\": 105,\\n+    \\\"5029\\\":
        105,\\n+    \\\"71875\\\": 105,\\n+    \\\"65354\\\": 106,\\n+    \\\"8521\\\":
        106,\\n+    \\\"119843\\\": 106,\\n+    \\\"119895\\\": 106,\\n+    \\\"119947\\\":
        106,\\n+    \\\"119999\\\": 106,\\n+    \\\"120051\\\": 106,\\n+    \\\"120103\\\":
        106,\\n+    \\\"120155\\\": 106,\\n+    \\\"120207\\\": 106,\\n+    \\\"120259\\\":
        106,\\n+    \\\"120311\\\": 106,\\n+    \\\"120363\\\": 106,\\n+    \\\"120415\\\":
        106,\\n+    \\\"120467\\\": 106,\\n+    \\\"1011\\\": 106,\\n+    \\\"1112\\\":
        106,\\n+    \\\"65322\\\": 74,\\n+    \\\"119817\\\": 74,\\n+    \\\"119869\\\":
        74,\\n+    \\\"119921\\\": 74,\\n+    \\\"119973\\\": 74,\\n+    \\\"120025\\\":
        74,\\n+    \\\"120077\\\": 74,\\n+    \\\"120129\\\": 74,\\n+    \\\"120181\\\":
        74,\\n+    \\\"120233\\\": 74,\\n+    \\\"120285\\\": 74,\\n+    \\\"120337\\\":
        74,\\n+    \\\"120389\\\": 74,\\n+    \\\"120441\\\": 74,\\n+    \\\"42930\\\":
        74,\\n+    \\\"895\\\": 74,\\n+    \\\"1032\\\": 74,\\n+    \\\"5035\\\":
        74,\\n+    \\\"5261\\\": 74,\\n+    \\\"42201\\\": 74,\\n+    \\\"119844\\\":
        107,\\n+    \\\"119896\\\": 107,\\n+    \\\"119948\\\": 107,\\n+    \\\"120000\\\":
        107,\\n+    \\\"120052\\\": 107,\\n+    \\\"120104\\\": 107,\\n+    \\\"120156\\\":
        107,\\n+    \\\"120208\\\": 107,\\n+    \\\"120260\\\": 107,\\n+    \\\"120312\\\":
        107,\\n+    \\\"120364\\\": 107,\\n+    \\\"120416\\\": 107,\\n+    \\\"120468\\\":
        107,\\n+    \\\"8490\\\": 75,\\n+    \\\"65323\\\": 75,\\n+    \\\"119818\\\":
        75,\\n+    \\\"119870\\\": 75,\\n+    \\\"119922\\\": 75,\\n+    \\\"119974\\\":
        75,\\n+    \\\"120026\\\": 75,\\n+    \\\"120078\\\": 75,\\n+    \\\"120130\\\":
        75,\\n+    \\\"120182\\\": 75,\\n+    \\\"120234\\\": 75,\\n+    \\\"120286\\\":
        75,\\n+    \\\"120338\\\": 75,\\n+    \\\"120390\\\": 75,\\n+    \\\"120442\\\":
        75,\\n+    \\\"922\\\": 75,\\n+    \\\"120497\\\": 75,\\n+    \\\"120555\\\":
        75,\\n+    \\\"120613\\\": 75,\\n+    \\\"120671\\\": 75,\\n+    \\\"120729\\\":
        75,\\n+    \\\"11412\\\": 75,\\n+    \\\"5094\\\": 75,\\n+    \\\"5845\\\":
        75,\\n+    \\\"42199\\\": 75,\\n+    \\\"66840\\\": 75,\\n+    \\\"1472\\\":
        108,\\n+    \\\"8739\\\": 73,\\n+    \\\"9213\\\": 73,\\n+    \\\"65512\\\":
        73,\\n+    \\\"1633\\\": 108,\\n+    \\\"1777\\\": 73,\\n+    \\\"66336\\\":
        108,\\n+    \\\"125127\\\": 108,\\n+    \\\"120783\\\": 73,\\n+    \\\"120793\\\":
        73,\\n+    \\\"120803\\\": 73,\\n+    \\\"120813\\\": 73,\\n+    \\\"120823\\\":
        73,\\n+    \\\"130033\\\": 73,\\n+    \\\"65321\\\": 73,\\n+    \\\"8544\\\":
        73,\\n+    \\\"8464\\\": 73,\\n+    \\\"8465\\\": 73,\\n+    \\\"119816\\\":
        73,\\n+    \\\"119868\\\": 73,\\n+    \\\"119920\\\": 73,\\n+    \\\"120024\\\":
        73,\\n+    \\\"120128\\\": 73,\\n+    \\\"120180\\\": 73,\\n+    \\\"120232\\\":
        73,\\n+    \\\"120284\\\": 73,\\n+    \\\"120336\\\": 73,\\n+    \\\"120388\\\":
        73,\\n+    \\\"120440\\\": 73,\\n+    \\\"65356\\\": 108,\\n+    \\\"8572\\\":
        73,\\n+    \\\"8467\\\": 108,\\n+    \\\"119845\\\": 108,\\n+    \\\"119897\\\":
        108,\\n+    \\\"119949\\\": 108,\\n+    \\\"120001\\\": 108,\\n+    \\\"120053\\\":
        108,\\n+    \\\"120105\\\": 73,\\n+    \\\"120157\\\": 73,\\n+    \\\"120209\\\":
        73,\\n+    \\\"120261\\\": 73,\\n+    \\\"120313\\\": 73,\\n+    \\\"120365\\\":
        73,\\n+    \\\"120417\\\": 73,\\n+    \\\"120469\\\": 73,\\n+    \\\"448\\\":
        73,\\n+    \\\"120496\\\": 73,\\n+    \\\"120554\\\": 73,\\n+    \\\"120612\\\":
        73,\\n+    \\\"120670\\\": 73,\\n+    \\\"120728\\\": 73,\\n+    \\\"11410\\\":
        73,\\n+    \\\"1030\\\": 73,\\n+    \\\"1216\\\": 73,\\n+    \\\"1493\\\":
        108,\\n+    \\\"1503\\\": 108,\\n+    \\\"1575\\\": 108,\\n+    \\\"126464\\\":
        108,\\n+    \\\"126592\\\": 108,\\n+    \\\"65166\\\": 108,\\n+    \\\"65165\\\":
        108,\\n+    \\\"1994\\\": 108,\\n+    \\\"11599\\\": 73,\\n+    \\\"5825\\\":
        73,\\n+    \\\"42226\\\": 73,\\n+    \\\"93992\\\": 73,\\n+    \\\"66186\\\":
        124,\\n+    \\\"66313\\\": 124,\\n+    \\\"119338\\\": 76,\\n+    \\\"8556\\\":
        76,\\n+    \\\"8466\\\": 76,\\n+    \\\"119819\\\": 76,\\n+    \\\"119871\\\":
        76,\\n+    \\\"119923\\\": 76,\\n+    \\\"120027\\\": 76,\\n+    \\\"120079\\\":
        76,\\n+    \\\"120131\\\": 76,\\n+    \\\"120183\\\": 76,\\n+    \\\"120235\\\":
        76,\\n+    \\\"120287\\\": 76,\\n+    \\\"120339\\\": 76,\\n+    \\\"120391\\\":
        76,\\n+    \\\"120443\\\": 76,\\n+    \\\"11472\\\": 76,\\n+    \\\"5086\\\":
        76,\\n+    \\\"5290\\\": 76,\\n+    \\\"42209\\\": 76,\\n+    \\\"93974\\\":
        76,\\n+    \\\"71843\\\": 76,\\n+    \\\"71858\\\": 76,\\n+    \\\"66587\\\":
        76,\\n+    \\\"66854\\\": 76,\\n+    \\\"65325\\\": 77,\\n+    \\\"8559\\\":
        77,\\n+    \\\"8499\\\": 77,\\n+    \\\"119820\\\": 77,\\n+    \\\"119872\\\":
        77,\\n+    \\\"119924\\\": 77,\\n+    \\\"120028\\\": 77,\\n+    \\\"120080\\\":
        77,\\n+    \\\"120132\\\": 77,\\n+    \\\"120184\\\": 77,\\n+    \\\"120236\\\":
        77,\\n+    \\\"120288\\\": 77,\\n+    \\\"120340\\\": 77,\\n+    \\\"120392\\\":
        77,\\n+    \\\"120444\\\": 77,\\n+    \\\"924\\\": 77,\\n+    \\\"120499\\\":
        77,\\n+    \\\"120557\\\": 77,\\n+    \\\"120615\\\": 77,\\n+    \\\"120673\\\":
        77,\\n+    \\\"120731\\\": 77,\\n+    \\\"1018\\\": 77,\\n+    \\\"11416\\\":
        77,\\n+    \\\"5047\\\": 77,\\n+    \\\"5616\\\": 77,\\n+    \\\"5846\\\":
        77,\\n+    \\\"42207\\\": 77,\\n+    \\\"66224\\\": 77,\\n+    \\\"66321\\\":
        77,\\n+    \\\"119847\\\": 110,\\n+    \\\"119899\\\": 110,\\n+    \\\"119951\\\":
        110,\\n+    \\\"120003\\\": 110,\\n+    \\\"120055\\\": 110,\\n+    \\\"120107\\\":
        110,\\n+    \\\"120159\\\": 110,\\n+    \\\"120211\\\": 110,\\n+    \\\"120263\\\":
        110,\\n+    \\\"120315\\\": 110,\\n+    \\\"120367\\\": 110,\\n+    \\\"120419\\\":
        110,\\n+    \\\"120471\\\": 110,\\n+    \\\"1400\\\": 110,\\n+    \\\"1404\\\":
        110,\\n+    \\\"65326\\\": 78,\\n+    \\\"8469\\\": 78,\\n+    \\\"119821\\\":
        78,\\n+    \\\"119873\\\": 78,\\n+    \\\"119925\\\": 78,\\n+    \\\"119977\\\":
        78,\\n+    \\\"120029\\\": 78,\\n+    \\\"120081\\\": 78,\\n+    \\\"120185\\\":
        78,\\n+    \\\"120237\\\": 78,\\n+    \\\"120289\\\": 78,\\n+    \\\"120341\\\":
        78,\\n+    \\\"120393\\\": 78,\\n+    \\\"120445\\\": 78,\\n+    \\\"925\\\":
        78,\\n+    \\\"120500\\\": 78,\\n+    \\\"120558\\\": 78,\\n+    \\\"120616\\\":
        78,\\n+    \\\"120674\\\": 78,\\n+    \\\"120732\\\": 78,\\n+    \\\"11418\\\":
        78,\\n+    \\\"42208\\\": 78,\\n+    \\\"66835\\\": 78,\\n+    \\\"3074\\\":
        111,\\n+    \\\"3202\\\": 111,\\n+    \\\"3330\\\": 111,\\n+    \\\"3458\\\":
        111,\\n+    \\\"2406\\\": 111,\\n+    \\\"2662\\\": 111,\\n+    \\\"2790\\\":
        111,\\n+    \\\"3046\\\": 111,\\n+    \\\"3174\\\": 111,\\n+    \\\"3302\\\":
        111,\\n+    \\\"3430\\\": 111,\\n+    \\\"3664\\\": 111,\\n+    \\\"3792\\\":
        111,\\n+    \\\"4160\\\": 111,\\n+    \\\"1637\\\": 111,\\n+    \\\"1781\\\":
        111,\\n+    \\\"65359\\\": 111,\\n+    \\\"8500\\\": 111,\\n+    \\\"119848\\\":
        111,\\n+    \\\"119900\\\": 111,\\n+    \\\"119952\\\": 111,\\n+    \\\"120056\\\":
        111,\\n+    \\\"120108\\\": 111,\\n+    \\\"120160\\\": 111,\\n+    \\\"120212\\\":
        111,\\n+    \\\"120264\\\": 111,\\n+    \\\"120316\\\": 111,\\n+    \\\"120368\\\":
        111,\\n+    \\\"120420\\\": 111,\\n+    \\\"120472\\\": 111,\\n+    \\\"7439\\\":
        111,\\n+    \\\"7441\\\": 111,\\n+    \\\"43837\\\": 111,\\n+    \\\"959\\\":
        111,\\n+    \\\"120528\\\": 111,\\n+    \\\"120586\\\": 111,\\n+    \\\"120644\\\":
        111,\\n+    \\\"120702\\\": 111,\\n+    \\\"120760\\\": 111,\\n+    \\\"963\\\":
        111,\\n+    \\\"120532\\\": 111,\\n+    \\\"120590\\\": 111,\\n+    \\\"120648\\\":
        111,\\n+    \\\"120706\\\": 111,\\n+    \\\"120764\\\": 111,\\n+    \\\"11423\\\":
        111,\\n+    \\\"4351\\\": 111,\\n+    \\\"1413\\\": 111,\\n+    \\\"1505\\\":
        111,\\n+    \\\"1607\\\": 111,\\n+    \\\"126500\\\": 111,\\n+    \\\"126564\\\":
        111,\\n+    \\\"126596\\\": 111,\\n+    \\\"65259\\\": 111,\\n+    \\\"65260\\\":
        111,\\n+    \\\"65258\\\": 111,\\n+    \\\"65257\\\": 111,\\n+    \\\"1726\\\":
        111,\\n+    \\\"64428\\\": 111,\\n+    \\\"64429\\\": 111,\\n+    \\\"64427\\\":
        111,\\n+    \\\"64426\\\": 111,\\n+    \\\"1729\\\": 111,\\n+    \\\"64424\\\":
        111,\\n+    \\\"64425\\\": 111,\\n+    \\\"64423\\\": 111,\\n+    \\\"64422\\\":
        111,\\n+    \\\"1749\\\": 111,\\n+    \\\"3360\\\": 111,\\n+    \\\"4125\\\":
        111,\\n+    \\\"66794\\\": 111,\\n+    \\\"71880\\\": 111,\\n+    \\\"71895\\\":
        111,\\n+    \\\"66604\\\": 111,\\n+    \\\"1984\\\": 79,\\n+    \\\"2534\\\":
        79,\\n+    \\\"2918\\\": 79,\\n+    \\\"12295\\\": 79,\\n+    \\\"70864\\\":
        79,\\n+    \\\"71904\\\": 79,\\n+    \\\"120782\\\": 79,\\n+    \\\"120792\\\":
        79,\\n+    \\\"120802\\\": 79,\\n+    \\\"120812\\\": 79,\\n+    \\\"120822\\\":
        79,\\n+    \\\"130032\\\": 79,\\n+    \\\"65327\\\": 79,\\n+    \\\"119822\\\":
        79,\\n+    \\\"119874\\\": 79,\\n+    \\\"119926\\\": 79,\\n+    \\\"119978\\\":
        79,\\n+    \\\"120030\\\": 79,\\n+    \\\"120082\\\": 79,\\n+    \\\"120134\\\":
        79,\\n+    \\\"120186\\\": 79,\\n+    \\\"120238\\\": 79,\\n+    \\\"120290\\\":
        79,\\n+    \\\"120342\\\": 79,\\n+    \\\"120394\\\": 79,\\n+    \\\"120446\\\":
        79,\\n+    \\\"927\\\": 79,\\n+    \\\"120502\\\": 79,\\n+    \\\"120560\\\":
        79,\\n+    \\\"120618\\\": 79,\\n+    \\\"120676\\\": 79,\\n+    \\\"120734\\\":
        79,\\n+    \\\"11422\\\": 79,\\n+    \\\"1365\\\": 79,\\n+    \\\"11604\\\":
        79,\\n+    \\\"4816\\\": 79,\\n+    \\\"2848\\\": 79,\\n+    \\\"66754\\\":
        79,\\n+    \\\"42227\\\": 79,\\n+    \\\"71861\\\": 79,\\n+    \\\"66194\\\":
        79,\\n+    \\\"66219\\\": 79,\\n+    \\\"66564\\\": 79,\\n+    \\\"66838\\\":
        79,\\n+    \\\"9076\\\": 112,\\n+    \\\"65360\\\": 112,\\n+    \\\"119849\\\":
        112,\\n+    \\\"119901\\\": 112,\\n+    \\\"119953\\\": 112,\\n+    \\\"120005\\\":
        112,\\n+    \\\"120057\\\": 112,\\n+    \\\"120109\\\": 112,\\n+    \\\"120161\\\":
        112,\\n+    \\\"120213\\\": 112,\\n+    \\\"120265\\\": 112,\\n+    \\\"120317\\\":
        112,\\n+    \\\"120369\\\": 112,\\n+    \\\"120421\\\": 112,\\n+    \\\"120473\\\":
        112,\\n+    \\\"961\\\": 112,\\n+    \\\"120530\\\": 112,\\n+    \\\"120544\\\":
        112,\\n+    \\\"120588\\\": 112,\\n+    \\\"120602\\\": 112,\\n+    \\\"120646\\\":
        112,\\n+    \\\"120660\\\": 112,\\n+    \\\"120704\\\": 112,\\n+    \\\"120718\\\":
        112,\\n+    \\\"120762\\\": 112,\\n+    \\\"120776\\\": 112,\\n+    \\\"11427\\\":
        112,\\n+    \\\"65328\\\": 80,\\n+    \\\"8473\\\": 80,\\n+    \\\"119823\\\":
        80,\\n+    \\\"119875\\\": 80,\\n+    \\\"119927\\\": 80,\\n+    \\\"119979\\\":
        80,\\n+    \\\"120031\\\": 80,\\n+    \\\"120083\\\": 80,\\n+    \\\"120187\\\":
        80,\\n+    \\\"120239\\\": 80,\\n+    \\\"120291\\\": 80,\\n+    \\\"120343\\\":
        80,\\n+    \\\"120395\\\": 80,\\n+    \\\"120447\\\": 80,\\n+    \\\"929\\\":
        80,\\n+    \\\"120504\\\": 80,\\n+    \\\"120562\\\": 80,\\n+    \\\"120620\\\":
        80,\\n+    \\\"120678\\\": 80,\\n+    \\\"120736\\\": 80,\\n+    \\\"11426\\\":
        80,\\n+    \\\"5090\\\": 80,\\n+    \\\"5229\\\": 80,\\n+    \\\"42193\\\":
        80,\\n+    \\\"66197\\\": 80,\\n+    \\\"119850\\\": 113,\\n+    \\\"119902\\\":
        113,\\n+    \\\"119954\\\": 113,\\n+    \\\"120006\\\": 113,\\n+    \\\"120058\\\":
        113,\\n+    \\\"120110\\\": 113,\\n+    \\\"120162\\\": 113,\\n+    \\\"120214\\\":
        113,\\n+    \\\"120266\\\": 113,\\n+    \\\"120318\\\": 113,\\n+    \\\"120370\\\":
        113,\\n+    \\\"120422\\\": 113,\\n+    \\\"120474\\\": 113,\\n+    \\\"1307\\\":
        113,\\n+    \\\"1379\\\": 113,\\n+    \\\"1382\\\": 113,\\n+    \\\"8474\\\":
        81,\\n+    \\\"119824\\\": 81,\\n+    \\\"119876\\\": 81,\\n+    \\\"119928\\\":
        81,\\n+    \\\"119980\\\": 81,\\n+    \\\"120032\\\": 81,\\n+    \\\"120084\\\":
        81,\\n+    \\\"120188\\\": 81,\\n+    \\\"120240\\\": 81,\\n+    \\\"120292\\\":
        81,\\n+    \\\"120344\\\": 81,\\n+    \\\"120396\\\": 81,\\n+    \\\"120448\\\":
        81,\\n+    \\\"11605\\\": 81,\\n+    \\\"119851\\\": 114,\\n+    \\\"119903\\\":
        114,\\n+    \\\"119955\\\": 114,\\n+    \\\"120007\\\": 114,\\n+    \\\"120059\\\":
        114,\\n+    \\\"120111\\\": 114,\\n+    \\\"120163\\\": 114,\\n+    \\\"120215\\\":
        114,\\n+    \\\"120267\\\": 114,\\n+    \\\"120319\\\": 114,\\n+    \\\"120371\\\":
        114,\\n+    \\\"120423\\\": 114,\\n+    \\\"120475\\\": 114,\\n+    \\\"43847\\\":
        114,\\n+    \\\"43848\\\": 114,\\n+    \\\"7462\\\": 114,\\n+    \\\"11397\\\":
        114,\\n+    \\\"43905\\\": 114,\\n+    \\\"119318\\\": 82,\\n+    \\\"8475\\\":
        82,\\n+    \\\"8476\\\": 82,\\n+    \\\"8477\\\": 82,\\n+    \\\"119825\\\":
        82,\\n+    \\\"119877\\\": 82,\\n+    \\\"119929\\\": 82,\\n+    \\\"120033\\\":
        82,\\n+    \\\"120189\\\": 82,\\n+    \\\"120241\\\": 82,\\n+    \\\"120293\\\":
        82,\\n+    \\\"120345\\\": 82,\\n+    \\\"120397\\\": 82,\\n+    \\\"120449\\\":
        82,\\n+    \\\"422\\\": 82,\\n+    \\\"5025\\\": 82,\\n+    \\\"5074\\\":
        82,\\n+    \\\"66740\\\": 82,\\n+    \\\"5511\\\": 82,\\n+    \\\"42211\\\":
        82,\\n+    \\\"94005\\\": 82,\\n+    \\\"65363\\\": 115,\\n+    \\\"119852\\\":
        115,\\n+    \\\"119904\\\": 115,\\n+    \\\"119956\\\": 115,\\n+    \\\"120008\\\":
        115,\\n+    \\\"120060\\\": 115,\\n+    \\\"120112\\\": 115,\\n+    \\\"120164\\\":
        115,\\n+    \\\"120216\\\": 115,\\n+    \\\"120268\\\": 115,\\n+    \\\"120320\\\":
        115,\\n+    \\\"120372\\\": 115,\\n+    \\\"120424\\\": 115,\\n+    \\\"120476\\\":
        115,\\n+    \\\"42801\\\": 115,\\n+    \\\"445\\\": 115,\\n+    \\\"1109\\\":
        115,\\n+    \\\"43946\\\": 115,\\n+    \\\"71873\\\": 115,\\n+    \\\"66632\\\":
        115,\\n+    \\\"65331\\\": 83,\\n+    \\\"119826\\\": 83,\\n+    \\\"119878\\\":
        83,\\n+    \\\"119930\\\": 83,\\n+    \\\"119982\\\": 83,\\n+    \\\"120034\\\":
        83,\\n+    \\\"120086\\\": 83,\\n+    \\\"120138\\\": 83,\\n+    \\\"120190\\\":
        83,\\n+    \\\"120242\\\": 83,\\n+    \\\"120294\\\": 83,\\n+    \\\"120346\\\":
        83,\\n+    \\\"120398\\\": 83,\\n+    \\\"120450\\\": 83,\\n+    \\\"1029\\\":
        83,\\n+    \\\"1359\\\": 83,\\n+    \\\"5077\\\": 83,\\n+    \\\"5082\\\":
        83,\\n+    \\\"42210\\\": 83,\\n+    \\\"94010\\\": 83,\\n+    \\\"66198\\\":
        83,\\n+    \\\"66592\\\": 83,\\n+    \\\"119853\\\": 116,\\n+    \\\"119905\\\":
        116,\\n+    \\\"119957\\\": 116,\\n+    \\\"120009\\\": 116,\\n+    \\\"120061\\\":
        116,\\n+    \\\"120113\\\": 116,\\n+    \\\"120165\\\": 116,\\n+    \\\"120217\\\":
        116,\\n+    \\\"120269\\\": 116,\\n+    \\\"120321\\\": 116,\\n+    \\\"120373\\\":
        116,\\n+    \\\"120425\\\": 116,\\n+    \\\"120477\\\": 116,\\n+    \\\"8868\\\":
        84,\\n+    \\\"10201\\\": 84,\\n+    \\\"128872\\\": 84,\\n+    \\\"65332\\\":
        84,\\n+    \\\"119827\\\": 84,\\n+    \\\"119879\\\": 84,\\n+    \\\"119931\\\":
        84,\\n+    \\\"119983\\\": 84,\\n+    \\\"120035\\\": 84,\\n+    \\\"120087\\\":
        84,\\n+    \\\"120139\\\": 84,\\n+    \\\"120191\\\": 84,\\n+    \\\"120243\\\":
        84,\\n+    \\\"120295\\\": 84,\\n+    \\\"120347\\\": 84,\\n+    \\\"120399\\\":
        84,\\n+    \\\"120451\\\": 84,\\n+    \\\"932\\\": 84,\\n+    \\\"120507\\\":
        84,\\n+    \\\"120565\\\": 84,\\n+    \\\"120623\\\": 84,\\n+    \\\"120681\\\":
        84,\\n+    \\\"120739\\\": 84,\\n+    \\\"11430\\\": 84,\\n+    \\\"5026\\\":
        84,\\n+    \\\"42196\\\": 84,\\n+    \\\"93962\\\": 84,\\n+    \\\"71868\\\":
        84,\\n+    \\\"66199\\\": 84,\\n+    \\\"66225\\\": 84,\\n+    \\\"66325\\\":
        84,\\n+    \\\"119854\\\": 117,\\n+    \\\"119906\\\": 117,\\n+    \\\"119958\\\":
        117,\\n+    \\\"120010\\\": 117,\\n+    \\\"120062\\\": 117,\\n+    \\\"120114\\\":
        117,\\n+    \\\"120166\\\": 117,\\n+    \\\"120218\\\": 117,\\n+    \\\"120270\\\":
        117,\\n+    \\\"120322\\\": 117,\\n+    \\\"120374\\\": 117,\\n+    \\\"120426\\\":
        117,\\n+    \\\"120478\\\": 117,\\n+    \\\"42911\\\": 117,\\n+    \\\"7452\\\":
        117,\\n+    \\\"43854\\\": 117,\\n+    \\\"43858\\\": 117,\\n+    \\\"651\\\":
        117,\\n+    \\\"965\\\": 117,\\n+    \\\"120534\\\": 117,\\n+    \\\"120592\\\":
        117,\\n+    \\\"120650\\\": 117,\\n+    \\\"120708\\\": 117,\\n+    \\\"120766\\\":
        117,\\n+    \\\"1405\\\": 117,\\n+    \\\"66806\\\": 117,\\n+    \\\"71896\\\":
        117,\\n+    \\\"8746\\\": 85,\\n+    \\\"8899\\\": 85,\\n+    \\\"119828\\\":
        85,\\n+    \\\"119880\\\": 85,\\n+    \\\"119932\\\": 85,\\n+    \\\"119984\\\":
        85,\\n+    \\\"120036\\\": 85,\\n+    \\\"120088\\\": 85,\\n+    \\\"120140\\\":
        85,\\n+    \\\"120192\\\": 85,\\n+    \\\"120244\\\": 85,\\n+    \\\"120296\\\":
        85,\\n+    \\\"120348\\\": 85,\\n+    \\\"120400\\\": 85,\\n+    \\\"120452\\\":
        85,\\n+    \\\"1357\\\": 85,\\n+    \\\"4608\\\": 85,\\n+    \\\"66766\\\":
        85,\\n+    \\\"5196\\\": 85,\\n+    \\\"42228\\\": 85,\\n+    \\\"94018\\\":
        85,\\n+    \\\"71864\\\": 85,\\n+    \\\"8744\\\": 118,\\n+    \\\"8897\\\":
        118,\\n+    \\\"65366\\\": 118,\\n+    \\\"8564\\\": 118,\\n+    \\\"119855\\\":
        118,\\n+    \\\"119907\\\": 118,\\n+    \\\"119959\\\": 118,\\n+    \\\"120011\\\":
        118,\\n+    \\\"120063\\\": 118,\\n+    \\\"120115\\\": 118,\\n+    \\\"120167\\\":
        118,\\n+    \\\"120219\\\": 118,\\n+    \\\"120271\\\": 118,\\n+    \\\"120323\\\":
        118,\\n+    \\\"120375\\\": 118,\\n+    \\\"120427\\\": 118,\\n+    \\\"120479\\\":
        118,\\n+    \\\"7456\\\": 118,\\n+    \\\"957\\\": 118,\\n+    \\\"120526\\\":
        118,\\n+    \\\"120584\\\": 118,\\n+    \\\"120642\\\": 118,\\n+    \\\"120700\\\":
        118,\\n+    \\\"120758\\\": 118,\\n+    \\\"1141\\\": 118,\\n+    \\\"1496\\\":
        118,\\n+    \\\"71430\\\": 118,\\n+    \\\"43945\\\": 118,\\n+    \\\"71872\\\":
        118,\\n+    \\\"119309\\\": 86,\\n+    \\\"1639\\\": 86,\\n+    \\\"1783\\\":
        86,\\n+    \\\"8548\\\": 86,\\n+    \\\"119829\\\": 86,\\n+    \\\"119881\\\":
        86,\\n+    \\\"119933\\\": 86,\\n+    \\\"119985\\\": 86,\\n+    \\\"120037\\\":
        86,\\n+    \\\"120089\\\": 86,\\n+    \\\"120141\\\": 86,\\n+    \\\"120193\\\":
        86,\\n+    \\\"120245\\\": 86,\\n+    \\\"120297\\\": 86,\\n+    \\\"120349\\\":
        86,\\n+    \\\"120401\\\": 86,\\n+    \\\"120453\\\": 86,\\n+    \\\"1140\\\":
        86,\\n+    \\\"11576\\\": 86,\\n+    \\\"5081\\\": 86,\\n+    \\\"5167\\\":
        86,\\n+    \\\"42719\\\": 86,\\n+    \\\"42214\\\": 86,\\n+    \\\"93960\\\":
        86,\\n+    \\\"71840\\\": 86,\\n+    \\\"66845\\\": 86,\\n+    \\\"623\\\":
        119,\\n+    \\\"119856\\\": 119,\\n+    \\\"119908\\\": 119,\\n+    \\\"119960\\\":
        119,\\n+    \\\"120012\\\": 119,\\n+    \\\"120064\\\": 119,\\n+    \\\"120116\\\":
        119,\\n+    \\\"120168\\\": 119,\\n+    \\\"120220\\\": 119,\\n+    \\\"120272\\\":
        119,\\n+    \\\"120324\\\": 119,\\n+    \\\"120376\\\": 119,\\n+    \\\"120428\\\":
        119,\\n+    \\\"120480\\\": 119,\\n+    \\\"7457\\\": 119,\\n+    \\\"1121\\\":
        119,\\n+    \\\"1309\\\": 119,\\n+    \\\"1377\\\": 119,\\n+    \\\"71434\\\":
        119,\\n+    \\\"71438\\\": 119,\\n+    \\\"71439\\\": 119,\\n+    \\\"43907\\\":
        119,\\n+    \\\"71919\\\": 87,\\n+    \\\"71910\\\": 87,\\n+    \\\"119830\\\":
        87,\\n+    \\\"119882\\\": 87,\\n+    \\\"119934\\\": 87,\\n+    \\\"119986\\\":
        87,\\n+    \\\"120038\\\": 87,\\n+    \\\"120090\\\": 87,\\n+    \\\"120142\\\":
        87,\\n+    \\\"120194\\\": 87,\\n+    \\\"120246\\\": 87,\\n+    \\\"120298\\\":
        87,\\n+    \\\"120350\\\": 87,\\n+    \\\"120402\\\": 87,\\n+    \\\"120454\\\":
        87,\\n+    \\\"1308\\\": 87,\\n+    \\\"5043\\\": 87,\\n+    \\\"5076\\\":
        87,\\n+    \\\"42218\\\": 87,\\n+    \\\"5742\\\": 120,\\n+    \\\"10539\\\":
        120,\\n+    \\\"10540\\\": 120,\\n+    \\\"10799\\\": 120,\\n+    \\\"65368\\\":
        120,\\n+    \\\"8569\\\": 120,\\n+    \\\"119857\\\": 120,\\n+    \\\"119909\\\":
        120,\\n+    \\\"119961\\\": 120,\\n+    \\\"120013\\\": 120,\\n+    \\\"120065\\\":
        120,\\n+    \\\"120117\\\": 120,\\n+    \\\"120169\\\": 120,\\n+    \\\"120221\\\":
        120,\\n+    \\\"120273\\\": 120,\\n+    \\\"120325\\\": 120,\\n+    \\\"120377\\\":
        120,\\n+    \\\"120429\\\": 120,\\n+    \\\"120481\\\": 120,\\n+    \\\"5441\\\":
        120,\\n+    \\\"5501\\\": 120,\\n+    \\\"5741\\\": 88,\\n+    \\\"9587\\\":
        88,\\n+    \\\"66338\\\": 88,\\n+    \\\"71916\\\": 88,\\n+    \\\"65336\\\":
        88,\\n+    \\\"8553\\\": 88,\\n+    \\\"119831\\\": 88,\\n+    \\\"119883\\\":
        88,\\n+    \\\"119935\\\": 88,\\n+    \\\"119987\\\": 88,\\n+    \\\"120039\\\":
        88,\\n+    \\\"120091\\\": 88,\\n+    \\\"120143\\\": 88,\\n+    \\\"120195\\\":
        88,\\n+    \\\"120247\\\": 88,\\n+    \\\"120299\\\": 88,\\n+    \\\"120351\\\":
        88,\\n+    \\\"120403\\\": 88,\\n+    \\\"120455\\\": 88,\\n+    \\\"42931\\\":
        88,\\n+    \\\"935\\\": 88,\\n+    \\\"120510\\\": 88,\\n+    \\\"120568\\\":
        88,\\n+    \\\"120626\\\": 88,\\n+    \\\"120684\\\": 88,\\n+    \\\"120742\\\":
        88,\\n+    \\\"11436\\\": 88,\\n+    \\\"11613\\\": 88,\\n+    \\\"5815\\\":
        88,\\n+    \\\"42219\\\": 88,\\n+    \\\"66192\\\": 88,\\n+    \\\"66228\\\":
        88,\\n+    \\\"66327\\\": 88,\\n+    \\\"66855\\\": 88,\\n+    \\\"611\\\":
        121,\\n+    \\\"7564\\\": 121,\\n+    \\\"65369\\\": 121,\\n+    \\\"119858\\\":
        121,\\n+    \\\"119910\\\": 121,\\n+    \\\"119962\\\": 121,\\n+    \\\"120014\\\":
        121,\\n+    \\\"120066\\\": 121,\\n+    \\\"120118\\\": 121,\\n+    \\\"120170\\\":
        121,\\n+    \\\"120222\\\": 121,\\n+    \\\"120274\\\": 121,\\n+    \\\"120326\\\":
        121,\\n+    \\\"120378\\\": 121,\\n+    \\\"120430\\\": 121,\\n+    \\\"120482\\\":
        121,\\n+    \\\"655\\\": 121,\\n+    \\\"7935\\\": 121,\\n+    \\\"43866\\\":
        121,\\n+    \\\"947\\\": 121,\\n+    \\\"8509\\\": 121,\\n+    \\\"120516\\\":
        121,\\n+    \\\"120574\\\": 121,\\n+    \\\"120632\\\": 121,\\n+    \\\"120690\\\":
        121,\\n+    \\\"120748\\\": 121,\\n+    \\\"1199\\\": 121,\\n+    \\\"4327\\\":
        121,\\n+    \\\"71900\\\": 121,\\n+    \\\"65337\\\": 89,\\n+    \\\"119832\\\":
        89,\\n+    \\\"119884\\\": 89,\\n+    \\\"119936\\\": 89,\\n+    \\\"119988\\\":
        89,\\n+    \\\"120040\\\": 89,\\n+    \\\"120092\\\": 89,\\n+    \\\"120144\\\":
        89,\\n+    \\\"120196\\\": 89,\\n+    \\\"120248\\\": 89,\\n+    \\\"120300\\\":
        89,\\n+    \\\"120352\\\": 89,\\n+    \\\"120404\\\": 89,\\n+    \\\"120456\\\":
        89,\\n+    \\\"933\\\": 89,\\n+    \\\"978\\\": 89,\\n+    \\\"120508\\\":
        89,\\n+    \\\"120566\\\": 89,\\n+    \\\"120624\\\": 89,\\n+    \\\"120682\\\":
        89,\\n+    \\\"120740\\\": 89,\\n+    \\\"11432\\\": 89,\\n+    \\\"1198\\\":
        89,\\n+    \\\"5033\\\": 89,\\n+    \\\"5053\\\": 89,\\n+    \\\"42220\\\":
        89,\\n+    \\\"94019\\\": 89,\\n+    \\\"71844\\\": 89,\\n+    \\\"66226\\\":
        89,\\n+    \\\"119859\\\": 122,\\n+    \\\"119911\\\": 122,\\n+    \\\"119963\\\":
        122,\\n+    \\\"120015\\\": 122,\\n+    \\\"120067\\\": 122,\\n+    \\\"120119\\\":
        122,\\n+    \\\"120171\\\": 122,\\n+    \\\"120223\\\": 122,\\n+    \\\"120275\\\":
        122,\\n+    \\\"120327\\\": 122,\\n+    \\\"120379\\\": 122,\\n+    \\\"120431\\\":
        122,\\n+    \\\"120483\\\": 122,\\n+    \\\"7458\\\": 122,\\n+    \\\"43923\\\":
        122,\\n+    \\\"71876\\\": 122,\\n+    \\\"66293\\\": 90,\\n+    \\\"71909\\\":
        90,\\n+    \\\"65338\\\": 90,\\n+    \\\"8484\\\": 90,\\n+    \\\"8488\\\":
        90,\\n+    \\\"119833\\\": 90,\\n+    \\\"119885\\\": 90,\\n+    \\\"119937\\\":
        90,\\n+    \\\"119989\\\": 90,\\n+    \\\"120041\\\": 90,\\n+    \\\"120197\\\":
        90,\\n+    \\\"120249\\\": 90,\\n+    \\\"120301\\\": 90,\\n+    \\\"120353\\\":
        90,\\n+    \\\"120405\\\": 90,\\n+    \\\"120457\\\": 90,\\n+    \\\"918\\\":
        90,\\n+    \\\"120493\\\": 90,\\n+    \\\"120551\\\": 90,\\n+    \\\"120609\\\":
        90,\\n+    \\\"120667\\\": 90,\\n+    \\\"120725\\\": 90,\\n+    \\\"5059\\\":
        90,\\n+    \\\"42204\\\": 90,\\n+    \\\"71849\\\": 90,\\n+    \\\"65282\\\":
        34,\\n+    \\\"65284\\\": 36,\\n+    \\\"65285\\\": 37,\\n+    \\\"65286\\\":
        38,\\n+    \\\"65290\\\": 42,\\n+    \\\"65291\\\": 43,\\n+    \\\"65294\\\":
        46,\\n+    \\\"65295\\\": 47,\\n+    \\\"65296\\\": 48,\\n+    \\\"65297\\\":
        49,\\n+    \\\"65298\\\": 50,\\n+    \\\"65299\\\": 51,\\n+    \\\"65300\\\":
        52,\\n+    \\\"65301\\\": 53,\\n+    \\\"65302\\\": 54,\\n+    \\\"65303\\\":
        55,\\n+    \\\"65304\\\": 56,\\n+    \\\"65305\\\": 57,\\n+    \\\"65308\\\":
        60,\\n+    \\\"65309\\\": 61,\\n+    \\\"65310\\\": 62,\\n+    \\\"65312\\\":
        64,\\n+    \\\"65316\\\": 68,\\n+    \\\"65318\\\": 70,\\n+    \\\"65319\\\":
        71,\\n+    \\\"65324\\\": 76,\\n+    \\\"65329\\\": 81,\\n+    \\\"65330\\\":
        82,\\n+    \\\"65333\\\": 85,\\n+    \\\"65334\\\": 86,\\n+    \\\"65335\\\":
        87,\\n+    \\\"65343\\\": 95,\\n+    \\\"65346\\\": 98,\\n+    \\\"65348\\\":
        100,\\n+    \\\"65350\\\": 102,\\n+    \\\"65355\\\": 107,\\n+    \\\"65357\\\":
        109,\\n+    \\\"65358\\\": 110,\\n+    \\\"65361\\\": 113,\\n+    \\\"65362\\\":
        114,\\n+    \\\"65364\\\": 116,\\n+    \\\"65365\\\": 117,\\n+    \\\"65367\\\":
        119,\\n+    \\\"65370\\\": 122,\\n+    \\\"65371\\\": 123,\\n+    \\\"65373\\\":
        125,\\n+    \\\"160\\\": 32,\\n+    \\\"8211\\\": 45,\\n+    \\\"65374\\\":
        126,\\n+    \\\"65306\\\": 58,\\n+    \\\"65281\\\": 33,\\n+    \\\"8216\\\":
        96,\\n+    \\\"8217\\\": 96,\\n+    \\\"8245\\\": 96,\\n+    \\\"180\\\":
        96,\\n+    \\\"12494\\\": 47,\\n+    \\\"1047\\\": 51,\\n+    \\\"1073\\\":
        54,\\n+    \\\"1072\\\": 97,\\n+    \\\"1040\\\": 65,\\n+    \\\"1068\\\":
        98,\\n+    \\\"1042\\\": 66,\\n+    \\\"1089\\\": 99,\\n+    \\\"1057\\\":
        67,\\n+    \\\"1077\\\": 101,\\n+    \\\"1045\\\": 69,\\n+    \\\"1053\\\":
        72,\\n+    \\\"305\\\": 105,\\n+    \\\"1050\\\": 75,\\n+    \\\"921\\\":
        73,\\n+    \\\"1052\\\": 77,\\n+    \\\"1086\\\": 111,\\n+    \\\"1054\\\":
        79,\\n+    \\\"1009\\\": 112,\\n+    \\\"1088\\\": 112,\\n+    \\\"1056\\\":
        80,\\n+    \\\"1075\\\": 114,\\n+    \\\"1058\\\": 84,\\n+    \\\"215\\\":
        120,\\n+    \\\"1093\\\": 120,\\n+    \\\"1061\\\": 88,\\n+    \\\"1091\\\":
        121,\\n+    \\\"1059\\\": 89,\\n+    \\\"65283\\\": 35,\\n+    \\\"65288\\\":
        40,\\n+    \\\"65289\\\": 41,\\n+    \\\"65292\\\": 44,\\n+    \\\"65307\\\":
        59,\\n+    \\\"65311\\\": 63,\\n+}\"},{\"sha\":\"7aaeddfb783e27d27acc46144bca155d3742d888\",\"filename\":\"spotdl/utils/web.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fweb.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/spotdl%2Futils%2Fweb.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/spotdl%2Futils%2Fweb.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"496560ac65f2fd528b809486e5f3dfb5916836a8\",\"filename\":\"termux/setup_spotdl.sh\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Fsetup_spotdl.sh\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Fsetup_spotdl.sh\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/termux%2Fsetup_spotdl.sh?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"d3ed23c27087caa306915d657223cddf1e0a16e3\",\"filename\":\"termux/termux-url-opener\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Ftermux-url-opener\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/termux%2Ftermux-url-opener\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/termux%2Ftermux-url-opener?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"1118869e0098ed3d8094afb85ada705a788d83ed\",\"filename\":\"tests/README.md\",\"status\":\"modified\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2FREADME.md\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2FREADME.md\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2FREADME.md?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"24810baa0dbe10af524e0b39c7d9979846f95e0b\",\"filename\":\"tests/cassettes/test_download_a_playlist.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_playlist.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_playlist.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_a_playlist.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"fabaf917703dd82867703a14ec22d8e700e84e85\",\"filename\":\"tests/cassettes/test_download_a_single_song.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_single_song.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_a_single_song.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_a_single_song.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"ea60ddfeb6eb5846a8d2272dab420b740336c5b4\",\"filename\":\"tests/cassettes/test_download_an_album.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_an_album.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_an_album.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_an_album.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"efa8f137b90c1ee34de17f3094b93e379b94229d\",\"filename\":\"tests/cassettes/test_download_long_artists_song.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_long_artists_song.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_long_artists_song.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_long_artists_song.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"8628629dcc8122e1b48cf176dc2d2e20a916e6e8\",\"filename\":\"tests/cassettes/test_download_single_song.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_single_song.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_download_single_song.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_download_single_song.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"9f7db42070b8c465268d51023c46e69fb33ca70c\",\"filename\":\"tests/cassettes/test_multiple_elements.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_multiple_elements.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_multiple_elements.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_multiple_elements.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"ee1d68210ece388e9c6f7f737c145ffc0ad20faf\",\"filename\":\"tests/cassettes/test_search_and_download.yaml\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_search_and_download.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fcassettes%2Ftest_search_and_download.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fcassettes%2Ftest_search_and_download.yaml?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"be125359f1c20b5045659c2d8c3e454ec1687f3d\",\"filename\":\"tests/conftest.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fconftest.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fconftest.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fconftest.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"3f7dffba056081cfffa33ca64acd0d3d841c7550\",\"filename\":\"tests/console/test_entry_point.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fconsole%2Ftest_entry_point.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fconsole%2Ftest_entry_point.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fconsole%2Ftest_entry_point.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"a4a365cdd92a468864a53a89d2298e6f89c192cf\",\"filename\":\"tests/providers/audio/cassettes/test_youtube/test_yt_get_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_youtube%2Ftest_yt_get_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_youtube%2Ftest_yt_get_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_youtube%2Ftest_yt_get_results.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"986bd14074c675856b2bfbf65046fcfc0f10d022\",\"filename\":\"tests/providers/audio/cassettes/test_youtube/test_yt_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_youtube%2Ftest_yt_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_youtube%2Ftest_yt_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_youtube%2Ftest_yt_search.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"6899ad6804fcca4e3ddcc31618c91d27fb2f2462\",\"filename\":\"tests/providers/audio/cassettes/test_yt_get_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_yt_get_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_yt_get_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_yt_get_results.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"c8f88a8856b60e93c1a331c5da33211d8fa40c0a\",\"filename\":\"tests/providers/audio/cassettes/test_yt_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_yt_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_yt_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_yt_search.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"7dfc4dd4bb3bb8019aff0a974ccf9e991df6cb09\",\"filename\":\"tests/providers/audio/cassettes/test_ytm_get_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_get_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_get_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_get_results.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"20ee41ea7b15c20d5c4e029f8519491fe79a6296\",\"filename\":\"tests/providers/audio/cassettes/test_ytm_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytm_search.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"3e4e5274e44e4ee4744f99f8be32e0ef5c2257fb\",\"filename\":\"tests/providers/audio/cassettes/test_ytmusic/test_ytm_get_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytmusic%2Ftest_ytm_get_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytmusic%2Ftest_ytm_get_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytmusic%2Ftest_ytm_get_results.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"707efd8b694e2055df86d1ee1f63dacb9d06aa13\",\"filename\":\"tests/providers/audio/cassettes/test_ytmusic/test_ytm_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytmusic%2Ftest_ytm_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytmusic%2Ftest_ytm_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Fcassettes%2Ftest_ytmusic%2Ftest_ytm_search.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"67af0e5a5b25daa8b35e3c0fe2c7aaa283b0d860\",\"filename\":\"tests/providers/audio/test_youtube.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Ftest_youtube.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Ftest_youtube.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Ftest_youtube.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"c5a6fe826c8725a2c592260743edbec9a4781e04\",\"filename\":\"tests/providers/audio/test_ytmusic.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Ftest_ytmusic.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Faudio%2Ftest_ytmusic.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Faudio%2Ftest_ytmusic.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"9f2c515607d91377baa482e97888e46f4c3d480d\",\"filename\":\"tests/providers/lyrics/cassettes/test_genius/test_get_genius_lyrics.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_genius%2Ftest_get_genius_lyrics.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_genius%2Ftest_get_genius_lyrics.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Fcassettes%2Ftest_genius%2Ftest_get_genius_lyrics.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"b393a81f99f455881113562fedc6cb822c9995a4\",\"filename\":\"tests/providers/lyrics/test_azlyrics.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Ftest_azlyrics.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Ftest_azlyrics.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Ftest_azlyrics.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"d4696c4171667ca1631bc60c7fe27c155d1f1a34\",\"filename\":\"tests/providers/lyrics/test_genius.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Ftest_genius.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Ftest_genius.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Ftest_genius.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"8ec66248f20b2e680c0aaea24f8bcff44c31e38e\",\"filename\":\"tests/providers/lyrics/test_musixmatch.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Ftest_musixmatch.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Fproviders%2Flyrics%2Ftest_musixmatch.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fproviders%2Flyrics%2Ftest_musixmatch.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"bfb516dcd014ecd09d16dece3e7bd526a0851a3a\",\"filename\":\"tests/regressions.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fregressions.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Fregressions.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Fregressions.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"ed7e75a2871d4354cccd93cc3fb17fc17d8a86dd\",\"filename\":\"tests/test_downloader.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_downloader.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_downloader.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_downloader.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"234321d059a642ca5ac35c98b0e998a47b6435da\",\"filename\":\"tests/test_entry_point.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_entry_point.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_entry_point.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_entry_point.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"25ed0bfd22bb038b7cad76bae6987fbe62c3a471\",\"filename\":\"tests/test_ffmpeg.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_ffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_ffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_ffmpeg.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"e3de073bd9f1ab6b6d7538b50a747cf9284fd119\",\"filename\":\"tests/test_init.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftest_init.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftest_init.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_init.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"7f61595bbf816795999bc5ba7efe86c6e872cd30\",\"filename\":\"tests/test_main.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftest_main.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftest_main.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_main.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"64f69ec7f1e23c3c8d2e7969146abcfaf5ee3c1b\",\"filename\":\"tests/test_matching.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftest_matching.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftest_matching.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_matching.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"79869c0bed9cde15c7dd28bdaa297eb2a909ebac\",\"filename\":\"tests/test_provider_utils.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_provider_utils.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Ftest_provider_utils.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftest_provider_utils.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"68900b85da5657c6d2b71e1f3513f0708ef9ee9f\",\"filename\":\"tests/types/cassettes/test_album/test_album_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_album%2Ftest_album_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_album%2Ftest_album_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_album%2Ftest_album_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"f6fda130b749db6c86e692a23885fa6b688be85b\",\"filename\":\"tests/types/cassettes/test_album_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_album_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_album_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_album_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"541b53331398e9f17fc5005c5a7deda406f993ea\",\"filename\":\"tests/types/cassettes/test_artist/test_artist_from_string.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist%2Ftest_artist_from_string.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist%2Ftest_artist_from_string.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_artist%2Ftest_artist_from_string.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"e0a43d0e597fa117b9a446e4ef82c067f01972a3\",\"filename\":\"tests/types/cassettes/test_artist/test_artist_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist%2Ftest_artist_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist%2Ftest_artist_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_artist%2Ftest_artist_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"c2d67882a926b569a3e8559b1c32546a5309febd\",\"filename\":\"tests/types/cassettes/test_artist_from_string.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_string.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_string.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_string.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"2c6c371d61840e3703b04b55dd12aa1197953b37\",\"filename\":\"tests/types/cassettes/test_artist_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_artist_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"8e633ddf41f25463f83d277b7b3a2f83fdc4f7c8\",\"filename\":\"tests/types/cassettes/test_playlist/test_playlist_from_string.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist%2Ftest_playlist_from_string.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist%2Ftest_playlist_from_string.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_playlist%2Ftest_playlist_from_string.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"028d80eeefe9d7555a48019a3dea2906c0c26552\",\"filename\":\"tests/types/cassettes/test_playlist/test_playlist_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist%2Ftest_playlist_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist%2Ftest_playlist_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_playlist%2Ftest_playlist_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"5d9cd1e2736b25be31ea7f99ff25d1a1b5745067\",\"filename\":\"tests/types/cassettes/test_playlist_from_string.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_string.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_string.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_string.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"d5d1d8f5b434f79244b45e560a507acd2d22e08e\",\"filename\":\"tests/types/cassettes/test_playlist_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_playlist_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"e2f72bf392fc163ee48b80e6d6b9475806221b8a\",\"filename\":\"tests/types/cassettes/test_song/test_song_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_song%2Ftest_song_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_song%2Ftest_song_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_song%2Ftest_song_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"2e6cd8f799a3f1d4195dc6226d65bb3ce822a186\",\"filename\":\"tests/types/cassettes/test_song_from_url.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_song_from_url.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Fcassettes%2Ftest_song_from_url.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Fcassettes%2Ftest_song_from_url.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"7a9b435e38401c7a165cdc6adb43abc9f7814407\",\"filename\":\"tests/types/test_album.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_album.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_album.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_album.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"6b014feab14c37b02a9e5006ad3ea5431a9de500\",\"filename\":\"tests/types/test_artist.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_artist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_artist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_artist.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"a5e0abd28764227bb659d76d02d991565aae365d\",\"filename\":\"tests/types/test_playlist.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_playlist.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_playlist.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_playlist.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"e7421e0325940add794c033935a6385d5b9deaa8\",\"filename\":\"tests/types/test_song.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_song.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Ftypes%2Ftest_song.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Ftypes%2Ftest_song.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"ad357b4809e190067967720d379d9691ba779afe\",\"filename\":\"tests/utils/cassettes/test_check_for_updates.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_check_for_updates.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_check_for_updates.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_check_for_updates.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"f053fa920b3b1908a120f4bd1429b1790fa068c3\",\"filename\":\"tests/utils/cassettes/test_check_for_updates_fail.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_check_for_updates_fail.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_check_for_updates_fail.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_check_for_updates_fail.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"7c9227c091f521c5cdd615f517781b8ea33e907b\",\"filename\":\"tests/utils/cassettes/test_download_github_dir.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_download_github_dir.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_download_github_dir.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_download_github_dir.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"7799f35a632ae4627d63904b77642adb202c0861\",\"filename\":\"tests/utils/cassettes/test_get_search_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_get_search_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_get_search_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_get_search_results.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"7683fe43da30465d7051ceddd71dd1292d89498f\",\"filename\":\"tests/utils/cassettes/test_get_status.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_get_status.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_get_status.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_get_status.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"47fbe0ea18052b662201e1548b67b154f99b82c2\",\"filename\":\"tests/utils/cassettes/test_get_status_fail.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_get_status_fail.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_get_status_fail.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_get_status_fail.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"0f954e4812bee103eb51298ea59ff477e16e1e0e\",\"filename\":\"tests/utils/cassettes/test_github/test_check_for_updates.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_check_for_updates.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_check_for_updates.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_check_for_updates.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"b489e2f4ab2c4a263ccd8f2b16b3a81e6b85b51e\",\"filename\":\"tests/utils/cassettes/test_github/test_check_for_updates_fail.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_check_for_updates_fail.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_check_for_updates_fail.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_check_for_updates_fail.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"78540a743d58e60349bf2dcb0bf98e6d3184f3eb\",\"filename\":\"tests/utils/cassettes/test_github/test_download_github_dir.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_download_github_dir.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_download_github_dir.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_download_github_dir.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"a90ea2835aefd132f3a81cf2035414afc2f4b308\",\"filename\":\"tests/utils/cassettes/test_github/test_get_status.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_get_status.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_get_status.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_get_status.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"9e599cbd691b39b5deaae50c4846699ddd9fa185\",\"filename\":\"tests/utils/cassettes/test_github/test_get_status_fail.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_get_status_fail.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_get_status_fail.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_github%2Ftest_get_status_fail.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"d0102ac05b0e954b47bae5473dcae72e08a600c5\",\"filename\":\"tests/utils/cassettes/test_parse_album_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_parse_album_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_parse_album_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_parse_album_search.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"7d3700eb8df81c85293b36c89b671aade3c30081\",\"filename\":\"tests/utils/cassettes/test_parse_yt_link.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_parse_yt_link.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_parse_yt_link.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_parse_yt_link.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"76b0bebf552924d897559e730e524ddf99c83f18\",\"filename\":\"tests/utils/cassettes/test_search/test_get_search_results.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_get_search_results.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_get_search_results.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_get_search_results.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"0070818b08dd73274e3bee64f356f8723ec3808b\",\"filename\":\"tests/utils/cassettes/test_search/test_parse_album_search.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_parse_album_search.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_parse_album_search.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_parse_album_search.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"64890c90356c5e8acbac139ec36684696cc28f3a\",\"filename\":\"tests/utils/cassettes/test_search/test_parse_yt_link.yaml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_parse_yt_link.yaml\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_parse_yt_link.yaml\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Fcassettes%2Ftest_search%2Ftest_parse_yt_link.yaml?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"07c75054b69b0d84bb30d89be960ba3da38237aa\",\"filename\":\"tests/utils/test_archive.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_archive.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_archive.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_archive.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"2c31604ad1b50482d17ad957d1f8bd4175c92295\",\"filename\":\"tests/utils/test_arguments.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_arguments.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_arguments.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_arguments.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"0884fcbfc0a294211f972fbecab72f0d142aa129\",\"filename\":\"tests/utils/test_config.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_config.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_config.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_config.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"84b210fd949feb49621b4cde6854421bfb339f5c\",\"filename\":\"tests/utils/test_ffmpeg.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_ffmpeg.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_ffmpeg.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_ffmpeg.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"9212b12d9e8203b8f700a84b5ab01da45679f139\",\"filename\":\"tests/utils/test_formatter.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_formatter.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_formatter.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_formatter.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"394142d4b0b63011aea1a21a80101edf4587eb41\",\"filename\":\"tests/utils/test_github.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_github.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_github.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_github.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"b89b8002d7806128f0b04c0dacb51b9af5a714b0\",\"filename\":\"tests/utils/test_logging.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_logging.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_logging.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_logging.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"dfa798a485aa3545d7e5b1d07a18ca40bfb19265\",\"filename\":\"tests/utils/test_m3u.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_m3u.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_m3u.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_m3u.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"083bf7fb24e4f16d212bd170804af15530fe3ce1\",\"filename\":\"tests/utils/test_metadata.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_metadata.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_metadata.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_metadata.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"a1d560bede5ed2a15127570af81d9c1deabdb478\",\"filename\":\"tests/utils/test_search.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_search.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_search.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_search.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"588063dbc6733e81fb0724518ef5698adb3be17f\",\"filename\":\"tests/utils/test_spotify.py\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_spotify.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/866ed14ff37e2f91ed9b9b0fae75017216fb0919/tests%2Futils%2Ftest_spotify.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftest_spotify.py?ref=866ed14ff37e2f91ed9b9b0fae75017216fb0919\"},{\"sha\":\"57f19594d6ea6360aadad68a205dab1b2de44cf9\",\"filename\":\"tests/utils/tracking_files.py\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Futils%2Ftracking_files.py\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tests%2Futils%2Ftracking_files.py\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tests%2Futils%2Ftracking_files.py?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"},{\"sha\":\"fa71bde914f4037d33ef86e2244e235c0e63746c\",\"filename\":\"tox.ini\",\"status\":\"removed\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/spotDL/spotify-downloader/blob/597f5dbb72f3082ff8712f38fdfefeb82701c847/tox.ini\",\"raw_url\":\"https://github.com/spotDL/spotify-downloader/raw/597f5dbb72f3082ff8712f38fdfefeb82701c847/tox.ini\",\"contents_url\":\"https://api.github.com/repos/spotDL/spotify-downloader/contents/tox.ini?ref=597f5dbb72f3082ff8712f38fdfefeb82701c847\"}]}"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 28 Mar 2024 18:28:10 GMT
      ETag:
      - W/"59f9928638d0dca6ef19c5f960c9f1e64724609d3d2a6b1a4c878312425d1ac2"
      Last-Modified:
      - Thu, 28 Mar 2024 17:47:29 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - 4541:91B7:1B9069F:1BA857C:6605B6B9
      X-RateLimit-Limit:
      - '60'
      X-RateLimit-Remaining:
      - '39'
      X-RateLimit-Reset:
      - '1711651475'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '21'
      X-XSS-Protection:
      - '0'
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
version: 1
